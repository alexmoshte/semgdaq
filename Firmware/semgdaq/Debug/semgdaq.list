
semgdaq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007034  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800720c  0800720c  0001720c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800721c  0800721c  000278d8  2**0
                  CONTENTS
  4 .ARM          00000000  0800721c  0800721c  000278d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800721c  0800721c  000278d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800721c  0800721c  0001721c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007220  08007220  00017220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000078d8  20000000  08007224  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003434  200078d8  0800eafc  000278d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000ad0c  0800eafc  0002ad0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000278d8  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  00027908  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016200  00000000  00000000  000279c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031fb  00000000  00000000  0003dbc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001538  00000000  00000000  00040dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001020  00000000  00000000  000422f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021ef7  00000000  00000000  00043318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001892a  00000000  00000000  0006520f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2120  00000000  00000000  0007db39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005d04  00000000  00000000  0015fc5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  00165960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00000d34  00000000  00000000  001659eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000020  00000000  00000000  0016671f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200078d8 	.word	0x200078d8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080071f4 	.word	0x080071f4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200078dc 	.word	0x200078dc
 8000214:	080071f4 	.word	0x080071f4

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <MA_ADC1_IN1_Init>:
//VARIABLES
static float32_t  MA_IMPULSERESPONSE[MA_FILTER_LENGTH]={0.125f, 0.125f, 0.125f, 0.125f, 0.125f, 0.125f, 0.125f, 0.125f};

//FUNCTION DEFINITIONS
void MA_ADC1_IN1_Init (ADC1_IN1_MA *ADC1_IN1_MA_ptr)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8000b98:	2300      	movs	r3, #0
 8000b9a:	73fb      	strb	r3, [r7, #15]
 8000b9c:	e00a      	b.n	8000bb4 <MA_ADC1_IN1_Init+0x24>
	{
        ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr[j]=0.0f; // Clear the moving average buffer
 8000b9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ba0:	687a      	ldr	r2, [r7, #4]
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	4413      	add	r3, r2
 8000ba6:	3304      	adds	r3, #4
 8000ba8:	f04f 0200 	mov.w	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8000bae:	7bfb      	ldrb	r3, [r7, #15]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	73fb      	strb	r3, [r7, #15]
 8000bb4:	7bfb      	ldrb	r3, [r7, #15]
 8000bb6:	2b07      	cmp	r3, #7
 8000bb8:	d9f1      	bls.n	8000b9e <MA_ADC1_IN1_Init+0xe>
    }


	ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx=0; // Initialize the buffer index
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	e00b      	b.n	8000bde <MA_ADC1_IN1_Init+0x4e>
	{
	    ADC1_IN1_MA_ptr->MA_ADC1_IN1_OutBfr[i] = 0.0f; // Clear the output buffer
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	3308      	adds	r3, #8
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	4413      	add	r3, r2
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	f04f 0200 	mov.w	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	2b9c      	cmp	r3, #156	; 0x9c
 8000be2:	d9f0      	bls.n	8000bc6 <MA_ADC1_IN1_Init+0x36>
	}
}
 8000be4:	bf00      	nop
 8000be6:	bf00      	nop
 8000be8:	3714      	adds	r7, #20
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
	...

08000bf4 <MA_ADC1_IN1_Update>:

void MA_ADC1_IN1_Update(ADC1_IN1_MA *ADC1_IN1_MA_ptr)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b087      	sub	sp, #28
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	e05a      	b.n	8000cb8 <MA_ADC1_IN1_Update+0xc4>
    {

        ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr[ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx] = ADC1_IN1_NF_arg._NF_ADC1_IN1_bfr[u]; // Store the current input sample in the circular buffer
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4932      	ldr	r1, [pc, #200]	; (8000cd0 <MA_ADC1_IN1_Update+0xdc>)
 8000c08:	697a      	ldr	r2, [r7, #20]
 8000c0a:	3212      	adds	r2, #18
 8000c0c:	0092      	lsls	r2, r2, #2
 8000c0e:	440a      	add	r2, r1
 8000c10:	6812      	ldr	r2, [r2, #0]
 8000c12:	6879      	ldr	r1, [r7, #4]
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	440b      	add	r3, r1
 8000c18:	3304      	adds	r3, #4
 8000c1a:	601a      	str	r2, [r3, #0]


        // Increment the buffer index and wrap around if necessary
        ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx++;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	1c5a      	adds	r2, r3, #1
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	601a      	str	r2, [r3, #0]

        if (ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx == MA_FILTER_LENGTH)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2b08      	cmp	r3, #8
 8000c2c:	d102      	bne.n	8000c34 <MA_ADC1_IN1_Update+0x40>
        {
            ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx = 0;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
        }


        ADC1_IN1_MA_ptr->MA_ADC1_IN1_OutBfr[u] = 0.0f; // Initialize the current output sample inside the struct's output buffer
 8000c34:	687a      	ldr	r2, [r7, #4]
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	3308      	adds	r3, #8
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	4413      	add	r3, r2
 8000c3e:	3304      	adds	r3, #4
 8000c40:	f04f 0200 	mov.w	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_1 = ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx; // Set SumIndex_1 to the current buffer index
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	613b      	str	r3, [r7, #16]

        // Perform convolution (dot product) with the impulse response
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	e02c      	b.n	8000cac <MA_ADC1_IN1_Update+0xb8>
        {
            // Decrement index and wrap if necessary (moving backwards in the circular buffer)
            if (SumIndex_1 > 0)
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d003      	beq.n	8000c60 <MA_ADC1_IN1_Update+0x6c>
            {
                SumIndex_1--;
 8000c58:	693b      	ldr	r3, [r7, #16]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	613b      	str	r3, [r7, #16]
 8000c5e:	e001      	b.n	8000c64 <MA_ADC1_IN1_Update+0x70>
            }

            else
            {
                SumIndex_1 = MA_FILTER_LENGTH - 1;
 8000c60:	2307      	movs	r3, #7
 8000c62:	613b      	str	r3, [r7, #16]
            }

            // Multiply impulse response with buffer sample and accumulate into output
            ADC1_IN1_MA_ptr->MA_ADC1_IN1_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr[SumIndex_1];
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	3308      	adds	r3, #8
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	4413      	add	r3, r2
 8000c6e:	3304      	adds	r3, #4
 8000c70:	ed93 7a00 	vldr	s14, [r3]
 8000c74:	4a17      	ldr	r2, [pc, #92]	; (8000cd4 <MA_ADC1_IN1_Update+0xe0>)
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	4413      	add	r3, r2
 8000c7c:	edd3 6a00 	vldr	s13, [r3]
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	4413      	add	r3, r2
 8000c88:	3304      	adds	r3, #4
 8000c8a:	edd3 7a00 	vldr	s15, [r3]
 8000c8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	3308      	adds	r3, #8
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	4413      	add	r3, r2
 8000ca0:	3304      	adds	r3, #4
 8000ca2:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	2b07      	cmp	r3, #7
 8000cb0:	d9cf      	bls.n	8000c52 <MA_ADC1_IN1_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	617b      	str	r3, [r7, #20]
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d99f      	bls.n	8000c02 <MA_ADC1_IN1_Update+0xe>
        }

    }
}
 8000cc2:	bf00      	nop
 8000cc4:	bf00      	nop
 8000cc6:	371c      	adds	r7, #28
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	20000048 	.word	0x20000048
 8000cd4:	20000000 	.word	0x20000000

08000cd8 <MA_ADC1_IN2_Init>:




void MA_ADC1_IN2_Init (ADC1_IN2_MA *ADC1_IN2_MA_ptr)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	73fb      	strb	r3, [r7, #15]
 8000ce4:	e00a      	b.n	8000cfc <MA_ADC1_IN2_Init+0x24>
	{
        ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr[j]=0.0f; // Clear the moving average buffer
 8000ce6:	7bfb      	ldrb	r3, [r7, #15]
 8000ce8:	687a      	ldr	r2, [r7, #4]
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	4413      	add	r3, r2
 8000cee:	3304      	adds	r3, #4
 8000cf0:	f04f 0200 	mov.w	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	73fb      	strb	r3, [r7, #15]
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
 8000cfe:	2b07      	cmp	r3, #7
 8000d00:	d9f1      	bls.n	8000ce6 <MA_ADC1_IN2_Init+0xe>
    }


	ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx=0; // Initialize the buffer index
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	e00b      	b.n	8000d26 <MA_ADC1_IN2_Init+0x4e>
	{
	    ADC1_IN2_MA_ptr->MA_ADC1_IN2_OutBfr[i] = 0.0f; // Clear the output buffer
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	3308      	adds	r3, #8
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	4413      	add	r3, r2
 8000d18:	3304      	adds	r3, #4
 8000d1a:	f04f 0200 	mov.w	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	3301      	adds	r3, #1
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	2b9c      	cmp	r3, #156	; 0x9c
 8000d2a:	d9f0      	bls.n	8000d0e <MA_ADC1_IN2_Init+0x36>
	}
}
 8000d2c:	bf00      	nop
 8000d2e:	bf00      	nop
 8000d30:	3714      	adds	r7, #20
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
	...

08000d3c <MA_ADC1_IN2_Update>:

void MA_ADC1_IN2_Update (ADC1_IN2_MA *ADC1_IN2_MA_ptr)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b087      	sub	sp, #28
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
 8000d48:	e05a      	b.n	8000e00 <MA_ADC1_IN2_Update+0xc4>
    {

        ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr[ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx] = ADC1_IN2_NF_arg._NF_ADC1_IN2_bfr[u]; // Store the current input sample in the circular buffer
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4932      	ldr	r1, [pc, #200]	; (8000e18 <MA_ADC1_IN2_Update+0xdc>)
 8000d50:	697a      	ldr	r2, [r7, #20]
 8000d52:	3212      	adds	r2, #18
 8000d54:	0092      	lsls	r2, r2, #2
 8000d56:	440a      	add	r2, r1
 8000d58:	6812      	ldr	r2, [r2, #0]
 8000d5a:	6879      	ldr	r1, [r7, #4]
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	440b      	add	r3, r1
 8000d60:	3304      	adds	r3, #4
 8000d62:	601a      	str	r2, [r3, #0]


        // Increment the buffer index and wrap around if necessary
        ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx++;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	1c5a      	adds	r2, r3, #1
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	601a      	str	r2, [r3, #0]

        if (ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx == MA_FILTER_LENGTH)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2b08      	cmp	r3, #8
 8000d74:	d102      	bne.n	8000d7c <MA_ADC1_IN2_Update+0x40>
        {
            ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx = 0;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
        }


        ADC1_IN2_MA_ptr->MA_ADC1_IN2_OutBfr[u] = 0.0f; // Initialize the current output sample inside the struct's output buffer
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	3308      	adds	r3, #8
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	4413      	add	r3, r2
 8000d86:	3304      	adds	r3, #4
 8000d88:	f04f 0200 	mov.w	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_2 = ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx; // Set SumIndex_2 to the current buffer index
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	613b      	str	r3, [r7, #16]

        // Perform convolution (dot product) with the impulse response
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8000d94:	2300      	movs	r3, #0
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	e02c      	b.n	8000df4 <MA_ADC1_IN2_Update+0xb8>
        {
            // Decrement index and wrap if necessary (moving backwards in the circular buffer)
            if (SumIndex_2 > 0)
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d003      	beq.n	8000da8 <MA_ADC1_IN2_Update+0x6c>
            {
                SumIndex_2--;
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	e001      	b.n	8000dac <MA_ADC1_IN2_Update+0x70>
            }

            else
            {
                SumIndex_2 = MA_FILTER_LENGTH - 1;
 8000da8:	2307      	movs	r3, #7
 8000daa:	613b      	str	r3, [r7, #16]
            }

            // Multiply impulse response with buffer sample and accumulate into output
            ADC1_IN2_MA_ptr->MA_ADC1_IN2_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr[SumIndex_2];
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	3308      	adds	r3, #8
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	4413      	add	r3, r2
 8000db6:	3304      	adds	r3, #4
 8000db8:	ed93 7a00 	vldr	s14, [r3]
 8000dbc:	4a17      	ldr	r2, [pc, #92]	; (8000e1c <MA_ADC1_IN2_Update+0xe0>)
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	4413      	add	r3, r2
 8000dc4:	edd3 6a00 	vldr	s13, [r3]
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	4413      	add	r3, r2
 8000dd0:	3304      	adds	r3, #4
 8000dd2:	edd3 7a00 	vldr	s15, [r3]
 8000dd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000dda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	3308      	adds	r3, #8
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	4413      	add	r3, r2
 8000de8:	3304      	adds	r3, #4
 8000dea:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	3301      	adds	r3, #1
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	2b07      	cmp	r3, #7
 8000df8:	d9cf      	bls.n	8000d9a <MA_ADC1_IN2_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	617b      	str	r3, [r7, #20]
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d99f      	bls.n	8000d4a <MA_ADC1_IN2_Update+0xe>
        }

    }
}
 8000e0a:	bf00      	nop
 8000e0c:	bf00      	nop
 8000e0e:	371c      	adds	r7, #28
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	20001454 	.word	0x20001454
 8000e1c:	20000000 	.word	0x20000000

08000e20 <MA_ADC2_IN3_Init>:




void MA_ADC2_IN3_Init (ADC2_IN3_MA *ADC2_IN3_MA_ptr)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8000e28:	2300      	movs	r3, #0
 8000e2a:	73fb      	strb	r3, [r7, #15]
 8000e2c:	e00a      	b.n	8000e44 <MA_ADC2_IN3_Init+0x24>
	{
        ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr[j]=0.0f; // Clear the moving average buffer
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	4413      	add	r3, r2
 8000e36:	3304      	adds	r3, #4
 8000e38:	f04f 0200 	mov.w	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8000e3e:	7bfb      	ldrb	r3, [r7, #15]
 8000e40:	3301      	adds	r3, #1
 8000e42:	73fb      	strb	r3, [r7, #15]
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
 8000e46:	2b07      	cmp	r3, #7
 8000e48:	d9f1      	bls.n	8000e2e <MA_ADC2_IN3_Init+0xe>
    }


	ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx=0; // Initialize the buffer index
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8000e50:	2300      	movs	r3, #0
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	e00b      	b.n	8000e6e <MA_ADC2_IN3_Init+0x4e>
	{
	    ADC2_IN3_MA_ptr->MA_ADC2_IN3_OutBfr[i] = 0.0f; // Clear the output buffer
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	3308      	adds	r3, #8
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	4413      	add	r3, r2
 8000e60:	3304      	adds	r3, #4
 8000e62:	f04f 0200 	mov.w	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	2b9c      	cmp	r3, #156	; 0x9c
 8000e72:	d9f0      	bls.n	8000e56 <MA_ADC2_IN3_Init+0x36>
	}
}
 8000e74:	bf00      	nop
 8000e76:	bf00      	nop
 8000e78:	3714      	adds	r7, #20
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
	...

08000e84 <MA_ADC2_IN3_Update>:

void MA_ADC2_IN3_Update (ADC2_IN3_MA *ADC2_IN3_MA_ptr)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b087      	sub	sp, #28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]
 8000e90:	e05a      	b.n	8000f48 <MA_ADC2_IN3_Update+0xc4>
    {

        ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr[ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx] = ADC2_IN3_NF_arg._NF_ADC2_IN3_bfr[u]; // Store the current input sample in the circular buffer
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4932      	ldr	r1, [pc, #200]	; (8000f60 <MA_ADC2_IN3_Update+0xdc>)
 8000e98:	697a      	ldr	r2, [r7, #20]
 8000e9a:	3212      	adds	r2, #18
 8000e9c:	0092      	lsls	r2, r2, #2
 8000e9e:	440a      	add	r2, r1
 8000ea0:	6812      	ldr	r2, [r2, #0]
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	440b      	add	r3, r1
 8000ea8:	3304      	adds	r3, #4
 8000eaa:	601a      	str	r2, [r3, #0]


        // Increment the buffer index and wrap around if necessary
        ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx++;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	1c5a      	adds	r2, r3, #1
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	601a      	str	r2, [r3, #0]

        if (ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx == MA_FILTER_LENGTH)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2b08      	cmp	r3, #8
 8000ebc:	d102      	bne.n	8000ec4 <MA_ADC2_IN3_Update+0x40>
        {
            ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx = 0;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
        }


        ADC2_IN3_MA_ptr->MA_ADC2_IN3_OutBfr[u] = 0.0f; // Initialize the current output sample inside the struct's output buffer
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	3308      	adds	r3, #8
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	4413      	add	r3, r2
 8000ece:	3304      	adds	r3, #4
 8000ed0:	f04f 0200 	mov.w	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_3 = ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx; // Set SumIndex_3 to the current buffer index
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	613b      	str	r3, [r7, #16]

        // Perform convolution (dot product) with the impulse response
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8000edc:	2300      	movs	r3, #0
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	e02c      	b.n	8000f3c <MA_ADC2_IN3_Update+0xb8>
        {
            // Decrement index and wrap if necessary (moving backwards in the circular buffer)
            if (SumIndex_3 > 0)
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d003      	beq.n	8000ef0 <MA_ADC2_IN3_Update+0x6c>
            {
                SumIndex_3--;
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	613b      	str	r3, [r7, #16]
 8000eee:	e001      	b.n	8000ef4 <MA_ADC2_IN3_Update+0x70>
            }

            else
            {
                SumIndex_3 = MA_FILTER_LENGTH - 1;
 8000ef0:	2307      	movs	r3, #7
 8000ef2:	613b      	str	r3, [r7, #16]
            }

            // Multiply impulse response with buffer sample and accumulate into output
            ADC2_IN3_MA_ptr->MA_ADC2_IN3_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr[SumIndex_3];
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	3308      	adds	r3, #8
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	4413      	add	r3, r2
 8000efe:	3304      	adds	r3, #4
 8000f00:	ed93 7a00 	vldr	s14, [r3]
 8000f04:	4a17      	ldr	r2, [pc, #92]	; (8000f64 <MA_ADC2_IN3_Update+0xe0>)
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	4413      	add	r3, r2
 8000f0c:	edd3 6a00 	vldr	s13, [r3]
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	4413      	add	r3, r2
 8000f18:	3304      	adds	r3, #4
 8000f1a:	edd3 7a00 	vldr	s15, [r3]
 8000f1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	3308      	adds	r3, #8
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	4413      	add	r3, r2
 8000f30:	3304      	adds	r3, #4
 8000f32:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	2b07      	cmp	r3, #7
 8000f40:	d9cf      	bls.n	8000ee2 <MA_ADC2_IN3_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	3301      	adds	r3, #1
 8000f46:	617b      	str	r3, [r7, #20]
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d99f      	bls.n	8000e92 <MA_ADC2_IN3_Update+0xe>
        }

    }

}
 8000f52:	bf00      	nop
 8000f54:	bf00      	nop
 8000f56:	371c      	adds	r7, #28
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	20002860 	.word	0x20002860
 8000f64:	20000000 	.word	0x20000000

08000f68 <MA_ADC2_IN4_Init>:



void MA_ADC2_IN4_Init (ADC2_IN4_MA *ADC2_IN4_MA_ptr)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8000f70:	2300      	movs	r3, #0
 8000f72:	73fb      	strb	r3, [r7, #15]
 8000f74:	e00a      	b.n	8000f8c <MA_ADC2_IN4_Init+0x24>
	{
        ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr[j]=0.0f; // Clear the moving average buffer
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	3304      	adds	r3, #4
 8000f80:	f04f 0200 	mov.w	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	73fb      	strb	r3, [r7, #15]
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
 8000f8e:	2b07      	cmp	r3, #7
 8000f90:	d9f1      	bls.n	8000f76 <MA_ADC2_IN4_Init+0xe>
    }


	ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx=0; // Initialize the buffer index
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	e00b      	b.n	8000fb6 <MA_ADC2_IN4_Init+0x4e>
	{
	    ADC2_IN4_MA_ptr->MA_ADC2_IN4_OutBfr[i] = 0.0f; // Clear the output buffer
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	3308      	adds	r3, #8
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	4413      	add	r3, r2
 8000fa8:	3304      	adds	r3, #4
 8000faa:	f04f 0200 	mov.w	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	2b9c      	cmp	r3, #156	; 0x9c
 8000fba:	d9f0      	bls.n	8000f9e <MA_ADC2_IN4_Init+0x36>
	}
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3714      	adds	r7, #20
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
	...

08000fcc <MA_ADC2_IN4_Update>:

void MA_ADC2_IN4_Update (ADC2_IN4_MA *ADC2_IN4_MA_ptr)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b087      	sub	sp, #28
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]
 8000fd8:	e05a      	b.n	8001090 <MA_ADC2_IN4_Update+0xc4>
    {

        ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr[ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx] = ADC2_IN4_NF_arg._NF_ADC2_IN4_bfr[u]; // Store the current input sample in the circular buffer
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4932      	ldr	r1, [pc, #200]	; (80010a8 <MA_ADC2_IN4_Update+0xdc>)
 8000fe0:	697a      	ldr	r2, [r7, #20]
 8000fe2:	3212      	adds	r2, #18
 8000fe4:	0092      	lsls	r2, r2, #2
 8000fe6:	440a      	add	r2, r1
 8000fe8:	6812      	ldr	r2, [r2, #0]
 8000fea:	6879      	ldr	r1, [r7, #4]
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	440b      	add	r3, r1
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	601a      	str	r2, [r3, #0]


        // Increment the buffer index and wrap around if necessary
        ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx++;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	1c5a      	adds	r2, r3, #1
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	601a      	str	r2, [r3, #0]

        if (ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx == MA_FILTER_LENGTH)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2b08      	cmp	r3, #8
 8001004:	d102      	bne.n	800100c <MA_ADC2_IN4_Update+0x40>
        {
            ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx = 0;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
        }


        ADC2_IN4_MA_ptr->MA_ADC2_IN4_OutBfr[u] = 0.0f; // Initialize the current output sample inside the struct's output buffer
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	3308      	adds	r3, #8
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	4413      	add	r3, r2
 8001016:	3304      	adds	r3, #4
 8001018:	f04f 0200 	mov.w	r2, #0
 800101c:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_4 = ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx; // Set SumIndex_4 to the current buffer index
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	613b      	str	r3, [r7, #16]

        // Perform convolution (dot product) with the impulse response
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001024:	2300      	movs	r3, #0
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	e02c      	b.n	8001084 <MA_ADC2_IN4_Update+0xb8>
        {
            // Decrement index and wrap if necessary (moving backwards in the circular buffer)
            if (SumIndex_4 > 0)
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d003      	beq.n	8001038 <MA_ADC2_IN4_Update+0x6c>
            {
                SumIndex_4--;
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	3b01      	subs	r3, #1
 8001034:	613b      	str	r3, [r7, #16]
 8001036:	e001      	b.n	800103c <MA_ADC2_IN4_Update+0x70>
            }

            else
            {
                SumIndex_4 = MA_FILTER_LENGTH - 1;
 8001038:	2307      	movs	r3, #7
 800103a:	613b      	str	r3, [r7, #16]
            }

            // Multiply impulse response with buffer sample and accumulate into output
            ADC2_IN4_MA_ptr->MA_ADC2_IN4_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr[SumIndex_4];
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	3308      	adds	r3, #8
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	4413      	add	r3, r2
 8001046:	3304      	adds	r3, #4
 8001048:	ed93 7a00 	vldr	s14, [r3]
 800104c:	4a17      	ldr	r2, [pc, #92]	; (80010ac <MA_ADC2_IN4_Update+0xe0>)
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4413      	add	r3, r2
 8001054:	edd3 6a00 	vldr	s13, [r3]
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	4413      	add	r3, r2
 8001060:	3304      	adds	r3, #4
 8001062:	edd3 7a00 	vldr	s15, [r3]
 8001066:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800106a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	3308      	adds	r3, #8
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4413      	add	r3, r2
 8001078:	3304      	adds	r3, #4
 800107a:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	3301      	adds	r3, #1
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2b07      	cmp	r3, #7
 8001088:	d9cf      	bls.n	800102a <MA_ADC2_IN4_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	3301      	adds	r3, #1
 800108e:	617b      	str	r3, [r7, #20]
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8001096:	4293      	cmp	r3, r2
 8001098:	d99f      	bls.n	8000fda <MA_ADC2_IN4_Update+0xe>
        }

    }
}
 800109a:	bf00      	nop
 800109c:	bf00      	nop
 800109e:	371c      	adds	r7, #28
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	20003c6c 	.word	0x20003c6c
 80010ac:	20000000 	.word	0x20000000

080010b0 <MA_ADC3_IN1_Init>:




void MA_ADC3_IN1_Init (ADC3_IN1_MA *ADC3_IN1_MA_ptr)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 80010b8:	2300      	movs	r3, #0
 80010ba:	73fb      	strb	r3, [r7, #15]
 80010bc:	e00a      	b.n	80010d4 <MA_ADC3_IN1_Init+0x24>
	{
        ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr[j]=0.0f; // Clear the moving average buffer
 80010be:	7bfb      	ldrb	r3, [r7, #15]
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	4413      	add	r3, r2
 80010c6:	3304      	adds	r3, #4
 80010c8:	f04f 0200 	mov.w	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	3301      	adds	r3, #1
 80010d2:	73fb      	strb	r3, [r7, #15]
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
 80010d6:	2b07      	cmp	r3, #7
 80010d8:	d9f1      	bls.n	80010be <MA_ADC3_IN1_Init+0xe>
    }


	ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx=0; // Initialize the buffer index
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 80010e0:	2300      	movs	r3, #0
 80010e2:	60bb      	str	r3, [r7, #8]
 80010e4:	e00b      	b.n	80010fe <MA_ADC3_IN1_Init+0x4e>
	{
	    ADC3_IN1_MA_ptr->MA_ADC3_IN1_OutBfr[i] = 0.0f; // Clear the output buffer
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	3308      	adds	r3, #8
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	4413      	add	r3, r2
 80010f0:	3304      	adds	r3, #4
 80010f2:	f04f 0200 	mov.w	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	3301      	adds	r3, #1
 80010fc:	60bb      	str	r3, [r7, #8]
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	2b9c      	cmp	r3, #156	; 0x9c
 8001102:	d9f0      	bls.n	80010e6 <MA_ADC3_IN1_Init+0x36>
	}
}
 8001104:	bf00      	nop
 8001106:	bf00      	nop
 8001108:	3714      	adds	r7, #20
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
	...

08001114 <MA_ADC3_IN1_Update>:

void MA_ADC3_IN1_Update (ADC3_IN1_MA *ADC3_IN1_MA_ptr)
{
 8001114:	b480      	push	{r7}
 8001116:	b087      	sub	sp, #28
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]
 8001120:	e05a      	b.n	80011d8 <MA_ADC3_IN1_Update+0xc4>
    {

        ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr[ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx] = ADC3_IN1_NF_arg._NF_ADC3_IN1_bfr[u]; // Store the current input sample in the circular buffer
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4932      	ldr	r1, [pc, #200]	; (80011f0 <MA_ADC3_IN1_Update+0xdc>)
 8001128:	697a      	ldr	r2, [r7, #20]
 800112a:	3212      	adds	r2, #18
 800112c:	0092      	lsls	r2, r2, #2
 800112e:	440a      	add	r2, r1
 8001130:	6812      	ldr	r2, [r2, #0]
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	440b      	add	r3, r1
 8001138:	3304      	adds	r3, #4
 800113a:	601a      	str	r2, [r3, #0]


        // Increment the buffer index and wrap around if necessary
        ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx++;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	1c5a      	adds	r2, r3, #1
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	601a      	str	r2, [r3, #0]

        if (ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx == MA_FILTER_LENGTH)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2b08      	cmp	r3, #8
 800114c:	d102      	bne.n	8001154 <MA_ADC3_IN1_Update+0x40>
        {
            ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx = 0;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
        }


        ADC3_IN1_MA_ptr->MA_ADC3_IN1_OutBfr[u] = 0.0f; // Initialize the current output sample inside the struct's output buffer
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	3308      	adds	r3, #8
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	4413      	add	r3, r2
 800115e:	3304      	adds	r3, #4
 8001160:	f04f 0200 	mov.w	r2, #0
 8001164:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_5 = ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx; // Set SumIndex_5 to the current buffer index
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	613b      	str	r3, [r7, #16]

        // Perform convolution (dot product) with the impulse response
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	e02c      	b.n	80011cc <MA_ADC3_IN1_Update+0xb8>
        {
            // Decrement index and wrap if necessary (moving backwards in the circular buffer)
            if (SumIndex_5 > 0)
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <MA_ADC3_IN1_Update+0x6c>
            {
                SumIndex_5--;
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	3b01      	subs	r3, #1
 800117c:	613b      	str	r3, [r7, #16]
 800117e:	e001      	b.n	8001184 <MA_ADC3_IN1_Update+0x70>
            }

            else
            {
                SumIndex_5 = MA_FILTER_LENGTH - 1;
 8001180:	2307      	movs	r3, #7
 8001182:	613b      	str	r3, [r7, #16]
            }

            // Multiply impulse response with buffer sample and accumulate into output
            ADC3_IN1_MA_ptr->MA_ADC3_IN1_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr[SumIndex_5];
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	3308      	adds	r3, #8
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	4413      	add	r3, r2
 800118e:	3304      	adds	r3, #4
 8001190:	ed93 7a00 	vldr	s14, [r3]
 8001194:	4a17      	ldr	r2, [pc, #92]	; (80011f4 <MA_ADC3_IN1_Update+0xe0>)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	4413      	add	r3, r2
 800119c:	edd3 6a00 	vldr	s13, [r3]
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	4413      	add	r3, r2
 80011a8:	3304      	adds	r3, #4
 80011aa:	edd3 7a00 	vldr	s15, [r3]
 80011ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	3308      	adds	r3, #8
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	4413      	add	r3, r2
 80011c0:	3304      	adds	r3, #4
 80011c2:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	3301      	adds	r3, #1
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2b07      	cmp	r3, #7
 80011d0:	d9cf      	bls.n	8001172 <MA_ADC3_IN1_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	3301      	adds	r3, #1
 80011d6:	617b      	str	r3, [r7, #20]
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80011de:	4293      	cmp	r3, r2
 80011e0:	d99f      	bls.n	8001122 <MA_ADC3_IN1_Update+0xe>
        }
    }
}
 80011e2:	bf00      	nop
 80011e4:	bf00      	nop
 80011e6:	371c      	adds	r7, #28
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	20005078 	.word	0x20005078
 80011f4:	20000000 	.word	0x20000000

080011f8 <MA_ADC3_IN2_Init>:




void MA_ADC3_IN2_Init (ADC3_IN2_MA *ADC3_IN2_MA_ptr)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001200:	2300      	movs	r3, #0
 8001202:	73fb      	strb	r3, [r7, #15]
 8001204:	e00a      	b.n	800121c <MA_ADC3_IN2_Init+0x24>
	{
        ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr[j]=0.0f; // Clear the moving average buffer
 8001206:	7bfb      	ldrb	r3, [r7, #15]
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	4413      	add	r3, r2
 800120e:	3304      	adds	r3, #4
 8001210:	f04f 0200 	mov.w	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001216:	7bfb      	ldrb	r3, [r7, #15]
 8001218:	3301      	adds	r3, #1
 800121a:	73fb      	strb	r3, [r7, #15]
 800121c:	7bfb      	ldrb	r3, [r7, #15]
 800121e:	2b07      	cmp	r3, #7
 8001220:	d9f1      	bls.n	8001206 <MA_ADC3_IN2_Init+0xe>
    }


	ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx=0; // Initialize the buffer index
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001228:	2300      	movs	r3, #0
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	e00b      	b.n	8001246 <MA_ADC3_IN2_Init+0x4e>
	{
	    ADC3_IN2_MA_ptr->MA_ADC3_IN2_OutBfr[i] = 0.0f; // Clear the output buffer
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	3308      	adds	r3, #8
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4413      	add	r3, r2
 8001238:	3304      	adds	r3, #4
 800123a:	f04f 0200 	mov.w	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	3301      	adds	r3, #1
 8001244:	60bb      	str	r3, [r7, #8]
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	2b9c      	cmp	r3, #156	; 0x9c
 800124a:	d9f0      	bls.n	800122e <MA_ADC3_IN2_Init+0x36>
	}
}
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
	...

0800125c <MA_ADC3_IN2_Update>:

void MA_ADC3_IN2_Update (ADC3_IN2_MA *ADC3_IN2_MA_ptr)
{
 800125c:	b480      	push	{r7}
 800125e:	b087      	sub	sp, #28
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	e05a      	b.n	8001320 <MA_ADC3_IN2_Update+0xc4>
    {

        ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr[ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx] = ADC3_IN2_NF_arg._NF_ADC3_IN2_bfr[u]; // Store the current input sample in the circular buffer
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4932      	ldr	r1, [pc, #200]	; (8001338 <MA_ADC3_IN2_Update+0xdc>)
 8001270:	697a      	ldr	r2, [r7, #20]
 8001272:	3212      	adds	r2, #18
 8001274:	0092      	lsls	r2, r2, #2
 8001276:	440a      	add	r2, r1
 8001278:	6812      	ldr	r2, [r2, #0]
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	440b      	add	r3, r1
 8001280:	3304      	adds	r3, #4
 8001282:	601a      	str	r2, [r3, #0]


        // Increment the buffer index and wrap around if necessary
        ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx++;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	1c5a      	adds	r2, r3, #1
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	601a      	str	r2, [r3, #0]

        if (ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx == MA_FILTER_LENGTH)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2b08      	cmp	r3, #8
 8001294:	d102      	bne.n	800129c <MA_ADC3_IN2_Update+0x40>
        {
            ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx = 0;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
        }


        ADC3_IN2_MA_ptr->MA_ADC3_IN2_OutBfr[u] = 0.0f; // Initialize the current output sample inside the struct's output buffer
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	3308      	adds	r3, #8
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	4413      	add	r3, r2
 80012a6:	3304      	adds	r3, #4
 80012a8:	f04f 0200 	mov.w	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_6 = ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx; // Set SumIndex_6 to the current buffer index
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	613b      	str	r3, [r7, #16]

        // Perform convolution (dot product) with the impulse response
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	e02c      	b.n	8001314 <MA_ADC3_IN2_Update+0xb8>
        {
            // Decrement index and wrap if necessary (moving backwards in the circular buffer)
            if (SumIndex_6 > 0)
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d003      	beq.n	80012c8 <MA_ADC3_IN2_Update+0x6c>
            {
                SumIndex_6--;
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	613b      	str	r3, [r7, #16]
 80012c6:	e001      	b.n	80012cc <MA_ADC3_IN2_Update+0x70>
            }

            else
            {
                SumIndex_6 = MA_FILTER_LENGTH - 1;
 80012c8:	2307      	movs	r3, #7
 80012ca:	613b      	str	r3, [r7, #16]
            }

            // Multiply impulse response with buffer sample and accumulate into output
            ADC3_IN2_MA_ptr->MA_ADC3_IN2_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr[SumIndex_6];
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	3308      	adds	r3, #8
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	3304      	adds	r3, #4
 80012d8:	ed93 7a00 	vldr	s14, [r3]
 80012dc:	4a17      	ldr	r2, [pc, #92]	; (800133c <MA_ADC3_IN2_Update+0xe0>)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	4413      	add	r3, r2
 80012e4:	edd3 6a00 	vldr	s13, [r3]
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4413      	add	r3, r2
 80012f0:	3304      	adds	r3, #4
 80012f2:	edd3 7a00 	vldr	s15, [r3]
 80012f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	3308      	adds	r3, #8
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	3304      	adds	r3, #4
 800130a:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	3301      	adds	r3, #1
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2b07      	cmp	r3, #7
 8001318:	d9cf      	bls.n	80012ba <MA_ADC3_IN2_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	3301      	adds	r3, #1
 800131e:	617b      	str	r3, [r7, #20]
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8001326:	4293      	cmp	r3, r2
 8001328:	d99f      	bls.n	800126a <MA_ADC3_IN2_Update+0xe>
        }

    }

}
 800132a:	bf00      	nop
 800132c:	bf00      	nop
 800132e:	371c      	adds	r7, #28
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	20006484 	.word	0x20006484
 800133c:	20000000 	.word	0x20000000

08001340 <init_ADC1_IN1_struct>:
extern ADC3_DMA_sort*ADC3_DMA_sort_ptr;


// INITIALIZING THE STRUCT INSTANCE
void init_ADC1_IN1_struct(void)
  {
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC1_IN1_NF_arg.ADC1_IN1_psrc = (float32_t *)(ADC1_DMA_sort_ptr->ADC1_IN1_bfr);   // Typecasting. Converts the data in IN1 data buffer to floating point values. Assigns the source buffer at runtime
 8001344:	4b05      	ldr	r3, [pc, #20]	; (800135c <init_ADC1_IN1_struct+0x1c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800134c:	3314      	adds	r3, #20
 800134e:	4a04      	ldr	r2, [pc, #16]	; (8001360 <init_ADC1_IN1_struct+0x20>)
 8001350:	6453      	str	r3, [r2, #68]	; 0x44
  }
 8001352:	bf00      	nop
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	20007cd4 	.word	0x20007cd4
 8001360:	20000048 	.word	0x20000048

08001364 <init_ADC1_IN1_FO_biquad_filter>:

void init_ADC1_IN1_FO_biquad_filter(void)
  {
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8001368:	4b05      	ldr	r3, [pc, #20]	; (8001380 <init_ADC1_IN1_FO_biquad_filter+0x1c>)
 800136a:	7819      	ldrb	r1, [r3, #0]
 800136c:	4b04      	ldr	r3, [pc, #16]	; (8001380 <init_ADC1_IN1_FO_biquad_filter+0x1c>)
 800136e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001370:	4b03      	ldr	r3, [pc, #12]	; (8001380 <init_ADC1_IN1_FO_biquad_filter+0x1c>)
 8001372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001374:	4803      	ldr	r0, [pc, #12]	; (8001384 <init_ADC1_IN1_FO_biquad_filter+0x20>)
 8001376:	f005 fdf9 	bl	8006f6c <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC1_IN1_NF_arg.S1,  // Pointer to the instance
	        ADC1_IN1_NF_arg.ADC1_IN1_numstages,                                     // Number of stages (2 in this case)
	        ADC1_IN1_NF_arg.ADC1_IN1_pcoeffs,                                       // Pointer to coefficients array
	        ADC1_IN1_NF_arg.ADC1_IN1_pState                                         // Pointer to the state buffer
	 );
  }
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000048 	.word	0x20000048
 8001384:	20001420 	.word	0x20001420

08001388 <update_ADC1_IN1_FO_biquad_filter>:

void update_ADC1_IN1_FO_biquad_filter(void)
   {
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC1_IN1_NF_arg.S1, ADC1_IN1_NF_arg.ADC1_IN1_psrc , ADC1_IN1_NF_arg.ADC1_IN1_pdst, ADC1_IN1_NF_arg.ADC1_IN1_Blocksize);
 800138c:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <update_ADC1_IN1_FO_biquad_filter+0x28>)
 800138e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001390:	4b07      	ldr	r3, [pc, #28]	; (80013b0 <update_ADC1_IN1_FO_biquad_filter+0x28>)
 8001392:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001396:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 800139a:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <update_ADC1_IN1_FO_biquad_filter+0x28>)
 800139c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013a0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80013a4:	4803      	ldr	r0, [pc, #12]	; (80013b4 <update_ADC1_IN1_FO_biquad_filter+0x2c>)
 80013a6:	f005 fc25 	bl	8006bf4 <arm_biquad_cascade_df2T_f32>
   }
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000048 	.word	0x20000048
 80013b4:	20001420 	.word	0x20001420

080013b8 <init_ADC1_IN2_struct>:



void init_ADC1_IN2_struct(void)
  {
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC1_IN2_NF_arg.ADC1_IN2_psrc = (float32_t *)(ADC1_DMA_sort_ptr->ADC1_IN2_bfr);  // Typecasting. Assigned at runtime
 80013bc:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <init_ADC1_IN2_struct+0x1c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 80013c4:	3320      	adds	r3, #32
 80013c6:	4a04      	ldr	r2, [pc, #16]	; (80013d8 <init_ADC1_IN2_struct+0x20>)
 80013c8:	6453      	str	r3, [r2, #68]	; 0x44
  }
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	20007cd4 	.word	0x20007cd4
 80013d8:	20001454 	.word	0x20001454

080013dc <init_ADC1_IN2_FO_biquad_filter>:

void init_ADC1_IN2_FO_biquad_filter(void)
  {
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 80013e0:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <init_ADC1_IN2_FO_biquad_filter+0x1c>)
 80013e2:	7819      	ldrb	r1, [r3, #0]
 80013e4:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <init_ADC1_IN2_FO_biquad_filter+0x1c>)
 80013e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013e8:	4b03      	ldr	r3, [pc, #12]	; (80013f8 <init_ADC1_IN2_FO_biquad_filter+0x1c>)
 80013ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ec:	4803      	ldr	r0, [pc, #12]	; (80013fc <init_ADC1_IN2_FO_biquad_filter+0x20>)
 80013ee:	f005 fdbd 	bl	8006f6c <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC1_IN2_NF_arg.S2,  // Pointer to the instance
	        ADC1_IN2_NF_arg.ADC1_IN2_numstages,                                     // Number of stages (2 in this case)
	        ADC1_IN2_NF_arg.ADC1_IN2_pcoeffs,                                       // Pointer to coefficients array
	        ADC1_IN2_NF_arg.ADC1_IN2_pState                                         // Pointer to the state buffer
	 );
  }
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20001454 	.word	0x20001454
 80013fc:	2000282c 	.word	0x2000282c

08001400 <update_ADC1_IN2_FO_biquad_filter>:

void update_ADC1_IN2_FO_biquad_filter(void)
   {
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC1_IN2_NF_arg.S2, ADC1_IN2_NF_arg.ADC1_IN2_psrc , ADC1_IN2_NF_arg.ADC1_IN2_pdst, ADC1_IN2_NF_arg.ADC1_IN2_Blocksize);
 8001404:	4b08      	ldr	r3, [pc, #32]	; (8001428 <update_ADC1_IN2_FO_biquad_filter+0x28>)
 8001406:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001408:	4b07      	ldr	r3, [pc, #28]	; (8001428 <update_ADC1_IN2_FO_biquad_filter+0x28>)
 800140a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800140e:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 8001412:	4b05      	ldr	r3, [pc, #20]	; (8001428 <update_ADC1_IN2_FO_biquad_filter+0x28>)
 8001414:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001418:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800141c:	4803      	ldr	r0, [pc, #12]	; (800142c <update_ADC1_IN2_FO_biquad_filter+0x2c>)
 800141e:	f005 fbe9 	bl	8006bf4 <arm_biquad_cascade_df2T_f32>
   }
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20001454 	.word	0x20001454
 800142c:	2000282c 	.word	0x2000282c

08001430 <init_ADC2_IN3_struct>:



void init_ADC2_IN3_struct(void)
  {
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC2_IN3_NF_arg.ADC2_IN3_psrc = (float32_t *)(ADC2_DMA_sort_ptr->ADC2_IN3_bfr);  // Typecasting. Assigned at runtime
 8001434:	4b05      	ldr	r3, [pc, #20]	; (800144c <init_ADC2_IN3_struct+0x1c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800143c:	3314      	adds	r3, #20
 800143e:	4a04      	ldr	r2, [pc, #16]	; (8001450 <init_ADC2_IN3_struct+0x20>)
 8001440:	6453      	str	r3, [r2, #68]	; 0x44
  }
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	20007cd8 	.word	0x20007cd8
 8001450:	20002860 	.word	0x20002860

08001454 <init_ADC2_IN3_FO_biquad_filter>:

void init_ADC2_IN3_FO_biquad_filter(void)
  {
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8001458:	4b05      	ldr	r3, [pc, #20]	; (8001470 <init_ADC2_IN3_FO_biquad_filter+0x1c>)
 800145a:	7819      	ldrb	r1, [r3, #0]
 800145c:	4b04      	ldr	r3, [pc, #16]	; (8001470 <init_ADC2_IN3_FO_biquad_filter+0x1c>)
 800145e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001460:	4b03      	ldr	r3, [pc, #12]	; (8001470 <init_ADC2_IN3_FO_biquad_filter+0x1c>)
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	4803      	ldr	r0, [pc, #12]	; (8001474 <init_ADC2_IN3_FO_biquad_filter+0x20>)
 8001466:	f005 fd81 	bl	8006f6c <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC2_IN3_NF_arg.S3,  // Pointer to the instance
	        ADC2_IN3_NF_arg.ADC2_IN3_numstages,                                     // Number of stages (2 in this case)
	        ADC2_IN3_NF_arg.ADC2_IN3_pcoeffs,                                       // Pointer to coefficients array
	        ADC2_IN3_NF_arg.ADC2_IN3_pState                                         // Pointer to the state buffer
	 );
  }
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20002860 	.word	0x20002860
 8001474:	20003c38 	.word	0x20003c38

08001478 <update_ADC2_IN3_FO_biquad_filter>:

void update_ADC2_IN3_FO_biquad_filter(void)
   {
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC2_IN3_NF_arg.S3, ADC2_IN3_NF_arg.ADC2_IN3_psrc , ADC2_IN3_NF_arg.ADC2_IN3_pdst, ADC2_IN3_NF_arg.ADC2_IN3_Blocksize);
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <update_ADC2_IN3_FO_biquad_filter+0x28>)
 800147e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001480:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <update_ADC2_IN3_FO_biquad_filter+0x28>)
 8001482:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001486:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 800148a:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <update_ADC2_IN3_FO_biquad_filter+0x28>)
 800148c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001490:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8001494:	4803      	ldr	r0, [pc, #12]	; (80014a4 <update_ADC2_IN3_FO_biquad_filter+0x2c>)
 8001496:	f005 fbad 	bl	8006bf4 <arm_biquad_cascade_df2T_f32>
   }
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20002860 	.word	0x20002860
 80014a4:	20003c38 	.word	0x20003c38

080014a8 <init_ADC2_IN4_struct>:




void init_ADC2_IN4_struct(void)
  {
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC2_IN4_NF_arg.ADC2_IN4_psrc = (float32_t *)(ADC2_DMA_sort_ptr->ADC2_IN4_bfr);  // Typecasting. Assigned at runtime
 80014ac:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <init_ADC2_IN4_struct+0x1c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 80014b4:	3320      	adds	r3, #32
 80014b6:	4a04      	ldr	r2, [pc, #16]	; (80014c8 <init_ADC2_IN4_struct+0x20>)
 80014b8:	6453      	str	r3, [r2, #68]	; 0x44
  }
 80014ba:	bf00      	nop
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	20007cd8 	.word	0x20007cd8
 80014c8:	20003c6c 	.word	0x20003c6c

080014cc <init_ADC2_IN4_FO_biquad_filter>:

void init_ADC2_IN4_FO_biquad_filter(void)
  {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 80014d0:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <init_ADC2_IN4_FO_biquad_filter+0x1c>)
 80014d2:	7819      	ldrb	r1, [r3, #0]
 80014d4:	4b04      	ldr	r3, [pc, #16]	; (80014e8 <init_ADC2_IN4_FO_biquad_filter+0x1c>)
 80014d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014d8:	4b03      	ldr	r3, [pc, #12]	; (80014e8 <init_ADC2_IN4_FO_biquad_filter+0x1c>)
 80014da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014dc:	4803      	ldr	r0, [pc, #12]	; (80014ec <init_ADC2_IN4_FO_biquad_filter+0x20>)
 80014de:	f005 fd45 	bl	8006f6c <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC2_IN4_NF_arg.S4,  // Pointer to the instance
	        ADC2_IN4_NF_arg.ADC2_IN4_numstages,                                     // Number of stages (2 in this case)
	        ADC2_IN4_NF_arg.ADC2_IN4_pcoeffs,                                       // Pointer to coefficients array
	        ADC2_IN4_NF_arg.ADC2_IN4_pState                                         // Pointer to the state buffer
	 );
  }
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20003c6c 	.word	0x20003c6c
 80014ec:	20005044 	.word	0x20005044

080014f0 <update_ADC2_IN4_FO_biquad_filter>:

void update_ADC2_IN4_FO_biquad_filter(void)
   {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC2_IN4_NF_arg.S4, ADC2_IN4_NF_arg.ADC2_IN4_psrc , ADC2_IN4_NF_arg.ADC2_IN4_pdst, ADC2_IN4_NF_arg.ADC2_IN4_Blocksize);
 80014f4:	4b08      	ldr	r3, [pc, #32]	; (8001518 <update_ADC2_IN4_FO_biquad_filter+0x28>)
 80014f6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80014f8:	4b07      	ldr	r3, [pc, #28]	; (8001518 <update_ADC2_IN4_FO_biquad_filter+0x28>)
 80014fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014fe:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 8001502:	4b05      	ldr	r3, [pc, #20]	; (8001518 <update_ADC2_IN4_FO_biquad_filter+0x28>)
 8001504:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001508:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800150c:	4803      	ldr	r0, [pc, #12]	; (800151c <update_ADC2_IN4_FO_biquad_filter+0x2c>)
 800150e:	f005 fb71 	bl	8006bf4 <arm_biquad_cascade_df2T_f32>
   }
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20003c6c 	.word	0x20003c6c
 800151c:	20005044 	.word	0x20005044

08001520 <init_ADC3_IN1_struct>:




void init_ADC3_IN1_struct(void)
  {
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC3_IN1_NF_arg.ADC3_IN1_psrc = (float32_t *)(ADC3_DMA_sort_ptr->ADC3_IN1_bfr);  // Typecasting. Assigned at runtime
 8001524:	4b05      	ldr	r3, [pc, #20]	; (800153c <init_ADC3_IN1_struct+0x1c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800152c:	3314      	adds	r3, #20
 800152e:	4a04      	ldr	r2, [pc, #16]	; (8001540 <init_ADC3_IN1_struct+0x20>)
 8001530:	6453      	str	r3, [r2, #68]	; 0x44
  }
 8001532:	bf00      	nop
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	20007cdc 	.word	0x20007cdc
 8001540:	20005078 	.word	0x20005078

08001544 <init_ADC3_IN1_FO_biquad_filter>:

void init_ADC3_IN1_FO_biquad_filter(void)
  {
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <init_ADC3_IN1_FO_biquad_filter+0x1c>)
 800154a:	7819      	ldrb	r1, [r3, #0]
 800154c:	4b04      	ldr	r3, [pc, #16]	; (8001560 <init_ADC3_IN1_FO_biquad_filter+0x1c>)
 800154e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001550:	4b03      	ldr	r3, [pc, #12]	; (8001560 <init_ADC3_IN1_FO_biquad_filter+0x1c>)
 8001552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001554:	4803      	ldr	r0, [pc, #12]	; (8001564 <init_ADC3_IN1_FO_biquad_filter+0x20>)
 8001556:	f005 fd09 	bl	8006f6c <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC3_IN1_NF_arg.S5,  // Pointer to the instance
	        ADC3_IN1_NF_arg.ADC3_IN1_numstages,                                     // Number of stages (2 in this case)
	        ADC3_IN1_NF_arg.ADC3_IN1_pcoeffs,                                       // Pointer to coefficients array
	        ADC3_IN1_NF_arg.ADC3_IN1_pState                                         // Pointer to the state buffer
	 );
  }
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20005078 	.word	0x20005078
 8001564:	20006450 	.word	0x20006450

08001568 <update_ADC3_IN1_FO_biquad_filter>:

void update_ADC3_IN1_FO_biquad_filter(void)
   {
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC3_IN1_NF_arg.S5, ADC3_IN1_NF_arg.ADC3_IN1_psrc, ADC3_IN1_NF_arg.ADC3_IN1_pdst, ADC3_IN1_NF_arg.ADC3_IN1_Blocksize);
 800156c:	4b08      	ldr	r3, [pc, #32]	; (8001590 <update_ADC3_IN1_FO_biquad_filter+0x28>)
 800156e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001570:	4b07      	ldr	r3, [pc, #28]	; (8001590 <update_ADC3_IN1_FO_biquad_filter+0x28>)
 8001572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001576:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 800157a:	4b05      	ldr	r3, [pc, #20]	; (8001590 <update_ADC3_IN1_FO_biquad_filter+0x28>)
 800157c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001580:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8001584:	4803      	ldr	r0, [pc, #12]	; (8001594 <update_ADC3_IN1_FO_biquad_filter+0x2c>)
 8001586:	f005 fb35 	bl	8006bf4 <arm_biquad_cascade_df2T_f32>
   }
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20005078 	.word	0x20005078
 8001594:	20006450 	.word	0x20006450

08001598 <init_ADC3_IN2_struct>:




void init_ADC3_IN2_struct(void)
  {
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC3_IN2_NF_arg.ADC3_IN2_psrc = (float32_t *)(ADC3_DMA_sort_ptr->ADC3_IN2_bfr);  // Typecasting. Assigned at runtime
 800159c:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <init_ADC3_IN2_struct+0x1c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 80015a4:	3320      	adds	r3, #32
 80015a6:	4a04      	ldr	r2, [pc, #16]	; (80015b8 <init_ADC3_IN2_struct+0x20>)
 80015a8:	6453      	str	r3, [r2, #68]	; 0x44
  }
 80015aa:	bf00      	nop
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	20007cdc 	.word	0x20007cdc
 80015b8:	20006484 	.word	0x20006484

080015bc <init_ADC3_IN2_FO_biquad_filter>:

void init_ADC3_IN2_FO_biquad_filter(void)
  {
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 80015c0:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <init_ADC3_IN2_FO_biquad_filter+0x1c>)
 80015c2:	7819      	ldrb	r1, [r3, #0]
 80015c4:	4b04      	ldr	r3, [pc, #16]	; (80015d8 <init_ADC3_IN2_FO_biquad_filter+0x1c>)
 80015c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015c8:	4b03      	ldr	r3, [pc, #12]	; (80015d8 <init_ADC3_IN2_FO_biquad_filter+0x1c>)
 80015ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015cc:	4803      	ldr	r0, [pc, #12]	; (80015dc <init_ADC3_IN2_FO_biquad_filter+0x20>)
 80015ce:	f005 fccd 	bl	8006f6c <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC3_IN2_NF_arg.S6,  // Pointer to the instance
	        ADC3_IN2_NF_arg.ADC3_IN2_numstages,                                     // Number of stages (2 in this case)
	        ADC3_IN2_NF_arg.ADC3_IN2_pcoeffs,                                       // Pointer to coefficients array
	        ADC3_IN2_NF_arg.ADC3_IN2_pState                                         // Pointer to the state buffer
	 );
  }
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20006484 	.word	0x20006484
 80015dc:	2000785c 	.word	0x2000785c

080015e0 <update_ADC3_IN2_FO_biquad_filter>:

void update_ADC3_IN2_FO_biquad_filter(void)
   {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC3_IN2_NF_arg.S6, ADC3_IN2_NF_arg.ADC3_IN2_psrc, ADC3_IN2_NF_arg.ADC3_IN2_pdst, ADC3_IN2_NF_arg.ADC3_IN2_Blocksize);
 80015e4:	4b08      	ldr	r3, [pc, #32]	; (8001608 <update_ADC3_IN2_FO_biquad_filter+0x28>)
 80015e6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80015e8:	4b07      	ldr	r3, [pc, #28]	; (8001608 <update_ADC3_IN2_FO_biquad_filter+0x28>)
 80015ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015ee:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 80015f2:	4b05      	ldr	r3, [pc, #20]	; (8001608 <update_ADC3_IN2_FO_biquad_filter+0x28>)
 80015f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015f8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80015fc:	4803      	ldr	r0, [pc, #12]	; (800160c <update_ADC3_IN2_FO_biquad_filter+0x2c>)
 80015fe:	f005 faf9 	bl	8006bf4 <arm_biquad_cascade_df2T_f32>
   }
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20006484 	.word	0x20006484
 800160c:	2000785c 	.word	0x2000785c

08001610 <ADC1_IN1_OffsetCalc>:

//INCLUDES
#include "_ADCn_INx_Offset.h"

float32_t  ADC1_IN1_OffsetCalc(ADC1_IN1_MA *ADC1_IN1_Offset_ptr)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
	float32_t Sum_1 = 0.0f; // Initialize the sum to zero
 8001618:	f04f 0300 	mov.w	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 800161e:	2300      	movs	r3, #0
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	e010      	b.n	8001646 <ADC1_IN1_OffsetCalc+0x36>
	{
		Sum_1 += ADC1_IN1_Offset_ptr->MA_ADC1_IN1_OutBfr[h];  // Accumulate the sum of all values in the buffer
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	3308      	adds	r3, #8
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4413      	add	r3, r2
 800162e:	3304      	adds	r3, #4
 8001630:	edd3 7a00 	vldr	s15, [r3]
 8001634:	ed97 7a03 	vldr	s14, [r7, #12]
 8001638:	ee77 7a27 	vadd.f32	s15, s14, s15
 800163c:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	3301      	adds	r3, #1
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	2b9c      	cmp	r3, #156	; 0x9c
 800164a:	d9eb      	bls.n	8001624 <ADC1_IN1_OffsetCalc+0x14>
	}

	return Sum_1/ADC_DMA_SIXTEENTHBUFFERSIZE; // Return the mean (baseline)
 800164c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001650:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800166c <ADC1_IN1_OffsetCalc+0x5c>
 8001654:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001658:	eef0 7a66 	vmov.f32	s15, s13
}
 800165c:	eeb0 0a67 	vmov.f32	s0, s15
 8001660:	3714      	adds	r7, #20
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	431d0000 	.word	0x431d0000

08001670 <ADC1_IN2_OffsetCalc>:


float32_t  ADC1_IN2_OffsetCalc(ADC1_IN2_MA *ADC1_IN2_Offset_ptr)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	float32_t Sum_2 = 0.0f; // Initialize the sum to zero
 8001678:	f04f 0300 	mov.w	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 800167e:	2300      	movs	r3, #0
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	e010      	b.n	80016a6 <ADC1_IN2_OffsetCalc+0x36>
	{
		Sum_2 += ADC1_IN2_Offset_ptr->MA_ADC1_IN2_OutBfr[h];  // Accumulate the sum of all values in the buffer
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	3308      	adds	r3, #8
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	3304      	adds	r3, #4
 8001690:	edd3 7a00 	vldr	s15, [r3]
 8001694:	ed97 7a03 	vldr	s14, [r7, #12]
 8001698:	ee77 7a27 	vadd.f32	s15, s14, s15
 800169c:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	3301      	adds	r3, #1
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	2b9c      	cmp	r3, #156	; 0x9c
 80016aa:	d9eb      	bls.n	8001684 <ADC1_IN2_OffsetCalc+0x14>
	}

	return Sum_2/ADC_DMA_SIXTEENTHBUFFERSIZE; // Return the mean (baseline)
 80016ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80016b0:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80016cc <ADC1_IN2_OffsetCalc+0x5c>
 80016b4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80016b8:	eef0 7a66 	vmov.f32	s15, s13
}
 80016bc:	eeb0 0a67 	vmov.f32	s0, s15
 80016c0:	3714      	adds	r7, #20
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	431d0000 	.word	0x431d0000

080016d0 <ADC2_IN3_OffsetCalc>:



float32_t  ADC2_IN3_OffsetCalc(ADC2_IN3_MA *ADC2_IN3_Offset_ptr)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
	float32_t Sum_3 = 0.0f; // Initialize the sum to zero
 80016d8:	f04f 0300 	mov.w	r3, #0
 80016dc:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80016de:	2300      	movs	r3, #0
 80016e0:	60bb      	str	r3, [r7, #8]
 80016e2:	e010      	b.n	8001706 <ADC2_IN3_OffsetCalc+0x36>
	{
		Sum_3 += ADC2_IN3_Offset_ptr->MA_ADC2_IN3_OutBfr[h];  // Accumulate the sum of all values in the buffer
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	3308      	adds	r3, #8
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4413      	add	r3, r2
 80016ee:	3304      	adds	r3, #4
 80016f0:	edd3 7a00 	vldr	s15, [r3]
 80016f4:	ed97 7a03 	vldr	s14, [r7, #12]
 80016f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016fc:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	3301      	adds	r3, #1
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	2b9c      	cmp	r3, #156	; 0x9c
 800170a:	d9eb      	bls.n	80016e4 <ADC2_IN3_OffsetCalc+0x14>
	}

	return Sum_3/ADC_DMA_SIXTEENTHBUFFERSIZE; // Return the mean (baseline)
 800170c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001710:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800172c <ADC2_IN3_OffsetCalc+0x5c>
 8001714:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001718:	eef0 7a66 	vmov.f32	s15, s13
}
 800171c:	eeb0 0a67 	vmov.f32	s0, s15
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	431d0000 	.word	0x431d0000

08001730 <ADC2_IN4_OffsetCalc>:


float32_t  ADC2_IN4_OffsetCalc(ADC2_IN4_MA *ADC2_IN4_Offset_ptr)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
	float32_t Sum_4 = 0.0f; // Initialize the sum to zero
 8001738:	f04f 0300 	mov.w	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 800173e:	2300      	movs	r3, #0
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	e010      	b.n	8001766 <ADC2_IN4_OffsetCalc+0x36>
	{
		Sum_4 += ADC2_IN4_Offset_ptr->MA_ADC2_IN4_OutBfr[h];  // Accumulate the sum of all values in the buffer
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	3308      	adds	r3, #8
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4413      	add	r3, r2
 800174e:	3304      	adds	r3, #4
 8001750:	edd3 7a00 	vldr	s15, [r3]
 8001754:	ed97 7a03 	vldr	s14, [r7, #12]
 8001758:	ee77 7a27 	vadd.f32	s15, s14, s15
 800175c:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	3301      	adds	r3, #1
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	2b9c      	cmp	r3, #156	; 0x9c
 800176a:	d9eb      	bls.n	8001744 <ADC2_IN4_OffsetCalc+0x14>
	}

	return Sum_4/ADC_DMA_SIXTEENTHBUFFERSIZE; // Return the mean (baseline)
 800176c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001770:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800178c <ADC2_IN4_OffsetCalc+0x5c>
 8001774:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001778:	eef0 7a66 	vmov.f32	s15, s13
}
 800177c:	eeb0 0a67 	vmov.f32	s0, s15
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	431d0000 	.word	0x431d0000

08001790 <ADC3_IN1_OffsetCalc>:


float32_t  ADC3_IN1_OffsetCalc(ADC3_IN1_MA *ADC3_IN1_Offset_ptr)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
	float32_t Sum_5 = 0.0f; // Initialize the sum to zero
 8001798:	f04f 0300 	mov.w	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 800179e:	2300      	movs	r3, #0
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	e010      	b.n	80017c6 <ADC3_IN1_OffsetCalc+0x36>
	{
		Sum_5 += ADC3_IN1_Offset_ptr->MA_ADC3_IN1_OutBfr[h];  // Accumulate the sum of all values in the buffer
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	3308      	adds	r3, #8
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4413      	add	r3, r2
 80017ae:	3304      	adds	r3, #4
 80017b0:	edd3 7a00 	vldr	s15, [r3]
 80017b4:	ed97 7a03 	vldr	s14, [r7, #12]
 80017b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017bc:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	3301      	adds	r3, #1
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	2b9c      	cmp	r3, #156	; 0x9c
 80017ca:	d9eb      	bls.n	80017a4 <ADC3_IN1_OffsetCalc+0x14>
	}

	return Sum_5/ADC_DMA_SIXTEENTHBUFFERSIZE; // Return the mean (baseline)
 80017cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80017d0:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80017ec <ADC3_IN1_OffsetCalc+0x5c>
 80017d4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80017d8:	eef0 7a66 	vmov.f32	s15, s13
}
 80017dc:	eeb0 0a67 	vmov.f32	s0, s15
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	431d0000 	.word	0x431d0000

080017f0 <ADC3_IN2_OffsetCalc>:


float32_t  ADC3_IN2_OffsetCalc(ADC3_IN2_MA *ADC3_IN2_Offset_ptr)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
	float32_t Sum_6 = 0.0f; // Initialize the sum to zero
 80017f8:	f04f 0300 	mov.w	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80017fe:	2300      	movs	r3, #0
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	e010      	b.n	8001826 <ADC3_IN2_OffsetCalc+0x36>
	{
		Sum_6 += ADC3_IN2_Offset_ptr->MA_ADC3_IN2_OutBfr[h];  // Accumulate the sum of all values in the buffer
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	3308      	adds	r3, #8
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4413      	add	r3, r2
 800180e:	3304      	adds	r3, #4
 8001810:	edd3 7a00 	vldr	s15, [r3]
 8001814:	ed97 7a03 	vldr	s14, [r7, #12]
 8001818:	ee77 7a27 	vadd.f32	s15, s14, s15
 800181c:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	3301      	adds	r3, #1
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	2b9c      	cmp	r3, #156	; 0x9c
 800182a:	d9eb      	bls.n	8001804 <ADC3_IN2_OffsetCalc+0x14>
	}

	return Sum_6/ADC_DMA_SIXTEENTHBUFFERSIZE; // Return the mean (baseline)
 800182c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001830:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800184c <ADC3_IN2_OffsetCalc+0x5c>
 8001834:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001838:	eef0 7a66 	vmov.f32	s15, s13
}
 800183c:	eeb0 0a67 	vmov.f32	s0, s15
 8001840:	3714      	adds	r7, #20
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	431d0000 	.word	0x431d0000

08001850 <ADC1_IN1_SD_BL>:
//INCLUSIONS
#include "_ADCn_INx_SD_BL.h"

//FUNCTION DEFINITIONS
float32_t  ADC1_IN1_SD_BL(ADC1_IN1_MA *ADC1_IN1_SD_BL_ptr, float32_t Mean_1)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_1 = 0.0f;
 800185c:	f04f 0300 	mov.w	r3, #0
 8001860:	617b      	str	r3, [r7, #20]
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
 8001866:	e01a      	b.n	800189e <ADC1_IN1_SD_BL+0x4e>
  {
	  float32_t Diff_1 = ADC1_IN1_SD_BL_ptr->MA_ADC1_IN1_OutBfr[q] - Mean_1;
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	3308      	adds	r3, #8
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	3304      	adds	r3, #4
 8001874:	ed93 7a00 	vldr	s14, [r3]
 8001878:	edd7 7a00 	vldr	s15, [r7]
 800187c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001880:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_1 += Diff_1 * Diff_1;
 8001884:	edd7 7a03 	vldr	s15, [r7, #12]
 8001888:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800188c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001890:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001894:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	3301      	adds	r3, #1
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	2b9c      	cmp	r3, #156	; 0x9c
 80018a2:	d9e1      	bls.n	8001868 <ADC1_IN1_SD_BL+0x18>
  }

  Variance_1 /= ADC_DMA_SIXTEENTHBUFFERSIZE; // Average the squared differences
 80018a4:	ed97 7a05 	vldr	s14, [r7, #20]
 80018a8:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80018e4 <ADC1_IN1_SD_BL+0x94>
 80018ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018b0:	edc7 7a05 	vstr	s15, [r7, #20]

  return sqrt(Variance_1); //Square root of variance
 80018b4:	6978      	ldr	r0, [r7, #20]
 80018b6:	f7fe fe13 	bl	80004e0 <__aeabi_f2d>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	ec43 2b10 	vmov	d0, r2, r3
 80018c2:	f005 fb91 	bl	8006fe8 <sqrt>
 80018c6:	ec53 2b10 	vmov	r2, r3, d0
 80018ca:	4610      	mov	r0, r2
 80018cc:	4619      	mov	r1, r3
 80018ce:	f7ff f90f 	bl	8000af0 <__aeabi_d2f>
 80018d2:	4603      	mov	r3, r0
 80018d4:	ee07 3a90 	vmov	s15, r3
}
 80018d8:	eeb0 0a67 	vmov.f32	s0, s15
 80018dc:	3718      	adds	r7, #24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	431d0000 	.word	0x431d0000

080018e8 <ADC1_IN2_SD_BL>:


float32_t  ADC1_IN2_SD_BL(ADC1_IN2_MA *ADC1_IN2_SD_BL_ptr, float32_t Mean_2)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_2 = 0.0f;
 80018f4:	f04f 0300 	mov.w	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
  for (uint32_t  s=0; s<ADC_DMA_SIXTEENTHBUFFERSIZE; s++)
 80018fa:	2300      	movs	r3, #0
 80018fc:	613b      	str	r3, [r7, #16]
 80018fe:	e01a      	b.n	8001936 <ADC1_IN2_SD_BL+0x4e>
  {
	  float32_t Diff_2 = ADC1_IN2_SD_BL_ptr->MA_ADC1_IN2_OutBfr[s] - Mean_2;
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	3308      	adds	r3, #8
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4413      	add	r3, r2
 800190a:	3304      	adds	r3, #4
 800190c:	ed93 7a00 	vldr	s14, [r3]
 8001910:	edd7 7a00 	vldr	s15, [r7]
 8001914:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001918:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_2 += Diff_2 * Diff_2;
 800191c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001920:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001924:	ed97 7a05 	vldr	s14, [r7, #20]
 8001928:	ee77 7a27 	vadd.f32	s15, s14, s15
 800192c:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  s=0; s<ADC_DMA_SIXTEENTHBUFFERSIZE; s++)
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	3301      	adds	r3, #1
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	2b9c      	cmp	r3, #156	; 0x9c
 800193a:	d9e1      	bls.n	8001900 <ADC1_IN2_SD_BL+0x18>
  }

  Variance_2 /= ADC_DMA_SIXTEENTHBUFFERSIZE; // Average the squared differences
 800193c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001940:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800197c <ADC1_IN2_SD_BL+0x94>
 8001944:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001948:	edc7 7a05 	vstr	s15, [r7, #20]

 return sqrt(Variance_2); //Square root of variance
 800194c:	6978      	ldr	r0, [r7, #20]
 800194e:	f7fe fdc7 	bl	80004e0 <__aeabi_f2d>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	ec43 2b10 	vmov	d0, r2, r3
 800195a:	f005 fb45 	bl	8006fe8 <sqrt>
 800195e:	ec53 2b10 	vmov	r2, r3, d0
 8001962:	4610      	mov	r0, r2
 8001964:	4619      	mov	r1, r3
 8001966:	f7ff f8c3 	bl	8000af0 <__aeabi_d2f>
 800196a:	4603      	mov	r3, r0
 800196c:	ee07 3a90 	vmov	s15, r3

}
 8001970:	eeb0 0a67 	vmov.f32	s0, s15
 8001974:	3718      	adds	r7, #24
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	431d0000 	.word	0x431d0000

08001980 <ADC2_IN3_SD_BL>:


float32_t  ADC2_IN3_SD_BL(ADC2_IN3_MA *ADC2_IN3_SD_BL_ptr, float32_t Mean_3)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_3 = 0.0f;
 800198c:	f04f 0300 	mov.w	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
  for (uint32_t  v=0; v<ADC_DMA_SIXTEENTHBUFFERSIZE; v++)
 8001992:	2300      	movs	r3, #0
 8001994:	613b      	str	r3, [r7, #16]
 8001996:	e01a      	b.n	80019ce <ADC2_IN3_SD_BL+0x4e>
  {
	  float32_t Diff_3 = ADC2_IN3_SD_BL_ptr->MA_ADC2_IN3_OutBfr[v] - Mean_3;
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	3308      	adds	r3, #8
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	3304      	adds	r3, #4
 80019a4:	ed93 7a00 	vldr	s14, [r3]
 80019a8:	edd7 7a00 	vldr	s15, [r7]
 80019ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019b0:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_3 += Diff_3 * Diff_3;
 80019b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80019b8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80019bc:	ed97 7a05 	vldr	s14, [r7, #20]
 80019c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c4:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  v=0; v<ADC_DMA_SIXTEENTHBUFFERSIZE; v++)
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	3301      	adds	r3, #1
 80019cc:	613b      	str	r3, [r7, #16]
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	2b9c      	cmp	r3, #156	; 0x9c
 80019d2:	d9e1      	bls.n	8001998 <ADC2_IN3_SD_BL+0x18>
  }

  Variance_3 /= ADC_DMA_SIXTEENTHBUFFERSIZE; // Average the squared differences
 80019d4:	ed97 7a05 	vldr	s14, [r7, #20]
 80019d8:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001a14 <ADC2_IN3_SD_BL+0x94>
 80019dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019e0:	edc7 7a05 	vstr	s15, [r7, #20]

  return sqrt(Variance_3); //Square root of variance
 80019e4:	6978      	ldr	r0, [r7, #20]
 80019e6:	f7fe fd7b 	bl	80004e0 <__aeabi_f2d>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	ec43 2b10 	vmov	d0, r2, r3
 80019f2:	f005 faf9 	bl	8006fe8 <sqrt>
 80019f6:	ec53 2b10 	vmov	r2, r3, d0
 80019fa:	4610      	mov	r0, r2
 80019fc:	4619      	mov	r1, r3
 80019fe:	f7ff f877 	bl	8000af0 <__aeabi_d2f>
 8001a02:	4603      	mov	r3, r0
 8001a04:	ee07 3a90 	vmov	s15, r3

}
 8001a08:	eeb0 0a67 	vmov.f32	s0, s15
 8001a0c:	3718      	adds	r7, #24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	431d0000 	.word	0x431d0000

08001a18 <ADC2_IN4_SD_BL>:


float32_t  ADC2_IN4_SD_BL(ADC2_IN4_MA *ADC2_IN4_SD_BL_ptr, float32_t Mean_4)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_4 = 0.0f;
 8001a24:	f04f 0300 	mov.w	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]
  for (uint32_t  w=0; w<ADC_DMA_SIXTEENTHBUFFERSIZE; w++)
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	613b      	str	r3, [r7, #16]
 8001a2e:	e01a      	b.n	8001a66 <ADC2_IN4_SD_BL+0x4e>
  {
	  float32_t Diff_4 = ADC2_IN4_SD_BL_ptr->MA_ADC2_IN4_OutBfr[w] - Mean_4;
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	3308      	adds	r3, #8
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	3304      	adds	r3, #4
 8001a3c:	ed93 7a00 	vldr	s14, [r3]
 8001a40:	edd7 7a00 	vldr	s15, [r7]
 8001a44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a48:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_4 += Diff_4 * Diff_4;
 8001a4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a50:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001a54:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a5c:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  w=0; w<ADC_DMA_SIXTEENTHBUFFERSIZE; w++)
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	3301      	adds	r3, #1
 8001a64:	613b      	str	r3, [r7, #16]
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	2b9c      	cmp	r3, #156	; 0x9c
 8001a6a:	d9e1      	bls.n	8001a30 <ADC2_IN4_SD_BL+0x18>
  }

  Variance_4 /= ADC_DMA_SIXTEENTHBUFFERSIZE; // Average the squared differences
 8001a6c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a70:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001aac <ADC2_IN4_SD_BL+0x94>
 8001a74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a78:	edc7 7a05 	vstr	s15, [r7, #20]

 return sqrt(Variance_4); //Square root of variance
 8001a7c:	6978      	ldr	r0, [r7, #20]
 8001a7e:	f7fe fd2f 	bl	80004e0 <__aeabi_f2d>
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	ec43 2b10 	vmov	d0, r2, r3
 8001a8a:	f005 faad 	bl	8006fe8 <sqrt>
 8001a8e:	ec53 2b10 	vmov	r2, r3, d0
 8001a92:	4610      	mov	r0, r2
 8001a94:	4619      	mov	r1, r3
 8001a96:	f7ff f82b 	bl	8000af0 <__aeabi_d2f>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	ee07 3a90 	vmov	s15, r3

}
 8001aa0:	eeb0 0a67 	vmov.f32	s0, s15
 8001aa4:	3718      	adds	r7, #24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	431d0000 	.word	0x431d0000

08001ab0 <ADC3_IN1_SD_BL>:



float32_t  ADC3_IN1_SD_BL(ADC3_IN1_MA *ADC3_IN1_SD_BL_ptr, float32_t Mean_5)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_5 = 0.0f;
 8001abc:	f04f 0300 	mov.w	r3, #0
 8001ac0:	617b      	str	r3, [r7, #20]
  for (uint32_t  d=0; d<ADC_DMA_SIXTEENTHBUFFERSIZE; d++)
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	613b      	str	r3, [r7, #16]
 8001ac6:	e01a      	b.n	8001afe <ADC3_IN1_SD_BL+0x4e>
  {
	  float32_t Diff_5 = ADC3_IN1_SD_BL_ptr->MA_ADC3_IN1_OutBfr[d] - Mean_5;
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	3308      	adds	r3, #8
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4413      	add	r3, r2
 8001ad2:	3304      	adds	r3, #4
 8001ad4:	ed93 7a00 	vldr	s14, [r3]
 8001ad8:	edd7 7a00 	vldr	s15, [r7]
 8001adc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ae0:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_5 += Diff_5 * Diff_5;
 8001ae4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ae8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001aec:	ed97 7a05 	vldr	s14, [r7, #20]
 8001af0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001af4:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  d=0; d<ADC_DMA_SIXTEENTHBUFFERSIZE; d++)
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	3301      	adds	r3, #1
 8001afc:	613b      	str	r3, [r7, #16]
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	2b9c      	cmp	r3, #156	; 0x9c
 8001b02:	d9e1      	bls.n	8001ac8 <ADC3_IN1_SD_BL+0x18>
  }

  Variance_5 /= ADC_DMA_SIXTEENTHBUFFERSIZE; // Average the squared differences
 8001b04:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b08:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001b44 <ADC3_IN1_SD_BL+0x94>
 8001b0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b10:	edc7 7a05 	vstr	s15, [r7, #20]

 return sqrt(Variance_5); //Square root of variance
 8001b14:	6978      	ldr	r0, [r7, #20]
 8001b16:	f7fe fce3 	bl	80004e0 <__aeabi_f2d>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	ec43 2b10 	vmov	d0, r2, r3
 8001b22:	f005 fa61 	bl	8006fe8 <sqrt>
 8001b26:	ec53 2b10 	vmov	r2, r3, d0
 8001b2a:	4610      	mov	r0, r2
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	f7fe ffdf 	bl	8000af0 <__aeabi_d2f>
 8001b32:	4603      	mov	r3, r0
 8001b34:	ee07 3a90 	vmov	s15, r3

}
 8001b38:	eeb0 0a67 	vmov.f32	s0, s15
 8001b3c:	3718      	adds	r7, #24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	431d0000 	.word	0x431d0000

08001b48 <ADC3_IN2_SD_BL>:



float32_t  ADC3_IN2_SD_BL(ADC3_IN2_MA *ADC3_IN2_SD_BL_ptr, float32_t Mean_6)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_6 = 0.0f;
 8001b54:	f04f 0300 	mov.w	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]
  for (uint32_t  c=0; c<ADC_DMA_SIXTEENTHBUFFERSIZE; c++)
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	e01a      	b.n	8001b96 <ADC3_IN2_SD_BL+0x4e>
  {
	  float32_t Diff_6 = ADC3_IN2_SD_BL_ptr->MA_ADC3_IN2_OutBfr[c] - Mean_6;
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	3308      	adds	r3, #8
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4413      	add	r3, r2
 8001b6a:	3304      	adds	r3, #4
 8001b6c:	ed93 7a00 	vldr	s14, [r3]
 8001b70:	edd7 7a00 	vldr	s15, [r7]
 8001b74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b78:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_6 += Diff_6 * Diff_6;
 8001b7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b80:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001b84:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b8c:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  c=0; c<ADC_DMA_SIXTEENTHBUFFERSIZE; c++)
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	3301      	adds	r3, #1
 8001b94:	613b      	str	r3, [r7, #16]
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	2b9c      	cmp	r3, #156	; 0x9c
 8001b9a:	d9e1      	bls.n	8001b60 <ADC3_IN2_SD_BL+0x18>
  }

  Variance_6 /= ADC_DMA_SIXTEENTHBUFFERSIZE; // Average the squared differences
 8001b9c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ba0:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001bdc <ADC3_IN2_SD_BL+0x94>
 8001ba4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ba8:	edc7 7a05 	vstr	s15, [r7, #20]

  return sqrt(Variance_6); //Square root of variance
 8001bac:	6978      	ldr	r0, [r7, #20]
 8001bae:	f7fe fc97 	bl	80004e0 <__aeabi_f2d>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	ec43 2b10 	vmov	d0, r2, r3
 8001bba:	f005 fa15 	bl	8006fe8 <sqrt>
 8001bbe:	ec53 2b10 	vmov	r2, r3, d0
 8001bc2:	4610      	mov	r0, r2
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	f7fe ff93 	bl	8000af0 <__aeabi_d2f>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	ee07 3a90 	vmov	s15, r3

}
 8001bd0:	eeb0 0a67 	vmov.f32	s0, s15
 8001bd4:	3718      	adds	r7, #24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	431d0000 	.word	0x431d0000

08001be0 <ADC1_DMA_sort_uhb>:
 */

#include "_DMA_Sort.h"

void ADC1_DMA_sort_uhb (void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)  //Scans the upper half of the DMA buffer
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	e038      	b.n	8001c5e <ADC1_DMA_sort_uhb+0x7e>
	{
		if(m==0 || (m%2==0)) // Checks that the buffer register location is even and loads the data
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d004      	beq.n	8001bfc <ADC1_DMA_sort_uhb+0x1c>
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d117      	bne.n	8001c2c <ADC1_DMA_sort_uhb+0x4c>
		{
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)  // Stores data on the upper half of IN1 channel data buffer
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60bb      	str	r3, [r7, #8]
 8001c00:	e00f      	b.n	8001c22 <ADC1_DMA_sort_uhb+0x42>
			{
				ADC1_DMA_sort_ptr->ADC1_IN1_bfr[n]=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m];
 8001c02:	4b1c      	ldr	r3, [pc, #112]	; (8001c74 <ADC1_DMA_sort_uhb+0x94>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a1b      	ldr	r2, [pc, #108]	; (8001c74 <ADC1_DMA_sort_uhb+0x94>)
 8001c08:	6811      	ldr	r1, [r2, #0]
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	440b      	add	r3, r1
 8001c1a:	605a      	str	r2, [r3, #4]
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)  // Stores data on the upper half of IN1 channel data buffer
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	60bb      	str	r3, [r7, #8]
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8001c28:	d3eb      	bcc.n	8001c02 <ADC1_DMA_sort_uhb+0x22>
 8001c2a:	e015      	b.n	8001c58 <ADC1_DMA_sort_uhb+0x78>
            }
        }
		else  // Checks that the buffer register location is odd and loads the data
		{
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)  // Stores data on the upper half of IN2 channel data buffer
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	607b      	str	r3, [r7, #4]
 8001c30:	e00e      	b.n	8001c50 <ADC1_DMA_sort_uhb+0x70>
			{
				ADC1_DMA_sort_ptr->ADC1_IN2_bfr[p]=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m];
 8001c32:	4b10      	ldr	r3, [pc, #64]	; (8001c74 <ADC1_DMA_sort_uhb+0x94>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	4b0f      	ldr	r3, [pc, #60]	; (8001c74 <ADC1_DMA_sort_uhb+0x94>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	68f9      	ldr	r1, [r7, #12]
 8001c3c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	f602 62a8 	addw	r2, r2, #3752	; 0xea8
 8001c46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)  // Stores data on the upper half of IN2 channel data buffer
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	607b      	str	r3, [r7, #4]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8001c56:	d3ec      	bcc.n	8001c32 <ADC1_DMA_sort_uhb+0x52>
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)  //Scans the upper half of the DMA buffer
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8001c64:	d9c2      	bls.n	8001bec <ADC1_DMA_sort_uhb+0xc>
			}
		}
    }

};
 8001c66:	bf00      	nop
 8001c68:	bf00      	nop
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	20007cd4 	.word	0x20007cd4

08001c78 <ADC1_DMA_sort_lhb>:

void ADC1_DMA_sort_lhb (void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++) // Scans the lower half of the DMA buffer
 8001c7e:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	e03a      	b.n	8001cfc <ADC1_DMA_sort_lhb+0x84>
	{
		if(m==0||(m%2==0)) // Checks that the buffer register location is even and loads the data
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d004      	beq.n	8001c96 <ADC1_DMA_sort_lhb+0x1e>
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d118      	bne.n	8001cc8 <ADC1_DMA_sort_lhb+0x50>
		{
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)  // Stores data on the lower half of IN1 channel data buffer
 8001c96:	f240 2371 	movw	r3, #625	; 0x271
 8001c9a:	60bb      	str	r3, [r7, #8]
 8001c9c:	e00f      	b.n	8001cbe <ADC1_DMA_sort_lhb+0x46>
			{
				ADC1_DMA_sort_ptr->ADC1_IN1_bfr[n]=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m];
 8001c9e:	4b1d      	ldr	r3, [pc, #116]	; (8001d14 <ADC1_DMA_sort_lhb+0x9c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a1c      	ldr	r2, [pc, #112]	; (8001d14 <ADC1_DMA_sort_lhb+0x9c>)
 8001ca4:	6811      	ldr	r1, [r2, #0]
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	440b      	add	r3, r1
 8001cb6:	605a      	str	r2, [r3, #4]
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)  // Stores data on the lower half of IN1 channel data buffer
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	60bb      	str	r3, [r7, #8]
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8001cc4:	d9eb      	bls.n	8001c9e <ADC1_DMA_sort_lhb+0x26>
 8001cc6:	e016      	b.n	8001cf6 <ADC1_DMA_sort_lhb+0x7e>
            }
        }
		else  // Checks that the buffer register location is odd and loads the data
		{
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)  // Stores data on the lower half of IN2 channel data buffer
 8001cc8:	f240 2371 	movw	r3, #625	; 0x271
 8001ccc:	607b      	str	r3, [r7, #4]
 8001cce:	e00e      	b.n	8001cee <ADC1_DMA_sort_lhb+0x76>
			{
				ADC1_DMA_sort_ptr->ADC1_IN2_bfr[p]=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m];
 8001cd0:	4b10      	ldr	r3, [pc, #64]	; (8001d14 <ADC1_DMA_sort_lhb+0x9c>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4b0f      	ldr	r3, [pc, #60]	; (8001d14 <ADC1_DMA_sort_lhb+0x9c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68f9      	ldr	r1, [r7, #12]
 8001cda:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	f602 62a8 	addw	r2, r2, #3752	; 0xea8
 8001ce4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)  // Stores data on the lower half of IN2 channel data buffer
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3301      	adds	r3, #1
 8001cec:	607b      	str	r3, [r7, #4]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8001cf4:	d9ec      	bls.n	8001cd0 <ADC1_DMA_sort_lhb+0x58>
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++) // Scans the lower half of the DMA buffer
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f640 12c2 	movw	r2, #2498	; 0x9c2
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d9bf      	bls.n	8001c86 <ADC1_DMA_sort_lhb+0xe>
			}
		}
    }

};
 8001d06:	bf00      	nop
 8001d08:	bf00      	nop
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	20007cd4 	.word	0x20007cd4

08001d18 <ADC2_DMA_sort_uhb>:


void ADC2_DMA_sort_uhb (void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	e038      	b.n	8001d96 <ADC2_DMA_sort_uhb+0x7e>
	{
		if(m==0 || (m%2==0))
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d004      	beq.n	8001d34 <ADC2_DMA_sort_uhb+0x1c>
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d117      	bne.n	8001d64 <ADC2_DMA_sort_uhb+0x4c>
		{
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 8001d34:	2300      	movs	r3, #0
 8001d36:	60bb      	str	r3, [r7, #8]
 8001d38:	e00f      	b.n	8001d5a <ADC2_DMA_sort_uhb+0x42>
			{
				ADC2_DMA_sort_ptr->ADC2_IN3_bfr[n]=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m];
 8001d3a:	4b1c      	ldr	r3, [pc, #112]	; (8001dac <ADC2_DMA_sort_uhb+0x94>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a1b      	ldr	r2, [pc, #108]	; (8001dac <ADC2_DMA_sort_uhb+0x94>)
 8001d40:	6811      	ldr	r1, [r2, #0]
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	440b      	add	r3, r1
 8001d52:	605a      	str	r2, [r3, #4]
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	3301      	adds	r3, #1
 8001d58:	60bb      	str	r3, [r7, #8]
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8001d60:	d3eb      	bcc.n	8001d3a <ADC2_DMA_sort_uhb+0x22>
 8001d62:	e015      	b.n	8001d90 <ADC2_DMA_sort_uhb+0x78>
            }
        }
		else
		{
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 8001d64:	2300      	movs	r3, #0
 8001d66:	607b      	str	r3, [r7, #4]
 8001d68:	e00e      	b.n	8001d88 <ADC2_DMA_sort_uhb+0x70>
			{
				ADC2_DMA_sort_ptr->ADC2_IN4_bfr[p]=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m];
 8001d6a:	4b10      	ldr	r3, [pc, #64]	; (8001dac <ADC2_DMA_sort_uhb+0x94>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <ADC2_DMA_sort_uhb+0x94>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68f9      	ldr	r1, [r7, #12]
 8001d74:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	f602 62a8 	addw	r2, r2, #3752	; 0xea8
 8001d7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	3301      	adds	r3, #1
 8001d86:	607b      	str	r3, [r7, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8001d8e:	d3ec      	bcc.n	8001d6a <ADC2_DMA_sort_uhb+0x52>
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	3301      	adds	r3, #1
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8001d9c:	d9c2      	bls.n	8001d24 <ADC2_DMA_sort_uhb+0xc>
			}
		}
    }

};
 8001d9e:	bf00      	nop
 8001da0:	bf00      	nop
 8001da2:	3714      	adds	r7, #20
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	20007cd8 	.word	0x20007cd8

08001db0 <ADC2_DMA_sort_lhb>:


void ADC2_DMA_sort_lhb (void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 8001db6:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	e03a      	b.n	8001e34 <ADC2_DMA_sort_lhb+0x84>
	{
		if(m==0||(m%2==0))
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d004      	beq.n	8001dce <ADC2_DMA_sort_lhb+0x1e>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d118      	bne.n	8001e00 <ADC2_DMA_sort_lhb+0x50>
		{
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 8001dce:	f240 2371 	movw	r3, #625	; 0x271
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	e00f      	b.n	8001df6 <ADC2_DMA_sort_lhb+0x46>
			{
				ADC2_DMA_sort_ptr->ADC2_IN3_bfr[n]=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m];
 8001dd6:	4b1d      	ldr	r3, [pc, #116]	; (8001e4c <ADC2_DMA_sort_lhb+0x9c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a1c      	ldr	r2, [pc, #112]	; (8001e4c <ADC2_DMA_sort_lhb+0x9c>)
 8001ddc:	6811      	ldr	r1, [r2, #0]
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	440b      	add	r3, r1
 8001dee:	605a      	str	r2, [r3, #4]
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	3301      	adds	r3, #1
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8001dfc:	d9eb      	bls.n	8001dd6 <ADC2_DMA_sort_lhb+0x26>
 8001dfe:	e016      	b.n	8001e2e <ADC2_DMA_sort_lhb+0x7e>
            }
        }
		else
		{
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 8001e00:	f240 2371 	movw	r3, #625	; 0x271
 8001e04:	607b      	str	r3, [r7, #4]
 8001e06:	e00e      	b.n	8001e26 <ADC2_DMA_sort_lhb+0x76>
			{
				ADC2_DMA_sort_ptr->ADC2_IN4_bfr[p]=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m];
 8001e08:	4b10      	ldr	r3, [pc, #64]	; (8001e4c <ADC2_DMA_sort_lhb+0x9c>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <ADC2_DMA_sort_lhb+0x9c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68f9      	ldr	r1, [r7, #12]
 8001e12:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	f602 62a8 	addw	r2, r2, #3752	; 0xea8
 8001e1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3301      	adds	r3, #1
 8001e24:	607b      	str	r3, [r7, #4]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8001e2c:	d9ec      	bls.n	8001e08 <ADC2_DMA_sort_lhb+0x58>
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	3301      	adds	r3, #1
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f640 12c2 	movw	r2, #2498	; 0x9c2
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d9bf      	bls.n	8001dbe <ADC2_DMA_sort_lhb+0xe>
			}
		}
    }

};
 8001e3e:	bf00      	nop
 8001e40:	bf00      	nop
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	20007cd8 	.word	0x20007cd8

08001e50 <ADC3_DMA_sort_uhb>:


void ADC3_DMA_sort_uhb (void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 8001e56:	2300      	movs	r3, #0
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	e038      	b.n	8001ece <ADC3_DMA_sort_uhb+0x7e>
	{
		if(m==0 || (m%2==0))
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d004      	beq.n	8001e6c <ADC3_DMA_sort_uhb+0x1c>
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d117      	bne.n	8001e9c <ADC3_DMA_sort_uhb+0x4c>
		{
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	e00f      	b.n	8001e92 <ADC3_DMA_sort_uhb+0x42>
			{
				ADC3_DMA_sort_ptr->ADC3_IN1_bfr[n]=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m];
 8001e72:	4b1c      	ldr	r3, [pc, #112]	; (8001ee4 <ADC3_DMA_sort_uhb+0x94>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a1b      	ldr	r2, [pc, #108]	; (8001ee4 <ADC3_DMA_sort_uhb+0x94>)
 8001e78:	6811      	ldr	r1, [r2, #0]
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	440b      	add	r3, r1
 8001e8a:	605a      	str	r2, [r3, #4]
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	60bb      	str	r3, [r7, #8]
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8001e98:	d3eb      	bcc.n	8001e72 <ADC3_DMA_sort_uhb+0x22>
 8001e9a:	e015      	b.n	8001ec8 <ADC3_DMA_sort_uhb+0x78>
            }
        }
		else
		{
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	607b      	str	r3, [r7, #4]
 8001ea0:	e00e      	b.n	8001ec0 <ADC3_DMA_sort_uhb+0x70>
			{
				ADC3_DMA_sort_ptr->ADC3_IN2_bfr[p]=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m];
 8001ea2:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <ADC3_DMA_sort_uhb+0x94>)
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	4b0f      	ldr	r3, [pc, #60]	; (8001ee4 <ADC3_DMA_sort_uhb+0x94>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68f9      	ldr	r1, [r7, #12]
 8001eac:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	f602 62a8 	addw	r2, r2, #3752	; 0xea8
 8001eb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	607b      	str	r3, [r7, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8001ec6:	d3ec      	bcc.n	8001ea2 <ADC3_DMA_sort_uhb+0x52>
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8001ed4:	d9c2      	bls.n	8001e5c <ADC3_DMA_sort_uhb+0xc>
			}
		}
    }

};
 8001ed6:	bf00      	nop
 8001ed8:	bf00      	nop
 8001eda:	3714      	adds	r7, #20
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	20007cdc 	.word	0x20007cdc

08001ee8 <ADC3_DMA_sort_lhb>:

void ADC3_DMA_sort_lhb (void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 8001eee:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	e03a      	b.n	8001f6c <ADC3_DMA_sort_lhb+0x84>
	{
		if(m==0||(m%2==0))
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d004      	beq.n	8001f06 <ADC3_DMA_sort_lhb+0x1e>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d118      	bne.n	8001f38 <ADC3_DMA_sort_lhb+0x50>
		{
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 8001f06:	f240 2371 	movw	r3, #625	; 0x271
 8001f0a:	60bb      	str	r3, [r7, #8]
 8001f0c:	e00f      	b.n	8001f2e <ADC3_DMA_sort_lhb+0x46>
			{
				ADC3_DMA_sort_ptr->ADC3_IN1_bfr[n]=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m];
 8001f0e:	4b1d      	ldr	r3, [pc, #116]	; (8001f84 <ADC3_DMA_sort_lhb+0x9c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a1c      	ldr	r2, [pc, #112]	; (8001f84 <ADC3_DMA_sort_lhb+0x9c>)
 8001f14:	6811      	ldr	r1, [r2, #0]
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	440b      	add	r3, r1
 8001f26:	605a      	str	r2, [r3, #4]
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	60bb      	str	r3, [r7, #8]
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8001f34:	d9eb      	bls.n	8001f0e <ADC3_DMA_sort_lhb+0x26>
 8001f36:	e016      	b.n	8001f66 <ADC3_DMA_sort_lhb+0x7e>
            }
        }
		else
		{
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 8001f38:	f240 2371 	movw	r3, #625	; 0x271
 8001f3c:	607b      	str	r3, [r7, #4]
 8001f3e:	e00e      	b.n	8001f5e <ADC3_DMA_sort_lhb+0x76>
			{
				ADC3_DMA_sort_ptr->ADC3_IN2_bfr[p]=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m];
 8001f40:	4b10      	ldr	r3, [pc, #64]	; (8001f84 <ADC3_DMA_sort_lhb+0x9c>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <ADC3_DMA_sort_lhb+0x9c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68f9      	ldr	r1, [r7, #12]
 8001f4a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	f602 62a8 	addw	r2, r2, #3752	; 0xea8
 8001f54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	607b      	str	r3, [r7, #4]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8001f64:	d9ec      	bls.n	8001f40 <ADC3_DMA_sort_lhb+0x58>
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f640 12c2 	movw	r2, #2498	; 0x9c2
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d9bf      	bls.n	8001ef6 <ADC3_DMA_sort_lhb+0xe>
			}
		}
    }

};
 8001f76:	bf00      	nop
 8001f78:	bf00      	nop
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	20007cdc 	.word	0x20007cdc

08001f88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b092      	sub	sp, #72	; 0x48
 8001f8c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f8e:	f001 fa0a 	bl	80033a6 <HAL_Init>

  /* USER CODE BEGIN Init */
  init_ADC1_IN1_struct(); // Pointer to the source buffer is initialized at runtime
 8001f92:	f7ff f9d5 	bl	8001340 <init_ADC1_IN1_struct>
  init_ADC1_IN1_FO_biquad_filter();  // Initializes the filter coefficients and variables
 8001f96:	f7ff f9e5 	bl	8001364 <init_ADC1_IN1_FO_biquad_filter>
  MA_ADC1_IN1_Init(&MovingAverage_ADC1_IN1); // Initializes all the output and moving average buffers to zero and the index to zero
 8001f9a:	48b3      	ldr	r0, [pc, #716]	; (8002268 <main+0x2e0>)
 8001f9c:	f7fe fdf8 	bl	8000b90 <MA_ADC1_IN1_Init>

  init_ADC1_IN2_struct();
 8001fa0:	f7ff fa0a 	bl	80013b8 <init_ADC1_IN2_struct>
  init_ADC1_IN2_FO_biquad_filter();
 8001fa4:	f7ff fa1a 	bl	80013dc <init_ADC1_IN2_FO_biquad_filter>
  MA_ADC1_IN2_Init(&MovingAverage_ADC1_IN2);
 8001fa8:	48b0      	ldr	r0, [pc, #704]	; (800226c <main+0x2e4>)
 8001faa:	f7fe fe95 	bl	8000cd8 <MA_ADC1_IN2_Init>

  init_ADC2_IN3_struct();
 8001fae:	f7ff fa3f 	bl	8001430 <init_ADC2_IN3_struct>
  init_ADC2_IN3_FO_biquad_filter();
 8001fb2:	f7ff fa4f 	bl	8001454 <init_ADC2_IN3_FO_biquad_filter>
  MA_ADC2_IN3_Init(&MovingAverage_ADC2_IN3);
 8001fb6:	48ae      	ldr	r0, [pc, #696]	; (8002270 <main+0x2e8>)
 8001fb8:	f7fe ff32 	bl	8000e20 <MA_ADC2_IN3_Init>

  init_ADC2_IN4_struct();
 8001fbc:	f7ff fa74 	bl	80014a8 <init_ADC2_IN4_struct>
  init_ADC2_IN4_FO_biquad_filter();
 8001fc0:	f7ff fa84 	bl	80014cc <init_ADC2_IN4_FO_biquad_filter>
  MA_ADC2_IN4_Init(&MovingAverage_ADC2_IN4);
 8001fc4:	48ab      	ldr	r0, [pc, #684]	; (8002274 <main+0x2ec>)
 8001fc6:	f7fe ffcf 	bl	8000f68 <MA_ADC2_IN4_Init>

  init_ADC3_IN1_struct();
 8001fca:	f7ff faa9 	bl	8001520 <init_ADC3_IN1_struct>
  init_ADC3_IN1_FO_biquad_filter();
 8001fce:	f7ff fab9 	bl	8001544 <init_ADC3_IN1_FO_biquad_filter>
  MA_ADC3_IN1_Init(&MovingAverage_ADC3_IN1);
 8001fd2:	48a9      	ldr	r0, [pc, #676]	; (8002278 <main+0x2f0>)
 8001fd4:	f7ff f86c 	bl	80010b0 <MA_ADC3_IN1_Init>

  init_ADC3_IN2_struct();
 8001fd8:	f7ff fade 	bl	8001598 <init_ADC3_IN2_struct>
  init_ADC3_IN2_FO_biquad_filter();
 8001fdc:	f7ff faee 	bl	80015bc <init_ADC3_IN2_FO_biquad_filter>
  MA_ADC3_IN2_Init(&MovingAverage_ADC3_IN2);
 8001fe0:	48a6      	ldr	r0, [pc, #664]	; (800227c <main+0x2f4>)
 8001fe2:	f7ff f909 	bl	80011f8 <MA_ADC3_IN2_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fe6:	f000 faff 	bl	80025e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fea:	f000 fddb 	bl	8002ba4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001fee:	f000 fd93 	bl	8002b18 <MX_DMA_Init>
  MX_ADC1_Init();
 8001ff2:	f000 fb43 	bl	800267c <MX_ADC1_Init>
  MX_ADC2_Init();
 8001ff6:	f000 fbcb 	bl	8002790 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001ffa:	f000 fc41 	bl	8002880 <MX_ADC3_Init>
  MX_FMAC_Init();
 8001ffe:	f000 fcb7 	bl	8002970 <MX_FMAC_Init>
  MX_TIM6_Init();
 8002002:	f000 fcc9 	bl	8002998 <MX_TIM6_Init>
  MX_TIM7_Init();
 8002006:	f000 fcfd 	bl	8002a04 <MX_TIM7_Init>
  MX_TIM20_Init();
 800200a:	f000 fd31 	bl	8002a70 <MX_TIM20_Init>
  /* USER CODE BEGIN 2 */
	
  //ADC1 is started using timer 6 tiggered conversions
  HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim6);
    ADC_status=HAL_ADC_Start_DMA(&hadc1, ADC1_DMA_sort_ptr->ADC1_DMA_bfr,ADC_DMA_BUFFERSIZE);
 800200e:	4b9c      	ldr	r3, [pc, #624]	; (8002280 <main+0x2f8>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002016:	4619      	mov	r1, r3
 8002018:	489a      	ldr	r0, [pc, #616]	; (8002284 <main+0x2fc>)
 800201a:	f001 fe01 	bl	8003c20 <HAL_ADC_Start_DMA>
 800201e:	4603      	mov	r3, r0
 8002020:	461a      	mov	r2, r3
 8002022:	4b99      	ldr	r3, [pc, #612]	; (8002288 <main+0x300>)
 8002024:	701a      	strb	r2, [r3, #0]

  HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim7);
    ADC_status=HAL_ADC_Start_DMA(&hadc2, ADC2_DMA_sort_ptr->ADC2_DMA_bfr,ADC_DMA_BUFFERSIZE);
 8002026:	4b99      	ldr	r3, [pc, #612]	; (800228c <main+0x304>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800202e:	4619      	mov	r1, r3
 8002030:	4897      	ldr	r0, [pc, #604]	; (8002290 <main+0x308>)
 8002032:	f001 fdf5 	bl	8003c20 <HAL_ADC_Start_DMA>
 8002036:	4603      	mov	r3, r0
 8002038:	461a      	mov	r2, r3
 800203a:	4b93      	ldr	r3, [pc, #588]	; (8002288 <main+0x300>)
 800203c:	701a      	strb	r2, [r3, #0]

  HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim20);
    ADC_status=HAL_ADC_Start_DMA(&hadc3, ADC3_DMA_sort_ptr->ADC3_DMA_bfr,ADC_DMA_BUFFERSIZE);
 800203e:	4b95      	ldr	r3, [pc, #596]	; (8002294 <main+0x30c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002046:	4619      	mov	r1, r3
 8002048:	4893      	ldr	r0, [pc, #588]	; (8002298 <main+0x310>)
 800204a:	f001 fde9 	bl	8003c20 <HAL_ADC_Start_DMA>
 800204e:	4603      	mov	r3, r0
 8002050:	461a      	mov	r2, r3
 8002052:	4b8d      	ldr	r3, [pc, #564]	; (8002288 <main+0x300>)
 8002054:	701a      	strb	r2, [r3, #0]

if(Offset_1_Calculated==0)
 8002056:	4b91      	ldr	r3, [pc, #580]	; (800229c <main+0x314>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d13b      	bne.n	80020d6 <main+0x14e>
{
  float32_t OffsetSum_1;
  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++) // Calculates the mean and standard deviation for the baseline of the signal for the first n buffer fills where n= NOOFITERATIONS_BL
 800205e:	2300      	movs	r3, #0
 8002060:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8002064:	e01a      	b.n	800209c <main+0x114>
    {
		/* Collects samples to fill the buffer */
		update_ADC1_IN1_FO_biquad_filter();  // Filters channel 1 data
 8002066:	f7ff f98f 	bl	8001388 <update_ADC1_IN1_FO_biquad_filter>
		MA_ADC1_IN1_Update(&MovingAverage_ADC1_IN1);  // Fill the buffer with ADC data
 800206a:	487f      	ldr	r0, [pc, #508]	; (8002268 <main+0x2e0>)
 800206c:	f7fe fdc2 	bl	8000bf4 <MA_ADC1_IN1_Update>

		// Calculate the offset from the filled buffer
		Offset_1 = ADC1_IN1_OffsetCalc(&OffsetCalc_ADC1_IN1);
 8002070:	488b      	ldr	r0, [pc, #556]	; (80022a0 <main+0x318>)
 8002072:	f7ff facd 	bl	8001610 <ADC1_IN1_OffsetCalc>
 8002076:	eef0 7a40 	vmov.f32	s15, s0
 800207a:	4b8a      	ldr	r3, [pc, #552]	; (80022a4 <main+0x31c>)
 800207c:	edc3 7a00 	vstr	s15, [r3]
		OffsetSum_1 += Offset_1;
 8002080:	4b88      	ldr	r3, [pc, #544]	; (80022a4 <main+0x31c>)
 8002082:	edd3 7a00 	vldr	s15, [r3]
 8002086:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800208a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800208e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++) // Calculates the mean and standard deviation for the baseline of the signal for the first n buffer fills where n= NOOFITERATIONS_BL
 8002092:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002096:	3301      	adds	r3, #1
 8002098:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800209c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80020a0:	2b13      	cmp	r3, #19
 80020a2:	d9e0      	bls.n	8002066 <main+0xde>
    }

  Offset_1 = OffsetSum_1 / NOOFITERATIONS_BL;
 80020a4:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80020a8:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80020ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020b0:	4b7c      	ldr	r3, [pc, #496]	; (80022a4 <main+0x31c>)
 80020b2:	edc3 7a00 	vstr	s15, [r3]
  Offset_1_Calculated = 1; // Set the flag indicating offset has been calculated
 80020b6:	4b79      	ldr	r3, [pc, #484]	; (800229c <main+0x314>)
 80020b8:	2201      	movs	r2, #1
 80020ba:	701a      	strb	r2, [r3, #0]

  SD_BL_1 = ADC1_IN1_SD_BL(&SD_BL_ADC1_IN1, Offset_1);
 80020bc:	4b79      	ldr	r3, [pc, #484]	; (80022a4 <main+0x31c>)
 80020be:	edd3 7a00 	vldr	s15, [r3]
 80020c2:	eeb0 0a67 	vmov.f32	s0, s15
 80020c6:	4878      	ldr	r0, [pc, #480]	; (80022a8 <main+0x320>)
 80020c8:	f7ff fbc2 	bl	8001850 <ADC1_IN1_SD_BL>
 80020cc:	eef0 7a40 	vmov.f32	s15, s0
 80020d0:	4b76      	ldr	r3, [pc, #472]	; (80022ac <main+0x324>)
 80020d2:	edc3 7a00 	vstr	s15, [r3]
}


if(Offset_2_Calculated==0)
 80020d6:	4b76      	ldr	r3, [pc, #472]	; (80022b0 <main+0x328>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d13b      	bne.n	8002156 <main+0x1ce>
{
  float32_t OffsetSum_2;
  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++) // Calculates the mean and standard deviation for the baseline of the signal for the first n buffer fills where n= NOOFITERATIONS_BL
 80020de:	2300      	movs	r3, #0
 80020e0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80020e4:	e01a      	b.n	800211c <main+0x194>
    {
		/* Collects samples to fill the buffer */
		update_ADC1_IN2_FO_biquad_filter();  // Filters channel 1 data
 80020e6:	f7ff f98b 	bl	8001400 <update_ADC1_IN2_FO_biquad_filter>
		MA_ADC1_IN2_Update(&MovingAverage_ADC1_IN2);  // Fill the buffer with ADC data
 80020ea:	4860      	ldr	r0, [pc, #384]	; (800226c <main+0x2e4>)
 80020ec:	f7fe fe26 	bl	8000d3c <MA_ADC1_IN2_Update>

		// Calculate the offset from the filled buffer
		Offset_2 = ADC1_IN2_OffsetCalc(&OffsetCalc_ADC1_IN2);
 80020f0:	4870      	ldr	r0, [pc, #448]	; (80022b4 <main+0x32c>)
 80020f2:	f7ff fabd 	bl	8001670 <ADC1_IN2_OffsetCalc>
 80020f6:	eef0 7a40 	vmov.f32	s15, s0
 80020fa:	4b6f      	ldr	r3, [pc, #444]	; (80022b8 <main+0x330>)
 80020fc:	edc3 7a00 	vstr	s15, [r3]
		OffsetSum_2 += Offset_2;
 8002100:	4b6d      	ldr	r3, [pc, #436]	; (80022b8 <main+0x330>)
 8002102:	edd3 7a00 	vldr	s15, [r3]
 8002106:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800210a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800210e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++) // Calculates the mean and standard deviation for the baseline of the signal for the first n buffer fills where n= NOOFITERATIONS_BL
 8002112:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002116:	3301      	adds	r3, #1
 8002118:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800211c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002120:	2b13      	cmp	r3, #19
 8002122:	d9e0      	bls.n	80020e6 <main+0x15e>
    }

  Offset_2 = OffsetSum_2 / NOOFITERATIONS_BL;
 8002124:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002128:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800212c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002130:	4b61      	ldr	r3, [pc, #388]	; (80022b8 <main+0x330>)
 8002132:	edc3 7a00 	vstr	s15, [r3]
  Offset_2_Calculated = 1; // Set the flag indicating offset has been calculated
 8002136:	4b5e      	ldr	r3, [pc, #376]	; (80022b0 <main+0x328>)
 8002138:	2201      	movs	r2, #1
 800213a:	701a      	strb	r2, [r3, #0]

  SD_BL_2 = ADC1_IN2_SD_BL(&SD_BL_ADC1_IN2, Offset_2);
 800213c:	4b5e      	ldr	r3, [pc, #376]	; (80022b8 <main+0x330>)
 800213e:	edd3 7a00 	vldr	s15, [r3]
 8002142:	eeb0 0a67 	vmov.f32	s0, s15
 8002146:	485d      	ldr	r0, [pc, #372]	; (80022bc <main+0x334>)
 8002148:	f7ff fbce 	bl	80018e8 <ADC1_IN2_SD_BL>
 800214c:	eef0 7a40 	vmov.f32	s15, s0
 8002150:	4b5b      	ldr	r3, [pc, #364]	; (80022c0 <main+0x338>)
 8002152:	edc3 7a00 	vstr	s15, [r3]
}


if(Offset_3_Calculated==0)
 8002156:	4b5b      	ldr	r3, [pc, #364]	; (80022c4 <main+0x33c>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d13b      	bne.n	80021d6 <main+0x24e>
{
  float32_t OffsetSum_3;
  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++) // Calculates the mean and standard deviation for the baseline of the signal for the first n buffer fills where n= NOOFITERATIONS_BL
 800215e:	2300      	movs	r3, #0
 8002160:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002164:	e01a      	b.n	800219c <main+0x214>
    {
		/* Collects samples to fill the buffer */
		update_ADC2_IN3_FO_biquad_filter();  // Filters channel 1 data
 8002166:	f7ff f987 	bl	8001478 <update_ADC2_IN3_FO_biquad_filter>
		MA_ADC2_IN3_Update(&MovingAverage_ADC2_IN3);  // Fill the buffer with ADC data
 800216a:	4841      	ldr	r0, [pc, #260]	; (8002270 <main+0x2e8>)
 800216c:	f7fe fe8a 	bl	8000e84 <MA_ADC2_IN3_Update>

		// Calculate the offset from the filled buffer
		Offset_3 = ADC2_IN3_OffsetCalc(&OffsetCalc_ADC2_IN3);
 8002170:	4855      	ldr	r0, [pc, #340]	; (80022c8 <main+0x340>)
 8002172:	f7ff faad 	bl	80016d0 <ADC2_IN3_OffsetCalc>
 8002176:	eef0 7a40 	vmov.f32	s15, s0
 800217a:	4b54      	ldr	r3, [pc, #336]	; (80022cc <main+0x344>)
 800217c:	edc3 7a00 	vstr	s15, [r3]
		OffsetSum_3 += Offset_3;
 8002180:	4b52      	ldr	r3, [pc, #328]	; (80022cc <main+0x344>)
 8002182:	edd3 7a00 	vldr	s15, [r3]
 8002186:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800218a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800218e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++) // Calculates the mean and standard deviation for the baseline of the signal for the first n buffer fills where n= NOOFITERATIONS_BL
 8002192:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002196:	3301      	adds	r3, #1
 8002198:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800219c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80021a0:	2b13      	cmp	r3, #19
 80021a2:	d9e0      	bls.n	8002166 <main+0x1de>
    }

  Offset_3 = OffsetSum_3 / NOOFITERATIONS_BL;
 80021a4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80021a8:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80021ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021b0:	4b46      	ldr	r3, [pc, #280]	; (80022cc <main+0x344>)
 80021b2:	edc3 7a00 	vstr	s15, [r3]
  Offset_3_Calculated = 1; // Set the flag indicating offset has been calculated
 80021b6:	4b43      	ldr	r3, [pc, #268]	; (80022c4 <main+0x33c>)
 80021b8:	2201      	movs	r2, #1
 80021ba:	701a      	strb	r2, [r3, #0]

  SD_BL_3 = ADC2_IN3_SD_BL(&SD_BL_ADC2_IN3, Offset_3);
 80021bc:	4b43      	ldr	r3, [pc, #268]	; (80022cc <main+0x344>)
 80021be:	edd3 7a00 	vldr	s15, [r3]
 80021c2:	eeb0 0a67 	vmov.f32	s0, s15
 80021c6:	4842      	ldr	r0, [pc, #264]	; (80022d0 <main+0x348>)
 80021c8:	f7ff fbda 	bl	8001980 <ADC2_IN3_SD_BL>
 80021cc:	eef0 7a40 	vmov.f32	s15, s0
 80021d0:	4b40      	ldr	r3, [pc, #256]	; (80022d4 <main+0x34c>)
 80021d2:	edc3 7a00 	vstr	s15, [r3]
}


if(Offset_4_Calculated==0)
 80021d6:	4b40      	ldr	r3, [pc, #256]	; (80022d8 <main+0x350>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d13b      	bne.n	8002256 <main+0x2ce>
{
  float32_t OffsetSum_4;
  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++) // Calculates the mean and standard deviation for the baseline of the signal for the first n buffer fills where n= NOOFITERATIONS_BL
 80021de:	2300      	movs	r3, #0
 80021e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80021e4:	e01a      	b.n	800221c <main+0x294>
    {
		/* Collects samples to fill the buffer */
		update_ADC2_IN4_FO_biquad_filter();  // Filters channel 1 data
 80021e6:	f7ff f983 	bl	80014f0 <update_ADC2_IN4_FO_biquad_filter>
		MA_ADC2_IN4_Update(&MovingAverage_ADC2_IN4);  // Fill the buffer with ADC data
 80021ea:	4822      	ldr	r0, [pc, #136]	; (8002274 <main+0x2ec>)
 80021ec:	f7fe feee 	bl	8000fcc <MA_ADC2_IN4_Update>

		// Calculate the offset from the filled buffer
		Offset_4 = ADC2_IN4_OffsetCalc(&OffsetCalc_ADC2_IN4);
 80021f0:	483a      	ldr	r0, [pc, #232]	; (80022dc <main+0x354>)
 80021f2:	f7ff fa9d 	bl	8001730 <ADC2_IN4_OffsetCalc>
 80021f6:	eef0 7a40 	vmov.f32	s15, s0
 80021fa:	4b39      	ldr	r3, [pc, #228]	; (80022e0 <main+0x358>)
 80021fc:	edc3 7a00 	vstr	s15, [r3]
		OffsetSum_4 += Offset_4;
 8002200:	4b37      	ldr	r3, [pc, #220]	; (80022e0 <main+0x358>)
 8002202:	edd3 7a00 	vldr	s15, [r3]
 8002206:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800220a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800220e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++) // Calculates the mean and standard deviation for the baseline of the signal for the first n buffer fills where n= NOOFITERATIONS_BL
 8002212:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002216:	3301      	adds	r3, #1
 8002218:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800221c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002220:	2b13      	cmp	r3, #19
 8002222:	d9e0      	bls.n	80021e6 <main+0x25e>
    }

  Offset_4 = OffsetSum_4 / NOOFITERATIONS_BL;
 8002224:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002228:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800222c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002230:	4b2b      	ldr	r3, [pc, #172]	; (80022e0 <main+0x358>)
 8002232:	edc3 7a00 	vstr	s15, [r3]
  Offset_4_Calculated = 1; // Set the flag indicating offset has been calculated
 8002236:	4b28      	ldr	r3, [pc, #160]	; (80022d8 <main+0x350>)
 8002238:	2201      	movs	r2, #1
 800223a:	701a      	strb	r2, [r3, #0]

  SD_BL_4 = ADC2_IN4_SD_BL(&SD_BL_ADC2_IN4, Offset_4);
 800223c:	4b28      	ldr	r3, [pc, #160]	; (80022e0 <main+0x358>)
 800223e:	edd3 7a00 	vldr	s15, [r3]
 8002242:	eeb0 0a67 	vmov.f32	s0, s15
 8002246:	4827      	ldr	r0, [pc, #156]	; (80022e4 <main+0x35c>)
 8002248:	f7ff fbe6 	bl	8001a18 <ADC2_IN4_SD_BL>
 800224c:	eef0 7a40 	vmov.f32	s15, s0
 8002250:	4b25      	ldr	r3, [pc, #148]	; (80022e8 <main+0x360>)
 8002252:	edc3 7a00 	vstr	s15, [r3]
}


if(Offset_5_Calculated==0)
 8002256:	4b25      	ldr	r3, [pc, #148]	; (80022ec <main+0x364>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	2b00      	cmp	r3, #0
 800225c:	f040 8080 	bne.w	8002360 <main+0x3d8>
{
  float32_t OffsetSum_5;
  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++) // Calculates the mean and standard deviation for the baseline of the signal for the first n buffer fills where n= NOOFITERATIONS_BL
 8002260:	2300      	movs	r3, #0
 8002262:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002266:	e05e      	b.n	8002326 <main+0x39e>
 8002268:	20007ce0 	.word	0x20007ce0
 800226c:	20007f78 	.word	0x20007f78
 8002270:	20008210 	.word	0x20008210
 8002274:	200084a8 	.word	0x200084a8
 8002278:	20008740 	.word	0x20008740
 800227c:	200089d8 	.word	0x200089d8
 8002280:	20007cd4 	.word	0x20007cd4
 8002284:	20007954 	.word	0x20007954
 8002288:	2000ab90 	.word	0x2000ab90
 800228c:	20007cd8 	.word	0x20007cd8
 8002290:	200079c0 	.word	0x200079c0
 8002294:	20007cdc 	.word	0x20007cdc
 8002298:	20007a2c 	.word	0x20007a2c
 800229c:	2000abac 	.word	0x2000abac
 80022a0:	20008c70 	.word	0x20008c70
 80022a4:	2000ab94 	.word	0x2000ab94
 80022a8:	20009c00 	.word	0x20009c00
 80022ac:	2000abb4 	.word	0x2000abb4
 80022b0:	2000abad 	.word	0x2000abad
 80022b4:	20008f08 	.word	0x20008f08
 80022b8:	2000ab98 	.word	0x2000ab98
 80022bc:	20009e98 	.word	0x20009e98
 80022c0:	2000abb8 	.word	0x2000abb8
 80022c4:	2000abae 	.word	0x2000abae
 80022c8:	200091a0 	.word	0x200091a0
 80022cc:	2000ab9c 	.word	0x2000ab9c
 80022d0:	2000a130 	.word	0x2000a130
 80022d4:	2000abbc 	.word	0x2000abbc
 80022d8:	2000abaf 	.word	0x2000abaf
 80022dc:	20009438 	.word	0x20009438
 80022e0:	2000aba0 	.word	0x2000aba0
 80022e4:	2000a3c8 	.word	0x2000a3c8
 80022e8:	2000abc0 	.word	0x2000abc0
 80022ec:	2000abb0 	.word	0x2000abb0
    {
		/* Collects samples to fill the buffer */
		update_ADC3_IN1_FO_biquad_filter();  // Filters channel 1 data
 80022f0:	f7ff f93a 	bl	8001568 <update_ADC3_IN1_FO_biquad_filter>
		MA_ADC3_IN1_Update(&MovingAverage_ADC3_IN1);  // Fill the buffer with ADC data
 80022f4:	48a8      	ldr	r0, [pc, #672]	; (8002598 <main+0x610>)
 80022f6:	f7fe ff0d 	bl	8001114 <MA_ADC3_IN1_Update>

		// Calculate the offset from the filled buffer
		Offset_1 = ADC3_IN1_OffsetCalc(&OffsetCalc_ADC3_IN1);
 80022fa:	48a8      	ldr	r0, [pc, #672]	; (800259c <main+0x614>)
 80022fc:	f7ff fa48 	bl	8001790 <ADC3_IN1_OffsetCalc>
 8002300:	eef0 7a40 	vmov.f32	s15, s0
 8002304:	4ba6      	ldr	r3, [pc, #664]	; (80025a0 <main+0x618>)
 8002306:	edc3 7a00 	vstr	s15, [r3]
		OffsetSum_5 += Offset_5;
 800230a:	4ba6      	ldr	r3, [pc, #664]	; (80025a4 <main+0x61c>)
 800230c:	edd3 7a00 	vldr	s15, [r3]
 8002310:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002314:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002318:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++) // Calculates the mean and standard deviation for the baseline of the signal for the first n buffer fills where n= NOOFITERATIONS_BL
 800231c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002320:	3301      	adds	r3, #1
 8002322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002326:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800232a:	2b13      	cmp	r3, #19
 800232c:	d9e0      	bls.n	80022f0 <main+0x368>
    }

  Offset_5 = OffsetSum_5 / NOOFITERATIONS_BL;
 800232e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002332:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8002336:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800233a:	4b9a      	ldr	r3, [pc, #616]	; (80025a4 <main+0x61c>)
 800233c:	edc3 7a00 	vstr	s15, [r3]
  Offset_5_Calculated = 1; // Set the flag indicating offset has been calculated
 8002340:	4b99      	ldr	r3, [pc, #612]	; (80025a8 <main+0x620>)
 8002342:	2201      	movs	r2, #1
 8002344:	701a      	strb	r2, [r3, #0]

  SD_BL_5 = ADC3_IN1_SD_BL(&SD_BL_ADC3_IN1, Offset_5);
 8002346:	4b97      	ldr	r3, [pc, #604]	; (80025a4 <main+0x61c>)
 8002348:	edd3 7a00 	vldr	s15, [r3]
 800234c:	eeb0 0a67 	vmov.f32	s0, s15
 8002350:	4896      	ldr	r0, [pc, #600]	; (80025ac <main+0x624>)
 8002352:	f7ff fbad 	bl	8001ab0 <ADC3_IN1_SD_BL>
 8002356:	eef0 7a40 	vmov.f32	s15, s0
 800235a:	4b95      	ldr	r3, [pc, #596]	; (80025b0 <main+0x628>)
 800235c:	edc3 7a00 	vstr	s15, [r3]
}


if(Offset_6_Calculated==0)
 8002360:	4b94      	ldr	r3, [pc, #592]	; (80025b4 <main+0x62c>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d137      	bne.n	80023d8 <main+0x450>
{
  float32_t OffsetSum_6;
  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++) // Calculates the mean and standard deviation for the baseline of the signal for the first n buffer fills where n= NOOFITERATIONS_BL
 8002368:	2300      	movs	r3, #0
 800236a:	76fb      	strb	r3, [r7, #27]
 800236c:	e018      	b.n	80023a0 <main+0x418>
    {
		/* Collects samples to fill the buffer */
		update_ADC3_IN2_FO_biquad_filter();  // Filters channel 1 data
 800236e:	f7ff f937 	bl	80015e0 <update_ADC3_IN2_FO_biquad_filter>
		MA_ADC3_IN2_Update(&MovingAverage_ADC3_IN2);  // Fill the buffer with ADC data
 8002372:	4891      	ldr	r0, [pc, #580]	; (80025b8 <main+0x630>)
 8002374:	f7fe ff72 	bl	800125c <MA_ADC3_IN2_Update>

		// Calculate the offset from the filled buffer
		Offset_6 = ADC3_IN2_OffsetCalc(&OffsetCalc_ADC3_IN2);
 8002378:	4890      	ldr	r0, [pc, #576]	; (80025bc <main+0x634>)
 800237a:	f7ff fa39 	bl	80017f0 <ADC3_IN2_OffsetCalc>
 800237e:	eef0 7a40 	vmov.f32	s15, s0
 8002382:	4b8f      	ldr	r3, [pc, #572]	; (80025c0 <main+0x638>)
 8002384:	edc3 7a00 	vstr	s15, [r3]
		OffsetSum_6 += Offset_6;
 8002388:	4b8d      	ldr	r3, [pc, #564]	; (80025c0 <main+0x638>)
 800238a:	edd3 7a00 	vldr	s15, [r3]
 800238e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002392:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002396:	edc7 7a07 	vstr	s15, [r7, #28]
  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++) // Calculates the mean and standard deviation for the baseline of the signal for the first n buffer fills where n= NOOFITERATIONS_BL
 800239a:	7efb      	ldrb	r3, [r7, #27]
 800239c:	3301      	adds	r3, #1
 800239e:	76fb      	strb	r3, [r7, #27]
 80023a0:	7efb      	ldrb	r3, [r7, #27]
 80023a2:	2b13      	cmp	r3, #19
 80023a4:	d9e3      	bls.n	800236e <main+0x3e6>
    }

  Offset_6 = OffsetSum_6 / NOOFITERATIONS_BL;
 80023a6:	ed97 7a07 	vldr	s14, [r7, #28]
 80023aa:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80023ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023b2:	4b83      	ldr	r3, [pc, #524]	; (80025c0 <main+0x638>)
 80023b4:	edc3 7a00 	vstr	s15, [r3]
  Offset_6_Calculated = 1; // Set the flag indicating offset has been calculated
 80023b8:	4b7e      	ldr	r3, [pc, #504]	; (80025b4 <main+0x62c>)
 80023ba:	2201      	movs	r2, #1
 80023bc:	701a      	strb	r2, [r3, #0]

  SD_BL_6 = ADC3_IN2_SD_BL(&SD_BL_ADC3_IN2, Offset_6);
 80023be:	4b80      	ldr	r3, [pc, #512]	; (80025c0 <main+0x638>)
 80023c0:	edd3 7a00 	vldr	s15, [r3]
 80023c4:	eeb0 0a67 	vmov.f32	s0, s15
 80023c8:	487e      	ldr	r0, [pc, #504]	; (80025c4 <main+0x63c>)
 80023ca:	f7ff fbbd 	bl	8001b48 <ADC3_IN2_SD_BL>
 80023ce:	eef0 7a40 	vmov.f32	s15, s0
 80023d2:	4b7d      	ldr	r3, [pc, #500]	; (80025c8 <main+0x640>)
 80023d4:	edc3 7a00 	vstr	s15, [r3]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  update_ADC1_IN1_FO_biquad_filter();  // Filters channel 1 data
 80023d8:	f7fe ffd6 	bl	8001388 <update_ADC1_IN1_FO_biquad_filter>
	  MA_ADC1_IN1_Update(&MovingAverage_ADC1_IN1);
 80023dc:	487b      	ldr	r0, [pc, #492]	; (80025cc <main+0x644>)
 80023de:	f7fe fc09 	bl	8000bf4 <MA_ADC1_IN1_Update>
	  for (uint32_t y = 0; y < ADC_DMA_HALFBUFFERSIZE; y++)
 80023e2:	2300      	movs	r3, #0
 80023e4:	617b      	str	r3, [r7, #20]
 80023e6:	e017      	b.n	8002418 <main+0x490>
	  {
		  MovingAverage_ADC1_IN1.MA_ADC1_IN1_OutBfr[y]  -= Offset_1; // Subtract the stored offset
 80023e8:	4a78      	ldr	r2, [pc, #480]	; (80025cc <main+0x644>)
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	3308      	adds	r3, #8
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	3304      	adds	r3, #4
 80023f4:	ed93 7a00 	vldr	s14, [r3]
 80023f8:	4b69      	ldr	r3, [pc, #420]	; (80025a0 <main+0x618>)
 80023fa:	edd3 7a00 	vldr	s15, [r3]
 80023fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002402:	4a72      	ldr	r2, [pc, #456]	; (80025cc <main+0x644>)
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	3308      	adds	r3, #8
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	3304      	adds	r3, #4
 800240e:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t y = 0; y < ADC_DMA_HALFBUFFERSIZE; y++)
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	3301      	adds	r3, #1
 8002416:	617b      	str	r3, [r7, #20]
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800241e:	4293      	cmp	r3, r2
 8002420:	d9e2      	bls.n	80023e8 <main+0x460>
	  }



	  update_ADC1_IN2_FO_biquad_filter();
 8002422:	f7fe ffed 	bl	8001400 <update_ADC1_IN2_FO_biquad_filter>
	  MA_ADC1_IN2_Update(&MovingAverage_ADC1_IN2);
 8002426:	486a      	ldr	r0, [pc, #424]	; (80025d0 <main+0x648>)
 8002428:	f7fe fc88 	bl	8000d3c <MA_ADC1_IN2_Update>
	  for (uint32_t z = 0; z < ADC_DMA_HALFBUFFERSIZE; z++)
 800242c:	2300      	movs	r3, #0
 800242e:	613b      	str	r3, [r7, #16]
 8002430:	e017      	b.n	8002462 <main+0x4da>
	  {
		  MovingAverage_ADC1_IN2.MA_ADC1_IN2_OutBfr[z]  -= Offset_2;
 8002432:	4a67      	ldr	r2, [pc, #412]	; (80025d0 <main+0x648>)
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	3308      	adds	r3, #8
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	3304      	adds	r3, #4
 800243e:	ed93 7a00 	vldr	s14, [r3]
 8002442:	4b64      	ldr	r3, [pc, #400]	; (80025d4 <main+0x64c>)
 8002444:	edd3 7a00 	vldr	s15, [r3]
 8002448:	ee77 7a67 	vsub.f32	s15, s14, s15
 800244c:	4a60      	ldr	r2, [pc, #384]	; (80025d0 <main+0x648>)
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	3308      	adds	r3, #8
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	4413      	add	r3, r2
 8002456:	3304      	adds	r3, #4
 8002458:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t z = 0; z < ADC_DMA_HALFBUFFERSIZE; z++)
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	3301      	adds	r3, #1
 8002460:	613b      	str	r3, [r7, #16]
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8002468:	4293      	cmp	r3, r2
 800246a:	d9e2      	bls.n	8002432 <main+0x4aa>
	  }



	  update_ADC2_IN3_FO_biquad_filter();
 800246c:	f7ff f804 	bl	8001478 <update_ADC2_IN3_FO_biquad_filter>
	  MA_ADC2_IN3_Update(&MovingAverage_ADC2_IN3);
 8002470:	4859      	ldr	r0, [pc, #356]	; (80025d8 <main+0x650>)
 8002472:	f7fe fd07 	bl	8000e84 <MA_ADC2_IN3_Update>
	  for (uint32_t g = 0; g < ADC_DMA_HALFBUFFERSIZE; g++)
 8002476:	2300      	movs	r3, #0
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	e017      	b.n	80024ac <main+0x524>
	  {
		  MovingAverage_ADC2_IN3.MA_ADC2_IN3_OutBfr[g]  -= Offset_3;
 800247c:	4a56      	ldr	r2, [pc, #344]	; (80025d8 <main+0x650>)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	3308      	adds	r3, #8
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4413      	add	r3, r2
 8002486:	3304      	adds	r3, #4
 8002488:	ed93 7a00 	vldr	s14, [r3]
 800248c:	4b53      	ldr	r3, [pc, #332]	; (80025dc <main+0x654>)
 800248e:	edd3 7a00 	vldr	s15, [r3]
 8002492:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002496:	4a50      	ldr	r2, [pc, #320]	; (80025d8 <main+0x650>)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	3308      	adds	r3, #8
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4413      	add	r3, r2
 80024a0:	3304      	adds	r3, #4
 80024a2:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t g = 0; g < ADC_DMA_HALFBUFFERSIZE; g++)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	3301      	adds	r3, #1
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d9e2      	bls.n	800247c <main+0x4f4>
	  }



	  update_ADC2_IN4_FO_biquad_filter();
 80024b6:	f7ff f81b 	bl	80014f0 <update_ADC2_IN4_FO_biquad_filter>
	  MA_ADC2_IN4_Update(&MovingAverage_ADC2_IN4);
 80024ba:	4849      	ldr	r0, [pc, #292]	; (80025e0 <main+0x658>)
 80024bc:	f7fe fd86 	bl	8000fcc <MA_ADC2_IN4_Update>
	  for (uint32_t e = 0; e < ADC_DMA_HALFBUFFERSIZE; e++)
 80024c0:	2300      	movs	r3, #0
 80024c2:	60bb      	str	r3, [r7, #8]
 80024c4:	e017      	b.n	80024f6 <main+0x56e>
	  {
		  MovingAverage_ADC2_IN4.MA_ADC2_IN4_OutBfr[e]  -= Offset_4;
 80024c6:	4a46      	ldr	r2, [pc, #280]	; (80025e0 <main+0x658>)
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	3308      	adds	r3, #8
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4413      	add	r3, r2
 80024d0:	3304      	adds	r3, #4
 80024d2:	ed93 7a00 	vldr	s14, [r3]
 80024d6:	4b43      	ldr	r3, [pc, #268]	; (80025e4 <main+0x65c>)
 80024d8:	edd3 7a00 	vldr	s15, [r3]
 80024dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024e0:	4a3f      	ldr	r2, [pc, #252]	; (80025e0 <main+0x658>)
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	3308      	adds	r3, #8
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	4413      	add	r3, r2
 80024ea:	3304      	adds	r3, #4
 80024ec:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t e = 0; e < ADC_DMA_HALFBUFFERSIZE; e++)
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	3301      	adds	r3, #1
 80024f4:	60bb      	str	r3, [r7, #8]
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d9e2      	bls.n	80024c6 <main+0x53e>
	  }



	  update_ADC3_IN1_FO_biquad_filter();
 8002500:	f7ff f832 	bl	8001568 <update_ADC3_IN1_FO_biquad_filter>
	  MA_ADC3_IN1_Update(&MovingAverage_ADC3_IN1);
 8002504:	4824      	ldr	r0, [pc, #144]	; (8002598 <main+0x610>)
 8002506:	f7fe fe05 	bl	8001114 <MA_ADC3_IN1_Update>
	  for (uint32_t b = 0; b < ADC_DMA_HALFBUFFERSIZE; b++)
 800250a:	2300      	movs	r3, #0
 800250c:	607b      	str	r3, [r7, #4]
 800250e:	e017      	b.n	8002540 <main+0x5b8>
	  {
		  MovingAverage_ADC3_IN1.MA_ADC3_IN1_OutBfr[b]  -= Offset_5;
 8002510:	4a21      	ldr	r2, [pc, #132]	; (8002598 <main+0x610>)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3308      	adds	r3, #8
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4413      	add	r3, r2
 800251a:	3304      	adds	r3, #4
 800251c:	ed93 7a00 	vldr	s14, [r3]
 8002520:	4b20      	ldr	r3, [pc, #128]	; (80025a4 <main+0x61c>)
 8002522:	edd3 7a00 	vldr	s15, [r3]
 8002526:	ee77 7a67 	vsub.f32	s15, s14, s15
 800252a:	4a1b      	ldr	r2, [pc, #108]	; (8002598 <main+0x610>)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3308      	adds	r3, #8
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	3304      	adds	r3, #4
 8002536:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t b = 0; b < ADC_DMA_HALFBUFFERSIZE; b++)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	3301      	adds	r3, #1
 800253e:	607b      	str	r3, [r7, #4]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8002546:	4293      	cmp	r3, r2
 8002548:	d9e2      	bls.n	8002510 <main+0x588>
	  }



	  update_ADC3_IN2_FO_biquad_filter();
 800254a:	f7ff f849 	bl	80015e0 <update_ADC3_IN2_FO_biquad_filter>
	  MA_ADC3_IN2_Update(&MovingAverage_ADC3_IN2);
 800254e:	481a      	ldr	r0, [pc, #104]	; (80025b8 <main+0x630>)
 8002550:	f7fe fe84 	bl	800125c <MA_ADC3_IN2_Update>
	  for (uint32_t c = 0; c < ADC_DMA_HALFBUFFERSIZE; c++)
 8002554:	2300      	movs	r3, #0
 8002556:	603b      	str	r3, [r7, #0]
 8002558:	e017      	b.n	800258a <main+0x602>
	  	  {
	  		  MovingAverage_ADC3_IN2.MA_ADC3_IN2_OutBfr[c]  -= Offset_6;
 800255a:	4a17      	ldr	r2, [pc, #92]	; (80025b8 <main+0x630>)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	3308      	adds	r3, #8
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	4413      	add	r3, r2
 8002564:	3304      	adds	r3, #4
 8002566:	ed93 7a00 	vldr	s14, [r3]
 800256a:	4b15      	ldr	r3, [pc, #84]	; (80025c0 <main+0x638>)
 800256c:	edd3 7a00 	vldr	s15, [r3]
 8002570:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002574:	4a10      	ldr	r2, [pc, #64]	; (80025b8 <main+0x630>)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	3308      	adds	r3, #8
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4413      	add	r3, r2
 800257e:	3304      	adds	r3, #4
 8002580:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t c = 0; c < ADC_DMA_HALFBUFFERSIZE; c++)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	3301      	adds	r3, #1
 8002588:	603b      	str	r3, [r7, #0]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8002590:	4293      	cmp	r3, r2
 8002592:	d9e2      	bls.n	800255a <main+0x5d2>
	  update_ADC1_IN1_FO_biquad_filter();  // Filters channel 1 data
 8002594:	e720      	b.n	80023d8 <main+0x450>
 8002596:	bf00      	nop
 8002598:	20008740 	.word	0x20008740
 800259c:	200096d0 	.word	0x200096d0
 80025a0:	2000ab94 	.word	0x2000ab94
 80025a4:	2000aba4 	.word	0x2000aba4
 80025a8:	2000abb0 	.word	0x2000abb0
 80025ac:	2000a660 	.word	0x2000a660
 80025b0:	2000abc4 	.word	0x2000abc4
 80025b4:	2000abb1 	.word	0x2000abb1
 80025b8:	200089d8 	.word	0x200089d8
 80025bc:	20009968 	.word	0x20009968
 80025c0:	2000aba8 	.word	0x2000aba8
 80025c4:	2000a8f8 	.word	0x2000a8f8
 80025c8:	2000abc8 	.word	0x2000abc8
 80025cc:	20007ce0 	.word	0x20007ce0
 80025d0:	20007f78 	.word	0x20007f78
 80025d4:	2000ab98 	.word	0x2000ab98
 80025d8:	20008210 	.word	0x20008210
 80025dc:	2000ab9c 	.word	0x2000ab9c
 80025e0:	200084a8 	.word	0x200084a8
 80025e4:	2000aba0 	.word	0x2000aba0

080025e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b094      	sub	sp, #80	; 0x50
 80025ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025ee:	f107 0318 	add.w	r3, r7, #24
 80025f2:	2238      	movs	r2, #56	; 0x38
 80025f4:	2100      	movs	r1, #0
 80025f6:	4618      	mov	r0, r3
 80025f8:	f004 fcc4 	bl	8006f84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025fc:	1d3b      	adds	r3, r7, #4
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	605a      	str	r2, [r3, #4]
 8002604:	609a      	str	r2, [r3, #8]
 8002606:	60da      	str	r2, [r3, #12]
 8002608:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800260a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800260e:	f002 ffef 	bl	80055f0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002612:	2301      	movs	r3, #1
 8002614:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002616:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800261a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800261c:	2302      	movs	r3, #2
 800261e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002620:	2303      	movs	r3, #3
 8002622:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002624:	2301      	movs	r3, #1
 8002626:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002628:	2308      	movs	r3, #8
 800262a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800262c:	2302      	movs	r3, #2
 800262e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002630:	2302      	movs	r3, #2
 8002632:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002634:	2302      	movs	r3, #2
 8002636:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002638:	f107 0318 	add.w	r3, r7, #24
 800263c:	4618      	mov	r0, r3
 800263e:	f003 f88b 	bl	8005758 <HAL_RCC_OscConfig>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8002648:	f000 fc0a 	bl	8002e60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800264c:	230f      	movs	r3, #15
 800264e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002650:	2303      	movs	r3, #3
 8002652:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002654:	2300      	movs	r3, #0
 8002656:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002658:	2300      	movs	r3, #0
 800265a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002660:	1d3b      	adds	r3, r7, #4
 8002662:	2102      	movs	r1, #2
 8002664:	4618      	mov	r0, r3
 8002666:	f003 fb89 	bl	8005d7c <HAL_RCC_ClockConfig>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002670:	f000 fbf6 	bl	8002e60 <Error_Handler>
  }
}
 8002674:	bf00      	nop
 8002676:	3750      	adds	r7, #80	; 0x50
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b08c      	sub	sp, #48	; 0x30
 8002680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002682:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	605a      	str	r2, [r3, #4]
 800268c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800268e:	1d3b      	adds	r3, r7, #4
 8002690:	2220      	movs	r2, #32
 8002692:	2100      	movs	r1, #0
 8002694:	4618      	mov	r0, r3
 8002696:	f004 fc75 	bl	8006f84 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800269a:	4b3a      	ldr	r3, [pc, #232]	; (8002784 <MX_ADC1_Init+0x108>)
 800269c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80026a0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80026a2:	4b38      	ldr	r3, [pc, #224]	; (8002784 <MX_ADC1_Init+0x108>)
 80026a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80026aa:	4b36      	ldr	r3, [pc, #216]	; (8002784 <MX_ADC1_Init+0x108>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80026b0:	4b34      	ldr	r3, [pc, #208]	; (8002784 <MX_ADC1_Init+0x108>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80026b6:	4b33      	ldr	r3, [pc, #204]	; (8002784 <MX_ADC1_Init+0x108>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80026bc:	4b31      	ldr	r3, [pc, #196]	; (8002784 <MX_ADC1_Init+0x108>)
 80026be:	2201      	movs	r2, #1
 80026c0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80026c2:	4b30      	ldr	r3, [pc, #192]	; (8002784 <MX_ADC1_Init+0x108>)
 80026c4:	2204      	movs	r2, #4
 80026c6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80026c8:	4b2e      	ldr	r3, [pc, #184]	; (8002784 <MX_ADC1_Init+0x108>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80026ce:	4b2d      	ldr	r3, [pc, #180]	; (8002784 <MX_ADC1_Init+0x108>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80026d4:	4b2b      	ldr	r3, [pc, #172]	; (8002784 <MX_ADC1_Init+0x108>)
 80026d6:	2202      	movs	r2, #2
 80026d8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80026da:	4b2a      	ldr	r3, [pc, #168]	; (8002784 <MX_ADC1_Init+0x108>)
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 80026e2:	4b28      	ldr	r3, [pc, #160]	; (8002784 <MX_ADC1_Init+0x108>)
 80026e4:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 80026e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80026ea:	4b26      	ldr	r3, [pc, #152]	; (8002784 <MX_ADC1_Init+0x108>)
 80026ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026f0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80026f2:	4b24      	ldr	r3, [pc, #144]	; (8002784 <MX_ADC1_Init+0x108>)
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80026fa:	4b22      	ldr	r3, [pc, #136]	; (8002784 <MX_ADC1_Init+0x108>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8002700:	4b20      	ldr	r3, [pc, #128]	; (8002784 <MX_ADC1_Init+0x108>)
 8002702:	2200      	movs	r2, #0
 8002704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002708:	481e      	ldr	r0, [pc, #120]	; (8002784 <MX_ADC1_Init+0x108>)
 800270a:	f001 f8db 	bl	80038c4 <HAL_ADC_Init>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8002714:	f000 fba4 	bl	8002e60 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002718:	2300      	movs	r3, #0
 800271a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800271c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002720:	4619      	mov	r1, r3
 8002722:	4818      	ldr	r0, [pc, #96]	; (8002784 <MX_ADC1_Init+0x108>)
 8002724:	f002 f8cc 	bl	80048c0 <HAL_ADCEx_MultiModeConfigChannel>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800272e:	f000 fb97 	bl	8002e60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002732:	4b15      	ldr	r3, [pc, #84]	; (8002788 <MX_ADC1_Init+0x10c>)
 8002734:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002736:	2306      	movs	r3, #6
 8002738:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 800273a:	2305      	movs	r3, #5
 800273c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800273e:	237f      	movs	r3, #127	; 0x7f
 8002740:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002742:	2304      	movs	r3, #4
 8002744:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002746:	2300      	movs	r3, #0
 8002748:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800274a:	1d3b      	adds	r3, r7, #4
 800274c:	4619      	mov	r1, r3
 800274e:	480d      	ldr	r0, [pc, #52]	; (8002784 <MX_ADC1_Init+0x108>)
 8002750:	f001 fb3a 	bl	8003dc8 <HAL_ADC_ConfigChannel>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800275a:	f000 fb81 	bl	8002e60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800275e:	4b0b      	ldr	r3, [pc, #44]	; (800278c <MX_ADC1_Init+0x110>)
 8002760:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002762:	230c      	movs	r3, #12
 8002764:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002766:	1d3b      	adds	r3, r7, #4
 8002768:	4619      	mov	r1, r3
 800276a:	4806      	ldr	r0, [pc, #24]	; (8002784 <MX_ADC1_Init+0x108>)
 800276c:	f001 fb2c 	bl	8003dc8 <HAL_ADC_ConfigChannel>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8002776:	f000 fb73 	bl	8002e60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800277a:	bf00      	nop
 800277c:	3730      	adds	r7, #48	; 0x30
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	20007954 	.word	0x20007954
 8002788:	04300002 	.word	0x04300002
 800278c:	08600004 	.word	0x08600004

08002790 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b088      	sub	sp, #32
 8002794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002796:	463b      	mov	r3, r7
 8002798:	2220      	movs	r2, #32
 800279a:	2100      	movs	r1, #0
 800279c:	4618      	mov	r0, r3
 800279e:	f004 fbf1 	bl	8006f84 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80027a2:	4b33      	ldr	r3, [pc, #204]	; (8002870 <MX_ADC2_Init+0xe0>)
 80027a4:	4a33      	ldr	r2, [pc, #204]	; (8002874 <MX_ADC2_Init+0xe4>)
 80027a6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80027a8:	4b31      	ldr	r3, [pc, #196]	; (8002870 <MX_ADC2_Init+0xe0>)
 80027aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027ae:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80027b0:	4b2f      	ldr	r3, [pc, #188]	; (8002870 <MX_ADC2_Init+0xe0>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80027b6:	4b2e      	ldr	r3, [pc, #184]	; (8002870 <MX_ADC2_Init+0xe0>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80027bc:	4b2c      	ldr	r3, [pc, #176]	; (8002870 <MX_ADC2_Init+0xe0>)
 80027be:	2200      	movs	r2, #0
 80027c0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80027c2:	4b2b      	ldr	r3, [pc, #172]	; (8002870 <MX_ADC2_Init+0xe0>)
 80027c4:	2201      	movs	r2, #1
 80027c6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80027c8:	4b29      	ldr	r3, [pc, #164]	; (8002870 <MX_ADC2_Init+0xe0>)
 80027ca:	2204      	movs	r2, #4
 80027cc:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80027ce:	4b28      	ldr	r3, [pc, #160]	; (8002870 <MX_ADC2_Init+0xe0>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80027d4:	4b26      	ldr	r3, [pc, #152]	; (8002870 <MX_ADC2_Init+0xe0>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 80027da:	4b25      	ldr	r3, [pc, #148]	; (8002870 <MX_ADC2_Init+0xe0>)
 80027dc:	2202      	movs	r2, #2
 80027de:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80027e0:	4b23      	ldr	r3, [pc, #140]	; (8002870 <MX_ADC2_Init+0xe0>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T7_TRGO;
 80027e8:	4b21      	ldr	r3, [pc, #132]	; (8002870 <MX_ADC2_Init+0xe0>)
 80027ea:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
 80027ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80027f0:	4b1f      	ldr	r3, [pc, #124]	; (8002870 <MX_ADC2_Init+0xe0>)
 80027f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027f6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80027f8:	4b1d      	ldr	r3, [pc, #116]	; (8002870 <MX_ADC2_Init+0xe0>)
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002800:	4b1b      	ldr	r3, [pc, #108]	; (8002870 <MX_ADC2_Init+0xe0>)
 8002802:	2200      	movs	r2, #0
 8002804:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8002806:	4b1a      	ldr	r3, [pc, #104]	; (8002870 <MX_ADC2_Init+0xe0>)
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800280e:	4818      	ldr	r0, [pc, #96]	; (8002870 <MX_ADC2_Init+0xe0>)
 8002810:	f001 f858 	bl	80038c4 <HAL_ADC_Init>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800281a:	f000 fb21 	bl	8002e60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800281e:	4b16      	ldr	r3, [pc, #88]	; (8002878 <MX_ADC2_Init+0xe8>)
 8002820:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002822:	2306      	movs	r3, #6
 8002824:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8002826:	2305      	movs	r3, #5
 8002828:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800282a:	237f      	movs	r3, #127	; 0x7f
 800282c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800282e:	2304      	movs	r3, #4
 8002830:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002832:	2300      	movs	r3, #0
 8002834:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002836:	463b      	mov	r3, r7
 8002838:	4619      	mov	r1, r3
 800283a:	480d      	ldr	r0, [pc, #52]	; (8002870 <MX_ADC2_Init+0xe0>)
 800283c:	f001 fac4 	bl	8003dc8 <HAL_ADC_ConfigChannel>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8002846:	f000 fb0b 	bl	8002e60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800284a:	4b0c      	ldr	r3, [pc, #48]	; (800287c <MX_ADC2_Init+0xec>)
 800284c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800284e:	230c      	movs	r3, #12
 8002850:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002852:	463b      	mov	r3, r7
 8002854:	4619      	mov	r1, r3
 8002856:	4806      	ldr	r0, [pc, #24]	; (8002870 <MX_ADC2_Init+0xe0>)
 8002858:	f001 fab6 	bl	8003dc8 <HAL_ADC_ConfigChannel>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 8002862:	f000 fafd 	bl	8002e60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002866:	bf00      	nop
 8002868:	3720      	adds	r7, #32
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	200079c0 	.word	0x200079c0
 8002874:	50000100 	.word	0x50000100
 8002878:	0c900008 	.word	0x0c900008
 800287c:	10c00010 	.word	0x10c00010

08002880 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b088      	sub	sp, #32
 8002884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002886:	463b      	mov	r3, r7
 8002888:	2220      	movs	r2, #32
 800288a:	2100      	movs	r1, #0
 800288c:	4618      	mov	r0, r3
 800288e:	f004 fb79 	bl	8006f84 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8002892:	4b33      	ldr	r3, [pc, #204]	; (8002960 <MX_ADC3_Init+0xe0>)
 8002894:	4a33      	ldr	r2, [pc, #204]	; (8002964 <MX_ADC3_Init+0xe4>)
 8002896:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002898:	4b31      	ldr	r3, [pc, #196]	; (8002960 <MX_ADC3_Init+0xe0>)
 800289a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800289e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80028a0:	4b2f      	ldr	r3, [pc, #188]	; (8002960 <MX_ADC3_Init+0xe0>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80028a6:	4b2e      	ldr	r3, [pc, #184]	; (8002960 <MX_ADC3_Init+0xe0>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 80028ac:	4b2c      	ldr	r3, [pc, #176]	; (8002960 <MX_ADC3_Init+0xe0>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80028b2:	4b2b      	ldr	r3, [pc, #172]	; (8002960 <MX_ADC3_Init+0xe0>)
 80028b4:	2201      	movs	r2, #1
 80028b6:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80028b8:	4b29      	ldr	r3, [pc, #164]	; (8002960 <MX_ADC3_Init+0xe0>)
 80028ba:	2204      	movs	r2, #4
 80028bc:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80028be:	4b28      	ldr	r3, [pc, #160]	; (8002960 <MX_ADC3_Init+0xe0>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80028c4:	4b26      	ldr	r3, [pc, #152]	; (8002960 <MX_ADC3_Init+0xe0>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 2;
 80028ca:	4b25      	ldr	r3, [pc, #148]	; (8002960 <MX_ADC3_Init+0xe0>)
 80028cc:	2202      	movs	r2, #2
 80028ce:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80028d0:	4b23      	ldr	r3, [pc, #140]	; (8002960 <MX_ADC3_Init+0xe0>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T20_TRGO;
 80028d8:	4b21      	ldr	r3, [pc, #132]	; (8002960 <MX_ADC3_Init+0xe0>)
 80028da:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80028de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80028e0:	4b1f      	ldr	r3, [pc, #124]	; (8002960 <MX_ADC3_Init+0xe0>)
 80028e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028e6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80028e8:	4b1d      	ldr	r3, [pc, #116]	; (8002960 <MX_ADC3_Init+0xe0>)
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80028f0:	4b1b      	ldr	r3, [pc, #108]	; (8002960 <MX_ADC3_Init+0xe0>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 80028f6:	4b1a      	ldr	r3, [pc, #104]	; (8002960 <MX_ADC3_Init+0xe0>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80028fe:	4818      	ldr	r0, [pc, #96]	; (8002960 <MX_ADC3_Init+0xe0>)
 8002900:	f000 ffe0 	bl	80038c4 <HAL_ADC_Init>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 800290a:	f000 faa9 	bl	8002e60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800290e:	4b16      	ldr	r3, [pc, #88]	; (8002968 <MX_ADC3_Init+0xe8>)
 8002910:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002912:	2306      	movs	r3, #6
 8002914:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8002916:	2305      	movs	r3, #5
 8002918:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800291a:	237f      	movs	r3, #127	; 0x7f
 800291c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800291e:	2304      	movs	r3, #4
 8002920:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002922:	2300      	movs	r3, #0
 8002924:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002926:	463b      	mov	r3, r7
 8002928:	4619      	mov	r1, r3
 800292a:	480d      	ldr	r0, [pc, #52]	; (8002960 <MX_ADC3_Init+0xe0>)
 800292c:	f001 fa4c 	bl	8003dc8 <HAL_ADC_ConfigChannel>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <MX_ADC3_Init+0xba>
  {
    Error_Handler();
 8002936:	f000 fa93 	bl	8002e60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800293a:	4b0c      	ldr	r3, [pc, #48]	; (800296c <MX_ADC3_Init+0xec>)
 800293c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800293e:	230c      	movs	r3, #12
 8002940:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002942:	463b      	mov	r3, r7
 8002944:	4619      	mov	r1, r3
 8002946:	4806      	ldr	r0, [pc, #24]	; (8002960 <MX_ADC3_Init+0xe0>)
 8002948:	f001 fa3e 	bl	8003dc8 <HAL_ADC_ConfigChannel>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <MX_ADC3_Init+0xd6>
  {
    Error_Handler();
 8002952:	f000 fa85 	bl	8002e60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002956:	bf00      	nop
 8002958:	3720      	adds	r7, #32
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	20007a2c 	.word	0x20007a2c
 8002964:	50000400 	.word	0x50000400
 8002968:	04300002 	.word	0x04300002
 800296c:	08600004 	.word	0x08600004

08002970 <MX_FMAC_Init>:
  * @brief FMAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMAC_Init(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8002974:	4b06      	ldr	r3, [pc, #24]	; (8002990 <MX_FMAC_Init+0x20>)
 8002976:	4a07      	ldr	r2, [pc, #28]	; (8002994 <MX_FMAC_Init+0x24>)
 8002978:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 800297a:	4805      	ldr	r0, [pc, #20]	; (8002990 <MX_FMAC_Init+0x20>)
 800297c:	f002 fc0a 	bl	8005194 <HAL_FMAC_Init>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 8002986:	f000 fa6b 	bl	8002e60 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 800298a:	bf00      	nop
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	20007bb8 	.word	0x20007bb8
 8002994:	40021400 	.word	0x40021400

08002998 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800299e:	1d3b      	adds	r3, r7, #4
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	605a      	str	r2, [r3, #4]
 80029a6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80029a8:	4b14      	ldr	r3, [pc, #80]	; (80029fc <MX_TIM6_Init+0x64>)
 80029aa:	4a15      	ldr	r2, [pc, #84]	; (8002a00 <MX_TIM6_Init+0x68>)
 80029ac:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8-1;
 80029ae:	4b13      	ldr	r3, [pc, #76]	; (80029fc <MX_TIM6_Init+0x64>)
 80029b0:	2207      	movs	r2, #7
 80029b2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029b4:	4b11      	ldr	r3, [pc, #68]	; (80029fc <MX_TIM6_Init+0x64>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 7;
 80029ba:	4b10      	ldr	r3, [pc, #64]	; (80029fc <MX_TIM6_Init+0x64>)
 80029bc:	2207      	movs	r2, #7
 80029be:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029c0:	4b0e      	ldr	r3, [pc, #56]	; (80029fc <MX_TIM6_Init+0x64>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80029c6:	480d      	ldr	r0, [pc, #52]	; (80029fc <MX_TIM6_Init+0x64>)
 80029c8:	f003 fdf4 	bl	80065b4 <HAL_TIM_Base_Init>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80029d2:	f000 fa45 	bl	8002e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80029d6:	2320      	movs	r3, #32
 80029d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029da:	2300      	movs	r3, #0
 80029dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80029de:	1d3b      	adds	r3, r7, #4
 80029e0:	4619      	mov	r1, r3
 80029e2:	4806      	ldr	r0, [pc, #24]	; (80029fc <MX_TIM6_Init+0x64>)
 80029e4:	f004 f878 	bl	8006ad8 <HAL_TIMEx_MasterConfigSynchronization>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80029ee:	f000 fa37 	bl	8002e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80029f2:	bf00      	nop
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	20007bf0 	.word	0x20007bf0
 8002a00:	40001000 	.word	0x40001000

08002a04 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a0a:	1d3b      	adds	r3, r7, #4
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	605a      	str	r2, [r3, #4]
 8002a12:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002a14:	4b14      	ldr	r3, [pc, #80]	; (8002a68 <MX_TIM7_Init+0x64>)
 8002a16:	4a15      	ldr	r2, [pc, #84]	; (8002a6c <MX_TIM7_Init+0x68>)
 8002a18:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8-1;
 8002a1a:	4b13      	ldr	r3, [pc, #76]	; (8002a68 <MX_TIM7_Init+0x64>)
 8002a1c:	2207      	movs	r2, #7
 8002a1e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a20:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <MX_TIM7_Init+0x64>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 7;
 8002a26:	4b10      	ldr	r3, [pc, #64]	; (8002a68 <MX_TIM7_Init+0x64>)
 8002a28:	2207      	movs	r2, #7
 8002a2a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a2c:	4b0e      	ldr	r3, [pc, #56]	; (8002a68 <MX_TIM7_Init+0x64>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002a32:	480d      	ldr	r0, [pc, #52]	; (8002a68 <MX_TIM7_Init+0x64>)
 8002a34:	f003 fdbe 	bl	80065b4 <HAL_TIM_Base_Init>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002a3e:	f000 fa0f 	bl	8002e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002a42:	2320      	movs	r3, #32
 8002a44:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a46:	2300      	movs	r3, #0
 8002a48:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002a4a:	1d3b      	adds	r3, r7, #4
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4806      	ldr	r0, [pc, #24]	; (8002a68 <MX_TIM7_Init+0x64>)
 8002a50:	f004 f842 	bl	8006ad8 <HAL_TIMEx_MasterConfigSynchronization>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8002a5a:	f000 fa01 	bl	8002e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002a5e:	bf00      	nop
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	20007c3c 	.word	0x20007c3c
 8002a6c:	40001400 	.word	0x40001400

08002a70 <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b088      	sub	sp, #32
 8002a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002a76:	f107 030c 	add.w	r3, r7, #12
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	605a      	str	r2, [r3, #4]
 8002a80:	609a      	str	r2, [r3, #8]
 8002a82:	60da      	str	r2, [r3, #12]
 8002a84:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a86:	463b      	mov	r3, r7
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	605a      	str	r2, [r3, #4]
 8002a8e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8002a90:	4b1f      	ldr	r3, [pc, #124]	; (8002b10 <MX_TIM20_Init+0xa0>)
 8002a92:	4a20      	ldr	r2, [pc, #128]	; (8002b14 <MX_TIM20_Init+0xa4>)
 8002a94:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 8-1;
 8002a96:	4b1e      	ldr	r3, [pc, #120]	; (8002b10 <MX_TIM20_Init+0xa0>)
 8002a98:	2207      	movs	r2, #7
 8002a9a:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a9c:	4b1c      	ldr	r3, [pc, #112]	; (8002b10 <MX_TIM20_Init+0xa0>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 7;
 8002aa2:	4b1b      	ldr	r3, [pc, #108]	; (8002b10 <MX_TIM20_Init+0xa0>)
 8002aa4:	2207      	movs	r2, #7
 8002aa6:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aa8:	4b19      	ldr	r3, [pc, #100]	; (8002b10 <MX_TIM20_Init+0xa0>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8002aae:	4b18      	ldr	r3, [pc, #96]	; (8002b10 <MX_TIM20_Init+0xa0>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ab4:	4b16      	ldr	r3, [pc, #88]	; (8002b10 <MX_TIM20_Init+0xa0>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8002aba:	4815      	ldr	r0, [pc, #84]	; (8002b10 <MX_TIM20_Init+0xa0>)
 8002abc:	f003 fd7a 	bl	80065b4 <HAL_TIM_Base_Init>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <MX_TIM20_Init+0x5a>
  {
    Error_Handler();
 8002ac6:	f000 f9cb 	bl	8002e60 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8002aca:	2300      	movs	r3, #0
 8002acc:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim20, &sSlaveConfig) != HAL_OK)
 8002ad2:	f107 030c 	add.w	r3, r7, #12
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	480d      	ldr	r0, [pc, #52]	; (8002b10 <MX_TIM20_Init+0xa0>)
 8002ada:	f003 fdc2 	bl	8006662 <HAL_TIM_SlaveConfigSynchro>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <MX_TIM20_Init+0x78>
  {
    Error_Handler();
 8002ae4:	f000 f9bc 	bl	8002e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002ae8:	2320      	movs	r3, #32
 8002aea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002aec:	2300      	movs	r3, #0
 8002aee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002af0:	2300      	movs	r3, #0
 8002af2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8002af4:	463b      	mov	r3, r7
 8002af6:	4619      	mov	r1, r3
 8002af8:	4805      	ldr	r0, [pc, #20]	; (8002b10 <MX_TIM20_Init+0xa0>)
 8002afa:	f003 ffed 	bl	8006ad8 <HAL_TIMEx_MasterConfigSynchronization>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <MX_TIM20_Init+0x98>
  {
    Error_Handler();
 8002b04:	f000 f9ac 	bl	8002e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */

}
 8002b08:	bf00      	nop
 8002b0a:	3720      	adds	r7, #32
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	20007c88 	.word	0x20007c88
 8002b14:	40015000 	.word	0x40015000

08002b18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002b1e:	4b20      	ldr	r3, [pc, #128]	; (8002ba0 <MX_DMA_Init+0x88>)
 8002b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b22:	4a1f      	ldr	r2, [pc, #124]	; (8002ba0 <MX_DMA_Init+0x88>)
 8002b24:	f043 0304 	orr.w	r3, r3, #4
 8002b28:	6493      	str	r3, [r2, #72]	; 0x48
 8002b2a:	4b1d      	ldr	r3, [pc, #116]	; (8002ba0 <MX_DMA_Init+0x88>)
 8002b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b2e:	f003 0304 	and.w	r3, r3, #4
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b36:	4b1a      	ldr	r3, [pc, #104]	; (8002ba0 <MX_DMA_Init+0x88>)
 8002b38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b3a:	4a19      	ldr	r2, [pc, #100]	; (8002ba0 <MX_DMA_Init+0x88>)
 8002b3c:	f043 0301 	orr.w	r3, r3, #1
 8002b40:	6493      	str	r3, [r2, #72]	; 0x48
 8002b42:	4b17      	ldr	r3, [pc, #92]	; (8002ba0 <MX_DMA_Init+0x88>)
 8002b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	60bb      	str	r3, [r7, #8]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002b4e:	4b14      	ldr	r3, [pc, #80]	; (8002ba0 <MX_DMA_Init+0x88>)
 8002b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b52:	4a13      	ldr	r2, [pc, #76]	; (8002ba0 <MX_DMA_Init+0x88>)
 8002b54:	f043 0302 	orr.w	r3, r3, #2
 8002b58:	6493      	str	r3, [r2, #72]	; 0x48
 8002b5a:	4b11      	ldr	r3, [pc, #68]	; (8002ba0 <MX_DMA_Init+0x88>)
 8002b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	607b      	str	r3, [r7, #4]
 8002b64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002b66:	2200      	movs	r2, #0
 8002b68:	2100      	movs	r1, #0
 8002b6a:	200b      	movs	r0, #11
 8002b6c:	f002 f86b 	bl	8004c46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002b70:	200b      	movs	r0, #11
 8002b72:	f002 f882 	bl	8004c7a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8002b76:	2200      	movs	r2, #0
 8002b78:	2100      	movs	r1, #0
 8002b7a:	2010      	movs	r0, #16
 8002b7c:	f002 f863 	bl	8004c46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002b80:	2010      	movs	r0, #16
 8002b82:	f002 f87a 	bl	8004c7a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8002b86:	2200      	movs	r2, #0
 8002b88:	2100      	movs	r1, #0
 8002b8a:	2038      	movs	r0, #56	; 0x38
 8002b8c:	f002 f85b 	bl	8004c46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8002b90:	2038      	movs	r0, #56	; 0x38
 8002b92:	f002 f872 	bl	8004c7a <HAL_NVIC_EnableIRQ>

}
 8002b96:	bf00      	nop
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	40021000 	.word	0x40021000

08002ba4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002baa:	4b1b      	ldr	r3, [pc, #108]	; (8002c18 <MX_GPIO_Init+0x74>)
 8002bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bae:	4a1a      	ldr	r2, [pc, #104]	; (8002c18 <MX_GPIO_Init+0x74>)
 8002bb0:	f043 0320 	orr.w	r3, r3, #32
 8002bb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bb6:	4b18      	ldr	r3, [pc, #96]	; (8002c18 <MX_GPIO_Init+0x74>)
 8002bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bba:	f003 0320 	and.w	r3, r3, #32
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc2:	4b15      	ldr	r3, [pc, #84]	; (8002c18 <MX_GPIO_Init+0x74>)
 8002bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc6:	4a14      	ldr	r2, [pc, #80]	; (8002c18 <MX_GPIO_Init+0x74>)
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bce:	4b12      	ldr	r3, [pc, #72]	; (8002c18 <MX_GPIO_Init+0x74>)
 8002bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	60bb      	str	r3, [r7, #8]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bda:	4b0f      	ldr	r3, [pc, #60]	; (8002c18 <MX_GPIO_Init+0x74>)
 8002bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bde:	4a0e      	ldr	r2, [pc, #56]	; (8002c18 <MX_GPIO_Init+0x74>)
 8002be0:	f043 0302 	orr.w	r3, r3, #2
 8002be4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002be6:	4b0c      	ldr	r3, [pc, #48]	; (8002c18 <MX_GPIO_Init+0x74>)
 8002be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	607b      	str	r3, [r7, #4]
 8002bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bf2:	4b09      	ldr	r3, [pc, #36]	; (8002c18 <MX_GPIO_Init+0x74>)
 8002bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf6:	4a08      	ldr	r2, [pc, #32]	; (8002c18 <MX_GPIO_Init+0x74>)
 8002bf8:	f043 0310 	orr.w	r3, r3, #16
 8002bfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bfe:	4b06      	ldr	r3, [pc, #24]	; (8002c18 <MX_GPIO_Init+0x74>)
 8002c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c02:	f003 0310 	and.w	r3, r3, #16
 8002c06:	603b      	str	r3, [r7, #0]
 8002c08:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002c0a:	bf00      	nop
 8002c0c:	3714      	adds	r7, #20
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	40021000 	.word	0x40021000

08002c1c <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void                    HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)   // Fires when the upper half of the DMA buffer is filled
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
	 if (hadc->Instance == ADC1)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c2c:	d123      	bne.n	8002c76 <HAL_ADC_ConvHalfCpltCallback+0x5a>
	   {
	        ADC1_DMA_sort_uhb(); // Handles the upper half of the DMA buffer
 8002c2e:	f7fe ffd7 	bl	8001be0 <ADC1_DMA_sort_uhb>

	        ADC1_DMA_sort_ptr->ADC1_DMA_mon=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[ADC_DMA_QUATERBUFFERSIZE];  // Monitors one of the DMA buffer registers in the upper half of the buffer
 8002c32:	4b3c      	ldr	r3, [pc, #240]	; (8002d24 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a3b      	ldr	r2, [pc, #236]	; (8002d24 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8002c38:	6812      	ldr	r2, [r2, #0]
 8002c3a:	f8d3 39c4 	ldr.w	r3, [r3, #2500]	; 0x9c4
 8002c3e:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8002c42:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
	        ADC1_DMA_sort_ptr->ADC1_IN1_mon=ADC1_DMA_sort_ptr->ADC1_IN1_bfr[ADC_DMA_EIGHTHBUFFERSIZE];  // Monitors one of the IN1 data buffer registers in the upper half of the buffer
 8002c46:	4b37      	ldr	r3, [pc, #220]	; (8002d24 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a36      	ldr	r2, [pc, #216]	; (8002d24 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8002c4c:	6812      	ldr	r2, [r2, #0]
 8002c4e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002c52:	f8d3 3bf4 	ldr.w	r3, [r3, #3060]	; 0xbf4
 8002c56:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8002c5a:	f8c2 3a9c 	str.w	r3, [r2, #2716]	; 0xa9c
	        ADC1_DMA_sort_ptr->ADC1_IN2_mon=ADC1_DMA_sort_ptr->ADC1_IN2_bfr[ADC_DMA_EIGHTHBUFFERSIZE];  // Monitors one of the IN2 data buffer registers in the upper half of the buffer
 8002c5e:	4b31      	ldr	r3, [pc, #196]	; (8002d24 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a30      	ldr	r2, [pc, #192]	; (8002d24 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8002c64:	6812      	ldr	r2, [r2, #0]
 8002c66:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8002c6a:	f8d3 3f80 	ldr.w	r3, [r3, #3968]	; 0xf80
 8002c6e:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8002c72:	f8c2 3e28 	str.w	r3, [r2, #3624]	; 0xe28
	   }


	 if (hadc->Instance == ADC2)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a2b      	ldr	r2, [pc, #172]	; (8002d28 <HAL_ADC_ConvHalfCpltCallback+0x10c>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d123      	bne.n	8002cc8 <HAL_ADC_ConvHalfCpltCallback+0xac>

	   {
		    ADC2_DMA_sort_uhb(); 
 8002c80:	f7ff f84a 	bl	8001d18 <ADC2_DMA_sort_uhb>

		    ADC2_DMA_sort_ptr->ADC2_DMA_mon=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[ADC_DMA_QUATERBUFFERSIZE];
 8002c84:	4b29      	ldr	r3, [pc, #164]	; (8002d2c <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a28      	ldr	r2, [pc, #160]	; (8002d2c <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8002c8a:	6812      	ldr	r2, [r2, #0]
 8002c8c:	f8d3 39c4 	ldr.w	r3, [r3, #2500]	; 0x9c4
 8002c90:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8002c94:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
		    ADC2_DMA_sort_ptr->ADC2_IN3_mon=ADC2_DMA_sort_ptr->ADC2_IN3_bfr[ADC_DMA_EIGHTHBUFFERSIZE];
 8002c98:	4b24      	ldr	r3, [pc, #144]	; (8002d2c <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a23      	ldr	r2, [pc, #140]	; (8002d2c <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8002c9e:	6812      	ldr	r2, [r2, #0]
 8002ca0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002ca4:	f8d3 3bf4 	ldr.w	r3, [r3, #3060]	; 0xbf4
 8002ca8:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8002cac:	f8c2 3a9c 	str.w	r3, [r2, #2716]	; 0xa9c
		    ADC2_DMA_sort_ptr->ADC2_IN4_mon=ADC2_DMA_sort_ptr->ADC2_IN4_bfr[ADC_DMA_EIGHTHBUFFERSIZE];
 8002cb0:	4b1e      	ldr	r3, [pc, #120]	; (8002d2c <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a1d      	ldr	r2, [pc, #116]	; (8002d2c <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8002cb6:	6812      	ldr	r2, [r2, #0]
 8002cb8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8002cbc:	f8d3 3f80 	ldr.w	r3, [r3, #3968]	; 0xf80
 8002cc0:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8002cc4:	f8c2 3e28 	str.w	r3, [r2, #3624]	; 0xe28
	   }

	 if (hadc->Instance == ADC3)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a18      	ldr	r2, [pc, #96]	; (8002d30 <HAL_ADC_ConvHalfCpltCallback+0x114>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d123      	bne.n	8002d1a <HAL_ADC_ConvHalfCpltCallback+0xfe>

	   {
		    ADC3_DMA_sort_uhb(); 
 8002cd2:	f7ff f8bd 	bl	8001e50 <ADC3_DMA_sort_uhb>

		    ADC3_DMA_sort_ptr->ADC3_DMA_mon=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[ADC_DMA_QUATERBUFFERSIZE];
 8002cd6:	4b17      	ldr	r3, [pc, #92]	; (8002d34 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a16      	ldr	r2, [pc, #88]	; (8002d34 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8002cdc:	6812      	ldr	r2, [r2, #0]
 8002cde:	f8d3 39c4 	ldr.w	r3, [r3, #2500]	; 0x9c4
 8002ce2:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8002ce6:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
		    ADC3_DMA_sort_ptr->ADC3_IN1_mon=ADC3_DMA_sort_ptr->ADC3_IN1_bfr[ADC_DMA_EIGHTHBUFFERSIZE];
 8002cea:	4b12      	ldr	r3, [pc, #72]	; (8002d34 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a11      	ldr	r2, [pc, #68]	; (8002d34 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8002cf0:	6812      	ldr	r2, [r2, #0]
 8002cf2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002cf6:	f8d3 3bf4 	ldr.w	r3, [r3, #3060]	; 0xbf4
 8002cfa:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8002cfe:	f8c2 3a9c 	str.w	r3, [r2, #2716]	; 0xa9c
		    ADC3_DMA_sort_ptr->ADC3_IN2_mon=ADC3_DMA_sort_ptr->ADC3_IN2_bfr[ADC_DMA_EIGHTHBUFFERSIZE];
 8002d02:	4b0c      	ldr	r3, [pc, #48]	; (8002d34 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a0b      	ldr	r2, [pc, #44]	; (8002d34 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8002d08:	6812      	ldr	r2, [r2, #0]
 8002d0a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8002d0e:	f8d3 3f80 	ldr.w	r3, [r3, #3968]	; 0xf80
 8002d12:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8002d16:	f8c2 3e28 	str.w	r3, [r2, #3624]	; 0xe28
	   }
};
 8002d1a:	bf00      	nop
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	20007cd4 	.word	0x20007cd4
 8002d28:	50000100 	.word	0x50000100
 8002d2c:	20007cd8 	.word	0x20007cd8
 8002d30:	50000400 	.word	0x50000400
 8002d34:	20007cdc 	.word	0x20007cdc

08002d38 <HAL_ADC_ConvCpltCallback>:

void                    HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)  // Fires when the lower half of the DMA buffer is filled
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
	  if (hadc->Instance == ADC1)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d48:	d125      	bne.n	8002d96 <HAL_ADC_ConvCpltCallback+0x5e>
		{
			ADC1_DMA_sort_lhb(); // Handles the lower half of the DMA buffer
 8002d4a:	f7fe ff95 	bl	8001c78 <ADC1_DMA_sort_lhb>

			ADC1_DMA_sort_ptr->ADC1_DMA_mon=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[ADC_DMA_HALFBUFFERSIZE + ADC_DMA_QUATERBUFFERSIZE]; // Monitors one of the DMA buffer registers in the lower half of the buffer
 8002d4e:	4b3f      	ldr	r3, [pc, #252]	; (8002e4c <HAL_ADC_ConvCpltCallback+0x114>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a3e      	ldr	r2, [pc, #248]	; (8002e4c <HAL_ADC_ConvCpltCallback+0x114>)
 8002d54:	6812      	ldr	r2, [r2, #0]
 8002d56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d5a:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 8002d5e:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8002d62:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
			ADC1_DMA_sort_ptr->ADC1_IN1_mon=ADC1_DMA_sort_ptr->ADC1_IN1_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];  // Monitors one of the IN1 data buffer registers in the lower half of the buffer
 8002d66:	4b39      	ldr	r3, [pc, #228]	; (8002e4c <HAL_ADC_ConvCpltCallback+0x114>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a38      	ldr	r2, [pc, #224]	; (8002e4c <HAL_ADC_ConvCpltCallback+0x114>)
 8002d6c:	6812      	ldr	r2, [r2, #0]
 8002d6e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8002d72:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	; 0x5b8
 8002d76:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8002d7a:	f8c2 3a9c 	str.w	r3, [r2, #2716]	; 0xa9c
			ADC1_DMA_sort_ptr->ADC1_IN2_mon=ADC1_DMA_sort_ptr->ADC1_IN2_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];  // Monitors one of the IN2 data buffer registers in the lower half of the buffer
 8002d7e:	4b33      	ldr	r3, [pc, #204]	; (8002e4c <HAL_ADC_ConvCpltCallback+0x114>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a32      	ldr	r2, [pc, #200]	; (8002e4c <HAL_ADC_ConvCpltCallback+0x114>)
 8002d84:	6812      	ldr	r2, [r2, #0]
 8002d86:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002d8a:	f8d3 3944 	ldr.w	r3, [r3, #2372]	; 0x944
 8002d8e:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8002d92:	f8c2 3e28 	str.w	r3, [r2, #3624]	; 0xe28
		}


	  if (hadc->Instance == ADC2)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a2d      	ldr	r2, [pc, #180]	; (8002e50 <HAL_ADC_ConvCpltCallback+0x118>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d125      	bne.n	8002dec <HAL_ADC_ConvCpltCallback+0xb4>

		{
		     ADC2_DMA_sort_lhb();
 8002da0:	f7ff f806 	bl	8001db0 <ADC2_DMA_sort_lhb>

		     ADC2_DMA_sort_ptr->ADC2_DMA_mon=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[ADC_DMA_HALFBUFFERSIZE + ADC_DMA_QUATERBUFFERSIZE];
 8002da4:	4b2b      	ldr	r3, [pc, #172]	; (8002e54 <HAL_ADC_ConvCpltCallback+0x11c>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a2a      	ldr	r2, [pc, #168]	; (8002e54 <HAL_ADC_ConvCpltCallback+0x11c>)
 8002daa:	6812      	ldr	r2, [r2, #0]
 8002dac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002db0:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 8002db4:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8002db8:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
		     ADC2_DMA_sort_ptr->ADC2_IN3_mon=ADC2_DMA_sort_ptr->ADC2_IN3_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];
 8002dbc:	4b25      	ldr	r3, [pc, #148]	; (8002e54 <HAL_ADC_ConvCpltCallback+0x11c>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a24      	ldr	r2, [pc, #144]	; (8002e54 <HAL_ADC_ConvCpltCallback+0x11c>)
 8002dc2:	6812      	ldr	r2, [r2, #0]
 8002dc4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8002dc8:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	; 0x5b8
 8002dcc:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8002dd0:	f8c2 3a9c 	str.w	r3, [r2, #2716]	; 0xa9c
			 ADC2_DMA_sort_ptr->ADC2_IN4_mon=ADC2_DMA_sort_ptr->ADC2_IN4_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];
 8002dd4:	4b1f      	ldr	r3, [pc, #124]	; (8002e54 <HAL_ADC_ConvCpltCallback+0x11c>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a1e      	ldr	r2, [pc, #120]	; (8002e54 <HAL_ADC_ConvCpltCallback+0x11c>)
 8002dda:	6812      	ldr	r2, [r2, #0]
 8002ddc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002de0:	f8d3 3944 	ldr.w	r3, [r3, #2372]	; 0x944
 8002de4:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8002de8:	f8c2 3e28 	str.w	r3, [r2, #3624]	; 0xe28
		}

	   if (hadc->Instance == ADC3)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a19      	ldr	r2, [pc, #100]	; (8002e58 <HAL_ADC_ConvCpltCallback+0x120>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d125      	bne.n	8002e42 <HAL_ADC_ConvCpltCallback+0x10a>

		{
		     ADC3_DMA_sort_lhb();
 8002df6:	f7ff f877 	bl	8001ee8 <ADC3_DMA_sort_lhb>

			 ADC3_DMA_sort_ptr->ADC3_DMA_mon=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[ADC_DMA_HALFBUFFERSIZE + ADC_DMA_QUATERBUFFERSIZE];
 8002dfa:	4b18      	ldr	r3, [pc, #96]	; (8002e5c <HAL_ADC_ConvCpltCallback+0x124>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a17      	ldr	r2, [pc, #92]	; (8002e5c <HAL_ADC_ConvCpltCallback+0x124>)
 8002e00:	6812      	ldr	r2, [r2, #0]
 8002e02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e06:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 8002e0a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8002e0e:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
			 ADC3_DMA_sort_ptr->ADC3_IN1_mon=ADC3_DMA_sort_ptr->ADC3_IN1_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];
 8002e12:	4b12      	ldr	r3, [pc, #72]	; (8002e5c <HAL_ADC_ConvCpltCallback+0x124>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a11      	ldr	r2, [pc, #68]	; (8002e5c <HAL_ADC_ConvCpltCallback+0x124>)
 8002e18:	6812      	ldr	r2, [r2, #0]
 8002e1a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8002e1e:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	; 0x5b8
 8002e22:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8002e26:	f8c2 3a9c 	str.w	r3, [r2, #2716]	; 0xa9c
			 ADC3_DMA_sort_ptr->ADC3_IN2_mon=ADC3_DMA_sort_ptr->ADC3_IN2_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];
 8002e2a:	4b0c      	ldr	r3, [pc, #48]	; (8002e5c <HAL_ADC_ConvCpltCallback+0x124>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a0b      	ldr	r2, [pc, #44]	; (8002e5c <HAL_ADC_ConvCpltCallback+0x124>)
 8002e30:	6812      	ldr	r2, [r2, #0]
 8002e32:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002e36:	f8d3 3944 	ldr.w	r3, [r3, #2372]	; 0x944
 8002e3a:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8002e3e:	f8c2 3e28 	str.w	r3, [r2, #3624]	; 0xe28
		}

};
 8002e42:	bf00      	nop
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	20007cd4 	.word	0x20007cd4
 8002e50:	50000100 	.word	0x50000100
 8002e54:	20007cd8 	.word	0x20007cd8
 8002e58:	50000400 	.word	0x50000400
 8002e5c:	20007cdc 	.word	0x20007cdc

08002e60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e64:	b672      	cpsid	i
}
 8002e66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e68:	e7fe      	b.n	8002e68 <Error_Handler+0x8>
	...

08002e6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e72:	4b0f      	ldr	r3, [pc, #60]	; (8002eb0 <HAL_MspInit+0x44>)
 8002e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e76:	4a0e      	ldr	r2, [pc, #56]	; (8002eb0 <HAL_MspInit+0x44>)
 8002e78:	f043 0301 	orr.w	r3, r3, #1
 8002e7c:	6613      	str	r3, [r2, #96]	; 0x60
 8002e7e:	4b0c      	ldr	r3, [pc, #48]	; (8002eb0 <HAL_MspInit+0x44>)
 8002e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	607b      	str	r3, [r7, #4]
 8002e88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e8a:	4b09      	ldr	r3, [pc, #36]	; (8002eb0 <HAL_MspInit+0x44>)
 8002e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e8e:	4a08      	ldr	r2, [pc, #32]	; (8002eb0 <HAL_MspInit+0x44>)
 8002e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e94:	6593      	str	r3, [r2, #88]	; 0x58
 8002e96:	4b06      	ldr	r3, [pc, #24]	; (8002eb0 <HAL_MspInit+0x44>)
 8002e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e9e:	603b      	str	r3, [r7, #0]
 8002ea0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002ea2:	f002 fc49 	bl	8005738 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ea6:	bf00      	nop
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40021000 	.word	0x40021000

08002eb4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b0a2      	sub	sp, #136	; 0x88
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ebc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	605a      	str	r2, [r3, #4]
 8002ec6:	609a      	str	r2, [r3, #8]
 8002ec8:	60da      	str	r2, [r3, #12]
 8002eca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ecc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ed0:	2250      	movs	r2, #80	; 0x50
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f004 f855 	bl	8006f84 <memset>
  if(hadc->Instance==ADC1)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ee2:	d169      	bne.n	8002fb8 <HAL_ADC_MspInit+0x104>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002ee4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ee8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002eea:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002eee:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ef0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f003 f921 	bl	800613c <HAL_RCCEx_PeriphCLKConfig>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002f00:	f7ff ffae 	bl	8002e60 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002f04:	4b64      	ldr	r3, [pc, #400]	; (8003098 <HAL_ADC_MspInit+0x1e4>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	4a63      	ldr	r2, [pc, #396]	; (8003098 <HAL_ADC_MspInit+0x1e4>)
 8002f0c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002f0e:	4b62      	ldr	r3, [pc, #392]	; (8003098 <HAL_ADC_MspInit+0x1e4>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d10b      	bne.n	8002f2e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002f16:	4b61      	ldr	r3, [pc, #388]	; (800309c <HAL_ADC_MspInit+0x1e8>)
 8002f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f1a:	4a60      	ldr	r2, [pc, #384]	; (800309c <HAL_ADC_MspInit+0x1e8>)
 8002f1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f22:	4b5e      	ldr	r3, [pc, #376]	; (800309c <HAL_ADC_MspInit+0x1e8>)
 8002f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f2a:	623b      	str	r3, [r7, #32]
 8002f2c:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f2e:	4b5b      	ldr	r3, [pc, #364]	; (800309c <HAL_ADC_MspInit+0x1e8>)
 8002f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f32:	4a5a      	ldr	r2, [pc, #360]	; (800309c <HAL_ADC_MspInit+0x1e8>)
 8002f34:	f043 0301 	orr.w	r3, r3, #1
 8002f38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f3a:	4b58      	ldr	r3, [pc, #352]	; (800309c <HAL_ADC_MspInit+0x1e8>)
 8002f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	61fb      	str	r3, [r7, #28]
 8002f44:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002f46:	2303      	movs	r3, #3
 8002f48:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f52:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002f56:	4619      	mov	r1, r3
 8002f58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f5c:	f002 f9c6 	bl	80052ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002f60:	4b4f      	ldr	r3, [pc, #316]	; (80030a0 <HAL_ADC_MspInit+0x1ec>)
 8002f62:	4a50      	ldr	r2, [pc, #320]	; (80030a4 <HAL_ADC_MspInit+0x1f0>)
 8002f64:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002f66:	4b4e      	ldr	r3, [pc, #312]	; (80030a0 <HAL_ADC_MspInit+0x1ec>)
 8002f68:	2205      	movs	r2, #5
 8002f6a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f6c:	4b4c      	ldr	r3, [pc, #304]	; (80030a0 <HAL_ADC_MspInit+0x1ec>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f72:	4b4b      	ldr	r3, [pc, #300]	; (80030a0 <HAL_ADC_MspInit+0x1ec>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002f78:	4b49      	ldr	r3, [pc, #292]	; (80030a0 <HAL_ADC_MspInit+0x1ec>)
 8002f7a:	2280      	movs	r2, #128	; 0x80
 8002f7c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f7e:	4b48      	ldr	r3, [pc, #288]	; (80030a0 <HAL_ADC_MspInit+0x1ec>)
 8002f80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f84:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002f86:	4b46      	ldr	r3, [pc, #280]	; (80030a0 <HAL_ADC_MspInit+0x1ec>)
 8002f88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f8c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002f8e:	4b44      	ldr	r3, [pc, #272]	; (80030a0 <HAL_ADC_MspInit+0x1ec>)
 8002f90:	2220      	movs	r2, #32
 8002f92:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002f94:	4b42      	ldr	r3, [pc, #264]	; (80030a0 <HAL_ADC_MspInit+0x1ec>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002f9a:	4841      	ldr	r0, [pc, #260]	; (80030a0 <HAL_ADC_MspInit+0x1ec>)
 8002f9c:	f001 fe88 	bl	8004cb0 <HAL_DMA_Init>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8002fa6:	f7ff ff5b 	bl	8002e60 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a3c      	ldr	r2, [pc, #240]	; (80030a0 <HAL_ADC_MspInit+0x1ec>)
 8002fae:	655a      	str	r2, [r3, #84]	; 0x54
 8002fb0:	4a3b      	ldr	r2, [pc, #236]	; (80030a0 <HAL_ADC_MspInit+0x1ec>)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002fb6:	e0fa      	b.n	80031ae <HAL_ADC_MspInit+0x2fa>
  else if(hadc->Instance==ADC2)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a3a      	ldr	r2, [pc, #232]	; (80030a8 <HAL_ADC_MspInit+0x1f4>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d178      	bne.n	80030b4 <HAL_ADC_MspInit+0x200>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002fc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fc6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002fc8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002fcc:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f003 f8b2 	bl	800613c <HAL_RCCEx_PeriphCLKConfig>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 8002fde:	f7ff ff3f 	bl	8002e60 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002fe2:	4b2d      	ldr	r3, [pc, #180]	; (8003098 <HAL_ADC_MspInit+0x1e4>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	4a2b      	ldr	r2, [pc, #172]	; (8003098 <HAL_ADC_MspInit+0x1e4>)
 8002fea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002fec:	4b2a      	ldr	r3, [pc, #168]	; (8003098 <HAL_ADC_MspInit+0x1e4>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d10b      	bne.n	800300c <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002ff4:	4b29      	ldr	r3, [pc, #164]	; (800309c <HAL_ADC_MspInit+0x1e8>)
 8002ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff8:	4a28      	ldr	r2, [pc, #160]	; (800309c <HAL_ADC_MspInit+0x1e8>)
 8002ffa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ffe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003000:	4b26      	ldr	r3, [pc, #152]	; (800309c <HAL_ADC_MspInit+0x1e8>)
 8003002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003004:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003008:	61bb      	str	r3, [r7, #24]
 800300a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800300c:	4b23      	ldr	r3, [pc, #140]	; (800309c <HAL_ADC_MspInit+0x1e8>)
 800300e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003010:	4a22      	ldr	r2, [pc, #136]	; (800309c <HAL_ADC_MspInit+0x1e8>)
 8003012:	f043 0301 	orr.w	r3, r3, #1
 8003016:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003018:	4b20      	ldr	r3, [pc, #128]	; (800309c <HAL_ADC_MspInit+0x1e8>)
 800301a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	617b      	str	r3, [r7, #20]
 8003022:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003024:	23c0      	movs	r3, #192	; 0xc0
 8003026:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003028:	2303      	movs	r3, #3
 800302a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302c:	2300      	movs	r3, #0
 800302e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003030:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003034:	4619      	mov	r1, r3
 8003036:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800303a:	f002 f957 	bl	80052ec <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel6;
 800303e:	4b1b      	ldr	r3, [pc, #108]	; (80030ac <HAL_ADC_MspInit+0x1f8>)
 8003040:	4a1b      	ldr	r2, [pc, #108]	; (80030b0 <HAL_ADC_MspInit+0x1fc>)
 8003042:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8003044:	4b19      	ldr	r3, [pc, #100]	; (80030ac <HAL_ADC_MspInit+0x1f8>)
 8003046:	2224      	movs	r2, #36	; 0x24
 8003048:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800304a:	4b18      	ldr	r3, [pc, #96]	; (80030ac <HAL_ADC_MspInit+0x1f8>)
 800304c:	2200      	movs	r2, #0
 800304e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003050:	4b16      	ldr	r3, [pc, #88]	; (80030ac <HAL_ADC_MspInit+0x1f8>)
 8003052:	2200      	movs	r2, #0
 8003054:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003056:	4b15      	ldr	r3, [pc, #84]	; (80030ac <HAL_ADC_MspInit+0x1f8>)
 8003058:	2280      	movs	r2, #128	; 0x80
 800305a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800305c:	4b13      	ldr	r3, [pc, #76]	; (80030ac <HAL_ADC_MspInit+0x1f8>)
 800305e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003062:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003064:	4b11      	ldr	r3, [pc, #68]	; (80030ac <HAL_ADC_MspInit+0x1f8>)
 8003066:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800306a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800306c:	4b0f      	ldr	r3, [pc, #60]	; (80030ac <HAL_ADC_MspInit+0x1f8>)
 800306e:	2220      	movs	r2, #32
 8003070:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8003072:	4b0e      	ldr	r3, [pc, #56]	; (80030ac <HAL_ADC_MspInit+0x1f8>)
 8003074:	2200      	movs	r2, #0
 8003076:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8003078:	480c      	ldr	r0, [pc, #48]	; (80030ac <HAL_ADC_MspInit+0x1f8>)
 800307a:	f001 fe19 	bl	8004cb0 <HAL_DMA_Init>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <HAL_ADC_MspInit+0x1d4>
      Error_Handler();
 8003084:	f7ff feec 	bl	8002e60 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a08      	ldr	r2, [pc, #32]	; (80030ac <HAL_ADC_MspInit+0x1f8>)
 800308c:	655a      	str	r2, [r3, #84]	; 0x54
 800308e:	4a07      	ldr	r2, [pc, #28]	; (80030ac <HAL_ADC_MspInit+0x1f8>)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6293      	str	r3, [r2, #40]	; 0x28
}
 8003094:	e08b      	b.n	80031ae <HAL_ADC_MspInit+0x2fa>
 8003096:	bf00      	nop
 8003098:	2000abcc 	.word	0x2000abcc
 800309c:	40021000 	.word	0x40021000
 80030a0:	20007a98 	.word	0x20007a98
 80030a4:	40020008 	.word	0x40020008
 80030a8:	50000100 	.word	0x50000100
 80030ac:	20007af8 	.word	0x20007af8
 80030b0:	4002006c 	.word	0x4002006c
  else if(hadc->Instance==ADC3)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a3f      	ldr	r2, [pc, #252]	; (80031b8 <HAL_ADC_MspInit+0x304>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d177      	bne.n	80031ae <HAL_ADC_MspInit+0x2fa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80030be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030c2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80030c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80030c8:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030ce:	4618      	mov	r0, r3
 80030d0:	f003 f834 	bl	800613c <HAL_RCCEx_PeriphCLKConfig>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <HAL_ADC_MspInit+0x22a>
      Error_Handler();
 80030da:	f7ff fec1 	bl	8002e60 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 80030de:	4b37      	ldr	r3, [pc, #220]	; (80031bc <HAL_ADC_MspInit+0x308>)
 80030e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030e2:	4a36      	ldr	r2, [pc, #216]	; (80031bc <HAL_ADC_MspInit+0x308>)
 80030e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030ea:	4b34      	ldr	r3, [pc, #208]	; (80031bc <HAL_ADC_MspInit+0x308>)
 80030ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030f2:	613b      	str	r3, [r7, #16]
 80030f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030f6:	4b31      	ldr	r3, [pc, #196]	; (80031bc <HAL_ADC_MspInit+0x308>)
 80030f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030fa:	4a30      	ldr	r2, [pc, #192]	; (80031bc <HAL_ADC_MspInit+0x308>)
 80030fc:	f043 0302 	orr.w	r3, r3, #2
 8003100:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003102:	4b2e      	ldr	r3, [pc, #184]	; (80031bc <HAL_ADC_MspInit+0x308>)
 8003104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800310e:	4b2b      	ldr	r3, [pc, #172]	; (80031bc <HAL_ADC_MspInit+0x308>)
 8003110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003112:	4a2a      	ldr	r2, [pc, #168]	; (80031bc <HAL_ADC_MspInit+0x308>)
 8003114:	f043 0310 	orr.w	r3, r3, #16
 8003118:	64d3      	str	r3, [r2, #76]	; 0x4c
 800311a:	4b28      	ldr	r3, [pc, #160]	; (80031bc <HAL_ADC_MspInit+0x308>)
 800311c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800311e:	f003 0310 	and.w	r3, r3, #16
 8003122:	60bb      	str	r3, [r7, #8]
 8003124:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003126:	2302      	movs	r3, #2
 8003128:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800312a:	2303      	movs	r3, #3
 800312c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312e:	2300      	movs	r3, #0
 8003130:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003132:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003136:	4619      	mov	r1, r3
 8003138:	4821      	ldr	r0, [pc, #132]	; (80031c0 <HAL_ADC_MspInit+0x30c>)
 800313a:	f002 f8d7 	bl	80052ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800313e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003142:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003144:	2303      	movs	r3, #3
 8003146:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003148:	2300      	movs	r3, #0
 800314a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800314c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003150:	4619      	mov	r1, r3
 8003152:	481c      	ldr	r0, [pc, #112]	; (80031c4 <HAL_ADC_MspInit+0x310>)
 8003154:	f002 f8ca 	bl	80052ec <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Channel1;
 8003158:	4b1b      	ldr	r3, [pc, #108]	; (80031c8 <HAL_ADC_MspInit+0x314>)
 800315a:	4a1c      	ldr	r2, [pc, #112]	; (80031cc <HAL_ADC_MspInit+0x318>)
 800315c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800315e:	4b1a      	ldr	r3, [pc, #104]	; (80031c8 <HAL_ADC_MspInit+0x314>)
 8003160:	2225      	movs	r2, #37	; 0x25
 8003162:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003164:	4b18      	ldr	r3, [pc, #96]	; (80031c8 <HAL_ADC_MspInit+0x314>)
 8003166:	2200      	movs	r2, #0
 8003168:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800316a:	4b17      	ldr	r3, [pc, #92]	; (80031c8 <HAL_ADC_MspInit+0x314>)
 800316c:	2200      	movs	r2, #0
 800316e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8003170:	4b15      	ldr	r3, [pc, #84]	; (80031c8 <HAL_ADC_MspInit+0x314>)
 8003172:	2280      	movs	r2, #128	; 0x80
 8003174:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003176:	4b14      	ldr	r3, [pc, #80]	; (80031c8 <HAL_ADC_MspInit+0x314>)
 8003178:	f44f 7280 	mov.w	r2, #256	; 0x100
 800317c:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800317e:	4b12      	ldr	r3, [pc, #72]	; (80031c8 <HAL_ADC_MspInit+0x314>)
 8003180:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003184:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8003186:	4b10      	ldr	r3, [pc, #64]	; (80031c8 <HAL_ADC_MspInit+0x314>)
 8003188:	2220      	movs	r2, #32
 800318a:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800318c:	4b0e      	ldr	r3, [pc, #56]	; (80031c8 <HAL_ADC_MspInit+0x314>)
 800318e:	2200      	movs	r2, #0
 8003190:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8003192:	480d      	ldr	r0, [pc, #52]	; (80031c8 <HAL_ADC_MspInit+0x314>)
 8003194:	f001 fd8c 	bl	8004cb0 <HAL_DMA_Init>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <HAL_ADC_MspInit+0x2ee>
      Error_Handler();
 800319e:	f7ff fe5f 	bl	8002e60 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a08      	ldr	r2, [pc, #32]	; (80031c8 <HAL_ADC_MspInit+0x314>)
 80031a6:	655a      	str	r2, [r3, #84]	; 0x54
 80031a8:	4a07      	ldr	r2, [pc, #28]	; (80031c8 <HAL_ADC_MspInit+0x314>)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6293      	str	r3, [r2, #40]	; 0x28
}
 80031ae:	bf00      	nop
 80031b0:	3788      	adds	r7, #136	; 0x88
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	50000400 	.word	0x50000400
 80031bc:	40021000 	.word	0x40021000
 80031c0:	48000400 	.word	0x48000400
 80031c4:	48001000 	.word	0x48001000
 80031c8:	20007b58 	.word	0x20007b58
 80031cc:	40020408 	.word	0x40020408

080031d0 <HAL_FMAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmac: FMAC handle pointer
* @retval None
*/
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a0a      	ldr	r2, [pc, #40]	; (8003208 <HAL_FMAC_MspInit+0x38>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d10b      	bne.n	80031fa <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 80031e2:	4b0a      	ldr	r3, [pc, #40]	; (800320c <HAL_FMAC_MspInit+0x3c>)
 80031e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031e6:	4a09      	ldr	r2, [pc, #36]	; (800320c <HAL_FMAC_MspInit+0x3c>)
 80031e8:	f043 0310 	orr.w	r3, r3, #16
 80031ec:	6493      	str	r3, [r2, #72]	; 0x48
 80031ee:	4b07      	ldr	r3, [pc, #28]	; (800320c <HAL_FMAC_MspInit+0x3c>)
 80031f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031f2:	f003 0310 	and.w	r3, r3, #16
 80031f6:	60fb      	str	r3, [r7, #12]
 80031f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }

}
 80031fa:	bf00      	nop
 80031fc:	3714      	adds	r7, #20
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	40021400 	.word	0x40021400
 800320c:	40021000 	.word	0x40021000

08003210 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003210:	b480      	push	{r7}
 8003212:	b087      	sub	sp, #28
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a1c      	ldr	r2, [pc, #112]	; (8003290 <HAL_TIM_Base_MspInit+0x80>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d10c      	bne.n	800323c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003222:	4b1c      	ldr	r3, [pc, #112]	; (8003294 <HAL_TIM_Base_MspInit+0x84>)
 8003224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003226:	4a1b      	ldr	r2, [pc, #108]	; (8003294 <HAL_TIM_Base_MspInit+0x84>)
 8003228:	f043 0310 	orr.w	r3, r3, #16
 800322c:	6593      	str	r3, [r2, #88]	; 0x58
 800322e:	4b19      	ldr	r3, [pc, #100]	; (8003294 <HAL_TIM_Base_MspInit+0x84>)
 8003230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003232:	f003 0310 	and.w	r3, r3, #16
 8003236:	617b      	str	r3, [r7, #20]
 8003238:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 800323a:	e022      	b.n	8003282 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM7)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a15      	ldr	r2, [pc, #84]	; (8003298 <HAL_TIM_Base_MspInit+0x88>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d10c      	bne.n	8003260 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003246:	4b13      	ldr	r3, [pc, #76]	; (8003294 <HAL_TIM_Base_MspInit+0x84>)
 8003248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800324a:	4a12      	ldr	r2, [pc, #72]	; (8003294 <HAL_TIM_Base_MspInit+0x84>)
 800324c:	f043 0320 	orr.w	r3, r3, #32
 8003250:	6593      	str	r3, [r2, #88]	; 0x58
 8003252:	4b10      	ldr	r3, [pc, #64]	; (8003294 <HAL_TIM_Base_MspInit+0x84>)
 8003254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003256:	f003 0320 	and.w	r3, r3, #32
 800325a:	613b      	str	r3, [r7, #16]
 800325c:	693b      	ldr	r3, [r7, #16]
}
 800325e:	e010      	b.n	8003282 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM20)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a0d      	ldr	r2, [pc, #52]	; (800329c <HAL_TIM_Base_MspInit+0x8c>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d10b      	bne.n	8003282 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM20_CLK_ENABLE();
 800326a:	4b0a      	ldr	r3, [pc, #40]	; (8003294 <HAL_TIM_Base_MspInit+0x84>)
 800326c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800326e:	4a09      	ldr	r2, [pc, #36]	; (8003294 <HAL_TIM_Base_MspInit+0x84>)
 8003270:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003274:	6613      	str	r3, [r2, #96]	; 0x60
 8003276:	4b07      	ldr	r3, [pc, #28]	; (8003294 <HAL_TIM_Base_MspInit+0x84>)
 8003278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800327a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	68fb      	ldr	r3, [r7, #12]
}
 8003282:	bf00      	nop
 8003284:	371c      	adds	r7, #28
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	40001000 	.word	0x40001000
 8003294:	40021000 	.word	0x40021000
 8003298:	40001400 	.word	0x40001400
 800329c:	40015000 	.word	0x40015000

080032a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80032a4:	e7fe      	b.n	80032a4 <NMI_Handler+0x4>

080032a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032a6:	b480      	push	{r7}
 80032a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032aa:	e7fe      	b.n	80032aa <HardFault_Handler+0x4>

080032ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032b0:	e7fe      	b.n	80032b0 <MemManage_Handler+0x4>

080032b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032b2:	b480      	push	{r7}
 80032b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032b6:	e7fe      	b.n	80032b6 <BusFault_Handler+0x4>

080032b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032bc:	e7fe      	b.n	80032bc <UsageFault_Handler+0x4>

080032be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032be:	b480      	push	{r7}
 80032c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032c2:	bf00      	nop
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032d0:	bf00      	nop
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032da:	b480      	push	{r7}
 80032dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032de:	bf00      	nop
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032ec:	f000 f8ae 	bl	800344c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032f0:	bf00      	nop
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80032f8:	4802      	ldr	r0, [pc, #8]	; (8003304 <DMA1_Channel1_IRQHandler+0x10>)
 80032fa:	f001 fdfc 	bl	8004ef6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80032fe:	bf00      	nop
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	20007a98 	.word	0x20007a98

08003308 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800330c:	4802      	ldr	r0, [pc, #8]	; (8003318 <DMA1_Channel6_IRQHandler+0x10>)
 800330e:	f001 fdf2 	bl	8004ef6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8003312:	bf00      	nop
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	20007af8 	.word	0x20007af8

0800331c <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003320:	4802      	ldr	r0, [pc, #8]	; (800332c <DMA2_Channel1_IRQHandler+0x10>)
 8003322:	f001 fde8 	bl	8004ef6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8003326:	bf00      	nop
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	20007b58 	.word	0x20007b58

08003330 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003334:	4b06      	ldr	r3, [pc, #24]	; (8003350 <SystemInit+0x20>)
 8003336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333a:	4a05      	ldr	r2, [pc, #20]	; (8003350 <SystemInit+0x20>)
 800333c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003340:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003344:	bf00      	nop
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	e000ed00 	.word	0xe000ed00

08003354 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003354:	480d      	ldr	r0, [pc, #52]	; (800338c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003356:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003358:	f7ff ffea 	bl	8003330 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800335c:	480c      	ldr	r0, [pc, #48]	; (8003390 <LoopForever+0x6>)
  ldr r1, =_edata
 800335e:	490d      	ldr	r1, [pc, #52]	; (8003394 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003360:	4a0d      	ldr	r2, [pc, #52]	; (8003398 <LoopForever+0xe>)
  movs r3, #0
 8003362:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003364:	e002      	b.n	800336c <LoopCopyDataInit>

08003366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800336a:	3304      	adds	r3, #4

0800336c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800336c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800336e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003370:	d3f9      	bcc.n	8003366 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003372:	4a0a      	ldr	r2, [pc, #40]	; (800339c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003374:	4c0a      	ldr	r4, [pc, #40]	; (80033a0 <LoopForever+0x16>)
  movs r3, #0
 8003376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003378:	e001      	b.n	800337e <LoopFillZerobss>

0800337a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800337a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800337c:	3204      	adds	r2, #4

0800337e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800337e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003380:	d3fb      	bcc.n	800337a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003382:	f003 fe0d 	bl	8006fa0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003386:	f7fe fdff 	bl	8001f88 <main>

0800338a <LoopForever>:

LoopForever:
    b LoopForever
 800338a:	e7fe      	b.n	800338a <LoopForever>
  ldr   r0, =_estack
 800338c:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8003390:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003394:	200078d8 	.word	0x200078d8
  ldr r2, =_sidata
 8003398:	08007224 	.word	0x08007224
  ldr r2, =_sbss
 800339c:	200078d8 	.word	0x200078d8
  ldr r4, =_ebss
 80033a0:	2000ad0c 	.word	0x2000ad0c

080033a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80033a4:	e7fe      	b.n	80033a4 <ADC1_2_IRQHandler>

080033a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b082      	sub	sp, #8
 80033aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80033ac:	2300      	movs	r3, #0
 80033ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033b0:	2003      	movs	r0, #3
 80033b2:	f001 fc3d 	bl	8004c30 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80033b6:	200f      	movs	r0, #15
 80033b8:	f000 f80e 	bl	80033d8 <HAL_InitTick>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d002      	beq.n	80033c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	71fb      	strb	r3, [r7, #7]
 80033c6:	e001      	b.n	80033cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80033c8:	f7ff fd50 	bl	8002e6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80033cc:	79fb      	ldrb	r3, [r7, #7]

}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3708      	adds	r7, #8
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
	...

080033d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80033e0:	2300      	movs	r3, #0
 80033e2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80033e4:	4b16      	ldr	r3, [pc, #88]	; (8003440 <HAL_InitTick+0x68>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d022      	beq.n	8003432 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80033ec:	4b15      	ldr	r3, [pc, #84]	; (8003444 <HAL_InitTick+0x6c>)
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	4b13      	ldr	r3, [pc, #76]	; (8003440 <HAL_InitTick+0x68>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80033f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80033fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003400:	4618      	mov	r0, r3
 8003402:	f001 fc48 	bl	8004c96 <HAL_SYSTICK_Config>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10f      	bne.n	800342c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b0f      	cmp	r3, #15
 8003410:	d809      	bhi.n	8003426 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003412:	2200      	movs	r2, #0
 8003414:	6879      	ldr	r1, [r7, #4]
 8003416:	f04f 30ff 	mov.w	r0, #4294967295
 800341a:	f001 fc14 	bl	8004c46 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800341e:	4a0a      	ldr	r2, [pc, #40]	; (8003448 <HAL_InitTick+0x70>)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6013      	str	r3, [r2, #0]
 8003424:	e007      	b.n	8003436 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	73fb      	strb	r3, [r7, #15]
 800342a:	e004      	b.n	8003436 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	73fb      	strb	r3, [r7, #15]
 8003430:	e001      	b.n	8003436 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003436:	7bfb      	ldrb	r3, [r7, #15]
}
 8003438:	4618      	mov	r0, r3
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	20007870 	.word	0x20007870
 8003444:	20007868 	.word	0x20007868
 8003448:	2000786c 	.word	0x2000786c

0800344c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003450:	4b05      	ldr	r3, [pc, #20]	; (8003468 <HAL_IncTick+0x1c>)
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	4b05      	ldr	r3, [pc, #20]	; (800346c <HAL_IncTick+0x20>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4413      	add	r3, r2
 800345a:	4a03      	ldr	r2, [pc, #12]	; (8003468 <HAL_IncTick+0x1c>)
 800345c:	6013      	str	r3, [r2, #0]
}
 800345e:	bf00      	nop
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr
 8003468:	2000abd0 	.word	0x2000abd0
 800346c:	20007870 	.word	0x20007870

08003470 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  return uwTick;
 8003474:	4b03      	ldr	r3, [pc, #12]	; (8003484 <HAL_GetTick+0x14>)
 8003476:	681b      	ldr	r3, [r3, #0]
}
 8003478:	4618      	mov	r0, r3
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	2000abd0 	.word	0x2000abd0

08003488 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	431a      	orrs	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	609a      	str	r2, [r3, #8]
}
 80034a2:	bf00      	nop
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr

080034ae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80034ae:	b480      	push	{r7}
 80034b0:	b083      	sub	sp, #12
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
 80034b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	431a      	orrs	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	609a      	str	r2, [r3, #8]
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b087      	sub	sp, #28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
 80034fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	3360      	adds	r3, #96	; 0x60
 8003502:	461a      	mov	r2, r3
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	4b08      	ldr	r3, [pc, #32]	; (8003534 <LL_ADC_SetOffset+0x44>)
 8003512:	4013      	ands	r3, r2
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	430a      	orrs	r2, r1
 800351e:	4313      	orrs	r3, r2
 8003520:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003528:	bf00      	nop
 800352a:	371c      	adds	r7, #28
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	03fff000 	.word	0x03fff000

08003538 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	3360      	adds	r3, #96	; 0x60
 8003546:	461a      	mov	r2, r3
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003558:	4618      	mov	r0, r3
 800355a:	3714      	adds	r7, #20
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003564:	b480      	push	{r7}
 8003566:	b087      	sub	sp, #28
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	3360      	adds	r3, #96	; 0x60
 8003574:	461a      	mov	r2, r3
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4413      	add	r3, r2
 800357c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	431a      	orrs	r2, r3
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800358e:	bf00      	nop
 8003590:	371c      	adds	r7, #28
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800359a:	b480      	push	{r7}
 800359c:	b087      	sub	sp, #28
 800359e:	af00      	add	r7, sp, #0
 80035a0:	60f8      	str	r0, [r7, #12]
 80035a2:	60b9      	str	r1, [r7, #8]
 80035a4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	3360      	adds	r3, #96	; 0x60
 80035aa:	461a      	mov	r2, r3
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4413      	add	r3, r2
 80035b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	431a      	orrs	r2, r3
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80035c4:	bf00      	nop
 80035c6:	371c      	adds	r7, #28
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b087      	sub	sp, #28
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	3360      	adds	r3, #96	; 0x60
 80035e0:	461a      	mov	r2, r3
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4413      	add	r3, r2
 80035e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	431a      	orrs	r2, r3
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80035fa:	bf00      	nop
 80035fc:	371c      	adds	r7, #28
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr

08003606 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003606:	b480      	push	{r7}
 8003608:	b083      	sub	sp, #12
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
 800360e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	431a      	orrs	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	615a      	str	r2, [r3, #20]
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003640:	2301      	movs	r3, #1
 8003642:	e000      	b.n	8003646 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003652:	b480      	push	{r7}
 8003654:	b087      	sub	sp, #28
 8003656:	af00      	add	r7, sp, #0
 8003658:	60f8      	str	r0, [r7, #12]
 800365a:	60b9      	str	r1, [r7, #8]
 800365c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	3330      	adds	r3, #48	; 0x30
 8003662:	461a      	mov	r2, r3
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	0a1b      	lsrs	r3, r3, #8
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	f003 030c 	and.w	r3, r3, #12
 800366e:	4413      	add	r3, r2
 8003670:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	f003 031f 	and.w	r3, r3, #31
 800367c:	211f      	movs	r1, #31
 800367e:	fa01 f303 	lsl.w	r3, r1, r3
 8003682:	43db      	mvns	r3, r3
 8003684:	401a      	ands	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	0e9b      	lsrs	r3, r3, #26
 800368a:	f003 011f 	and.w	r1, r3, #31
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	f003 031f 	and.w	r3, r3, #31
 8003694:	fa01 f303 	lsl.w	r3, r1, r3
 8003698:	431a      	orrs	r2, r3
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800369e:	bf00      	nop
 80036a0:	371c      	adds	r7, #28
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b087      	sub	sp, #28
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	60f8      	str	r0, [r7, #12]
 80036b2:	60b9      	str	r1, [r7, #8]
 80036b4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	3314      	adds	r3, #20
 80036ba:	461a      	mov	r2, r3
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	0e5b      	lsrs	r3, r3, #25
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	f003 0304 	and.w	r3, r3, #4
 80036c6:	4413      	add	r3, r2
 80036c8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	0d1b      	lsrs	r3, r3, #20
 80036d2:	f003 031f 	and.w	r3, r3, #31
 80036d6:	2107      	movs	r1, #7
 80036d8:	fa01 f303 	lsl.w	r3, r1, r3
 80036dc:	43db      	mvns	r3, r3
 80036de:	401a      	ands	r2, r3
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	0d1b      	lsrs	r3, r3, #20
 80036e4:	f003 031f 	and.w	r3, r3, #31
 80036e8:	6879      	ldr	r1, [r7, #4]
 80036ea:	fa01 f303 	lsl.w	r3, r1, r3
 80036ee:	431a      	orrs	r2, r3
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80036f4:	bf00      	nop
 80036f6:	371c      	adds	r7, #28
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003700:	b480      	push	{r7}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003718:	43db      	mvns	r3, r3
 800371a:	401a      	ands	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f003 0318 	and.w	r3, r3, #24
 8003722:	4908      	ldr	r1, [pc, #32]	; (8003744 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003724:	40d9      	lsrs	r1, r3
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	400b      	ands	r3, r1
 800372a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800372e:	431a      	orrs	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003736:	bf00      	nop
 8003738:	3714      	adds	r7, #20
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	0007ffff 	.word	0x0007ffff

08003748 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f003 031f 	and.w	r3, r3, #31
}
 8003758:	4618      	mov	r0, r3
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003774:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	6093      	str	r3, [r2, #8]
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003798:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800379c:	d101      	bne.n	80037a2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800379e:	2301      	movs	r3, #1
 80037a0:	e000      	b.n	80037a4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80037c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80037c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037ec:	d101      	bne.n	80037f2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80037ee:	2301      	movs	r3, #1
 80037f0:	e000      	b.n	80037f4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003810:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003814:	f043 0201 	orr.w	r2, r3, #1
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f003 0301 	and.w	r3, r3, #1
 8003838:	2b01      	cmp	r3, #1
 800383a:	d101      	bne.n	8003840 <LL_ADC_IsEnabled+0x18>
 800383c:	2301      	movs	r3, #1
 800383e:	e000      	b.n	8003842 <LL_ADC_IsEnabled+0x1a>
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800385e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003862:	f043 0204 	orr.w	r2, r3, #4
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800386a:	bf00      	nop
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr

08003876 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003876:	b480      	push	{r7}
 8003878:	b083      	sub	sp, #12
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f003 0304 	and.w	r3, r3, #4
 8003886:	2b04      	cmp	r3, #4
 8003888:	d101      	bne.n	800388e <LL_ADC_REG_IsConversionOngoing+0x18>
 800388a:	2301      	movs	r3, #1
 800388c:	e000      	b.n	8003890 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f003 0308 	and.w	r3, r3, #8
 80038ac:	2b08      	cmp	r3, #8
 80038ae:	d101      	bne.n	80038b4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80038b0:	2301      	movs	r3, #1
 80038b2:	e000      	b.n	80038b6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
	...

080038c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80038c4:	b590      	push	{r4, r7, lr}
 80038c6:	b089      	sub	sp, #36	; 0x24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038cc:	2300      	movs	r3, #0
 80038ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80038d0:	2300      	movs	r3, #0
 80038d2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e19b      	b.n	8003c16 <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d109      	bne.n	8003900 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7ff fae1 	bl	8002eb4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4618      	mov	r0, r3
 8003906:	f7ff ff3f 	bl	8003788 <LL_ADC_IsDeepPowerDownEnabled>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d004      	beq.n	800391a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4618      	mov	r0, r3
 8003916:	f7ff ff25 	bl	8003764 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff ff5a 	bl	80037d8 <LL_ADC_IsInternalRegulatorEnabled>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d115      	bne.n	8003956 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4618      	mov	r0, r3
 8003930:	f7ff ff3e 	bl	80037b0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003934:	4b97      	ldr	r3, [pc, #604]	; (8003b94 <HAL_ADC_Init+0x2d0>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	099b      	lsrs	r3, r3, #6
 800393a:	4a97      	ldr	r2, [pc, #604]	; (8003b98 <HAL_ADC_Init+0x2d4>)
 800393c:	fba2 2303 	umull	r2, r3, r2, r3
 8003940:	099b      	lsrs	r3, r3, #6
 8003942:	3301      	adds	r3, #1
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003948:	e002      	b.n	8003950 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	3b01      	subs	r3, #1
 800394e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1f9      	bne.n	800394a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff ff3c 	bl	80037d8 <LL_ADC_IsInternalRegulatorEnabled>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10d      	bne.n	8003982 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800396a:	f043 0210 	orr.w	r2, r3, #16
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003976:	f043 0201 	orr.w	r2, r3, #1
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f7ff ff75 	bl	8003876 <LL_ADC_REG_IsConversionOngoing>
 800398c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003992:	f003 0310 	and.w	r3, r3, #16
 8003996:	2b00      	cmp	r3, #0
 8003998:	f040 8134 	bne.w	8003c04 <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f040 8130 	bne.w	8003c04 <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80039ac:	f043 0202 	orr.w	r2, r3, #2
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7ff ff35 	bl	8003828 <LL_ADC_IsEnabled>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d137      	bne.n	8003a34 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039cc:	d004      	beq.n	80039d8 <HAL_ADC_Init+0x114>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a72      	ldr	r2, [pc, #456]	; (8003b9c <HAL_ADC_Init+0x2d8>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d10f      	bne.n	80039f8 <HAL_ADC_Init+0x134>
 80039d8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80039dc:	f7ff ff24 	bl	8003828 <LL_ADC_IsEnabled>
 80039e0:	4604      	mov	r4, r0
 80039e2:	486e      	ldr	r0, [pc, #440]	; (8003b9c <HAL_ADC_Init+0x2d8>)
 80039e4:	f7ff ff20 	bl	8003828 <LL_ADC_IsEnabled>
 80039e8:	4603      	mov	r3, r0
 80039ea:	4323      	orrs	r3, r4
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	bf0c      	ite	eq
 80039f0:	2301      	moveq	r3, #1
 80039f2:	2300      	movne	r3, #0
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	e008      	b.n	8003a0a <HAL_ADC_Init+0x146>
 80039f8:	4869      	ldr	r0, [pc, #420]	; (8003ba0 <HAL_ADC_Init+0x2dc>)
 80039fa:	f7ff ff15 	bl	8003828 <LL_ADC_IsEnabled>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	bf0c      	ite	eq
 8003a04:	2301      	moveq	r3, #1
 8003a06:	2300      	movne	r3, #0
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d012      	beq.n	8003a34 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a16:	d004      	beq.n	8003a22 <HAL_ADC_Init+0x15e>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a5f      	ldr	r2, [pc, #380]	; (8003b9c <HAL_ADC_Init+0x2d8>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d101      	bne.n	8003a26 <HAL_ADC_Init+0x162>
 8003a22:	4a60      	ldr	r2, [pc, #384]	; (8003ba4 <HAL_ADC_Init+0x2e0>)
 8003a24:	e000      	b.n	8003a28 <HAL_ADC_Init+0x164>
 8003a26:	4a60      	ldr	r2, [pc, #384]	; (8003ba8 <HAL_ADC_Init+0x2e4>)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	4610      	mov	r0, r2
 8003a30:	f7ff fd2a 	bl	8003488 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	7f5b      	ldrb	r3, [r3, #29]
 8003a38:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a3e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003a44:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003a4a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a52:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a54:	4313      	orrs	r3, r2
 8003a56:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d106      	bne.n	8003a70 <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a66:	3b01      	subs	r3, #1
 8003a68:	045b      	lsls	r3, r3, #17
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d009      	beq.n	8003a8c <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a84:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68da      	ldr	r2, [r3, #12]
 8003a92:	4b46      	ldr	r3, [pc, #280]	; (8003bac <HAL_ADC_Init+0x2e8>)
 8003a94:	4013      	ands	r3, r2
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	6812      	ldr	r2, [r2, #0]
 8003a9a:	69b9      	ldr	r1, [r7, #24]
 8003a9c:	430b      	orrs	r3, r1
 8003a9e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7ff feee 	bl	800389c <LL_ADC_INJ_IsConversionOngoing>
 8003ac0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d17b      	bne.n	8003bc0 <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d178      	bne.n	8003bc0 <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003ad2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ada:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003adc:	4313      	orrs	r3, r2
 8003ade:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003aea:	f023 0302 	bic.w	r3, r3, #2
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	6812      	ldr	r2, [r2, #0]
 8003af2:	69b9      	ldr	r1, [r7, #24]
 8003af4:	430b      	orrs	r3, r1
 8003af6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d017      	beq.n	8003b30 <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	691a      	ldr	r2, [r3, #16]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003b0e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003b18:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003b1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	6911      	ldr	r1, [r2, #16]
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6812      	ldr	r2, [r2, #0]
 8003b28:	430b      	orrs	r3, r1
 8003b2a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003b2e:	e013      	b.n	8003b58 <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	691a      	ldr	r2, [r3, #16]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003b3e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	6812      	ldr	r2, [r2, #0]
 8003b4c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003b50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b54:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d126      	bne.n	8003bb0 <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003b6c:	f023 0304 	bic.w	r3, r3, #4
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003b78:	4311      	orrs	r1, r2
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003b7e:	4311      	orrs	r1, r2
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b84:	430a      	orrs	r2, r1
 8003b86:	431a      	orrs	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f042 0201 	orr.w	r2, r2, #1
 8003b90:	611a      	str	r2, [r3, #16]
 8003b92:	e015      	b.n	8003bc0 <HAL_ADC_Init+0x2fc>
 8003b94:	20007868 	.word	0x20007868
 8003b98:	053e2d63 	.word	0x053e2d63
 8003b9c:	50000100 	.word	0x50000100
 8003ba0:	50000400 	.word	0x50000400
 8003ba4:	50000300 	.word	0x50000300
 8003ba8:	50000700 	.word	0x50000700
 8003bac:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	691a      	ldr	r2, [r3, #16]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f022 0201 	bic.w	r2, r2, #1
 8003bbe:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d10c      	bne.n	8003be2 <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bce:	f023 010f 	bic.w	r1, r3, #15
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	1e5a      	subs	r2, r3, #1
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	631a      	str	r2, [r3, #48]	; 0x30
 8003be0:	e007      	b.n	8003bf2 <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 020f 	bic.w	r2, r2, #15
 8003bf0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf6:	f023 0303 	bic.w	r3, r3, #3
 8003bfa:	f043 0201 	orr.w	r2, r3, #1
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c02:	e007      	b.n	8003c14 <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c08:	f043 0210 	orr.w	r2, r3, #16
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003c14:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3724      	adds	r7, #36	; 0x24
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd90      	pop	{r4, r7, pc}
 8003c1e:	bf00      	nop

08003c20 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c34:	d004      	beq.n	8003c40 <HAL_ADC_Start_DMA+0x20>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a57      	ldr	r2, [pc, #348]	; (8003d98 <HAL_ADC_Start_DMA+0x178>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d101      	bne.n	8003c44 <HAL_ADC_Start_DMA+0x24>
 8003c40:	4b56      	ldr	r3, [pc, #344]	; (8003d9c <HAL_ADC_Start_DMA+0x17c>)
 8003c42:	e000      	b.n	8003c46 <HAL_ADC_Start_DMA+0x26>
 8003c44:	4b56      	ldr	r3, [pc, #344]	; (8003da0 <HAL_ADC_Start_DMA+0x180>)
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7ff fd7e 	bl	8003748 <LL_ADC_GetMultimode>
 8003c4c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7ff fe0f 	bl	8003876 <LL_ADC_REG_IsConversionOngoing>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f040 8094 	bne.w	8003d88 <HAL_ADC_Start_DMA+0x168>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d101      	bne.n	8003c6e <HAL_ADC_Start_DMA+0x4e>
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	e08f      	b.n	8003d8e <HAL_ADC_Start_DMA+0x16e>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a4a      	ldr	r2, [pc, #296]	; (8003da4 <HAL_ADC_Start_DMA+0x184>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d008      	beq.n	8003c92 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d005      	beq.n	8003c92 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	2b05      	cmp	r3, #5
 8003c8a:	d002      	beq.n	8003c92 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	2b09      	cmp	r3, #9
 8003c90:	d173      	bne.n	8003d7a <HAL_ADC_Start_DMA+0x15a>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f000 fcc4 	bl	8004620 <ADC_Enable>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003c9c:	7dfb      	ldrb	r3, [r7, #23]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d166      	bne.n	8003d70 <HAL_ADC_Start_DMA+0x150>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003caa:	f023 0301 	bic.w	r3, r3, #1
 8003cae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a37      	ldr	r2, [pc, #220]	; (8003d98 <HAL_ADC_Start_DMA+0x178>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d002      	beq.n	8003cc6 <HAL_ADC_Start_DMA+0xa6>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	e001      	b.n	8003cca <HAL_ADC_Start_DMA+0xaa>
 8003cc6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	6812      	ldr	r2, [r2, #0]
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d002      	beq.n	8003cd8 <HAL_ADC_Start_DMA+0xb8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d105      	bne.n	8003ce4 <HAL_ADC_Start_DMA+0xc4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cdc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d006      	beq.n	8003cfe <HAL_ADC_Start_DMA+0xde>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cf4:	f023 0206 	bic.w	r2, r3, #6
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	661a      	str	r2, [r3, #96]	; 0x60
 8003cfc:	e002      	b.n	8003d04 <HAL_ADC_Start_DMA+0xe4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d08:	4a27      	ldr	r2, [pc, #156]	; (8003da8 <HAL_ADC_Start_DMA+0x188>)
 8003d0a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d10:	4a26      	ldr	r2, [pc, #152]	; (8003dac <HAL_ADC_Start_DMA+0x18c>)
 8003d12:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d18:	4a25      	ldr	r2, [pc, #148]	; (8003db0 <HAL_ADC_Start_DMA+0x190>)
 8003d1a:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	221c      	movs	r2, #28
 8003d22:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685a      	ldr	r2, [r3, #4]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f042 0210 	orr.w	r2, r2, #16
 8003d3a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68da      	ldr	r2, [r3, #12]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f042 0201 	orr.w	r2, r2, #1
 8003d4a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	3340      	adds	r3, #64	; 0x40
 8003d56:	4619      	mov	r1, r3
 8003d58:	68ba      	ldr	r2, [r7, #8]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f001 f850 	bl	8004e00 <HAL_DMA_Start_IT>
 8003d60:	4603      	mov	r3, r0
 8003d62:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff fd70 	bl	800384e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003d6e:	e00d      	b.n	8003d8c <HAL_ADC_Start_DMA+0x16c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8003d78:	e008      	b.n	8003d8c <HAL_ADC_Start_DMA+0x16c>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003d86:	e001      	b.n	8003d8c <HAL_ADC_Start_DMA+0x16c>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003d88:	2302      	movs	r3, #2
 8003d8a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003d8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3718      	adds	r7, #24
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	50000100 	.word	0x50000100
 8003d9c:	50000300 	.word	0x50000300
 8003da0:	50000700 	.word	0x50000700
 8003da4:	50000400 	.word	0x50000400
 8003da8:	0800474d 	.word	0x0800474d
 8003dac:	08004825 	.word	0x08004825
 8003db0:	08004841 	.word	0x08004841

08003db4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b0b6      	sub	sp, #216	; 0xd8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d102      	bne.n	8003dec <HAL_ADC_ConfigChannel+0x24>
 8003de6:	2302      	movs	r3, #2
 8003de8:	f000 bc04 	b.w	80045f4 <HAL_ADC_ConfigChannel+0x82c>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7ff fd3c 	bl	8003876 <LL_ADC_REG_IsConversionOngoing>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f040 83e8 	bne.w	80045d6 <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6818      	ldr	r0, [r3, #0]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	6859      	ldr	r1, [r3, #4]
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	461a      	mov	r2, r3
 8003e14:	f7ff fc1d 	bl	8003652 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7ff fd2a 	bl	8003876 <LL_ADC_REG_IsConversionOngoing>
 8003e22:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff fd36 	bl	800389c <LL_ADC_INJ_IsConversionOngoing>
 8003e30:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e34:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f040 81d9 	bne.w	80041f0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e3e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f040 81d4 	bne.w	80041f0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e50:	d10f      	bne.n	8003e72 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6818      	ldr	r0, [r3, #0]
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	f7ff fc24 	bl	80036aa <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7ff fbcb 	bl	8003606 <LL_ADC_SetSamplingTimeCommonConfig>
 8003e70:	e00e      	b.n	8003e90 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6818      	ldr	r0, [r3, #0]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	6819      	ldr	r1, [r3, #0]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	461a      	mov	r2, r3
 8003e80:	f7ff fc13 	bl	80036aa <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2100      	movs	r1, #0
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7ff fbbb 	bl	8003606 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	695a      	ldr	r2, [r3, #20]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	08db      	lsrs	r3, r3, #3
 8003e9c:	f003 0303 	and.w	r3, r3, #3
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	d022      	beq.n	8003ef8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6818      	ldr	r0, [r3, #0]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	6919      	ldr	r1, [r3, #16]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003ec2:	f7ff fb15 	bl	80034f0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6818      	ldr	r0, [r3, #0]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	6919      	ldr	r1, [r3, #16]
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	f7ff fb61 	bl	800359a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6818      	ldr	r0, [r3, #0]
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d102      	bne.n	8003eee <HAL_ADC_ConfigChannel+0x126>
 8003ee8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003eec:	e000      	b.n	8003ef0 <HAL_ADC_ConfigChannel+0x128>
 8003eee:	2300      	movs	r3, #0
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	f7ff fb6d 	bl	80035d0 <LL_ADC_SetOffsetSaturation>
 8003ef6:	e17b      	b.n	80041f0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2100      	movs	r1, #0
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7ff fb1a 	bl	8003538 <LL_ADC_GetOffsetChannel>
 8003f04:	4603      	mov	r3, r0
 8003f06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10a      	bne.n	8003f24 <HAL_ADC_ConfigChannel+0x15c>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2100      	movs	r1, #0
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7ff fb0f 	bl	8003538 <LL_ADC_GetOffsetChannel>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	0e9b      	lsrs	r3, r3, #26
 8003f1e:	f003 021f 	and.w	r2, r3, #31
 8003f22:	e01e      	b.n	8003f62 <HAL_ADC_ConfigChannel+0x19a>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2100      	movs	r1, #0
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7ff fb04 	bl	8003538 <LL_ADC_GetOffsetChannel>
 8003f30:	4603      	mov	r3, r0
 8003f32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f36:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003f3a:	fa93 f3a3 	rbit	r3, r3
 8003f3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003f42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003f46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003f4a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003f52:	2320      	movs	r3, #32
 8003f54:	e004      	b.n	8003f60 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003f56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f5a:	fab3 f383 	clz	r3, r3
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d105      	bne.n	8003f7a <HAL_ADC_ConfigChannel+0x1b2>
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	0e9b      	lsrs	r3, r3, #26
 8003f74:	f003 031f 	and.w	r3, r3, #31
 8003f78:	e018      	b.n	8003fac <HAL_ADC_ConfigChannel+0x1e4>
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f82:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003f86:	fa93 f3a3 	rbit	r3, r3
 8003f8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003f8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003f96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003f9e:	2320      	movs	r3, #32
 8003fa0:	e004      	b.n	8003fac <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003fa2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003fa6:	fab3 f383 	clz	r3, r3
 8003faa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d106      	bne.n	8003fbe <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	2100      	movs	r1, #0
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7ff fad3 	bl	8003564 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2101      	movs	r1, #1
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7ff fab7 	bl	8003538 <LL_ADC_GetOffsetChannel>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d10a      	bne.n	8003fea <HAL_ADC_ConfigChannel+0x222>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2101      	movs	r1, #1
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7ff faac 	bl	8003538 <LL_ADC_GetOffsetChannel>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	0e9b      	lsrs	r3, r3, #26
 8003fe4:	f003 021f 	and.w	r2, r3, #31
 8003fe8:	e01e      	b.n	8004028 <HAL_ADC_ConfigChannel+0x260>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2101      	movs	r1, #1
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7ff faa1 	bl	8003538 <LL_ADC_GetOffsetChannel>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004000:	fa93 f3a3 	rbit	r3, r3
 8004004:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004008:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800400c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004010:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004014:	2b00      	cmp	r3, #0
 8004016:	d101      	bne.n	800401c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004018:	2320      	movs	r3, #32
 800401a:	e004      	b.n	8004026 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800401c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004020:	fab3 f383 	clz	r3, r3
 8004024:	b2db      	uxtb	r3, r3
 8004026:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004030:	2b00      	cmp	r3, #0
 8004032:	d105      	bne.n	8004040 <HAL_ADC_ConfigChannel+0x278>
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	0e9b      	lsrs	r3, r3, #26
 800403a:	f003 031f 	and.w	r3, r3, #31
 800403e:	e018      	b.n	8004072 <HAL_ADC_ConfigChannel+0x2aa>
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004048:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800404c:	fa93 f3a3 	rbit	r3, r3
 8004050:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004054:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004058:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800405c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004060:	2b00      	cmp	r3, #0
 8004062:	d101      	bne.n	8004068 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004064:	2320      	movs	r3, #32
 8004066:	e004      	b.n	8004072 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004068:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800406c:	fab3 f383 	clz	r3, r3
 8004070:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004072:	429a      	cmp	r2, r3
 8004074:	d106      	bne.n	8004084 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2200      	movs	r2, #0
 800407c:	2101      	movs	r1, #1
 800407e:	4618      	mov	r0, r3
 8004080:	f7ff fa70 	bl	8003564 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2102      	movs	r1, #2
 800408a:	4618      	mov	r0, r3
 800408c:	f7ff fa54 	bl	8003538 <LL_ADC_GetOffsetChannel>
 8004090:	4603      	mov	r3, r0
 8004092:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10a      	bne.n	80040b0 <HAL_ADC_ConfigChannel+0x2e8>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2102      	movs	r1, #2
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7ff fa49 	bl	8003538 <LL_ADC_GetOffsetChannel>
 80040a6:	4603      	mov	r3, r0
 80040a8:	0e9b      	lsrs	r3, r3, #26
 80040aa:	f003 021f 	and.w	r2, r3, #31
 80040ae:	e01e      	b.n	80040ee <HAL_ADC_ConfigChannel+0x326>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2102      	movs	r1, #2
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7ff fa3e 	bl	8003538 <LL_ADC_GetOffsetChannel>
 80040bc:	4603      	mov	r3, r0
 80040be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040c6:	fa93 f3a3 	rbit	r3, r3
 80040ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80040ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80040d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80040d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80040de:	2320      	movs	r3, #32
 80040e0:	e004      	b.n	80040ec <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80040e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80040e6:	fab3 f383 	clz	r3, r3
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d105      	bne.n	8004106 <HAL_ADC_ConfigChannel+0x33e>
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	0e9b      	lsrs	r3, r3, #26
 8004100:	f003 031f 	and.w	r3, r3, #31
 8004104:	e016      	b.n	8004134 <HAL_ADC_ConfigChannel+0x36c>
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800410e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004112:	fa93 f3a3 	rbit	r3, r3
 8004116:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004118:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800411a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800411e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004126:	2320      	movs	r3, #32
 8004128:	e004      	b.n	8004134 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800412a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800412e:	fab3 f383 	clz	r3, r3
 8004132:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004134:	429a      	cmp	r2, r3
 8004136:	d106      	bne.n	8004146 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2200      	movs	r2, #0
 800413e:	2102      	movs	r1, #2
 8004140:	4618      	mov	r0, r3
 8004142:	f7ff fa0f 	bl	8003564 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2103      	movs	r1, #3
 800414c:	4618      	mov	r0, r3
 800414e:	f7ff f9f3 	bl	8003538 <LL_ADC_GetOffsetChannel>
 8004152:	4603      	mov	r3, r0
 8004154:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004158:	2b00      	cmp	r3, #0
 800415a:	d10a      	bne.n	8004172 <HAL_ADC_ConfigChannel+0x3aa>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2103      	movs	r1, #3
 8004162:	4618      	mov	r0, r3
 8004164:	f7ff f9e8 	bl	8003538 <LL_ADC_GetOffsetChannel>
 8004168:	4603      	mov	r3, r0
 800416a:	0e9b      	lsrs	r3, r3, #26
 800416c:	f003 021f 	and.w	r2, r3, #31
 8004170:	e017      	b.n	80041a2 <HAL_ADC_ConfigChannel+0x3da>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2103      	movs	r1, #3
 8004178:	4618      	mov	r0, r3
 800417a:	f7ff f9dd 	bl	8003538 <LL_ADC_GetOffsetChannel>
 800417e:	4603      	mov	r3, r0
 8004180:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004182:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004184:	fa93 f3a3 	rbit	r3, r3
 8004188:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800418a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800418c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800418e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004190:	2b00      	cmp	r3, #0
 8004192:	d101      	bne.n	8004198 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004194:	2320      	movs	r3, #32
 8004196:	e003      	b.n	80041a0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004198:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800419a:	fab3 f383 	clz	r3, r3
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d105      	bne.n	80041ba <HAL_ADC_ConfigChannel+0x3f2>
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	0e9b      	lsrs	r3, r3, #26
 80041b4:	f003 031f 	and.w	r3, r3, #31
 80041b8:	e011      	b.n	80041de <HAL_ADC_ConfigChannel+0x416>
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041c2:	fa93 f3a3 	rbit	r3, r3
 80041c6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80041c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80041cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80041d2:	2320      	movs	r3, #32
 80041d4:	e003      	b.n	80041de <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80041d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041d8:	fab3 f383 	clz	r3, r3
 80041dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80041de:	429a      	cmp	r2, r3
 80041e0:	d106      	bne.n	80041f0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2200      	movs	r2, #0
 80041e8:	2103      	movs	r1, #3
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7ff f9ba 	bl	8003564 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7ff fb17 	bl	8003828 <LL_ADC_IsEnabled>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f040 813d 	bne.w	800447c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6818      	ldr	r0, [r3, #0]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	6819      	ldr	r1, [r3, #0]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	461a      	mov	r2, r3
 8004210:	f7ff fa76 	bl	8003700 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	4aa2      	ldr	r2, [pc, #648]	; (80044a4 <HAL_ADC_ConfigChannel+0x6dc>)
 800421a:	4293      	cmp	r3, r2
 800421c:	f040 812e 	bne.w	800447c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10b      	bne.n	8004248 <HAL_ADC_ConfigChannel+0x480>
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	0e9b      	lsrs	r3, r3, #26
 8004236:	3301      	adds	r3, #1
 8004238:	f003 031f 	and.w	r3, r3, #31
 800423c:	2b09      	cmp	r3, #9
 800423e:	bf94      	ite	ls
 8004240:	2301      	movls	r3, #1
 8004242:	2300      	movhi	r3, #0
 8004244:	b2db      	uxtb	r3, r3
 8004246:	e019      	b.n	800427c <HAL_ADC_ConfigChannel+0x4b4>
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800424e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004250:	fa93 f3a3 	rbit	r3, r3
 8004254:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004256:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004258:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800425a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004260:	2320      	movs	r3, #32
 8004262:	e003      	b.n	800426c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004264:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004266:	fab3 f383 	clz	r3, r3
 800426a:	b2db      	uxtb	r3, r3
 800426c:	3301      	adds	r3, #1
 800426e:	f003 031f 	and.w	r3, r3, #31
 8004272:	2b09      	cmp	r3, #9
 8004274:	bf94      	ite	ls
 8004276:	2301      	movls	r3, #1
 8004278:	2300      	movhi	r3, #0
 800427a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800427c:	2b00      	cmp	r3, #0
 800427e:	d079      	beq.n	8004374 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004288:	2b00      	cmp	r3, #0
 800428a:	d107      	bne.n	800429c <HAL_ADC_ConfigChannel+0x4d4>
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	0e9b      	lsrs	r3, r3, #26
 8004292:	3301      	adds	r3, #1
 8004294:	069b      	lsls	r3, r3, #26
 8004296:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800429a:	e015      	b.n	80042c8 <HAL_ADC_ConfigChannel+0x500>
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042a4:	fa93 f3a3 	rbit	r3, r3
 80042a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80042aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042ac:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80042ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d101      	bne.n	80042b8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80042b4:	2320      	movs	r3, #32
 80042b6:	e003      	b.n	80042c0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80042b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042ba:	fab3 f383 	clz	r3, r3
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	3301      	adds	r3, #1
 80042c2:	069b      	lsls	r3, r3, #26
 80042c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d109      	bne.n	80042e8 <HAL_ADC_ConfigChannel+0x520>
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	0e9b      	lsrs	r3, r3, #26
 80042da:	3301      	adds	r3, #1
 80042dc:	f003 031f 	and.w	r3, r3, #31
 80042e0:	2101      	movs	r1, #1
 80042e2:	fa01 f303 	lsl.w	r3, r1, r3
 80042e6:	e017      	b.n	8004318 <HAL_ADC_ConfigChannel+0x550>
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042f0:	fa93 f3a3 	rbit	r3, r3
 80042f4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80042f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042f8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80042fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d101      	bne.n	8004304 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004300:	2320      	movs	r3, #32
 8004302:	e003      	b.n	800430c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004304:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004306:	fab3 f383 	clz	r3, r3
 800430a:	b2db      	uxtb	r3, r3
 800430c:	3301      	adds	r3, #1
 800430e:	f003 031f 	and.w	r3, r3, #31
 8004312:	2101      	movs	r1, #1
 8004314:	fa01 f303 	lsl.w	r3, r1, r3
 8004318:	ea42 0103 	orr.w	r1, r2, r3
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10a      	bne.n	800433e <HAL_ADC_ConfigChannel+0x576>
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	0e9b      	lsrs	r3, r3, #26
 800432e:	3301      	adds	r3, #1
 8004330:	f003 021f 	and.w	r2, r3, #31
 8004334:	4613      	mov	r3, r2
 8004336:	005b      	lsls	r3, r3, #1
 8004338:	4413      	add	r3, r2
 800433a:	051b      	lsls	r3, r3, #20
 800433c:	e018      	b.n	8004370 <HAL_ADC_ConfigChannel+0x5a8>
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004346:	fa93 f3a3 	rbit	r3, r3
 800434a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800434c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800434e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004356:	2320      	movs	r3, #32
 8004358:	e003      	b.n	8004362 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800435a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800435c:	fab3 f383 	clz	r3, r3
 8004360:	b2db      	uxtb	r3, r3
 8004362:	3301      	adds	r3, #1
 8004364:	f003 021f 	and.w	r2, r3, #31
 8004368:	4613      	mov	r3, r2
 800436a:	005b      	lsls	r3, r3, #1
 800436c:	4413      	add	r3, r2
 800436e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004370:	430b      	orrs	r3, r1
 8004372:	e07e      	b.n	8004472 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800437c:	2b00      	cmp	r3, #0
 800437e:	d107      	bne.n	8004390 <HAL_ADC_ConfigChannel+0x5c8>
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	0e9b      	lsrs	r3, r3, #26
 8004386:	3301      	adds	r3, #1
 8004388:	069b      	lsls	r3, r3, #26
 800438a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800438e:	e015      	b.n	80043bc <HAL_ADC_ConfigChannel+0x5f4>
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004398:	fa93 f3a3 	rbit	r3, r3
 800439c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800439e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80043a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d101      	bne.n	80043ac <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80043a8:	2320      	movs	r3, #32
 80043aa:	e003      	b.n	80043b4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80043ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ae:	fab3 f383 	clz	r3, r3
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	3301      	adds	r3, #1
 80043b6:	069b      	lsls	r3, r3, #26
 80043b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d109      	bne.n	80043dc <HAL_ADC_ConfigChannel+0x614>
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	0e9b      	lsrs	r3, r3, #26
 80043ce:	3301      	adds	r3, #1
 80043d0:	f003 031f 	and.w	r3, r3, #31
 80043d4:	2101      	movs	r1, #1
 80043d6:	fa01 f303 	lsl.w	r3, r1, r3
 80043da:	e017      	b.n	800440c <HAL_ADC_ConfigChannel+0x644>
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e2:	6a3b      	ldr	r3, [r7, #32]
 80043e4:	fa93 f3a3 	rbit	r3, r3
 80043e8:	61fb      	str	r3, [r7, #28]
  return result;
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80043ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d101      	bne.n	80043f8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80043f4:	2320      	movs	r3, #32
 80043f6:	e003      	b.n	8004400 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80043f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fa:	fab3 f383 	clz	r3, r3
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	3301      	adds	r3, #1
 8004402:	f003 031f 	and.w	r3, r3, #31
 8004406:	2101      	movs	r1, #1
 8004408:	fa01 f303 	lsl.w	r3, r1, r3
 800440c:	ea42 0103 	orr.w	r1, r2, r3
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004418:	2b00      	cmp	r3, #0
 800441a:	d10d      	bne.n	8004438 <HAL_ADC_ConfigChannel+0x670>
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	0e9b      	lsrs	r3, r3, #26
 8004422:	3301      	adds	r3, #1
 8004424:	f003 021f 	and.w	r2, r3, #31
 8004428:	4613      	mov	r3, r2
 800442a:	005b      	lsls	r3, r3, #1
 800442c:	4413      	add	r3, r2
 800442e:	3b1e      	subs	r3, #30
 8004430:	051b      	lsls	r3, r3, #20
 8004432:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004436:	e01b      	b.n	8004470 <HAL_ADC_ConfigChannel+0x6a8>
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	fa93 f3a3 	rbit	r3, r3
 8004444:	613b      	str	r3, [r7, #16]
  return result;
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d101      	bne.n	8004454 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004450:	2320      	movs	r3, #32
 8004452:	e003      	b.n	800445c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	fab3 f383 	clz	r3, r3
 800445a:	b2db      	uxtb	r3, r3
 800445c:	3301      	adds	r3, #1
 800445e:	f003 021f 	and.w	r2, r3, #31
 8004462:	4613      	mov	r3, r2
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	4413      	add	r3, r2
 8004468:	3b1e      	subs	r3, #30
 800446a:	051b      	lsls	r3, r3, #20
 800446c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004470:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004476:	4619      	mov	r1, r3
 8004478:	f7ff f917 	bl	80036aa <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	4b09      	ldr	r3, [pc, #36]	; (80044a8 <HAL_ADC_ConfigChannel+0x6e0>)
 8004482:	4013      	ands	r3, r2
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 80af 	beq.w	80045e8 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004492:	d004      	beq.n	800449e <HAL_ADC_ConfigChannel+0x6d6>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a04      	ldr	r2, [pc, #16]	; (80044ac <HAL_ADC_ConfigChannel+0x6e4>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d10a      	bne.n	80044b4 <HAL_ADC_ConfigChannel+0x6ec>
 800449e:	4b04      	ldr	r3, [pc, #16]	; (80044b0 <HAL_ADC_ConfigChannel+0x6e8>)
 80044a0:	e009      	b.n	80044b6 <HAL_ADC_ConfigChannel+0x6ee>
 80044a2:	bf00      	nop
 80044a4:	407f0000 	.word	0x407f0000
 80044a8:	80080000 	.word	0x80080000
 80044ac:	50000100 	.word	0x50000100
 80044b0:	50000300 	.word	0x50000300
 80044b4:	4b51      	ldr	r3, [pc, #324]	; (80045fc <HAL_ADC_ConfigChannel+0x834>)
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7ff f80c 	bl	80034d4 <LL_ADC_GetCommonPathInternalCh>
 80044bc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a4e      	ldr	r2, [pc, #312]	; (8004600 <HAL_ADC_ConfigChannel+0x838>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d004      	beq.n	80044d4 <HAL_ADC_ConfigChannel+0x70c>
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a4d      	ldr	r2, [pc, #308]	; (8004604 <HAL_ADC_ConfigChannel+0x83c>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d134      	bne.n	800453e <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80044d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d12e      	bne.n	800453e <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044e8:	d17e      	bne.n	80045e8 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044f2:	d004      	beq.n	80044fe <HAL_ADC_ConfigChannel+0x736>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a43      	ldr	r2, [pc, #268]	; (8004608 <HAL_ADC_ConfigChannel+0x840>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d101      	bne.n	8004502 <HAL_ADC_ConfigChannel+0x73a>
 80044fe:	4a43      	ldr	r2, [pc, #268]	; (800460c <HAL_ADC_ConfigChannel+0x844>)
 8004500:	e000      	b.n	8004504 <HAL_ADC_ConfigChannel+0x73c>
 8004502:	4a3e      	ldr	r2, [pc, #248]	; (80045fc <HAL_ADC_ConfigChannel+0x834>)
 8004504:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004508:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800450c:	4619      	mov	r1, r3
 800450e:	4610      	mov	r0, r2
 8004510:	f7fe ffcd 	bl	80034ae <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004514:	4b3e      	ldr	r3, [pc, #248]	; (8004610 <HAL_ADC_ConfigChannel+0x848>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	099b      	lsrs	r3, r3, #6
 800451a:	4a3e      	ldr	r2, [pc, #248]	; (8004614 <HAL_ADC_ConfigChannel+0x84c>)
 800451c:	fba2 2303 	umull	r2, r3, r2, r3
 8004520:	099b      	lsrs	r3, r3, #6
 8004522:	1c5a      	adds	r2, r3, #1
 8004524:	4613      	mov	r3, r2
 8004526:	005b      	lsls	r3, r3, #1
 8004528:	4413      	add	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800452e:	e002      	b.n	8004536 <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	3b01      	subs	r3, #1
 8004534:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1f9      	bne.n	8004530 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800453c:	e054      	b.n	80045e8 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a35      	ldr	r2, [pc, #212]	; (8004618 <HAL_ADC_ConfigChannel+0x850>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d120      	bne.n	800458a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004548:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800454c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d11a      	bne.n	800458a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800455c:	d144      	bne.n	80045e8 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004566:	d004      	beq.n	8004572 <HAL_ADC_ConfigChannel+0x7aa>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a26      	ldr	r2, [pc, #152]	; (8004608 <HAL_ADC_ConfigChannel+0x840>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d101      	bne.n	8004576 <HAL_ADC_ConfigChannel+0x7ae>
 8004572:	4a26      	ldr	r2, [pc, #152]	; (800460c <HAL_ADC_ConfigChannel+0x844>)
 8004574:	e000      	b.n	8004578 <HAL_ADC_ConfigChannel+0x7b0>
 8004576:	4a21      	ldr	r2, [pc, #132]	; (80045fc <HAL_ADC_ConfigChannel+0x834>)
 8004578:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800457c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004580:	4619      	mov	r1, r3
 8004582:	4610      	mov	r0, r2
 8004584:	f7fe ff93 	bl	80034ae <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004588:	e02e      	b.n	80045e8 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a23      	ldr	r2, [pc, #140]	; (800461c <HAL_ADC_ConfigChannel+0x854>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d129      	bne.n	80045e8 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004594:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004598:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d123      	bne.n	80045e8 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a18      	ldr	r2, [pc, #96]	; (8004608 <HAL_ADC_ConfigChannel+0x840>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d01e      	beq.n	80045e8 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045b2:	d004      	beq.n	80045be <HAL_ADC_ConfigChannel+0x7f6>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a13      	ldr	r2, [pc, #76]	; (8004608 <HAL_ADC_ConfigChannel+0x840>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d101      	bne.n	80045c2 <HAL_ADC_ConfigChannel+0x7fa>
 80045be:	4a13      	ldr	r2, [pc, #76]	; (800460c <HAL_ADC_ConfigChannel+0x844>)
 80045c0:	e000      	b.n	80045c4 <HAL_ADC_ConfigChannel+0x7fc>
 80045c2:	4a0e      	ldr	r2, [pc, #56]	; (80045fc <HAL_ADC_ConfigChannel+0x834>)
 80045c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80045c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80045cc:	4619      	mov	r1, r3
 80045ce:	4610      	mov	r0, r2
 80045d0:	f7fe ff6d 	bl	80034ae <LL_ADC_SetCommonPathInternalCh>
 80045d4:	e008      	b.n	80045e8 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045da:	f043 0220 	orr.w	r2, r3, #32
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80045f0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	37d8      	adds	r7, #216	; 0xd8
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	50000700 	.word	0x50000700
 8004600:	c3210000 	.word	0xc3210000
 8004604:	90c00010 	.word	0x90c00010
 8004608:	50000100 	.word	0x50000100
 800460c:	50000300 	.word	0x50000300
 8004610:	20007868 	.word	0x20007868
 8004614:	053e2d63 	.word	0x053e2d63
 8004618:	c7520000 	.word	0xc7520000
 800461c:	cb840000 	.word	0xcb840000

08004620 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004628:	2300      	movs	r3, #0
 800462a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4618      	mov	r0, r3
 8004632:	f7ff f8f9 	bl	8003828 <LL_ADC_IsEnabled>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d176      	bne.n	800472a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	689a      	ldr	r2, [r3, #8]
 8004642:	4b3c      	ldr	r3, [pc, #240]	; (8004734 <ADC_Enable+0x114>)
 8004644:	4013      	ands	r3, r2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00d      	beq.n	8004666 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800464e:	f043 0210 	orr.w	r2, r3, #16
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800465a:	f043 0201 	orr.w	r2, r3, #1
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e062      	b.n	800472c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4618      	mov	r0, r3
 800466c:	f7ff f8c8 	bl	8003800 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004678:	d004      	beq.n	8004684 <ADC_Enable+0x64>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a2e      	ldr	r2, [pc, #184]	; (8004738 <ADC_Enable+0x118>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d101      	bne.n	8004688 <ADC_Enable+0x68>
 8004684:	4b2d      	ldr	r3, [pc, #180]	; (800473c <ADC_Enable+0x11c>)
 8004686:	e000      	b.n	800468a <ADC_Enable+0x6a>
 8004688:	4b2d      	ldr	r3, [pc, #180]	; (8004740 <ADC_Enable+0x120>)
 800468a:	4618      	mov	r0, r3
 800468c:	f7fe ff22 	bl	80034d4 <LL_ADC_GetCommonPathInternalCh>
 8004690:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004692:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004696:	2b00      	cmp	r3, #0
 8004698:	d013      	beq.n	80046c2 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800469a:	4b2a      	ldr	r3, [pc, #168]	; (8004744 <ADC_Enable+0x124>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	099b      	lsrs	r3, r3, #6
 80046a0:	4a29      	ldr	r2, [pc, #164]	; (8004748 <ADC_Enable+0x128>)
 80046a2:	fba2 2303 	umull	r2, r3, r2, r3
 80046a6:	099b      	lsrs	r3, r3, #6
 80046a8:	1c5a      	adds	r2, r3, #1
 80046aa:	4613      	mov	r3, r2
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	4413      	add	r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80046b4:	e002      	b.n	80046bc <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	3b01      	subs	r3, #1
 80046ba:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1f9      	bne.n	80046b6 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80046c2:	f7fe fed5 	bl	8003470 <HAL_GetTick>
 80046c6:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80046c8:	e028      	b.n	800471c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7ff f8aa 	bl	8003828 <LL_ADC_IsEnabled>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d104      	bne.n	80046e4 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4618      	mov	r0, r3
 80046e0:	f7ff f88e 	bl	8003800 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80046e4:	f7fe fec4 	bl	8003470 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d914      	bls.n	800471c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d00d      	beq.n	800471c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004704:	f043 0210 	orr.w	r2, r3, #16
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004710:	f043 0201 	orr.w	r2, r3, #1
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e007      	b.n	800472c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	2b01      	cmp	r3, #1
 8004728:	d1cf      	bne.n	80046ca <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	8000003f 	.word	0x8000003f
 8004738:	50000100 	.word	0x50000100
 800473c:	50000300 	.word	0x50000300
 8004740:	50000700 	.word	0x50000700
 8004744:	20007868 	.word	0x20007868
 8004748:	053e2d63 	.word	0x053e2d63

0800474c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004758:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800475e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004762:	2b00      	cmp	r3, #0
 8004764:	d14b      	bne.n	80047fe <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800476a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0308 	and.w	r3, r3, #8
 800477c:	2b00      	cmp	r3, #0
 800477e:	d021      	beq.n	80047c4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4618      	mov	r0, r3
 8004786:	f7fe ff51 	bl	800362c <LL_ADC_REG_IsTriggerSourceSWStart>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d032      	beq.n	80047f6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d12b      	bne.n	80047f6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d11f      	bne.n	80047f6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ba:	f043 0201 	orr.w	r2, r3, #1
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	65da      	str	r2, [r3, #92]	; 0x5c
 80047c2:	e018      	b.n	80047f6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d111      	bne.n	80047f6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d105      	bne.n	80047f6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ee:	f043 0201 	orr.w	r2, r3, #1
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	f7fe fa9e 	bl	8002d38 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80047fc:	e00e      	b.n	800481c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004802:	f003 0310 	and.w	r3, r3, #16
 8004806:	2b00      	cmp	r3, #0
 8004808:	d003      	beq.n	8004812 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f7ff fad2 	bl	8003db4 <HAL_ADC_ErrorCallback>
}
 8004810:	e004      	b.n	800481c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	4798      	blx	r3
}
 800481c:	bf00      	nop
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004830:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f7fe f9f2 	bl	8002c1c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004838:	bf00      	nop
 800483a:	3710      	adds	r7, #16
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004852:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800485e:	f043 0204 	orr.w	r2, r3, #4
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f7ff faa4 	bl	8003db4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800486c:	bf00      	nop
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <LL_ADC_IsEnabled>:
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	2b01      	cmp	r3, #1
 8004886:	d101      	bne.n	800488c <LL_ADC_IsEnabled+0x18>
 8004888:	2301      	movs	r3, #1
 800488a:	e000      	b.n	800488e <LL_ADC_IsEnabled+0x1a>
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr

0800489a <LL_ADC_REG_IsConversionOngoing>:
{
 800489a:	b480      	push	{r7}
 800489c:	b083      	sub	sp, #12
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f003 0304 	and.w	r3, r3, #4
 80048aa:	2b04      	cmp	r3, #4
 80048ac:	d101      	bne.n	80048b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80048ae:	2301      	movs	r3, #1
 80048b0:	e000      	b.n	80048b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80048c0:	b590      	push	{r4, r7, lr}
 80048c2:	b0a1      	sub	sp, #132	; 0x84
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048ca:	2300      	movs	r3, #0
 80048cc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d101      	bne.n	80048de <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80048da:	2302      	movs	r3, #2
 80048dc:	e0cb      	b.n	8004a76 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80048e6:	2300      	movs	r3, #0
 80048e8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80048ea:	2300      	movs	r3, #0
 80048ec:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048f6:	d102      	bne.n	80048fe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80048f8:	4b61      	ldr	r3, [pc, #388]	; (8004a80 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80048fa:	60bb      	str	r3, [r7, #8]
 80048fc:	e001      	b.n	8004902 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80048fe:	2300      	movs	r3, #0
 8004900:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d10b      	bne.n	8004920 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800490c:	f043 0220 	orr.w	r2, r3, #32
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e0aa      	b.n	8004a76 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	4618      	mov	r0, r3
 8004924:	f7ff ffb9 	bl	800489a <LL_ADC_REG_IsConversionOngoing>
 8004928:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4618      	mov	r0, r3
 8004930:	f7ff ffb3 	bl	800489a <LL_ADC_REG_IsConversionOngoing>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	f040 808c 	bne.w	8004a54 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800493c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800493e:	2b00      	cmp	r3, #0
 8004940:	f040 8088 	bne.w	8004a54 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800494c:	d004      	beq.n	8004958 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a4b      	ldr	r2, [pc, #300]	; (8004a80 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d101      	bne.n	800495c <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8004958:	4b4a      	ldr	r3, [pc, #296]	; (8004a84 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 800495a:	e000      	b.n	800495e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800495c:	4b4a      	ldr	r3, [pc, #296]	; (8004a88 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 800495e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d041      	beq.n	80049ec <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004968:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	6859      	ldr	r1, [r3, #4]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800497a:	035b      	lsls	r3, r3, #13
 800497c:	430b      	orrs	r3, r1
 800497e:	431a      	orrs	r2, r3
 8004980:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004982:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800498c:	d004      	beq.n	8004998 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a3b      	ldr	r2, [pc, #236]	; (8004a80 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d10f      	bne.n	80049b8 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8004998:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800499c:	f7ff ff6a 	bl	8004874 <LL_ADC_IsEnabled>
 80049a0:	4604      	mov	r4, r0
 80049a2:	4837      	ldr	r0, [pc, #220]	; (8004a80 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80049a4:	f7ff ff66 	bl	8004874 <LL_ADC_IsEnabled>
 80049a8:	4603      	mov	r3, r0
 80049aa:	4323      	orrs	r3, r4
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	bf0c      	ite	eq
 80049b0:	2301      	moveq	r3, #1
 80049b2:	2300      	movne	r3, #0
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	e008      	b.n	80049ca <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 80049b8:	4834      	ldr	r0, [pc, #208]	; (8004a8c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 80049ba:	f7ff ff5b 	bl	8004874 <LL_ADC_IsEnabled>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	bf0c      	ite	eq
 80049c4:	2301      	moveq	r3, #1
 80049c6:	2300      	movne	r3, #0
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d04c      	beq.n	8004a68 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80049ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80049d6:	f023 030f 	bic.w	r3, r3, #15
 80049da:	683a      	ldr	r2, [r7, #0]
 80049dc:	6811      	ldr	r1, [r2, #0]
 80049de:	683a      	ldr	r2, [r7, #0]
 80049e0:	6892      	ldr	r2, [r2, #8]
 80049e2:	430a      	orrs	r2, r1
 80049e4:	431a      	orrs	r2, r3
 80049e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049e8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80049ea:	e03d      	b.n	8004a68 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80049ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049f6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a00:	d004      	beq.n	8004a0c <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a1e      	ldr	r2, [pc, #120]	; (8004a80 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d10f      	bne.n	8004a2c <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8004a0c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004a10:	f7ff ff30 	bl	8004874 <LL_ADC_IsEnabled>
 8004a14:	4604      	mov	r4, r0
 8004a16:	481a      	ldr	r0, [pc, #104]	; (8004a80 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004a18:	f7ff ff2c 	bl	8004874 <LL_ADC_IsEnabled>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	4323      	orrs	r3, r4
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	bf0c      	ite	eq
 8004a24:	2301      	moveq	r3, #1
 8004a26:	2300      	movne	r3, #0
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	e008      	b.n	8004a3e <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 8004a2c:	4817      	ldr	r0, [pc, #92]	; (8004a8c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8004a2e:	f7ff ff21 	bl	8004874 <LL_ADC_IsEnabled>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	bf0c      	ite	eq
 8004a38:	2301      	moveq	r3, #1
 8004a3a:	2300      	movne	r3, #0
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d012      	beq.n	8004a68 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004a42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004a4a:	f023 030f 	bic.w	r3, r3, #15
 8004a4e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004a50:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004a52:	e009      	b.n	8004a68 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a58:	f043 0220 	orr.w	r2, r3, #32
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004a66:	e000      	b.n	8004a6a <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004a68:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004a72:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3784      	adds	r7, #132	; 0x84
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd90      	pop	{r4, r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	50000100 	.word	0x50000100
 8004a84:	50000300 	.word	0x50000300
 8004a88:	50000700 	.word	0x50000700
 8004a8c:	50000400 	.word	0x50000400

08004a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f003 0307 	and.w	r3, r3, #7
 8004a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004aa0:	4b0c      	ldr	r3, [pc, #48]	; (8004ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004aac:	4013      	ands	r3, r2
 8004aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ab8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ac2:	4a04      	ldr	r2, [pc, #16]	; (8004ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	60d3      	str	r3, [r2, #12]
}
 8004ac8:	bf00      	nop
 8004aca:	3714      	adds	r7, #20
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	e000ed00 	.word	0xe000ed00

08004ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004adc:	4b04      	ldr	r3, [pc, #16]	; (8004af0 <__NVIC_GetPriorityGrouping+0x18>)
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	0a1b      	lsrs	r3, r3, #8
 8004ae2:	f003 0307 	and.w	r3, r3, #7
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr
 8004af0:	e000ed00 	.word	0xe000ed00

08004af4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	4603      	mov	r3, r0
 8004afc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	db0b      	blt.n	8004b1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b06:	79fb      	ldrb	r3, [r7, #7]
 8004b08:	f003 021f 	and.w	r2, r3, #31
 8004b0c:	4907      	ldr	r1, [pc, #28]	; (8004b2c <__NVIC_EnableIRQ+0x38>)
 8004b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b12:	095b      	lsrs	r3, r3, #5
 8004b14:	2001      	movs	r0, #1
 8004b16:	fa00 f202 	lsl.w	r2, r0, r2
 8004b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	e000e100 	.word	0xe000e100

08004b30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	4603      	mov	r3, r0
 8004b38:	6039      	str	r1, [r7, #0]
 8004b3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	db0a      	blt.n	8004b5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	b2da      	uxtb	r2, r3
 8004b48:	490c      	ldr	r1, [pc, #48]	; (8004b7c <__NVIC_SetPriority+0x4c>)
 8004b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b4e:	0112      	lsls	r2, r2, #4
 8004b50:	b2d2      	uxtb	r2, r2
 8004b52:	440b      	add	r3, r1
 8004b54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b58:	e00a      	b.n	8004b70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	b2da      	uxtb	r2, r3
 8004b5e:	4908      	ldr	r1, [pc, #32]	; (8004b80 <__NVIC_SetPriority+0x50>)
 8004b60:	79fb      	ldrb	r3, [r7, #7]
 8004b62:	f003 030f 	and.w	r3, r3, #15
 8004b66:	3b04      	subs	r3, #4
 8004b68:	0112      	lsls	r2, r2, #4
 8004b6a:	b2d2      	uxtb	r2, r2
 8004b6c:	440b      	add	r3, r1
 8004b6e:	761a      	strb	r2, [r3, #24]
}
 8004b70:	bf00      	nop
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr
 8004b7c:	e000e100 	.word	0xe000e100
 8004b80:	e000ed00 	.word	0xe000ed00

08004b84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b089      	sub	sp, #36	; 0x24
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f003 0307 	and.w	r3, r3, #7
 8004b96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	f1c3 0307 	rsb	r3, r3, #7
 8004b9e:	2b04      	cmp	r3, #4
 8004ba0:	bf28      	it	cs
 8004ba2:	2304      	movcs	r3, #4
 8004ba4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	3304      	adds	r3, #4
 8004baa:	2b06      	cmp	r3, #6
 8004bac:	d902      	bls.n	8004bb4 <NVIC_EncodePriority+0x30>
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	3b03      	subs	r3, #3
 8004bb2:	e000      	b.n	8004bb6 <NVIC_EncodePriority+0x32>
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc2:	43da      	mvns	r2, r3
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	401a      	ands	r2, r3
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8004bd6:	43d9      	mvns	r1, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bdc:	4313      	orrs	r3, r2
         );
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3724      	adds	r7, #36	; 0x24
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
	...

08004bec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004bfc:	d301      	bcc.n	8004c02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e00f      	b.n	8004c22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c02:	4a0a      	ldr	r2, [pc, #40]	; (8004c2c <SysTick_Config+0x40>)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	3b01      	subs	r3, #1
 8004c08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c0a:	210f      	movs	r1, #15
 8004c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c10:	f7ff ff8e 	bl	8004b30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c14:	4b05      	ldr	r3, [pc, #20]	; (8004c2c <SysTick_Config+0x40>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c1a:	4b04      	ldr	r3, [pc, #16]	; (8004c2c <SysTick_Config+0x40>)
 8004c1c:	2207      	movs	r2, #7
 8004c1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3708      	adds	r7, #8
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	e000e010 	.word	0xe000e010

08004c30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f7ff ff29 	bl	8004a90 <__NVIC_SetPriorityGrouping>
}
 8004c3e:	bf00      	nop
 8004c40:	3708      	adds	r7, #8
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b086      	sub	sp, #24
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	60b9      	str	r1, [r7, #8]
 8004c50:	607a      	str	r2, [r7, #4]
 8004c52:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004c54:	f7ff ff40 	bl	8004ad8 <__NVIC_GetPriorityGrouping>
 8004c58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	68b9      	ldr	r1, [r7, #8]
 8004c5e:	6978      	ldr	r0, [r7, #20]
 8004c60:	f7ff ff90 	bl	8004b84 <NVIC_EncodePriority>
 8004c64:	4602      	mov	r2, r0
 8004c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c6a:	4611      	mov	r1, r2
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7ff ff5f 	bl	8004b30 <__NVIC_SetPriority>
}
 8004c72:	bf00      	nop
 8004c74:	3718      	adds	r7, #24
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b082      	sub	sp, #8
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	4603      	mov	r3, r0
 8004c82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f7ff ff33 	bl	8004af4 <__NVIC_EnableIRQ>
}
 8004c8e:	bf00      	nop
 8004c90:	3708      	adds	r7, #8
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b082      	sub	sp, #8
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f7ff ffa4 	bl	8004bec <SysTick_Config>
 8004ca4:	4603      	mov	r3, r0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3708      	adds	r7, #8
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
	...

08004cb0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d101      	bne.n	8004cc2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e08d      	b.n	8004dde <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	4b47      	ldr	r3, [pc, #284]	; (8004de8 <HAL_DMA_Init+0x138>)
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d80f      	bhi.n	8004cee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	4b45      	ldr	r3, [pc, #276]	; (8004dec <HAL_DMA_Init+0x13c>)
 8004cd6:	4413      	add	r3, r2
 8004cd8:	4a45      	ldr	r2, [pc, #276]	; (8004df0 <HAL_DMA_Init+0x140>)
 8004cda:	fba2 2303 	umull	r2, r3, r2, r3
 8004cde:	091b      	lsrs	r3, r3, #4
 8004ce0:	009a      	lsls	r2, r3, #2
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a42      	ldr	r2, [pc, #264]	; (8004df4 <HAL_DMA_Init+0x144>)
 8004cea:	641a      	str	r2, [r3, #64]	; 0x40
 8004cec:	e00e      	b.n	8004d0c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	4b40      	ldr	r3, [pc, #256]	; (8004df8 <HAL_DMA_Init+0x148>)
 8004cf6:	4413      	add	r3, r2
 8004cf8:	4a3d      	ldr	r2, [pc, #244]	; (8004df0 <HAL_DMA_Init+0x140>)
 8004cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfe:	091b      	lsrs	r3, r3, #4
 8004d00:	009a      	lsls	r2, r3, #2
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a3c      	ldr	r2, [pc, #240]	; (8004dfc <HAL_DMA_Init+0x14c>)
 8004d0a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2202      	movs	r2, #2
 8004d10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d26:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004d30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f9b6 	bl	80050d0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d6c:	d102      	bne.n	8004d74 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685a      	ldr	r2, [r3, #4]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d7c:	b2d2      	uxtb	r2, r2
 8004d7e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004d88:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d010      	beq.n	8004db4 <HAL_DMA_Init+0x104>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	2b04      	cmp	r3, #4
 8004d98:	d80c      	bhi.n	8004db4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 f9d6 	bl	800514c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da4:	2200      	movs	r2, #0
 8004da6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004db0:	605a      	str	r2, [r3, #4]
 8004db2:	e008      	b.n	8004dc6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	40020407 	.word	0x40020407
 8004dec:	bffdfff8 	.word	0xbffdfff8
 8004df0:	cccccccd 	.word	0xcccccccd
 8004df4:	40020000 	.word	0x40020000
 8004df8:	bffdfbf8 	.word	0xbffdfbf8
 8004dfc:	40020400 	.word	0x40020400

08004e00 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
 8004e0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d101      	bne.n	8004e20 <HAL_DMA_Start_IT+0x20>
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	e066      	b.n	8004eee <HAL_DMA_Start_IT+0xee>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d155      	bne.n	8004ee0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2202      	movs	r2, #2
 8004e38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f022 0201 	bic.w	r2, r2, #1
 8004e50:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	68b9      	ldr	r1, [r7, #8]
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f000 f8fb 	bl	8005054 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d008      	beq.n	8004e78 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f042 020e 	orr.w	r2, r2, #14
 8004e74:	601a      	str	r2, [r3, #0]
 8004e76:	e00f      	b.n	8004e98 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f022 0204 	bic.w	r2, r2, #4
 8004e86:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f042 020a 	orr.w	r2, r2, #10
 8004e96:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d007      	beq.n	8004eb6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004eb4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d007      	beq.n	8004ece <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ecc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f042 0201 	orr.w	r2, r2, #1
 8004edc:	601a      	str	r2, [r3, #0]
 8004ede:	e005      	b.n	8004eec <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004ee8:	2302      	movs	r3, #2
 8004eea:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004eec:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3718      	adds	r7, #24
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b084      	sub	sp, #16
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f12:	f003 031f 	and.w	r3, r3, #31
 8004f16:	2204      	movs	r2, #4
 8004f18:	409a      	lsls	r2, r3
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d026      	beq.n	8004f70 <HAL_DMA_IRQHandler+0x7a>
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	f003 0304 	and.w	r3, r3, #4
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d021      	beq.n	8004f70 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0320 	and.w	r3, r3, #32
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d107      	bne.n	8004f4a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f022 0204 	bic.w	r2, r2, #4
 8004f48:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f4e:	f003 021f 	and.w	r2, r3, #31
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f56:	2104      	movs	r1, #4
 8004f58:	fa01 f202 	lsl.w	r2, r1, r2
 8004f5c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d071      	beq.n	800504a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004f6e:	e06c      	b.n	800504a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f74:	f003 031f 	and.w	r3, r3, #31
 8004f78:	2202      	movs	r2, #2
 8004f7a:	409a      	lsls	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	4013      	ands	r3, r2
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d02e      	beq.n	8004fe2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d029      	beq.n	8004fe2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0320 	and.w	r3, r3, #32
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10b      	bne.n	8004fb4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f022 020a 	bic.w	r2, r2, #10
 8004faa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fb8:	f003 021f 	and.w	r2, r3, #31
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc0:	2102      	movs	r1, #2
 8004fc2:	fa01 f202 	lsl.w	r2, r1, r2
 8004fc6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d038      	beq.n	800504a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004fe0:	e033      	b.n	800504a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe6:	f003 031f 	and.w	r3, r3, #31
 8004fea:	2208      	movs	r2, #8
 8004fec:	409a      	lsls	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d02a      	beq.n	800504c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	f003 0308 	and.w	r3, r3, #8
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d025      	beq.n	800504c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 020e 	bic.w	r2, r2, #14
 800500e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005014:	f003 021f 	and.w	r2, r3, #31
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501c:	2101      	movs	r1, #1
 800501e:	fa01 f202 	lsl.w	r2, r1, r2
 8005022:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2201      	movs	r2, #1
 800502e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800503e:	2b00      	cmp	r3, #0
 8005040:	d004      	beq.n	800504c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800504a:	bf00      	nop
 800504c:	bf00      	nop
}
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
 8005060:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800506a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005070:	2b00      	cmp	r3, #0
 8005072:	d004      	beq.n	800507e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800507c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005082:	f003 021f 	and.w	r2, r3, #31
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508a:	2101      	movs	r1, #1
 800508c:	fa01 f202 	lsl.w	r2, r1, r2
 8005090:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	683a      	ldr	r2, [r7, #0]
 8005098:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	2b10      	cmp	r3, #16
 80050a0:	d108      	bne.n	80050b4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68ba      	ldr	r2, [r7, #8]
 80050b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80050b2:	e007      	b.n	80050c4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68ba      	ldr	r2, [r7, #8]
 80050ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	60da      	str	r2, [r3, #12]
}
 80050c4:	bf00      	nop
 80050c6:	3714      	adds	r7, #20
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b087      	sub	sp, #28
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	461a      	mov	r2, r3
 80050de:	4b16      	ldr	r3, [pc, #88]	; (8005138 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d802      	bhi.n	80050ea <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80050e4:	4b15      	ldr	r3, [pc, #84]	; (800513c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80050e6:	617b      	str	r3, [r7, #20]
 80050e8:	e001      	b.n	80050ee <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80050ea:	4b15      	ldr	r3, [pc, #84]	; (8005140 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80050ec:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	3b08      	subs	r3, #8
 80050fa:	4a12      	ldr	r2, [pc, #72]	; (8005144 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80050fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005100:	091b      	lsrs	r3, r3, #4
 8005102:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005108:	089b      	lsrs	r3, r3, #2
 800510a:	009a      	lsls	r2, r3, #2
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	4413      	add	r3, r2
 8005110:	461a      	mov	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a0b      	ldr	r2, [pc, #44]	; (8005148 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800511a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f003 031f 	and.w	r3, r3, #31
 8005122:	2201      	movs	r2, #1
 8005124:	409a      	lsls	r2, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	651a      	str	r2, [r3, #80]	; 0x50
}
 800512a:	bf00      	nop
 800512c:	371c      	adds	r7, #28
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	40020407 	.word	0x40020407
 800513c:	40020800 	.word	0x40020800
 8005140:	40020820 	.word	0x40020820
 8005144:	cccccccd 	.word	0xcccccccd
 8005148:	40020880 	.word	0x40020880

0800514c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800514c:	b480      	push	{r7}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	b2db      	uxtb	r3, r3
 800515a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	4b0b      	ldr	r3, [pc, #44]	; (800518c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005160:	4413      	add	r3, r2
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	461a      	mov	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a08      	ldr	r2, [pc, #32]	; (8005190 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800516e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	3b01      	subs	r3, #1
 8005174:	f003 031f 	and.w	r3, r3, #31
 8005178:	2201      	movs	r2, #1
 800517a:	409a      	lsls	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005180:	bf00      	nop
 8005182:	3714      	adds	r7, #20
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr
 800518c:	1000823f 	.word	0x1000823f
 8005190:	40020940 	.word	0x40020940

08005194 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e033      	b.n	800520e <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d106      	bne.n	80051c0 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f7fe f808 	bl	80031d0 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f854 	bl	8005274 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 f822 	bl	8005216 <FMAC_Reset>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d10c      	bne.n	80051f2 <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051dc:	f043 0210 	orr.w	r2, r3, #16
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	22a0      	movs	r2, #160	; 0xa0
 80051e8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	73fb      	strb	r3, [r7, #15]
 80051f0:	e008      	b.n	8005204 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2220      	movs	r2, #32
 80051fc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 8005200:	2300      	movs	r3, #0
 8005202:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800520c:	7bfb      	ldrb	r3, [r7, #15]
}
 800520e:	4618      	mov	r0, r3
 8005210:	3710      	adds	r7, #16
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8005216:	b580      	push	{r7, lr}
 8005218:	b084      	sub	sp, #16
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800521e:	f7fe f927 	bl	8003470 <HAL_GetTick>
 8005222:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	691a      	ldr	r2, [r3, #16]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005232:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8005234:	e00f      	b.n	8005256 <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8005236:	f7fe f91b 	bl	8003470 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005244:	d907      	bls.n	8005256 <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800524a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e00a      	b.n	800526c <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1e8      	bne.n	8005236 <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3710      	adds	r7, #16
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f807 	bl	8005290 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 f81b 	bl	80052be <FMAC_ResetOutputStateAndDataPointers>
}
 8005288:	bf00      	nop
 800528a:	3708      	adds	r7, #8
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2220      	movs	r2, #32
 80052ae:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 80052b2:	bf00      	nop
 80052b4:	370c      	adds	r7, #12
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr

080052be <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80052be:	b480      	push	{r7}
 80052c0:	b083      	sub	sp, #12
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2220      	movs	r2, #32
 80052dc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 80052e0:	bf00      	nop
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b087      	sub	sp, #28
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80052f6:	2300      	movs	r3, #0
 80052f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80052fa:	e15a      	b.n	80055b2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	2101      	movs	r1, #1
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	fa01 f303 	lsl.w	r3, r1, r3
 8005308:	4013      	ands	r3, r2
 800530a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2b00      	cmp	r3, #0
 8005310:	f000 814c 	beq.w	80055ac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f003 0303 	and.w	r3, r3, #3
 800531c:	2b01      	cmp	r3, #1
 800531e:	d005      	beq.n	800532c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005328:	2b02      	cmp	r3, #2
 800532a:	d130      	bne.n	800538e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	005b      	lsls	r3, r3, #1
 8005336:	2203      	movs	r2, #3
 8005338:	fa02 f303 	lsl.w	r3, r2, r3
 800533c:	43db      	mvns	r3, r3
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	4013      	ands	r3, r2
 8005342:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	68da      	ldr	r2, [r3, #12]
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	005b      	lsls	r3, r3, #1
 800534c:	fa02 f303 	lsl.w	r3, r2, r3
 8005350:	693a      	ldr	r2, [r7, #16]
 8005352:	4313      	orrs	r3, r2
 8005354:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005362:	2201      	movs	r2, #1
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	fa02 f303 	lsl.w	r3, r2, r3
 800536a:	43db      	mvns	r3, r3
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	4013      	ands	r3, r2
 8005370:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	091b      	lsrs	r3, r3, #4
 8005378:	f003 0201 	and.w	r2, r3, #1
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	fa02 f303 	lsl.w	r3, r2, r3
 8005382:	693a      	ldr	r2, [r7, #16]
 8005384:	4313      	orrs	r3, r2
 8005386:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f003 0303 	and.w	r3, r3, #3
 8005396:	2b03      	cmp	r3, #3
 8005398:	d017      	beq.n	80053ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	005b      	lsls	r3, r3, #1
 80053a4:	2203      	movs	r2, #3
 80053a6:	fa02 f303 	lsl.w	r3, r2, r3
 80053aa:	43db      	mvns	r3, r3
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	4013      	ands	r3, r2
 80053b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	689a      	ldr	r2, [r3, #8]
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	005b      	lsls	r3, r3, #1
 80053ba:	fa02 f303 	lsl.w	r3, r2, r3
 80053be:	693a      	ldr	r2, [r7, #16]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f003 0303 	and.w	r3, r3, #3
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d123      	bne.n	800541e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	08da      	lsrs	r2, r3, #3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	3208      	adds	r2, #8
 80053de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	f003 0307 	and.w	r3, r3, #7
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	220f      	movs	r2, #15
 80053ee:	fa02 f303 	lsl.w	r3, r2, r3
 80053f2:	43db      	mvns	r3, r3
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	4013      	ands	r3, r2
 80053f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	691a      	ldr	r2, [r3, #16]
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f003 0307 	and.w	r3, r3, #7
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	fa02 f303 	lsl.w	r3, r2, r3
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	4313      	orrs	r3, r2
 800540e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	08da      	lsrs	r2, r3, #3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	3208      	adds	r2, #8
 8005418:	6939      	ldr	r1, [r7, #16]
 800541a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	005b      	lsls	r3, r3, #1
 8005428:	2203      	movs	r2, #3
 800542a:	fa02 f303 	lsl.w	r3, r2, r3
 800542e:	43db      	mvns	r3, r3
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	4013      	ands	r3, r2
 8005434:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f003 0203 	and.w	r2, r3, #3
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	005b      	lsls	r3, r3, #1
 8005442:	fa02 f303 	lsl.w	r3, r2, r3
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	4313      	orrs	r3, r2
 800544a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	693a      	ldr	r2, [r7, #16]
 8005450:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800545a:	2b00      	cmp	r3, #0
 800545c:	f000 80a6 	beq.w	80055ac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005460:	4b5b      	ldr	r3, [pc, #364]	; (80055d0 <HAL_GPIO_Init+0x2e4>)
 8005462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005464:	4a5a      	ldr	r2, [pc, #360]	; (80055d0 <HAL_GPIO_Init+0x2e4>)
 8005466:	f043 0301 	orr.w	r3, r3, #1
 800546a:	6613      	str	r3, [r2, #96]	; 0x60
 800546c:	4b58      	ldr	r3, [pc, #352]	; (80055d0 <HAL_GPIO_Init+0x2e4>)
 800546e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	60bb      	str	r3, [r7, #8]
 8005476:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005478:	4a56      	ldr	r2, [pc, #344]	; (80055d4 <HAL_GPIO_Init+0x2e8>)
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	089b      	lsrs	r3, r3, #2
 800547e:	3302      	adds	r3, #2
 8005480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005484:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	f003 0303 	and.w	r3, r3, #3
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	220f      	movs	r2, #15
 8005490:	fa02 f303 	lsl.w	r3, r2, r3
 8005494:	43db      	mvns	r3, r3
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	4013      	ands	r3, r2
 800549a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80054a2:	d01f      	beq.n	80054e4 <HAL_GPIO_Init+0x1f8>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a4c      	ldr	r2, [pc, #304]	; (80055d8 <HAL_GPIO_Init+0x2ec>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d019      	beq.n	80054e0 <HAL_GPIO_Init+0x1f4>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a4b      	ldr	r2, [pc, #300]	; (80055dc <HAL_GPIO_Init+0x2f0>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d013      	beq.n	80054dc <HAL_GPIO_Init+0x1f0>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a4a      	ldr	r2, [pc, #296]	; (80055e0 <HAL_GPIO_Init+0x2f4>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d00d      	beq.n	80054d8 <HAL_GPIO_Init+0x1ec>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a49      	ldr	r2, [pc, #292]	; (80055e4 <HAL_GPIO_Init+0x2f8>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d007      	beq.n	80054d4 <HAL_GPIO_Init+0x1e8>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a48      	ldr	r2, [pc, #288]	; (80055e8 <HAL_GPIO_Init+0x2fc>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d101      	bne.n	80054d0 <HAL_GPIO_Init+0x1e4>
 80054cc:	2305      	movs	r3, #5
 80054ce:	e00a      	b.n	80054e6 <HAL_GPIO_Init+0x1fa>
 80054d0:	2306      	movs	r3, #6
 80054d2:	e008      	b.n	80054e6 <HAL_GPIO_Init+0x1fa>
 80054d4:	2304      	movs	r3, #4
 80054d6:	e006      	b.n	80054e6 <HAL_GPIO_Init+0x1fa>
 80054d8:	2303      	movs	r3, #3
 80054da:	e004      	b.n	80054e6 <HAL_GPIO_Init+0x1fa>
 80054dc:	2302      	movs	r3, #2
 80054de:	e002      	b.n	80054e6 <HAL_GPIO_Init+0x1fa>
 80054e0:	2301      	movs	r3, #1
 80054e2:	e000      	b.n	80054e6 <HAL_GPIO_Init+0x1fa>
 80054e4:	2300      	movs	r3, #0
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	f002 0203 	and.w	r2, r2, #3
 80054ec:	0092      	lsls	r2, r2, #2
 80054ee:	4093      	lsls	r3, r2
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80054f6:	4937      	ldr	r1, [pc, #220]	; (80055d4 <HAL_GPIO_Init+0x2e8>)
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	089b      	lsrs	r3, r3, #2
 80054fc:	3302      	adds	r3, #2
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005504:	4b39      	ldr	r3, [pc, #228]	; (80055ec <HAL_GPIO_Init+0x300>)
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	43db      	mvns	r3, r3
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	4013      	ands	r3, r2
 8005512:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d003      	beq.n	8005528 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	4313      	orrs	r3, r2
 8005526:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005528:	4a30      	ldr	r2, [pc, #192]	; (80055ec <HAL_GPIO_Init+0x300>)
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800552e:	4b2f      	ldr	r3, [pc, #188]	; (80055ec <HAL_GPIO_Init+0x300>)
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	43db      	mvns	r3, r3
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	4013      	ands	r3, r2
 800553c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d003      	beq.n	8005552 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	4313      	orrs	r3, r2
 8005550:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005552:	4a26      	ldr	r2, [pc, #152]	; (80055ec <HAL_GPIO_Init+0x300>)
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005558:	4b24      	ldr	r3, [pc, #144]	; (80055ec <HAL_GPIO_Init+0x300>)
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	43db      	mvns	r3, r3
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	4013      	ands	r3, r2
 8005566:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d003      	beq.n	800557c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	4313      	orrs	r3, r2
 800557a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800557c:	4a1b      	ldr	r2, [pc, #108]	; (80055ec <HAL_GPIO_Init+0x300>)
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005582:	4b1a      	ldr	r3, [pc, #104]	; (80055ec <HAL_GPIO_Init+0x300>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	43db      	mvns	r3, r3
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	4013      	ands	r3, r2
 8005590:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d003      	beq.n	80055a6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80055a6:	4a11      	ldr	r2, [pc, #68]	; (80055ec <HAL_GPIO_Init+0x300>)
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	3301      	adds	r3, #1
 80055b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	fa22 f303 	lsr.w	r3, r2, r3
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f47f ae9d 	bne.w	80052fc <HAL_GPIO_Init+0x10>
  }
}
 80055c2:	bf00      	nop
 80055c4:	bf00      	nop
 80055c6:	371c      	adds	r7, #28
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr
 80055d0:	40021000 	.word	0x40021000
 80055d4:	40010000 	.word	0x40010000
 80055d8:	48000400 	.word	0x48000400
 80055dc:	48000800 	.word	0x48000800
 80055e0:	48000c00 	.word	0x48000c00
 80055e4:	48001000 	.word	0x48001000
 80055e8:	48001400 	.word	0x48001400
 80055ec:	40010400 	.word	0x40010400

080055f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d141      	bne.n	8005682 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80055fe:	4b4b      	ldr	r3, [pc, #300]	; (800572c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005606:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800560a:	d131      	bne.n	8005670 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800560c:	4b47      	ldr	r3, [pc, #284]	; (800572c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800560e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005612:	4a46      	ldr	r2, [pc, #280]	; (800572c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005614:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005618:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800561c:	4b43      	ldr	r3, [pc, #268]	; (800572c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005624:	4a41      	ldr	r2, [pc, #260]	; (800572c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005626:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800562a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800562c:	4b40      	ldr	r3, [pc, #256]	; (8005730 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2232      	movs	r2, #50	; 0x32
 8005632:	fb02 f303 	mul.w	r3, r2, r3
 8005636:	4a3f      	ldr	r2, [pc, #252]	; (8005734 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005638:	fba2 2303 	umull	r2, r3, r2, r3
 800563c:	0c9b      	lsrs	r3, r3, #18
 800563e:	3301      	adds	r3, #1
 8005640:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005642:	e002      	b.n	800564a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	3b01      	subs	r3, #1
 8005648:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800564a:	4b38      	ldr	r3, [pc, #224]	; (800572c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005656:	d102      	bne.n	800565e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1f2      	bne.n	8005644 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800565e:	4b33      	ldr	r3, [pc, #204]	; (800572c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005666:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800566a:	d158      	bne.n	800571e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800566c:	2303      	movs	r3, #3
 800566e:	e057      	b.n	8005720 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005670:	4b2e      	ldr	r3, [pc, #184]	; (800572c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005672:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005676:	4a2d      	ldr	r2, [pc, #180]	; (800572c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005678:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800567c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005680:	e04d      	b.n	800571e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005688:	d141      	bne.n	800570e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800568a:	4b28      	ldr	r3, [pc, #160]	; (800572c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005696:	d131      	bne.n	80056fc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005698:	4b24      	ldr	r3, [pc, #144]	; (800572c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800569a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800569e:	4a23      	ldr	r2, [pc, #140]	; (800572c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80056a8:	4b20      	ldr	r3, [pc, #128]	; (800572c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80056b0:	4a1e      	ldr	r2, [pc, #120]	; (800572c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80056b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80056b8:	4b1d      	ldr	r3, [pc, #116]	; (8005730 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2232      	movs	r2, #50	; 0x32
 80056be:	fb02 f303 	mul.w	r3, r2, r3
 80056c2:	4a1c      	ldr	r2, [pc, #112]	; (8005734 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80056c4:	fba2 2303 	umull	r2, r3, r2, r3
 80056c8:	0c9b      	lsrs	r3, r3, #18
 80056ca:	3301      	adds	r3, #1
 80056cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056ce:	e002      	b.n	80056d6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	3b01      	subs	r3, #1
 80056d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056d6:	4b15      	ldr	r3, [pc, #84]	; (800572c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056e2:	d102      	bne.n	80056ea <HAL_PWREx_ControlVoltageScaling+0xfa>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1f2      	bne.n	80056d0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80056ea:	4b10      	ldr	r3, [pc, #64]	; (800572c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056f6:	d112      	bne.n	800571e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e011      	b.n	8005720 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80056fc:	4b0b      	ldr	r3, [pc, #44]	; (800572c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005702:	4a0a      	ldr	r2, [pc, #40]	; (800572c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005708:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800570c:	e007      	b.n	800571e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800570e:	4b07      	ldr	r3, [pc, #28]	; (800572c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005716:	4a05      	ldr	r2, [pc, #20]	; (800572c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005718:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800571c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3714      	adds	r7, #20
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr
 800572c:	40007000 	.word	0x40007000
 8005730:	20007868 	.word	0x20007868
 8005734:	431bde83 	.word	0x431bde83

08005738 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005738:	b480      	push	{r7}
 800573a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800573c:	4b05      	ldr	r3, [pc, #20]	; (8005754 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	4a04      	ldr	r2, [pc, #16]	; (8005754 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005742:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005746:	6093      	str	r3, [r2, #8]
}
 8005748:	bf00      	nop
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	40007000 	.word	0x40007000

08005758 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b088      	sub	sp, #32
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d101      	bne.n	800576a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e2fe      	b.n	8005d68 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0301 	and.w	r3, r3, #1
 8005772:	2b00      	cmp	r3, #0
 8005774:	d075      	beq.n	8005862 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005776:	4b97      	ldr	r3, [pc, #604]	; (80059d4 <HAL_RCC_OscConfig+0x27c>)
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f003 030c 	and.w	r3, r3, #12
 800577e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005780:	4b94      	ldr	r3, [pc, #592]	; (80059d4 <HAL_RCC_OscConfig+0x27c>)
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	f003 0303 	and.w	r3, r3, #3
 8005788:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	2b0c      	cmp	r3, #12
 800578e:	d102      	bne.n	8005796 <HAL_RCC_OscConfig+0x3e>
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	2b03      	cmp	r3, #3
 8005794:	d002      	beq.n	800579c <HAL_RCC_OscConfig+0x44>
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	2b08      	cmp	r3, #8
 800579a:	d10b      	bne.n	80057b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800579c:	4b8d      	ldr	r3, [pc, #564]	; (80059d4 <HAL_RCC_OscConfig+0x27c>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d05b      	beq.n	8005860 <HAL_RCC_OscConfig+0x108>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d157      	bne.n	8005860 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e2d9      	b.n	8005d68 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057bc:	d106      	bne.n	80057cc <HAL_RCC_OscConfig+0x74>
 80057be:	4b85      	ldr	r3, [pc, #532]	; (80059d4 <HAL_RCC_OscConfig+0x27c>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a84      	ldr	r2, [pc, #528]	; (80059d4 <HAL_RCC_OscConfig+0x27c>)
 80057c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057c8:	6013      	str	r3, [r2, #0]
 80057ca:	e01d      	b.n	8005808 <HAL_RCC_OscConfig+0xb0>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057d4:	d10c      	bne.n	80057f0 <HAL_RCC_OscConfig+0x98>
 80057d6:	4b7f      	ldr	r3, [pc, #508]	; (80059d4 <HAL_RCC_OscConfig+0x27c>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a7e      	ldr	r2, [pc, #504]	; (80059d4 <HAL_RCC_OscConfig+0x27c>)
 80057dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057e0:	6013      	str	r3, [r2, #0]
 80057e2:	4b7c      	ldr	r3, [pc, #496]	; (80059d4 <HAL_RCC_OscConfig+0x27c>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a7b      	ldr	r2, [pc, #492]	; (80059d4 <HAL_RCC_OscConfig+0x27c>)
 80057e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057ec:	6013      	str	r3, [r2, #0]
 80057ee:	e00b      	b.n	8005808 <HAL_RCC_OscConfig+0xb0>
 80057f0:	4b78      	ldr	r3, [pc, #480]	; (80059d4 <HAL_RCC_OscConfig+0x27c>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a77      	ldr	r2, [pc, #476]	; (80059d4 <HAL_RCC_OscConfig+0x27c>)
 80057f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057fa:	6013      	str	r3, [r2, #0]
 80057fc:	4b75      	ldr	r3, [pc, #468]	; (80059d4 <HAL_RCC_OscConfig+0x27c>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a74      	ldr	r2, [pc, #464]	; (80059d4 <HAL_RCC_OscConfig+0x27c>)
 8005802:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005806:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d013      	beq.n	8005838 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005810:	f7fd fe2e 	bl	8003470 <HAL_GetTick>
 8005814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005816:	e008      	b.n	800582a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005818:	f7fd fe2a 	bl	8003470 <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	2b64      	cmp	r3, #100	; 0x64
 8005824:	d901      	bls.n	800582a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e29e      	b.n	8005d68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800582a:	4b6a      	ldr	r3, [pc, #424]	; (80059d4 <HAL_RCC_OscConfig+0x27c>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d0f0      	beq.n	8005818 <HAL_RCC_OscConfig+0xc0>
 8005836:	e014      	b.n	8005862 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005838:	f7fd fe1a 	bl	8003470 <HAL_GetTick>
 800583c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800583e:	e008      	b.n	8005852 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005840:	f7fd fe16 	bl	8003470 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b64      	cmp	r3, #100	; 0x64
 800584c:	d901      	bls.n	8005852 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e28a      	b.n	8005d68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005852:	4b60      	ldr	r3, [pc, #384]	; (80059d4 <HAL_RCC_OscConfig+0x27c>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1f0      	bne.n	8005840 <HAL_RCC_OscConfig+0xe8>
 800585e:	e000      	b.n	8005862 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005860:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0302 	and.w	r3, r3, #2
 800586a:	2b00      	cmp	r3, #0
 800586c:	d075      	beq.n	800595a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800586e:	4b59      	ldr	r3, [pc, #356]	; (80059d4 <HAL_RCC_OscConfig+0x27c>)
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f003 030c 	and.w	r3, r3, #12
 8005876:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005878:	4b56      	ldr	r3, [pc, #344]	; (80059d4 <HAL_RCC_OscConfig+0x27c>)
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	f003 0303 	and.w	r3, r3, #3
 8005880:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	2b0c      	cmp	r3, #12
 8005886:	d102      	bne.n	800588e <HAL_RCC_OscConfig+0x136>
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	2b02      	cmp	r3, #2
 800588c:	d002      	beq.n	8005894 <HAL_RCC_OscConfig+0x13c>
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	2b04      	cmp	r3, #4
 8005892:	d11f      	bne.n	80058d4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005894:	4b4f      	ldr	r3, [pc, #316]	; (80059d4 <HAL_RCC_OscConfig+0x27c>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800589c:	2b00      	cmp	r3, #0
 800589e:	d005      	beq.n	80058ac <HAL_RCC_OscConfig+0x154>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d101      	bne.n	80058ac <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e25d      	b.n	8005d68 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058ac:	4b49      	ldr	r3, [pc, #292]	; (80059d4 <HAL_RCC_OscConfig+0x27c>)
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	061b      	lsls	r3, r3, #24
 80058ba:	4946      	ldr	r1, [pc, #280]	; (80059d4 <HAL_RCC_OscConfig+0x27c>)
 80058bc:	4313      	orrs	r3, r2
 80058be:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80058c0:	4b45      	ldr	r3, [pc, #276]	; (80059d8 <HAL_RCC_OscConfig+0x280>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7fd fd87 	bl	80033d8 <HAL_InitTick>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d043      	beq.n	8005958 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e249      	b.n	8005d68 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d023      	beq.n	8005924 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058dc:	4b3d      	ldr	r3, [pc, #244]	; (80059d4 <HAL_RCC_OscConfig+0x27c>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a3c      	ldr	r2, [pc, #240]	; (80059d4 <HAL_RCC_OscConfig+0x27c>)
 80058e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e8:	f7fd fdc2 	bl	8003470 <HAL_GetTick>
 80058ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058ee:	e008      	b.n	8005902 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058f0:	f7fd fdbe 	bl	8003470 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d901      	bls.n	8005902 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e232      	b.n	8005d68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005902:	4b34      	ldr	r3, [pc, #208]	; (80059d4 <HAL_RCC_OscConfig+0x27c>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800590a:	2b00      	cmp	r3, #0
 800590c:	d0f0      	beq.n	80058f0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800590e:	4b31      	ldr	r3, [pc, #196]	; (80059d4 <HAL_RCC_OscConfig+0x27c>)
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	061b      	lsls	r3, r3, #24
 800591c:	492d      	ldr	r1, [pc, #180]	; (80059d4 <HAL_RCC_OscConfig+0x27c>)
 800591e:	4313      	orrs	r3, r2
 8005920:	604b      	str	r3, [r1, #4]
 8005922:	e01a      	b.n	800595a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005924:	4b2b      	ldr	r3, [pc, #172]	; (80059d4 <HAL_RCC_OscConfig+0x27c>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a2a      	ldr	r2, [pc, #168]	; (80059d4 <HAL_RCC_OscConfig+0x27c>)
 800592a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800592e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005930:	f7fd fd9e 	bl	8003470 <HAL_GetTick>
 8005934:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005936:	e008      	b.n	800594a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005938:	f7fd fd9a 	bl	8003470 <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	2b02      	cmp	r3, #2
 8005944:	d901      	bls.n	800594a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e20e      	b.n	8005d68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800594a:	4b22      	ldr	r3, [pc, #136]	; (80059d4 <HAL_RCC_OscConfig+0x27c>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1f0      	bne.n	8005938 <HAL_RCC_OscConfig+0x1e0>
 8005956:	e000      	b.n	800595a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005958:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0308 	and.w	r3, r3, #8
 8005962:	2b00      	cmp	r3, #0
 8005964:	d041      	beq.n	80059ea <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d01c      	beq.n	80059a8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800596e:	4b19      	ldr	r3, [pc, #100]	; (80059d4 <HAL_RCC_OscConfig+0x27c>)
 8005970:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005974:	4a17      	ldr	r2, [pc, #92]	; (80059d4 <HAL_RCC_OscConfig+0x27c>)
 8005976:	f043 0301 	orr.w	r3, r3, #1
 800597a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800597e:	f7fd fd77 	bl	8003470 <HAL_GetTick>
 8005982:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005984:	e008      	b.n	8005998 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005986:	f7fd fd73 	bl	8003470 <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	2b02      	cmp	r3, #2
 8005992:	d901      	bls.n	8005998 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e1e7      	b.n	8005d68 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005998:	4b0e      	ldr	r3, [pc, #56]	; (80059d4 <HAL_RCC_OscConfig+0x27c>)
 800599a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800599e:	f003 0302 	and.w	r3, r3, #2
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d0ef      	beq.n	8005986 <HAL_RCC_OscConfig+0x22e>
 80059a6:	e020      	b.n	80059ea <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059a8:	4b0a      	ldr	r3, [pc, #40]	; (80059d4 <HAL_RCC_OscConfig+0x27c>)
 80059aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059ae:	4a09      	ldr	r2, [pc, #36]	; (80059d4 <HAL_RCC_OscConfig+0x27c>)
 80059b0:	f023 0301 	bic.w	r3, r3, #1
 80059b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059b8:	f7fd fd5a 	bl	8003470 <HAL_GetTick>
 80059bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80059be:	e00d      	b.n	80059dc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059c0:	f7fd fd56 	bl	8003470 <HAL_GetTick>
 80059c4:	4602      	mov	r2, r0
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d906      	bls.n	80059dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e1ca      	b.n	8005d68 <HAL_RCC_OscConfig+0x610>
 80059d2:	bf00      	nop
 80059d4:	40021000 	.word	0x40021000
 80059d8:	2000786c 	.word	0x2000786c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80059dc:	4b8c      	ldr	r3, [pc, #560]	; (8005c10 <HAL_RCC_OscConfig+0x4b8>)
 80059de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059e2:	f003 0302 	and.w	r3, r3, #2
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d1ea      	bne.n	80059c0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0304 	and.w	r3, r3, #4
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f000 80a6 	beq.w	8005b44 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059f8:	2300      	movs	r3, #0
 80059fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80059fc:	4b84      	ldr	r3, [pc, #528]	; (8005c10 <HAL_RCC_OscConfig+0x4b8>)
 80059fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d101      	bne.n	8005a0c <HAL_RCC_OscConfig+0x2b4>
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e000      	b.n	8005a0e <HAL_RCC_OscConfig+0x2b6>
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00d      	beq.n	8005a2e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a12:	4b7f      	ldr	r3, [pc, #508]	; (8005c10 <HAL_RCC_OscConfig+0x4b8>)
 8005a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a16:	4a7e      	ldr	r2, [pc, #504]	; (8005c10 <HAL_RCC_OscConfig+0x4b8>)
 8005a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a1c:	6593      	str	r3, [r2, #88]	; 0x58
 8005a1e:	4b7c      	ldr	r3, [pc, #496]	; (8005c10 <HAL_RCC_OscConfig+0x4b8>)
 8005a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a26:	60fb      	str	r3, [r7, #12]
 8005a28:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a2e:	4b79      	ldr	r3, [pc, #484]	; (8005c14 <HAL_RCC_OscConfig+0x4bc>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d118      	bne.n	8005a6c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a3a:	4b76      	ldr	r3, [pc, #472]	; (8005c14 <HAL_RCC_OscConfig+0x4bc>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a75      	ldr	r2, [pc, #468]	; (8005c14 <HAL_RCC_OscConfig+0x4bc>)
 8005a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a46:	f7fd fd13 	bl	8003470 <HAL_GetTick>
 8005a4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a4c:	e008      	b.n	8005a60 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a4e:	f7fd fd0f 	bl	8003470 <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d901      	bls.n	8005a60 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e183      	b.n	8005d68 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a60:	4b6c      	ldr	r3, [pc, #432]	; (8005c14 <HAL_RCC_OscConfig+0x4bc>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d0f0      	beq.n	8005a4e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d108      	bne.n	8005a86 <HAL_RCC_OscConfig+0x32e>
 8005a74:	4b66      	ldr	r3, [pc, #408]	; (8005c10 <HAL_RCC_OscConfig+0x4b8>)
 8005a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a7a:	4a65      	ldr	r2, [pc, #404]	; (8005c10 <HAL_RCC_OscConfig+0x4b8>)
 8005a7c:	f043 0301 	orr.w	r3, r3, #1
 8005a80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a84:	e024      	b.n	8005ad0 <HAL_RCC_OscConfig+0x378>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	2b05      	cmp	r3, #5
 8005a8c:	d110      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x358>
 8005a8e:	4b60      	ldr	r3, [pc, #384]	; (8005c10 <HAL_RCC_OscConfig+0x4b8>)
 8005a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a94:	4a5e      	ldr	r2, [pc, #376]	; (8005c10 <HAL_RCC_OscConfig+0x4b8>)
 8005a96:	f043 0304 	orr.w	r3, r3, #4
 8005a9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a9e:	4b5c      	ldr	r3, [pc, #368]	; (8005c10 <HAL_RCC_OscConfig+0x4b8>)
 8005aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aa4:	4a5a      	ldr	r2, [pc, #360]	; (8005c10 <HAL_RCC_OscConfig+0x4b8>)
 8005aa6:	f043 0301 	orr.w	r3, r3, #1
 8005aaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005aae:	e00f      	b.n	8005ad0 <HAL_RCC_OscConfig+0x378>
 8005ab0:	4b57      	ldr	r3, [pc, #348]	; (8005c10 <HAL_RCC_OscConfig+0x4b8>)
 8005ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ab6:	4a56      	ldr	r2, [pc, #344]	; (8005c10 <HAL_RCC_OscConfig+0x4b8>)
 8005ab8:	f023 0301 	bic.w	r3, r3, #1
 8005abc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ac0:	4b53      	ldr	r3, [pc, #332]	; (8005c10 <HAL_RCC_OscConfig+0x4b8>)
 8005ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ac6:	4a52      	ldr	r2, [pc, #328]	; (8005c10 <HAL_RCC_OscConfig+0x4b8>)
 8005ac8:	f023 0304 	bic.w	r3, r3, #4
 8005acc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d016      	beq.n	8005b06 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ad8:	f7fd fcca 	bl	8003470 <HAL_GetTick>
 8005adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ade:	e00a      	b.n	8005af6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ae0:	f7fd fcc6 	bl	8003470 <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d901      	bls.n	8005af6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e138      	b.n	8005d68 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005af6:	4b46      	ldr	r3, [pc, #280]	; (8005c10 <HAL_RCC_OscConfig+0x4b8>)
 8005af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005afc:	f003 0302 	and.w	r3, r3, #2
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d0ed      	beq.n	8005ae0 <HAL_RCC_OscConfig+0x388>
 8005b04:	e015      	b.n	8005b32 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b06:	f7fd fcb3 	bl	8003470 <HAL_GetTick>
 8005b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b0c:	e00a      	b.n	8005b24 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b0e:	f7fd fcaf 	bl	8003470 <HAL_GetTick>
 8005b12:	4602      	mov	r2, r0
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d901      	bls.n	8005b24 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	e121      	b.n	8005d68 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b24:	4b3a      	ldr	r3, [pc, #232]	; (8005c10 <HAL_RCC_OscConfig+0x4b8>)
 8005b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b2a:	f003 0302 	and.w	r3, r3, #2
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1ed      	bne.n	8005b0e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005b32:	7ffb      	ldrb	r3, [r7, #31]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d105      	bne.n	8005b44 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b38:	4b35      	ldr	r3, [pc, #212]	; (8005c10 <HAL_RCC_OscConfig+0x4b8>)
 8005b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b3c:	4a34      	ldr	r2, [pc, #208]	; (8005c10 <HAL_RCC_OscConfig+0x4b8>)
 8005b3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b42:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0320 	and.w	r3, r3, #32
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d03c      	beq.n	8005bca <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d01c      	beq.n	8005b92 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005b58:	4b2d      	ldr	r3, [pc, #180]	; (8005c10 <HAL_RCC_OscConfig+0x4b8>)
 8005b5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b5e:	4a2c      	ldr	r2, [pc, #176]	; (8005c10 <HAL_RCC_OscConfig+0x4b8>)
 8005b60:	f043 0301 	orr.w	r3, r3, #1
 8005b64:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b68:	f7fd fc82 	bl	8003470 <HAL_GetTick>
 8005b6c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005b6e:	e008      	b.n	8005b82 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b70:	f7fd fc7e 	bl	8003470 <HAL_GetTick>
 8005b74:	4602      	mov	r2, r0
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d901      	bls.n	8005b82 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e0f2      	b.n	8005d68 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005b82:	4b23      	ldr	r3, [pc, #140]	; (8005c10 <HAL_RCC_OscConfig+0x4b8>)
 8005b84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b88:	f003 0302 	and.w	r3, r3, #2
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d0ef      	beq.n	8005b70 <HAL_RCC_OscConfig+0x418>
 8005b90:	e01b      	b.n	8005bca <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005b92:	4b1f      	ldr	r3, [pc, #124]	; (8005c10 <HAL_RCC_OscConfig+0x4b8>)
 8005b94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b98:	4a1d      	ldr	r2, [pc, #116]	; (8005c10 <HAL_RCC_OscConfig+0x4b8>)
 8005b9a:	f023 0301 	bic.w	r3, r3, #1
 8005b9e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ba2:	f7fd fc65 	bl	8003470 <HAL_GetTick>
 8005ba6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005ba8:	e008      	b.n	8005bbc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005baa:	f7fd fc61 	bl	8003470 <HAL_GetTick>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d901      	bls.n	8005bbc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	e0d5      	b.n	8005d68 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005bbc:	4b14      	ldr	r3, [pc, #80]	; (8005c10 <HAL_RCC_OscConfig+0x4b8>)
 8005bbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005bc2:	f003 0302 	and.w	r3, r3, #2
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1ef      	bne.n	8005baa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	69db      	ldr	r3, [r3, #28]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	f000 80c9 	beq.w	8005d66 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005bd4:	4b0e      	ldr	r3, [pc, #56]	; (8005c10 <HAL_RCC_OscConfig+0x4b8>)
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	f003 030c 	and.w	r3, r3, #12
 8005bdc:	2b0c      	cmp	r3, #12
 8005bde:	f000 8083 	beq.w	8005ce8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	69db      	ldr	r3, [r3, #28]
 8005be6:	2b02      	cmp	r3, #2
 8005be8:	d15e      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bea:	4b09      	ldr	r3, [pc, #36]	; (8005c10 <HAL_RCC_OscConfig+0x4b8>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a08      	ldr	r2, [pc, #32]	; (8005c10 <HAL_RCC_OscConfig+0x4b8>)
 8005bf0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bf6:	f7fd fc3b 	bl	8003470 <HAL_GetTick>
 8005bfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bfc:	e00c      	b.n	8005c18 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bfe:	f7fd fc37 	bl	8003470 <HAL_GetTick>
 8005c02:	4602      	mov	r2, r0
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	1ad3      	subs	r3, r2, r3
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	d905      	bls.n	8005c18 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	e0ab      	b.n	8005d68 <HAL_RCC_OscConfig+0x610>
 8005c10:	40021000 	.word	0x40021000
 8005c14:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c18:	4b55      	ldr	r3, [pc, #340]	; (8005d70 <HAL_RCC_OscConfig+0x618>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d1ec      	bne.n	8005bfe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c24:	4b52      	ldr	r3, [pc, #328]	; (8005d70 <HAL_RCC_OscConfig+0x618>)
 8005c26:	68da      	ldr	r2, [r3, #12]
 8005c28:	4b52      	ldr	r3, [pc, #328]	; (8005d74 <HAL_RCC_OscConfig+0x61c>)
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	6a11      	ldr	r1, [r2, #32]
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c34:	3a01      	subs	r2, #1
 8005c36:	0112      	lsls	r2, r2, #4
 8005c38:	4311      	orrs	r1, r2
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005c3e:	0212      	lsls	r2, r2, #8
 8005c40:	4311      	orrs	r1, r2
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005c46:	0852      	lsrs	r2, r2, #1
 8005c48:	3a01      	subs	r2, #1
 8005c4a:	0552      	lsls	r2, r2, #21
 8005c4c:	4311      	orrs	r1, r2
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005c52:	0852      	lsrs	r2, r2, #1
 8005c54:	3a01      	subs	r2, #1
 8005c56:	0652      	lsls	r2, r2, #25
 8005c58:	4311      	orrs	r1, r2
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005c5e:	06d2      	lsls	r2, r2, #27
 8005c60:	430a      	orrs	r2, r1
 8005c62:	4943      	ldr	r1, [pc, #268]	; (8005d70 <HAL_RCC_OscConfig+0x618>)
 8005c64:	4313      	orrs	r3, r2
 8005c66:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c68:	4b41      	ldr	r3, [pc, #260]	; (8005d70 <HAL_RCC_OscConfig+0x618>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a40      	ldr	r2, [pc, #256]	; (8005d70 <HAL_RCC_OscConfig+0x618>)
 8005c6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c72:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c74:	4b3e      	ldr	r3, [pc, #248]	; (8005d70 <HAL_RCC_OscConfig+0x618>)
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	4a3d      	ldr	r2, [pc, #244]	; (8005d70 <HAL_RCC_OscConfig+0x618>)
 8005c7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c7e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c80:	f7fd fbf6 	bl	8003470 <HAL_GetTick>
 8005c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c86:	e008      	b.n	8005c9a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c88:	f7fd fbf2 	bl	8003470 <HAL_GetTick>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d901      	bls.n	8005c9a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e066      	b.n	8005d68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c9a:	4b35      	ldr	r3, [pc, #212]	; (8005d70 <HAL_RCC_OscConfig+0x618>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d0f0      	beq.n	8005c88 <HAL_RCC_OscConfig+0x530>
 8005ca6:	e05e      	b.n	8005d66 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ca8:	4b31      	ldr	r3, [pc, #196]	; (8005d70 <HAL_RCC_OscConfig+0x618>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a30      	ldr	r2, [pc, #192]	; (8005d70 <HAL_RCC_OscConfig+0x618>)
 8005cae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cb4:	f7fd fbdc 	bl	8003470 <HAL_GetTick>
 8005cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cba:	e008      	b.n	8005cce <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cbc:	f7fd fbd8 	bl	8003470 <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d901      	bls.n	8005cce <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e04c      	b.n	8005d68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cce:	4b28      	ldr	r3, [pc, #160]	; (8005d70 <HAL_RCC_OscConfig+0x618>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1f0      	bne.n	8005cbc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005cda:	4b25      	ldr	r3, [pc, #148]	; (8005d70 <HAL_RCC_OscConfig+0x618>)
 8005cdc:	68da      	ldr	r2, [r3, #12]
 8005cde:	4924      	ldr	r1, [pc, #144]	; (8005d70 <HAL_RCC_OscConfig+0x618>)
 8005ce0:	4b25      	ldr	r3, [pc, #148]	; (8005d78 <HAL_RCC_OscConfig+0x620>)
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	60cb      	str	r3, [r1, #12]
 8005ce6:	e03e      	b.n	8005d66 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	69db      	ldr	r3, [r3, #28]
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d101      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e039      	b.n	8005d68 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005cf4:	4b1e      	ldr	r3, [pc, #120]	; (8005d70 <HAL_RCC_OscConfig+0x618>)
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	f003 0203 	and.w	r2, r3, #3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6a1b      	ldr	r3, [r3, #32]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d12c      	bne.n	8005d62 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d12:	3b01      	subs	r3, #1
 8005d14:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d123      	bne.n	8005d62 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d24:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d11b      	bne.n	8005d62 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d34:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d113      	bne.n	8005d62 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d44:	085b      	lsrs	r3, r3, #1
 8005d46:	3b01      	subs	r3, #1
 8005d48:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d109      	bne.n	8005d62 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d58:	085b      	lsrs	r3, r3, #1
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d001      	beq.n	8005d66 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e000      	b.n	8005d68 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3720      	adds	r7, #32
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	40021000 	.word	0x40021000
 8005d74:	019f800c 	.word	0x019f800c
 8005d78:	feeefffc 	.word	0xfeeefffc

08005d7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b086      	sub	sp, #24
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005d86:	2300      	movs	r3, #0
 8005d88:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d101      	bne.n	8005d94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e11e      	b.n	8005fd2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d94:	4b91      	ldr	r3, [pc, #580]	; (8005fdc <HAL_RCC_ClockConfig+0x260>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 030f 	and.w	r3, r3, #15
 8005d9c:	683a      	ldr	r2, [r7, #0]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d910      	bls.n	8005dc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005da2:	4b8e      	ldr	r3, [pc, #568]	; (8005fdc <HAL_RCC_ClockConfig+0x260>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f023 020f 	bic.w	r2, r3, #15
 8005daa:	498c      	ldr	r1, [pc, #560]	; (8005fdc <HAL_RCC_ClockConfig+0x260>)
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005db2:	4b8a      	ldr	r3, [pc, #552]	; (8005fdc <HAL_RCC_ClockConfig+0x260>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 030f 	and.w	r3, r3, #15
 8005dba:	683a      	ldr	r2, [r7, #0]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d001      	beq.n	8005dc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e106      	b.n	8005fd2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0301 	and.w	r3, r3, #1
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d073      	beq.n	8005eb8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	2b03      	cmp	r3, #3
 8005dd6:	d129      	bne.n	8005e2c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dd8:	4b81      	ldr	r3, [pc, #516]	; (8005fe0 <HAL_RCC_ClockConfig+0x264>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d101      	bne.n	8005de8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e0f4      	b.n	8005fd2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005de8:	f000 f964 	bl	80060b4 <RCC_GetSysClockFreqFromPLLSource>
 8005dec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	4a7c      	ldr	r2, [pc, #496]	; (8005fe4 <HAL_RCC_ClockConfig+0x268>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d93f      	bls.n	8005e76 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005df6:	4b7a      	ldr	r3, [pc, #488]	; (8005fe0 <HAL_RCC_ClockConfig+0x264>)
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d009      	beq.n	8005e16 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d033      	beq.n	8005e76 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d12f      	bne.n	8005e76 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005e16:	4b72      	ldr	r3, [pc, #456]	; (8005fe0 <HAL_RCC_ClockConfig+0x264>)
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e1e:	4a70      	ldr	r2, [pc, #448]	; (8005fe0 <HAL_RCC_ClockConfig+0x264>)
 8005e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e24:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005e26:	2380      	movs	r3, #128	; 0x80
 8005e28:	617b      	str	r3, [r7, #20]
 8005e2a:	e024      	b.n	8005e76 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	d107      	bne.n	8005e44 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e34:	4b6a      	ldr	r3, [pc, #424]	; (8005fe0 <HAL_RCC_ClockConfig+0x264>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d109      	bne.n	8005e54 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e0c6      	b.n	8005fd2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e44:	4b66      	ldr	r3, [pc, #408]	; (8005fe0 <HAL_RCC_ClockConfig+0x264>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d101      	bne.n	8005e54 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e0be      	b.n	8005fd2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005e54:	f000 f8ce 	bl	8005ff4 <HAL_RCC_GetSysClockFreq>
 8005e58:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	4a61      	ldr	r2, [pc, #388]	; (8005fe4 <HAL_RCC_ClockConfig+0x268>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d909      	bls.n	8005e76 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005e62:	4b5f      	ldr	r3, [pc, #380]	; (8005fe0 <HAL_RCC_ClockConfig+0x264>)
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e6a:	4a5d      	ldr	r2, [pc, #372]	; (8005fe0 <HAL_RCC_ClockConfig+0x264>)
 8005e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e70:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005e72:	2380      	movs	r3, #128	; 0x80
 8005e74:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005e76:	4b5a      	ldr	r3, [pc, #360]	; (8005fe0 <HAL_RCC_ClockConfig+0x264>)
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	f023 0203 	bic.w	r2, r3, #3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	4957      	ldr	r1, [pc, #348]	; (8005fe0 <HAL_RCC_ClockConfig+0x264>)
 8005e84:	4313      	orrs	r3, r2
 8005e86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e88:	f7fd faf2 	bl	8003470 <HAL_GetTick>
 8005e8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e8e:	e00a      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e90:	f7fd faee 	bl	8003470 <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d901      	bls.n	8005ea6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e095      	b.n	8005fd2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ea6:	4b4e      	ldr	r3, [pc, #312]	; (8005fe0 <HAL_RCC_ClockConfig+0x264>)
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	f003 020c 	and.w	r2, r3, #12
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d1eb      	bne.n	8005e90 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 0302 	and.w	r3, r3, #2
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d023      	beq.n	8005f0c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 0304 	and.w	r3, r3, #4
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d005      	beq.n	8005edc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ed0:	4b43      	ldr	r3, [pc, #268]	; (8005fe0 <HAL_RCC_ClockConfig+0x264>)
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	4a42      	ldr	r2, [pc, #264]	; (8005fe0 <HAL_RCC_ClockConfig+0x264>)
 8005ed6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005eda:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 0308 	and.w	r3, r3, #8
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d007      	beq.n	8005ef8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005ee8:	4b3d      	ldr	r3, [pc, #244]	; (8005fe0 <HAL_RCC_ClockConfig+0x264>)
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005ef0:	4a3b      	ldr	r2, [pc, #236]	; (8005fe0 <HAL_RCC_ClockConfig+0x264>)
 8005ef2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005ef6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ef8:	4b39      	ldr	r3, [pc, #228]	; (8005fe0 <HAL_RCC_ClockConfig+0x264>)
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	4936      	ldr	r1, [pc, #216]	; (8005fe0 <HAL_RCC_ClockConfig+0x264>)
 8005f06:	4313      	orrs	r3, r2
 8005f08:	608b      	str	r3, [r1, #8]
 8005f0a:	e008      	b.n	8005f1e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	2b80      	cmp	r3, #128	; 0x80
 8005f10:	d105      	bne.n	8005f1e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005f12:	4b33      	ldr	r3, [pc, #204]	; (8005fe0 <HAL_RCC_ClockConfig+0x264>)
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	4a32      	ldr	r2, [pc, #200]	; (8005fe0 <HAL_RCC_ClockConfig+0x264>)
 8005f18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f1c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f1e:	4b2f      	ldr	r3, [pc, #188]	; (8005fdc <HAL_RCC_ClockConfig+0x260>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 030f 	and.w	r3, r3, #15
 8005f26:	683a      	ldr	r2, [r7, #0]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d21d      	bcs.n	8005f68 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f2c:	4b2b      	ldr	r3, [pc, #172]	; (8005fdc <HAL_RCC_ClockConfig+0x260>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f023 020f 	bic.w	r2, r3, #15
 8005f34:	4929      	ldr	r1, [pc, #164]	; (8005fdc <HAL_RCC_ClockConfig+0x260>)
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005f3c:	f7fd fa98 	bl	8003470 <HAL_GetTick>
 8005f40:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f42:	e00a      	b.n	8005f5a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f44:	f7fd fa94 	bl	8003470 <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d901      	bls.n	8005f5a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005f56:	2303      	movs	r3, #3
 8005f58:	e03b      	b.n	8005fd2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f5a:	4b20      	ldr	r3, [pc, #128]	; (8005fdc <HAL_RCC_ClockConfig+0x260>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 030f 	and.w	r3, r3, #15
 8005f62:	683a      	ldr	r2, [r7, #0]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d1ed      	bne.n	8005f44 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 0304 	and.w	r3, r3, #4
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d008      	beq.n	8005f86 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f74:	4b1a      	ldr	r3, [pc, #104]	; (8005fe0 <HAL_RCC_ClockConfig+0x264>)
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	4917      	ldr	r1, [pc, #92]	; (8005fe0 <HAL_RCC_ClockConfig+0x264>)
 8005f82:	4313      	orrs	r3, r2
 8005f84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 0308 	and.w	r3, r3, #8
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d009      	beq.n	8005fa6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f92:	4b13      	ldr	r3, [pc, #76]	; (8005fe0 <HAL_RCC_ClockConfig+0x264>)
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	00db      	lsls	r3, r3, #3
 8005fa0:	490f      	ldr	r1, [pc, #60]	; (8005fe0 <HAL_RCC_ClockConfig+0x264>)
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005fa6:	f000 f825 	bl	8005ff4 <HAL_RCC_GetSysClockFreq>
 8005faa:	4602      	mov	r2, r0
 8005fac:	4b0c      	ldr	r3, [pc, #48]	; (8005fe0 <HAL_RCC_ClockConfig+0x264>)
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	091b      	lsrs	r3, r3, #4
 8005fb2:	f003 030f 	and.w	r3, r3, #15
 8005fb6:	490c      	ldr	r1, [pc, #48]	; (8005fe8 <HAL_RCC_ClockConfig+0x26c>)
 8005fb8:	5ccb      	ldrb	r3, [r1, r3]
 8005fba:	f003 031f 	and.w	r3, r3, #31
 8005fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8005fc2:	4a0a      	ldr	r2, [pc, #40]	; (8005fec <HAL_RCC_ClockConfig+0x270>)
 8005fc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005fc6:	4b0a      	ldr	r3, [pc, #40]	; (8005ff0 <HAL_RCC_ClockConfig+0x274>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7fd fa04 	bl	80033d8 <HAL_InitTick>
 8005fd0:	4603      	mov	r3, r0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3718      	adds	r7, #24
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	40022000 	.word	0x40022000
 8005fe0:	40021000 	.word	0x40021000
 8005fe4:	04c4b400 	.word	0x04c4b400
 8005fe8:	0800720c 	.word	0x0800720c
 8005fec:	20007868 	.word	0x20007868
 8005ff0:	2000786c 	.word	0x2000786c

08005ff4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b087      	sub	sp, #28
 8005ff8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005ffa:	4b2c      	ldr	r3, [pc, #176]	; (80060ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f003 030c 	and.w	r3, r3, #12
 8006002:	2b04      	cmp	r3, #4
 8006004:	d102      	bne.n	800600c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006006:	4b2a      	ldr	r3, [pc, #168]	; (80060b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006008:	613b      	str	r3, [r7, #16]
 800600a:	e047      	b.n	800609c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800600c:	4b27      	ldr	r3, [pc, #156]	; (80060ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f003 030c 	and.w	r3, r3, #12
 8006014:	2b08      	cmp	r3, #8
 8006016:	d102      	bne.n	800601e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006018:	4b25      	ldr	r3, [pc, #148]	; (80060b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800601a:	613b      	str	r3, [r7, #16]
 800601c:	e03e      	b.n	800609c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800601e:	4b23      	ldr	r3, [pc, #140]	; (80060ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	f003 030c 	and.w	r3, r3, #12
 8006026:	2b0c      	cmp	r3, #12
 8006028:	d136      	bne.n	8006098 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800602a:	4b20      	ldr	r3, [pc, #128]	; (80060ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	f003 0303 	and.w	r3, r3, #3
 8006032:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006034:	4b1d      	ldr	r3, [pc, #116]	; (80060ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	091b      	lsrs	r3, r3, #4
 800603a:	f003 030f 	and.w	r3, r3, #15
 800603e:	3301      	adds	r3, #1
 8006040:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2b03      	cmp	r3, #3
 8006046:	d10c      	bne.n	8006062 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006048:	4a19      	ldr	r2, [pc, #100]	; (80060b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006050:	4a16      	ldr	r2, [pc, #88]	; (80060ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8006052:	68d2      	ldr	r2, [r2, #12]
 8006054:	0a12      	lsrs	r2, r2, #8
 8006056:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800605a:	fb02 f303 	mul.w	r3, r2, r3
 800605e:	617b      	str	r3, [r7, #20]
      break;
 8006060:	e00c      	b.n	800607c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006062:	4a13      	ldr	r2, [pc, #76]	; (80060b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	fbb2 f3f3 	udiv	r3, r2, r3
 800606a:	4a10      	ldr	r2, [pc, #64]	; (80060ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800606c:	68d2      	ldr	r2, [r2, #12]
 800606e:	0a12      	lsrs	r2, r2, #8
 8006070:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006074:	fb02 f303 	mul.w	r3, r2, r3
 8006078:	617b      	str	r3, [r7, #20]
      break;
 800607a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800607c:	4b0b      	ldr	r3, [pc, #44]	; (80060ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	0e5b      	lsrs	r3, r3, #25
 8006082:	f003 0303 	and.w	r3, r3, #3
 8006086:	3301      	adds	r3, #1
 8006088:	005b      	lsls	r3, r3, #1
 800608a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800608c:	697a      	ldr	r2, [r7, #20]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	fbb2 f3f3 	udiv	r3, r2, r3
 8006094:	613b      	str	r3, [r7, #16]
 8006096:	e001      	b.n	800609c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006098:	2300      	movs	r3, #0
 800609a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800609c:	693b      	ldr	r3, [r7, #16]
}
 800609e:	4618      	mov	r0, r3
 80060a0:	371c      	adds	r7, #28
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	40021000 	.word	0x40021000
 80060b0:	00f42400 	.word	0x00f42400

080060b4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b087      	sub	sp, #28
 80060b8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80060ba:	4b1e      	ldr	r3, [pc, #120]	; (8006134 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	f003 0303 	and.w	r3, r3, #3
 80060c2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80060c4:	4b1b      	ldr	r3, [pc, #108]	; (8006134 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	091b      	lsrs	r3, r3, #4
 80060ca:	f003 030f 	and.w	r3, r3, #15
 80060ce:	3301      	adds	r3, #1
 80060d0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	2b03      	cmp	r3, #3
 80060d6:	d10c      	bne.n	80060f2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80060d8:	4a17      	ldr	r2, [pc, #92]	; (8006138 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80060e0:	4a14      	ldr	r2, [pc, #80]	; (8006134 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80060e2:	68d2      	ldr	r2, [r2, #12]
 80060e4:	0a12      	lsrs	r2, r2, #8
 80060e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80060ea:	fb02 f303 	mul.w	r3, r2, r3
 80060ee:	617b      	str	r3, [r7, #20]
    break;
 80060f0:	e00c      	b.n	800610c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80060f2:	4a11      	ldr	r2, [pc, #68]	; (8006138 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80060fa:	4a0e      	ldr	r2, [pc, #56]	; (8006134 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80060fc:	68d2      	ldr	r2, [r2, #12]
 80060fe:	0a12      	lsrs	r2, r2, #8
 8006100:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006104:	fb02 f303 	mul.w	r3, r2, r3
 8006108:	617b      	str	r3, [r7, #20]
    break;
 800610a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800610c:	4b09      	ldr	r3, [pc, #36]	; (8006134 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	0e5b      	lsrs	r3, r3, #25
 8006112:	f003 0303 	and.w	r3, r3, #3
 8006116:	3301      	adds	r3, #1
 8006118:	005b      	lsls	r3, r3, #1
 800611a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800611c:	697a      	ldr	r2, [r7, #20]
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	fbb2 f3f3 	udiv	r3, r2, r3
 8006124:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006126:	687b      	ldr	r3, [r7, #4]
}
 8006128:	4618      	mov	r0, r3
 800612a:	371c      	adds	r7, #28
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr
 8006134:	40021000 	.word	0x40021000
 8006138:	00f42400 	.word	0x00f42400

0800613c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b086      	sub	sp, #24
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006144:	2300      	movs	r3, #0
 8006146:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006148:	2300      	movs	r3, #0
 800614a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006154:	2b00      	cmp	r3, #0
 8006156:	f000 8098 	beq.w	800628a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800615a:	2300      	movs	r3, #0
 800615c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800615e:	4b43      	ldr	r3, [pc, #268]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10d      	bne.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800616a:	4b40      	ldr	r3, [pc, #256]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800616c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800616e:	4a3f      	ldr	r2, [pc, #252]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006174:	6593      	str	r3, [r2, #88]	; 0x58
 8006176:	4b3d      	ldr	r3, [pc, #244]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800617a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800617e:	60bb      	str	r3, [r7, #8]
 8006180:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006182:	2301      	movs	r3, #1
 8006184:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006186:	4b3a      	ldr	r3, [pc, #232]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a39      	ldr	r2, [pc, #228]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800618c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006190:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006192:	f7fd f96d 	bl	8003470 <HAL_GetTick>
 8006196:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006198:	e009      	b.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800619a:	f7fd f969 	bl	8003470 <HAL_GetTick>
 800619e:	4602      	mov	r2, r0
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d902      	bls.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	74fb      	strb	r3, [r7, #19]
        break;
 80061ac:	e005      	b.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061ae:	4b30      	ldr	r3, [pc, #192]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d0ef      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80061ba:	7cfb      	ldrb	r3, [r7, #19]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d159      	bne.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80061c0:	4b2a      	ldr	r3, [pc, #168]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061ca:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d01e      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d019      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80061dc:	4b23      	ldr	r3, [pc, #140]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80061e8:	4b20      	ldr	r3, [pc, #128]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ee:	4a1f      	ldr	r2, [pc, #124]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80061f8:	4b1c      	ldr	r3, [pc, #112]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061fe:	4a1b      	ldr	r2, [pc, #108]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006200:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006204:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006208:	4a18      	ldr	r2, [pc, #96]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	f003 0301 	and.w	r3, r3, #1
 8006216:	2b00      	cmp	r3, #0
 8006218:	d016      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800621a:	f7fd f929 	bl	8003470 <HAL_GetTick>
 800621e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006220:	e00b      	b.n	800623a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006222:	f7fd f925 	bl	8003470 <HAL_GetTick>
 8006226:	4602      	mov	r2, r0
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006230:	4293      	cmp	r3, r2
 8006232:	d902      	bls.n	800623a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006234:	2303      	movs	r3, #3
 8006236:	74fb      	strb	r3, [r7, #19]
            break;
 8006238:	e006      	b.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800623a:	4b0c      	ldr	r3, [pc, #48]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800623c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006240:	f003 0302 	and.w	r3, r3, #2
 8006244:	2b00      	cmp	r3, #0
 8006246:	d0ec      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006248:	7cfb      	ldrb	r3, [r7, #19]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d10b      	bne.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800624e:	4b07      	ldr	r3, [pc, #28]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006254:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800625c:	4903      	ldr	r1, [pc, #12]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800625e:	4313      	orrs	r3, r2
 8006260:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006264:	e008      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006266:	7cfb      	ldrb	r3, [r7, #19]
 8006268:	74bb      	strb	r3, [r7, #18]
 800626a:	e005      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800626c:	40021000 	.word	0x40021000
 8006270:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006274:	7cfb      	ldrb	r3, [r7, #19]
 8006276:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006278:	7c7b      	ldrb	r3, [r7, #17]
 800627a:	2b01      	cmp	r3, #1
 800627c:	d105      	bne.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800627e:	4ba7      	ldr	r3, [pc, #668]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006282:	4aa6      	ldr	r2, [pc, #664]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006284:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006288:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 0301 	and.w	r3, r3, #1
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00a      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006296:	4ba1      	ldr	r3, [pc, #644]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800629c:	f023 0203 	bic.w	r2, r3, #3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	499d      	ldr	r1, [pc, #628]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062a6:	4313      	orrs	r3, r2
 80062a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0302 	and.w	r3, r3, #2
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00a      	beq.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80062b8:	4b98      	ldr	r3, [pc, #608]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062be:	f023 020c 	bic.w	r2, r3, #12
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	4995      	ldr	r1, [pc, #596]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062c8:	4313      	orrs	r3, r2
 80062ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0304 	and.w	r3, r3, #4
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00a      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80062da:	4b90      	ldr	r3, [pc, #576]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	498c      	ldr	r1, [pc, #560]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062ea:	4313      	orrs	r3, r2
 80062ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0308 	and.w	r3, r3, #8
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00a      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80062fc:	4b87      	ldr	r3, [pc, #540]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006302:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	4984      	ldr	r1, [pc, #528]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800630c:	4313      	orrs	r3, r2
 800630e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 0310 	and.w	r3, r3, #16
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00a      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800631e:	4b7f      	ldr	r3, [pc, #508]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006324:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	695b      	ldr	r3, [r3, #20]
 800632c:	497b      	ldr	r1, [pc, #492]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800632e:	4313      	orrs	r3, r2
 8006330:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0320 	and.w	r3, r3, #32
 800633c:	2b00      	cmp	r3, #0
 800633e:	d00a      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006340:	4b76      	ldr	r3, [pc, #472]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006346:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	4973      	ldr	r1, [pc, #460]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006350:	4313      	orrs	r3, r2
 8006352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00a      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006362:	4b6e      	ldr	r3, [pc, #440]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006368:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	69db      	ldr	r3, [r3, #28]
 8006370:	496a      	ldr	r1, [pc, #424]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006372:	4313      	orrs	r3, r2
 8006374:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00a      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006384:	4b65      	ldr	r3, [pc, #404]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800638a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a1b      	ldr	r3, [r3, #32]
 8006392:	4962      	ldr	r1, [pc, #392]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006394:	4313      	orrs	r3, r2
 8006396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00a      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80063a6:	4b5d      	ldr	r3, [pc, #372]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b4:	4959      	ldr	r1, [pc, #356]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d00a      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80063c8:	4b54      	ldr	r3, [pc, #336]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ce:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d6:	4951      	ldr	r1, [pc, #324]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063d8:	4313      	orrs	r3, r2
 80063da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d015      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80063ea:	4b4c      	ldr	r3, [pc, #304]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f8:	4948      	ldr	r1, [pc, #288]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063fa:	4313      	orrs	r3, r2
 80063fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006404:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006408:	d105      	bne.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800640a:	4b44      	ldr	r3, [pc, #272]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	4a43      	ldr	r2, [pc, #268]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006410:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006414:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800641e:	2b00      	cmp	r3, #0
 8006420:	d015      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006422:	4b3e      	ldr	r3, [pc, #248]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006428:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006430:	493a      	ldr	r1, [pc, #232]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006432:	4313      	orrs	r3, r2
 8006434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006440:	d105      	bne.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006442:	4b36      	ldr	r3, [pc, #216]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	4a35      	ldr	r2, [pc, #212]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006448:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800644c:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006456:	2b00      	cmp	r3, #0
 8006458:	d015      	beq.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800645a:	4b30      	ldr	r3, [pc, #192]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800645c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006460:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006468:	492c      	ldr	r1, [pc, #176]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800646a:	4313      	orrs	r3, r2
 800646c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006474:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006478:	d105      	bne.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800647a:	4b28      	ldr	r3, [pc, #160]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	4a27      	ldr	r2, [pc, #156]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006480:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006484:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800648e:	2b00      	cmp	r3, #0
 8006490:	d015      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006492:	4b22      	ldr	r3, [pc, #136]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006498:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a0:	491e      	ldr	r1, [pc, #120]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064a2:	4313      	orrs	r3, r2
 80064a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064b0:	d105      	bne.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064b2:	4b1a      	ldr	r3, [pc, #104]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	4a19      	ldr	r2, [pc, #100]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064bc:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d015      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80064ca:	4b14      	ldr	r3, [pc, #80]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064d8:	4910      	ldr	r1, [pc, #64]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064da:	4313      	orrs	r3, r2
 80064dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064e8:	d105      	bne.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064ea:	4b0c      	ldr	r3, [pc, #48]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	4a0b      	ldr	r2, [pc, #44]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064f4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d018      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006502:	4b06      	ldr	r3, [pc, #24]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006508:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006510:	4902      	ldr	r1, [pc, #8]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006512:	4313      	orrs	r3, r2
 8006514:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	e001      	b.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800651c:	40021000 	.word	0x40021000
 8006520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006522:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006526:	d105      	bne.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006528:	4b21      	ldr	r3, [pc, #132]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	4a20      	ldr	r2, [pc, #128]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800652e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006532:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800653c:	2b00      	cmp	r3, #0
 800653e:	d015      	beq.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006540:	4b1b      	ldr	r3, [pc, #108]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006546:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800654e:	4918      	ldr	r1, [pc, #96]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006550:	4313      	orrs	r3, r2
 8006552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800655a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800655e:	d105      	bne.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006560:	4b13      	ldr	r3, [pc, #76]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	4a12      	ldr	r2, [pc, #72]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006566:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800656a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006574:	2b00      	cmp	r3, #0
 8006576:	d015      	beq.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006578:	4b0d      	ldr	r3, [pc, #52]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800657a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800657e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006586:	490a      	ldr	r1, [pc, #40]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006588:	4313      	orrs	r3, r2
 800658a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006592:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006596:	d105      	bne.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006598:	4b05      	ldr	r3, [pc, #20]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	4a04      	ldr	r2, [pc, #16]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800659e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065a2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80065a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3718      	adds	r7, #24
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	40021000 	.word	0x40021000

080065b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b082      	sub	sp, #8
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d101      	bne.n	80065c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e049      	b.n	800665a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d106      	bne.n	80065e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f7fc fe18 	bl	8003210 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2202      	movs	r2, #2
 80065e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	3304      	adds	r3, #4
 80065f0:	4619      	mov	r1, r3
 80065f2:	4610      	mov	r0, r2
 80065f4:	f000 f878 	bl	80066e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	3708      	adds	r7, #8
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b082      	sub	sp, #8
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
 800666a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006672:	2b01      	cmp	r3, #1
 8006674:	d101      	bne.n	800667a <HAL_TIM_SlaveConfigSynchro+0x18>
 8006676:	2302      	movs	r3, #2
 8006678:	e031      	b.n	80066de <HAL_TIM_SlaveConfigSynchro+0x7c>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2201      	movs	r2, #1
 800667e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2202      	movs	r2, #2
 8006686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800668a:	6839      	ldr	r1, [r7, #0]
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 f8d5 	bl	800683c <TIM_SlaveTimer_SetConfig>
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d009      	beq.n	80066ac <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e018      	b.n	80066de <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68da      	ldr	r2, [r3, #12]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066ba:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68da      	ldr	r2, [r3, #12]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80066ca:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3708      	adds	r7, #8
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
	...

080066e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4a48      	ldr	r2, [pc, #288]	; (800681c <TIM_Base_SetConfig+0x134>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d013      	beq.n	8006728 <TIM_Base_SetConfig+0x40>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006706:	d00f      	beq.n	8006728 <TIM_Base_SetConfig+0x40>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a45      	ldr	r2, [pc, #276]	; (8006820 <TIM_Base_SetConfig+0x138>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d00b      	beq.n	8006728 <TIM_Base_SetConfig+0x40>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a44      	ldr	r2, [pc, #272]	; (8006824 <TIM_Base_SetConfig+0x13c>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d007      	beq.n	8006728 <TIM_Base_SetConfig+0x40>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a43      	ldr	r2, [pc, #268]	; (8006828 <TIM_Base_SetConfig+0x140>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d003      	beq.n	8006728 <TIM_Base_SetConfig+0x40>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a42      	ldr	r2, [pc, #264]	; (800682c <TIM_Base_SetConfig+0x144>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d108      	bne.n	800673a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800672e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	4313      	orrs	r3, r2
 8006738:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a37      	ldr	r2, [pc, #220]	; (800681c <TIM_Base_SetConfig+0x134>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d01f      	beq.n	8006782 <TIM_Base_SetConfig+0x9a>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006748:	d01b      	beq.n	8006782 <TIM_Base_SetConfig+0x9a>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a34      	ldr	r2, [pc, #208]	; (8006820 <TIM_Base_SetConfig+0x138>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d017      	beq.n	8006782 <TIM_Base_SetConfig+0x9a>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a33      	ldr	r2, [pc, #204]	; (8006824 <TIM_Base_SetConfig+0x13c>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d013      	beq.n	8006782 <TIM_Base_SetConfig+0x9a>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a32      	ldr	r2, [pc, #200]	; (8006828 <TIM_Base_SetConfig+0x140>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d00f      	beq.n	8006782 <TIM_Base_SetConfig+0x9a>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a32      	ldr	r2, [pc, #200]	; (8006830 <TIM_Base_SetConfig+0x148>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d00b      	beq.n	8006782 <TIM_Base_SetConfig+0x9a>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a31      	ldr	r2, [pc, #196]	; (8006834 <TIM_Base_SetConfig+0x14c>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d007      	beq.n	8006782 <TIM_Base_SetConfig+0x9a>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a30      	ldr	r2, [pc, #192]	; (8006838 <TIM_Base_SetConfig+0x150>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d003      	beq.n	8006782 <TIM_Base_SetConfig+0x9a>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a2b      	ldr	r2, [pc, #172]	; (800682c <TIM_Base_SetConfig+0x144>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d108      	bne.n	8006794 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006788:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	4313      	orrs	r3, r2
 8006792:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	695b      	ldr	r3, [r3, #20]
 800679e:	4313      	orrs	r3, r2
 80067a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	689a      	ldr	r2, [r3, #8]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a18      	ldr	r2, [pc, #96]	; (800681c <TIM_Base_SetConfig+0x134>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d013      	beq.n	80067e8 <TIM_Base_SetConfig+0x100>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a19      	ldr	r2, [pc, #100]	; (8006828 <TIM_Base_SetConfig+0x140>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d00f      	beq.n	80067e8 <TIM_Base_SetConfig+0x100>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a19      	ldr	r2, [pc, #100]	; (8006830 <TIM_Base_SetConfig+0x148>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d00b      	beq.n	80067e8 <TIM_Base_SetConfig+0x100>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a18      	ldr	r2, [pc, #96]	; (8006834 <TIM_Base_SetConfig+0x14c>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d007      	beq.n	80067e8 <TIM_Base_SetConfig+0x100>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a17      	ldr	r2, [pc, #92]	; (8006838 <TIM_Base_SetConfig+0x150>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d003      	beq.n	80067e8 <TIM_Base_SetConfig+0x100>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a12      	ldr	r2, [pc, #72]	; (800682c <TIM_Base_SetConfig+0x144>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d103      	bne.n	80067f0 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	691a      	ldr	r2, [r3, #16]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d105      	bne.n	800680e <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	f023 0201 	bic.w	r2, r3, #1
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	611a      	str	r2, [r3, #16]
  }
}
 800680e:	bf00      	nop
 8006810:	3714      	adds	r7, #20
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	40012c00 	.word	0x40012c00
 8006820:	40000400 	.word	0x40000400
 8006824:	40000800 	.word	0x40000800
 8006828:	40013400 	.word	0x40013400
 800682c:	40015000 	.word	0x40015000
 8006830:	40014000 	.word	0x40014000
 8006834:	40014400 	.word	0x40014400
 8006838:	40014800 	.word	0x40014800

0800683c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b086      	sub	sp, #24
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006846:	2300      	movs	r3, #0
 8006848:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006858:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800685c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	693a      	ldr	r2, [r7, #16]
 8006864:	4313      	orrs	r3, r2
 8006866:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800686e:	f023 0307 	bic.w	r3, r3, #7
 8006872:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	693a      	ldr	r2, [r7, #16]
 800687a:	4313      	orrs	r3, r2
 800687c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	693a      	ldr	r2, [r7, #16]
 8006884:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	4a4e      	ldr	r2, [pc, #312]	; (80069c4 <TIM_SlaveTimer_SetConfig+0x188>)
 800688c:	4293      	cmp	r3, r2
 800688e:	f000 8092 	beq.w	80069b6 <TIM_SlaveTimer_SetConfig+0x17a>
 8006892:	4a4c      	ldr	r2, [pc, #304]	; (80069c4 <TIM_SlaveTimer_SetConfig+0x188>)
 8006894:	4293      	cmp	r3, r2
 8006896:	f200 808b 	bhi.w	80069b0 <TIM_SlaveTimer_SetConfig+0x174>
 800689a:	4a4b      	ldr	r2, [pc, #300]	; (80069c8 <TIM_SlaveTimer_SetConfig+0x18c>)
 800689c:	4293      	cmp	r3, r2
 800689e:	f000 808a 	beq.w	80069b6 <TIM_SlaveTimer_SetConfig+0x17a>
 80068a2:	4a49      	ldr	r2, [pc, #292]	; (80069c8 <TIM_SlaveTimer_SetConfig+0x18c>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	f200 8083 	bhi.w	80069b0 <TIM_SlaveTimer_SetConfig+0x174>
 80068aa:	4a48      	ldr	r2, [pc, #288]	; (80069cc <TIM_SlaveTimer_SetConfig+0x190>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	f000 8082 	beq.w	80069b6 <TIM_SlaveTimer_SetConfig+0x17a>
 80068b2:	4a46      	ldr	r2, [pc, #280]	; (80069cc <TIM_SlaveTimer_SetConfig+0x190>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d87b      	bhi.n	80069b0 <TIM_SlaveTimer_SetConfig+0x174>
 80068b8:	4a45      	ldr	r2, [pc, #276]	; (80069d0 <TIM_SlaveTimer_SetConfig+0x194>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d07b      	beq.n	80069b6 <TIM_SlaveTimer_SetConfig+0x17a>
 80068be:	4a44      	ldr	r2, [pc, #272]	; (80069d0 <TIM_SlaveTimer_SetConfig+0x194>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d875      	bhi.n	80069b0 <TIM_SlaveTimer_SetConfig+0x174>
 80068c4:	4a43      	ldr	r2, [pc, #268]	; (80069d4 <TIM_SlaveTimer_SetConfig+0x198>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d075      	beq.n	80069b6 <TIM_SlaveTimer_SetConfig+0x17a>
 80068ca:	4a42      	ldr	r2, [pc, #264]	; (80069d4 <TIM_SlaveTimer_SetConfig+0x198>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d86f      	bhi.n	80069b0 <TIM_SlaveTimer_SetConfig+0x174>
 80068d0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80068d4:	d06f      	beq.n	80069b6 <TIM_SlaveTimer_SetConfig+0x17a>
 80068d6:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80068da:	d869      	bhi.n	80069b0 <TIM_SlaveTimer_SetConfig+0x174>
 80068dc:	2b70      	cmp	r3, #112	; 0x70
 80068de:	d01a      	beq.n	8006916 <TIM_SlaveTimer_SetConfig+0xda>
 80068e0:	2b70      	cmp	r3, #112	; 0x70
 80068e2:	d865      	bhi.n	80069b0 <TIM_SlaveTimer_SetConfig+0x174>
 80068e4:	2b60      	cmp	r3, #96	; 0x60
 80068e6:	d059      	beq.n	800699c <TIM_SlaveTimer_SetConfig+0x160>
 80068e8:	2b60      	cmp	r3, #96	; 0x60
 80068ea:	d861      	bhi.n	80069b0 <TIM_SlaveTimer_SetConfig+0x174>
 80068ec:	2b50      	cmp	r3, #80	; 0x50
 80068ee:	d04b      	beq.n	8006988 <TIM_SlaveTimer_SetConfig+0x14c>
 80068f0:	2b50      	cmp	r3, #80	; 0x50
 80068f2:	d85d      	bhi.n	80069b0 <TIM_SlaveTimer_SetConfig+0x174>
 80068f4:	2b40      	cmp	r3, #64	; 0x40
 80068f6:	d019      	beq.n	800692c <TIM_SlaveTimer_SetConfig+0xf0>
 80068f8:	2b40      	cmp	r3, #64	; 0x40
 80068fa:	d859      	bhi.n	80069b0 <TIM_SlaveTimer_SetConfig+0x174>
 80068fc:	2b30      	cmp	r3, #48	; 0x30
 80068fe:	d05a      	beq.n	80069b6 <TIM_SlaveTimer_SetConfig+0x17a>
 8006900:	2b30      	cmp	r3, #48	; 0x30
 8006902:	d855      	bhi.n	80069b0 <TIM_SlaveTimer_SetConfig+0x174>
 8006904:	2b20      	cmp	r3, #32
 8006906:	d056      	beq.n	80069b6 <TIM_SlaveTimer_SetConfig+0x17a>
 8006908:	2b20      	cmp	r3, #32
 800690a:	d851      	bhi.n	80069b0 <TIM_SlaveTimer_SetConfig+0x174>
 800690c:	2b00      	cmp	r3, #0
 800690e:	d052      	beq.n	80069b6 <TIM_SlaveTimer_SetConfig+0x17a>
 8006910:	2b10      	cmp	r3, #16
 8006912:	d050      	beq.n	80069b6 <TIM_SlaveTimer_SetConfig+0x17a>
 8006914:	e04c      	b.n	80069b0 <TIM_SlaveTimer_SetConfig+0x174>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8006926:	f000 f8b6 	bl	8006a96 <TIM_ETR_SetConfig>
      break;
 800692a:	e045      	b.n	80069b8 <TIM_SlaveTimer_SetConfig+0x17c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2b05      	cmp	r3, #5
 8006932:	d004      	beq.n	800693e <TIM_SlaveTimer_SetConfig+0x102>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8006938:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 800693c:	d101      	bne.n	8006942 <TIM_SlaveTimer_SetConfig+0x106>
      {
        return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e03b      	b.n	80069ba <TIM_SlaveTimer_SetConfig+0x17e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	6a1b      	ldr	r3, [r3, #32]
 8006948:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	6a1a      	ldr	r2, [r3, #32]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f022 0201 	bic.w	r2, r2, #1
 8006958:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	699b      	ldr	r3, [r3, #24]
 8006960:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006968:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	011b      	lsls	r3, r3, #4
 8006970:	68ba      	ldr	r2, [r7, #8]
 8006972:	4313      	orrs	r3, r2
 8006974:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	621a      	str	r2, [r3, #32]
      break;
 8006986:	e017      	b.n	80069b8 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006994:	461a      	mov	r2, r3
 8006996:	f000 f81f 	bl	80069d8 <TIM_TI1_ConfigInputStage>
      break;
 800699a:	e00d      	b.n	80069b8 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80069a8:	461a      	mov	r2, r3
 80069aa:	f000 f844 	bl	8006a36 <TIM_TI2_ConfigInputStage>
      break;
 80069ae:	e003      	b.n	80069b8 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	75fb      	strb	r3, [r7, #23]
      break;
 80069b4:	e000      	b.n	80069b8 <TIM_SlaveTimer_SetConfig+0x17c>
      break;
 80069b6:	bf00      	nop
  }

  return status;
 80069b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3718      	adds	r7, #24
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	00100070 	.word	0x00100070
 80069c8:	00100050 	.word	0x00100050
 80069cc:	00100040 	.word	0x00100040
 80069d0:	00100030 	.word	0x00100030
 80069d4:	00100020 	.word	0x00100020

080069d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069d8:	b480      	push	{r7}
 80069da:	b087      	sub	sp, #28
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6a1b      	ldr	r3, [r3, #32]
 80069e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6a1b      	ldr	r3, [r3, #32]
 80069ee:	f023 0201 	bic.w	r2, r3, #1
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	011b      	lsls	r3, r3, #4
 8006a08:	693a      	ldr	r2, [r7, #16]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	f023 030a 	bic.w	r3, r3, #10
 8006a14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a16:	697a      	ldr	r2, [r7, #20]
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	693a      	ldr	r2, [r7, #16]
 8006a22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	697a      	ldr	r2, [r7, #20]
 8006a28:	621a      	str	r2, [r3, #32]
}
 8006a2a:	bf00      	nop
 8006a2c:	371c      	adds	r7, #28
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr

08006a36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a36:	b480      	push	{r7}
 8006a38:	b087      	sub	sp, #28
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	60f8      	str	r0, [r7, #12]
 8006a3e:	60b9      	str	r1, [r7, #8]
 8006a40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6a1b      	ldr	r3, [r3, #32]
 8006a46:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6a1b      	ldr	r3, [r3, #32]
 8006a4c:	f023 0210 	bic.w	r2, r3, #16
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	031b      	lsls	r3, r3, #12
 8006a66:	693a      	ldr	r2, [r7, #16]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a72:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	011b      	lsls	r3, r3, #4
 8006a78:	697a      	ldr	r2, [r7, #20]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	693a      	ldr	r2, [r7, #16]
 8006a82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	697a      	ldr	r2, [r7, #20]
 8006a88:	621a      	str	r2, [r3, #32]
}
 8006a8a:	bf00      	nop
 8006a8c:	371c      	adds	r7, #28
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr

08006a96 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a96:	b480      	push	{r7}
 8006a98:	b087      	sub	sp, #28
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	60f8      	str	r0, [r7, #12]
 8006a9e:	60b9      	str	r1, [r7, #8]
 8006aa0:	607a      	str	r2, [r7, #4]
 8006aa2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ab0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	021a      	lsls	r2, r3, #8
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	431a      	orrs	r2, r3
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	697a      	ldr	r2, [r7, #20]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	697a      	ldr	r2, [r7, #20]
 8006ac8:	609a      	str	r2, [r3, #8]
}
 8006aca:	bf00      	nop
 8006acc:	371c      	adds	r7, #28
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
	...

08006ad8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d101      	bne.n	8006af0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006aec:	2302      	movs	r3, #2
 8006aee:	e06f      	b.n	8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2202      	movs	r2, #2
 8006afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a31      	ldr	r2, [pc, #196]	; (8006bdc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d009      	beq.n	8006b2e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a30      	ldr	r2, [pc, #192]	; (8006be0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d004      	beq.n	8006b2e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a2e      	ldr	r2, [pc, #184]	; (8006be4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d108      	bne.n	8006b40 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006b34:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68fa      	ldr	r2, [r7, #12]
 8006b5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a1e      	ldr	r2, [pc, #120]	; (8006bdc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d01d      	beq.n	8006ba4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b70:	d018      	beq.n	8006ba4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a1c      	ldr	r2, [pc, #112]	; (8006be8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d013      	beq.n	8006ba4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a1a      	ldr	r2, [pc, #104]	; (8006bec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d00e      	beq.n	8006ba4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a15      	ldr	r2, [pc, #84]	; (8006be0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d009      	beq.n	8006ba4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a16      	ldr	r2, [pc, #88]	; (8006bf0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d004      	beq.n	8006ba4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a11      	ldr	r2, [pc, #68]	; (8006be4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d10c      	bne.n	8006bbe <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006baa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	68ba      	ldr	r2, [r7, #8]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	68ba      	ldr	r2, [r7, #8]
 8006bbc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bce:	2300      	movs	r3, #0
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3714      	adds	r7, #20
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr
 8006bdc:	40012c00 	.word	0x40012c00
 8006be0:	40013400 	.word	0x40013400
 8006be4:	40015000 	.word	0x40015000
 8006be8:	40000400 	.word	0x40000400
 8006bec:	40000800 	.word	0x40000800
 8006bf0:	40014000 	.word	0x40014000

08006bf4 <arm_biquad_cascade_df2T_f32>:
 8006bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bf8:	7807      	ldrb	r7, [r0, #0]
 8006bfa:	ea4f 1e13 	mov.w	lr, r3, lsr #4
 8006bfe:	6885      	ldr	r5, [r0, #8]
 8006c00:	3514      	adds	r5, #20
 8006c02:	6846      	ldr	r6, [r0, #4]
 8006c04:	3608      	adds	r6, #8
 8006c06:	ea4f 198e 	mov.w	r9, lr, lsl #6
 8006c0a:	eb02 0b09 	add.w	fp, r2, r9
 8006c0e:	f003 080f 	and.w	r8, r3, #15
 8006c12:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 8006c16:	ed55 7a05 	vldr	s15, [r5, #-20]	; 0xffffffec
 8006c1a:	ed15 7a04 	vldr	s14, [r5, #-16]
 8006c1e:	ed55 6a03 	vldr	s13, [r5, #-12]
 8006c22:	ed15 6a02 	vldr	s12, [r5, #-8]
 8006c26:	ed55 5a01 	vldr	s11, [r5, #-4]
 8006c2a:	46b4      	mov	ip, r6
 8006c2c:	ed56 3a02 	vldr	s7, [r6, #-8]
 8006c30:	ed16 4a01 	vldr	s8, [r6, #-4]
 8006c34:	f1be 0f00 	cmp.w	lr, #0
 8006c38:	f000 8195 	beq.w	8006f66 <arm_biquad_cascade_df2T_f32+0x372>
 8006c3c:	f101 0040 	add.w	r0, r1, #64	; 0x40
 8006c40:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8006c44:	4674      	mov	r4, lr
 8006c46:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 8006c4a:	ee27 5a83 	vmul.f32	s10, s15, s6
 8006c4e:	ee35 5a23 	vadd.f32	s10, s10, s7
 8006c52:	ee67 4a03 	vmul.f32	s9, s14, s6
 8006c56:	ee34 4a84 	vadd.f32	s8, s9, s8
 8006c5a:	ee66 4a05 	vmul.f32	s9, s12, s10
 8006c5e:	ee34 4a84 	vadd.f32	s8, s9, s8
 8006c62:	ee26 3a83 	vmul.f32	s6, s13, s6
 8006c66:	ed03 5a10 	vstr	s10, [r3, #-64]	; 0xffffffc0
 8006c6a:	ed50 3a0f 	vldr	s7, [r0, #-60]	; 0xffffffc4
 8006c6e:	ee67 4aa3 	vmul.f32	s9, s15, s7
 8006c72:	ee74 4a84 	vadd.f32	s9, s9, s8
 8006c76:	ee25 5a85 	vmul.f32	s10, s11, s10
 8006c7a:	ee35 5a03 	vadd.f32	s10, s10, s6
 8006c7e:	ee27 4a23 	vmul.f32	s8, s14, s7
 8006c82:	ee35 5a04 	vadd.f32	s10, s10, s8
 8006c86:	ee26 3a24 	vmul.f32	s6, s12, s9
 8006c8a:	ee33 3a05 	vadd.f32	s6, s6, s10
 8006c8e:	ee66 3aa3 	vmul.f32	s7, s13, s7
 8006c92:	ed43 4a0f 	vstr	s9, [r3, #-60]	; 0xffffffc4
 8006c96:	ed10 4a0e 	vldr	s8, [r0, #-56]	; 0xffffffc8
 8006c9a:	ee27 5a84 	vmul.f32	s10, s15, s8
 8006c9e:	ee35 5a03 	vadd.f32	s10, s10, s6
 8006ca2:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8006ca6:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8006caa:	ee67 3a04 	vmul.f32	s7, s14, s8
 8006cae:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8006cb2:	ee26 3a05 	vmul.f32	s6, s12, s10
 8006cb6:	ee33 3a24 	vadd.f32	s6, s6, s9
 8006cba:	ee66 3a84 	vmul.f32	s7, s13, s8
 8006cbe:	ed03 5a0e 	vstr	s10, [r3, #-56]	; 0xffffffc8
 8006cc2:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 8006cc6:	ee67 4a84 	vmul.f32	s9, s15, s8
 8006cca:	ee74 4a83 	vadd.f32	s9, s9, s6
 8006cce:	ee25 5a85 	vmul.f32	s10, s11, s10
 8006cd2:	ee35 5a23 	vadd.f32	s10, s10, s7
 8006cd6:	ee67 3a04 	vmul.f32	s7, s14, s8
 8006cda:	ee35 5a23 	vadd.f32	s10, s10, s7
 8006cde:	ee26 3a24 	vmul.f32	s6, s12, s9
 8006ce2:	ee33 3a05 	vadd.f32	s6, s6, s10
 8006ce6:	ee66 3a84 	vmul.f32	s7, s13, s8
 8006cea:	ed43 4a0d 	vstr	s9, [r3, #-52]	; 0xffffffcc
 8006cee:	ed10 4a0c 	vldr	s8, [r0, #-48]	; 0xffffffd0
 8006cf2:	ee27 5a84 	vmul.f32	s10, s15, s8
 8006cf6:	ee35 5a03 	vadd.f32	s10, s10, s6
 8006cfa:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8006cfe:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8006d02:	ee67 3a04 	vmul.f32	s7, s14, s8
 8006d06:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8006d0a:	ee26 3a05 	vmul.f32	s6, s12, s10
 8006d0e:	ee33 3a24 	vadd.f32	s6, s6, s9
 8006d12:	ee66 3a84 	vmul.f32	s7, s13, s8
 8006d16:	ed03 5a0c 	vstr	s10, [r3, #-48]	; 0xffffffd0
 8006d1a:	ed10 4a0b 	vldr	s8, [r0, #-44]	; 0xffffffd4
 8006d1e:	ee67 4a84 	vmul.f32	s9, s15, s8
 8006d22:	ee74 4a83 	vadd.f32	s9, s9, s6
 8006d26:	ee25 5a85 	vmul.f32	s10, s11, s10
 8006d2a:	ee35 5a23 	vadd.f32	s10, s10, s7
 8006d2e:	ee67 3a04 	vmul.f32	s7, s14, s8
 8006d32:	ee35 5a23 	vadd.f32	s10, s10, s7
 8006d36:	ee26 3a24 	vmul.f32	s6, s12, s9
 8006d3a:	ee33 3a05 	vadd.f32	s6, s6, s10
 8006d3e:	ee66 3a84 	vmul.f32	s7, s13, s8
 8006d42:	ed43 4a0b 	vstr	s9, [r3, #-44]	; 0xffffffd4
 8006d46:	ed10 4a0a 	vldr	s8, [r0, #-40]	; 0xffffffd8
 8006d4a:	ee27 5a84 	vmul.f32	s10, s15, s8
 8006d4e:	ee35 5a03 	vadd.f32	s10, s10, s6
 8006d52:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8006d56:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8006d5a:	ee67 3a04 	vmul.f32	s7, s14, s8
 8006d5e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8006d62:	ee26 3a05 	vmul.f32	s6, s12, s10
 8006d66:	ee33 3a24 	vadd.f32	s6, s6, s9
 8006d6a:	ee66 3a84 	vmul.f32	s7, s13, s8
 8006d6e:	ed03 5a0a 	vstr	s10, [r3, #-40]	; 0xffffffd8
 8006d72:	ed10 4a09 	vldr	s8, [r0, #-36]	; 0xffffffdc
 8006d76:	ee67 4a84 	vmul.f32	s9, s15, s8
 8006d7a:	ee74 4a83 	vadd.f32	s9, s9, s6
 8006d7e:	ee25 5a85 	vmul.f32	s10, s11, s10
 8006d82:	ee35 5a23 	vadd.f32	s10, s10, s7
 8006d86:	ee67 3a04 	vmul.f32	s7, s14, s8
 8006d8a:	ee35 5a23 	vadd.f32	s10, s10, s7
 8006d8e:	ee26 3a24 	vmul.f32	s6, s12, s9
 8006d92:	ee33 3a05 	vadd.f32	s6, s6, s10
 8006d96:	ee66 3a84 	vmul.f32	s7, s13, s8
 8006d9a:	ed43 4a09 	vstr	s9, [r3, #-36]	; 0xffffffdc
 8006d9e:	ed10 4a08 	vldr	s8, [r0, #-32]	; 0xffffffe0
 8006da2:	ee27 5a84 	vmul.f32	s10, s15, s8
 8006da6:	ee35 5a03 	vadd.f32	s10, s10, s6
 8006daa:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8006dae:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8006db2:	ee67 3a04 	vmul.f32	s7, s14, s8
 8006db6:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8006dba:	ee26 3a05 	vmul.f32	s6, s12, s10
 8006dbe:	ee33 3a24 	vadd.f32	s6, s6, s9
 8006dc2:	ee66 3a84 	vmul.f32	s7, s13, s8
 8006dc6:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 8006dca:	ed10 4a07 	vldr	s8, [r0, #-28]	; 0xffffffe4
 8006dce:	ee67 4a84 	vmul.f32	s9, s15, s8
 8006dd2:	ee74 4a83 	vadd.f32	s9, s9, s6
 8006dd6:	ee25 5a85 	vmul.f32	s10, s11, s10
 8006dda:	ee35 5a23 	vadd.f32	s10, s10, s7
 8006dde:	ee67 3a04 	vmul.f32	s7, s14, s8
 8006de2:	ee35 5a23 	vadd.f32	s10, s10, s7
 8006de6:	ee26 3a24 	vmul.f32	s6, s12, s9
 8006dea:	ee33 3a05 	vadd.f32	s6, s6, s10
 8006dee:	ee66 3a84 	vmul.f32	s7, s13, s8
 8006df2:	ed43 4a07 	vstr	s9, [r3, #-28]	; 0xffffffe4
 8006df6:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 8006dfa:	ee27 5a84 	vmul.f32	s10, s15, s8
 8006dfe:	ee35 5a03 	vadd.f32	s10, s10, s6
 8006e02:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8006e06:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8006e0a:	ee67 3a04 	vmul.f32	s7, s14, s8
 8006e0e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8006e12:	ee26 3a05 	vmul.f32	s6, s12, s10
 8006e16:	ee33 3a24 	vadd.f32	s6, s6, s9
 8006e1a:	ee66 3a84 	vmul.f32	s7, s13, s8
 8006e1e:	ed03 5a06 	vstr	s10, [r3, #-24]	; 0xffffffe8
 8006e22:	ed10 4a05 	vldr	s8, [r0, #-20]	; 0xffffffec
 8006e26:	ee67 4a84 	vmul.f32	s9, s15, s8
 8006e2a:	ee74 4a83 	vadd.f32	s9, s9, s6
 8006e2e:	ee25 5a85 	vmul.f32	s10, s11, s10
 8006e32:	ee35 5a23 	vadd.f32	s10, s10, s7
 8006e36:	ee67 3a04 	vmul.f32	s7, s14, s8
 8006e3a:	ee35 5a23 	vadd.f32	s10, s10, s7
 8006e3e:	ee26 3a24 	vmul.f32	s6, s12, s9
 8006e42:	ee33 3a05 	vadd.f32	s6, s6, s10
 8006e46:	ee66 3a84 	vmul.f32	s7, s13, s8
 8006e4a:	ed43 4a05 	vstr	s9, [r3, #-20]	; 0xffffffec
 8006e4e:	ed10 4a04 	vldr	s8, [r0, #-16]
 8006e52:	ee27 5a84 	vmul.f32	s10, s15, s8
 8006e56:	ee35 5a03 	vadd.f32	s10, s10, s6
 8006e5a:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8006e5e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8006e62:	ee67 3a04 	vmul.f32	s7, s14, s8
 8006e66:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8006e6a:	ee26 3a05 	vmul.f32	s6, s12, s10
 8006e6e:	ee33 3a24 	vadd.f32	s6, s6, s9
 8006e72:	ee66 3a84 	vmul.f32	s7, s13, s8
 8006e76:	ed03 5a04 	vstr	s10, [r3, #-16]
 8006e7a:	ed10 4a03 	vldr	s8, [r0, #-12]
 8006e7e:	ee67 4a84 	vmul.f32	s9, s15, s8
 8006e82:	ee74 4a83 	vadd.f32	s9, s9, s6
 8006e86:	ee25 5a85 	vmul.f32	s10, s11, s10
 8006e8a:	ee35 5a23 	vadd.f32	s10, s10, s7
 8006e8e:	ee67 3a04 	vmul.f32	s7, s14, s8
 8006e92:	ee35 5a23 	vadd.f32	s10, s10, s7
 8006e96:	ee26 3a24 	vmul.f32	s6, s12, s9
 8006e9a:	ee33 3a05 	vadd.f32	s6, s6, s10
 8006e9e:	ee66 3a84 	vmul.f32	s7, s13, s8
 8006ea2:	ed43 4a03 	vstr	s9, [r3, #-12]
 8006ea6:	ed10 4a02 	vldr	s8, [r0, #-8]
 8006eaa:	ee27 5a84 	vmul.f32	s10, s15, s8
 8006eae:	ee35 5a03 	vadd.f32	s10, s10, s6
 8006eb2:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8006eb6:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8006eba:	ee67 3a04 	vmul.f32	s7, s14, s8
 8006ebe:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8006ec2:	ee26 3a05 	vmul.f32	s6, s12, s10
 8006ec6:	ee33 3a24 	vadd.f32	s6, s6, s9
 8006eca:	ee66 3a84 	vmul.f32	s7, s13, s8
 8006ece:	ed03 5a02 	vstr	s10, [r3, #-8]
 8006ed2:	ed10 4a01 	vldr	s8, [r0, #-4]
 8006ed6:	ee67 4a84 	vmul.f32	s9, s15, s8
 8006eda:	ee74 4a83 	vadd.f32	s9, s9, s6
 8006ede:	ee25 5a85 	vmul.f32	s10, s11, s10
 8006ee2:	ee35 5a23 	vadd.f32	s10, s10, s7
 8006ee6:	ee67 3a04 	vmul.f32	s7, s14, s8
 8006eea:	ee35 5a23 	vadd.f32	s10, s10, s7
 8006eee:	ee66 3a24 	vmul.f32	s7, s12, s9
 8006ef2:	ee73 3a85 	vadd.f32	s7, s7, s10
 8006ef6:	ee26 5a84 	vmul.f32	s10, s13, s8
 8006efa:	ee25 4aa4 	vmul.f32	s8, s11, s9
 8006efe:	ee34 4a05 	vadd.f32	s8, s8, s10
 8006f02:	ed43 4a01 	vstr	s9, [r3, #-4]
 8006f06:	3040      	adds	r0, #64	; 0x40
 8006f08:	3340      	adds	r3, #64	; 0x40
 8006f0a:	3c01      	subs	r4, #1
 8006f0c:	f47f ae9b 	bne.w	8006c46 <arm_biquad_cascade_df2T_f32+0x52>
 8006f10:	4449      	add	r1, r9
 8006f12:	465b      	mov	r3, fp
 8006f14:	f1b8 0f00 	cmp.w	r8, #0
 8006f18:	d019      	beq.n	8006f4e <arm_biquad_cascade_df2T_f32+0x35a>
 8006f1a:	eb01 000a 	add.w	r0, r1, sl
 8006f1e:	ecf1 2a01 	vldmia	r1!, {s5}
 8006f22:	ee27 3aa2 	vmul.f32	s6, s15, s5
 8006f26:	ee33 3a23 	vadd.f32	s6, s6, s7
 8006f2a:	ee67 3a22 	vmul.f32	s7, s14, s5
 8006f2e:	ee33 4a84 	vadd.f32	s8, s7, s8
 8006f32:	ee26 5a03 	vmul.f32	s10, s12, s6
 8006f36:	ee75 3a04 	vadd.f32	s7, s10, s8
 8006f3a:	ee66 2aa2 	vmul.f32	s5, s13, s5
 8006f3e:	ee25 4a83 	vmul.f32	s8, s11, s6
 8006f42:	ee34 4a22 	vadd.f32	s8, s8, s5
 8006f46:	eca3 3a01 	vstmia	r3!, {s6}
 8006f4a:	4281      	cmp	r1, r0
 8006f4c:	d1e7      	bne.n	8006f1e <arm_biquad_cascade_df2T_f32+0x32a>
 8006f4e:	ed4c 3a02 	vstr	s7, [ip, #-8]
 8006f52:	ed0c 4a01 	vstr	s8, [ip, #-4]
 8006f56:	3514      	adds	r5, #20
 8006f58:	3608      	adds	r6, #8
 8006f5a:	4611      	mov	r1, r2
 8006f5c:	3f01      	subs	r7, #1
 8006f5e:	f47f ae5a 	bne.w	8006c16 <arm_biquad_cascade_df2T_f32+0x22>
 8006f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f66:	4613      	mov	r3, r2
 8006f68:	e7d4      	b.n	8006f14 <arm_biquad_cascade_df2T_f32+0x320>
	...

08006f6c <arm_biquad_cascade_df2T_init_f32>:
 8006f6c:	b510      	push	{r4, lr}
 8006f6e:	6082      	str	r2, [r0, #8]
 8006f70:	7001      	strb	r1, [r0, #0]
 8006f72:	4604      	mov	r4, r0
 8006f74:	00ca      	lsls	r2, r1, #3
 8006f76:	4618      	mov	r0, r3
 8006f78:	2100      	movs	r1, #0
 8006f7a:	f000 f803 	bl	8006f84 <memset>
 8006f7e:	6060      	str	r0, [r4, #4]
 8006f80:	bd10      	pop	{r4, pc}
 8006f82:	bf00      	nop

08006f84 <memset>:
 8006f84:	4402      	add	r2, r0
 8006f86:	4603      	mov	r3, r0
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d100      	bne.n	8006f8e <memset+0xa>
 8006f8c:	4770      	bx	lr
 8006f8e:	f803 1b01 	strb.w	r1, [r3], #1
 8006f92:	e7f9      	b.n	8006f88 <memset+0x4>

08006f94 <__errno>:
 8006f94:	4b01      	ldr	r3, [pc, #4]	; (8006f9c <__errno+0x8>)
 8006f96:	6818      	ldr	r0, [r3, #0]
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop
 8006f9c:	200078c0 	.word	0x200078c0

08006fa0 <__libc_init_array>:
 8006fa0:	b570      	push	{r4, r5, r6, lr}
 8006fa2:	4d0d      	ldr	r5, [pc, #52]	; (8006fd8 <__libc_init_array+0x38>)
 8006fa4:	4c0d      	ldr	r4, [pc, #52]	; (8006fdc <__libc_init_array+0x3c>)
 8006fa6:	1b64      	subs	r4, r4, r5
 8006fa8:	10a4      	asrs	r4, r4, #2
 8006faa:	2600      	movs	r6, #0
 8006fac:	42a6      	cmp	r6, r4
 8006fae:	d109      	bne.n	8006fc4 <__libc_init_array+0x24>
 8006fb0:	4d0b      	ldr	r5, [pc, #44]	; (8006fe0 <__libc_init_array+0x40>)
 8006fb2:	4c0c      	ldr	r4, [pc, #48]	; (8006fe4 <__libc_init_array+0x44>)
 8006fb4:	f000 f91e 	bl	80071f4 <_init>
 8006fb8:	1b64      	subs	r4, r4, r5
 8006fba:	10a4      	asrs	r4, r4, #2
 8006fbc:	2600      	movs	r6, #0
 8006fbe:	42a6      	cmp	r6, r4
 8006fc0:	d105      	bne.n	8006fce <__libc_init_array+0x2e>
 8006fc2:	bd70      	pop	{r4, r5, r6, pc}
 8006fc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fc8:	4798      	blx	r3
 8006fca:	3601      	adds	r6, #1
 8006fcc:	e7ee      	b.n	8006fac <__libc_init_array+0xc>
 8006fce:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fd2:	4798      	blx	r3
 8006fd4:	3601      	adds	r6, #1
 8006fd6:	e7f2      	b.n	8006fbe <__libc_init_array+0x1e>
 8006fd8:	0800721c 	.word	0x0800721c
 8006fdc:	0800721c 	.word	0x0800721c
 8006fe0:	0800721c 	.word	0x0800721c
 8006fe4:	08007220 	.word	0x08007220

08006fe8 <sqrt>:
 8006fe8:	b538      	push	{r3, r4, r5, lr}
 8006fea:	ed2d 8b02 	vpush	{d8}
 8006fee:	ec55 4b10 	vmov	r4, r5, d0
 8006ff2:	f000 f825 	bl	8007040 <__ieee754_sqrt>
 8006ff6:	4622      	mov	r2, r4
 8006ff8:	462b      	mov	r3, r5
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	4629      	mov	r1, r5
 8006ffe:	eeb0 8a40 	vmov.f32	s16, s0
 8007002:	eef0 8a60 	vmov.f32	s17, s1
 8007006:	f7f9 fd5d 	bl	8000ac4 <__aeabi_dcmpun>
 800700a:	b990      	cbnz	r0, 8007032 <sqrt+0x4a>
 800700c:	2200      	movs	r2, #0
 800700e:	2300      	movs	r3, #0
 8007010:	4620      	mov	r0, r4
 8007012:	4629      	mov	r1, r5
 8007014:	f7f9 fd2e 	bl	8000a74 <__aeabi_dcmplt>
 8007018:	b158      	cbz	r0, 8007032 <sqrt+0x4a>
 800701a:	f7ff ffbb 	bl	8006f94 <__errno>
 800701e:	2321      	movs	r3, #33	; 0x21
 8007020:	6003      	str	r3, [r0, #0]
 8007022:	2200      	movs	r2, #0
 8007024:	2300      	movs	r3, #0
 8007026:	4610      	mov	r0, r2
 8007028:	4619      	mov	r1, r3
 800702a:	f7f9 fbdb 	bl	80007e4 <__aeabi_ddiv>
 800702e:	ec41 0b18 	vmov	d8, r0, r1
 8007032:	eeb0 0a48 	vmov.f32	s0, s16
 8007036:	eef0 0a68 	vmov.f32	s1, s17
 800703a:	ecbd 8b02 	vpop	{d8}
 800703e:	bd38      	pop	{r3, r4, r5, pc}

08007040 <__ieee754_sqrt>:
 8007040:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007044:	ec55 4b10 	vmov	r4, r5, d0
 8007048:	4e67      	ldr	r6, [pc, #412]	; (80071e8 <__ieee754_sqrt+0x1a8>)
 800704a:	43ae      	bics	r6, r5
 800704c:	ee10 0a10 	vmov	r0, s0
 8007050:	ee10 2a10 	vmov	r2, s0
 8007054:	4629      	mov	r1, r5
 8007056:	462b      	mov	r3, r5
 8007058:	d10d      	bne.n	8007076 <__ieee754_sqrt+0x36>
 800705a:	f7f9 fa99 	bl	8000590 <__aeabi_dmul>
 800705e:	4602      	mov	r2, r0
 8007060:	460b      	mov	r3, r1
 8007062:	4620      	mov	r0, r4
 8007064:	4629      	mov	r1, r5
 8007066:	f7f9 f8dd 	bl	8000224 <__adddf3>
 800706a:	4604      	mov	r4, r0
 800706c:	460d      	mov	r5, r1
 800706e:	ec45 4b10 	vmov	d0, r4, r5
 8007072:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007076:	2d00      	cmp	r5, #0
 8007078:	dc0b      	bgt.n	8007092 <__ieee754_sqrt+0x52>
 800707a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800707e:	4326      	orrs	r6, r4
 8007080:	d0f5      	beq.n	800706e <__ieee754_sqrt+0x2e>
 8007082:	b135      	cbz	r5, 8007092 <__ieee754_sqrt+0x52>
 8007084:	f7f9 f8cc 	bl	8000220 <__aeabi_dsub>
 8007088:	4602      	mov	r2, r0
 800708a:	460b      	mov	r3, r1
 800708c:	f7f9 fbaa 	bl	80007e4 <__aeabi_ddiv>
 8007090:	e7eb      	b.n	800706a <__ieee754_sqrt+0x2a>
 8007092:	1509      	asrs	r1, r1, #20
 8007094:	f000 808d 	beq.w	80071b2 <__ieee754_sqrt+0x172>
 8007098:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800709c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80070a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80070a4:	07c9      	lsls	r1, r1, #31
 80070a6:	bf5c      	itt	pl
 80070a8:	005b      	lslpl	r3, r3, #1
 80070aa:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80070ae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80070b2:	bf58      	it	pl
 80070b4:	0052      	lslpl	r2, r2, #1
 80070b6:	2500      	movs	r5, #0
 80070b8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80070bc:	1076      	asrs	r6, r6, #1
 80070be:	0052      	lsls	r2, r2, #1
 80070c0:	f04f 0e16 	mov.w	lr, #22
 80070c4:	46ac      	mov	ip, r5
 80070c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80070ca:	eb0c 0001 	add.w	r0, ip, r1
 80070ce:	4298      	cmp	r0, r3
 80070d0:	bfde      	ittt	le
 80070d2:	1a1b      	suble	r3, r3, r0
 80070d4:	eb00 0c01 	addle.w	ip, r0, r1
 80070d8:	186d      	addle	r5, r5, r1
 80070da:	005b      	lsls	r3, r3, #1
 80070dc:	f1be 0e01 	subs.w	lr, lr, #1
 80070e0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80070e4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80070e8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80070ec:	d1ed      	bne.n	80070ca <__ieee754_sqrt+0x8a>
 80070ee:	4674      	mov	r4, lr
 80070f0:	2720      	movs	r7, #32
 80070f2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80070f6:	4563      	cmp	r3, ip
 80070f8:	eb01 000e 	add.w	r0, r1, lr
 80070fc:	dc02      	bgt.n	8007104 <__ieee754_sqrt+0xc4>
 80070fe:	d113      	bne.n	8007128 <__ieee754_sqrt+0xe8>
 8007100:	4290      	cmp	r0, r2
 8007102:	d811      	bhi.n	8007128 <__ieee754_sqrt+0xe8>
 8007104:	2800      	cmp	r0, #0
 8007106:	eb00 0e01 	add.w	lr, r0, r1
 800710a:	da57      	bge.n	80071bc <__ieee754_sqrt+0x17c>
 800710c:	f1be 0f00 	cmp.w	lr, #0
 8007110:	db54      	blt.n	80071bc <__ieee754_sqrt+0x17c>
 8007112:	f10c 0801 	add.w	r8, ip, #1
 8007116:	eba3 030c 	sub.w	r3, r3, ip
 800711a:	4290      	cmp	r0, r2
 800711c:	bf88      	it	hi
 800711e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007122:	1a12      	subs	r2, r2, r0
 8007124:	440c      	add	r4, r1
 8007126:	46c4      	mov	ip, r8
 8007128:	005b      	lsls	r3, r3, #1
 800712a:	3f01      	subs	r7, #1
 800712c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007130:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007134:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007138:	d1dd      	bne.n	80070f6 <__ieee754_sqrt+0xb6>
 800713a:	4313      	orrs	r3, r2
 800713c:	d01b      	beq.n	8007176 <__ieee754_sqrt+0x136>
 800713e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80071ec <__ieee754_sqrt+0x1ac>
 8007142:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80071f0 <__ieee754_sqrt+0x1b0>
 8007146:	e9da 0100 	ldrd	r0, r1, [sl]
 800714a:	e9db 2300 	ldrd	r2, r3, [fp]
 800714e:	f7f9 f867 	bl	8000220 <__aeabi_dsub>
 8007152:	e9da 8900 	ldrd	r8, r9, [sl]
 8007156:	4602      	mov	r2, r0
 8007158:	460b      	mov	r3, r1
 800715a:	4640      	mov	r0, r8
 800715c:	4649      	mov	r1, r9
 800715e:	f7f9 fc93 	bl	8000a88 <__aeabi_dcmple>
 8007162:	b140      	cbz	r0, 8007176 <__ieee754_sqrt+0x136>
 8007164:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007168:	e9da 0100 	ldrd	r0, r1, [sl]
 800716c:	e9db 2300 	ldrd	r2, r3, [fp]
 8007170:	d126      	bne.n	80071c0 <__ieee754_sqrt+0x180>
 8007172:	3501      	adds	r5, #1
 8007174:	463c      	mov	r4, r7
 8007176:	106a      	asrs	r2, r5, #1
 8007178:	0863      	lsrs	r3, r4, #1
 800717a:	07e9      	lsls	r1, r5, #31
 800717c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007180:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007184:	bf48      	it	mi
 8007186:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800718a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800718e:	461c      	mov	r4, r3
 8007190:	e76d      	b.n	800706e <__ieee754_sqrt+0x2e>
 8007192:	0ad3      	lsrs	r3, r2, #11
 8007194:	3815      	subs	r0, #21
 8007196:	0552      	lsls	r2, r2, #21
 8007198:	2b00      	cmp	r3, #0
 800719a:	d0fa      	beq.n	8007192 <__ieee754_sqrt+0x152>
 800719c:	02dc      	lsls	r4, r3, #11
 800719e:	d50a      	bpl.n	80071b6 <__ieee754_sqrt+0x176>
 80071a0:	f1c1 0420 	rsb	r4, r1, #32
 80071a4:	fa22 f404 	lsr.w	r4, r2, r4
 80071a8:	1e4d      	subs	r5, r1, #1
 80071aa:	408a      	lsls	r2, r1
 80071ac:	4323      	orrs	r3, r4
 80071ae:	1b41      	subs	r1, r0, r5
 80071b0:	e772      	b.n	8007098 <__ieee754_sqrt+0x58>
 80071b2:	4608      	mov	r0, r1
 80071b4:	e7f0      	b.n	8007198 <__ieee754_sqrt+0x158>
 80071b6:	005b      	lsls	r3, r3, #1
 80071b8:	3101      	adds	r1, #1
 80071ba:	e7ef      	b.n	800719c <__ieee754_sqrt+0x15c>
 80071bc:	46e0      	mov	r8, ip
 80071be:	e7aa      	b.n	8007116 <__ieee754_sqrt+0xd6>
 80071c0:	f7f9 f830 	bl	8000224 <__adddf3>
 80071c4:	e9da 8900 	ldrd	r8, r9, [sl]
 80071c8:	4602      	mov	r2, r0
 80071ca:	460b      	mov	r3, r1
 80071cc:	4640      	mov	r0, r8
 80071ce:	4649      	mov	r1, r9
 80071d0:	f7f9 fc50 	bl	8000a74 <__aeabi_dcmplt>
 80071d4:	b120      	cbz	r0, 80071e0 <__ieee754_sqrt+0x1a0>
 80071d6:	1ca0      	adds	r0, r4, #2
 80071d8:	bf08      	it	eq
 80071da:	3501      	addeq	r5, #1
 80071dc:	3402      	adds	r4, #2
 80071de:	e7ca      	b.n	8007176 <__ieee754_sqrt+0x136>
 80071e0:	3401      	adds	r4, #1
 80071e2:	f024 0401 	bic.w	r4, r4, #1
 80071e6:	e7c6      	b.n	8007176 <__ieee754_sqrt+0x136>
 80071e8:	7ff00000 	.word	0x7ff00000
 80071ec:	200078c8 	.word	0x200078c8
 80071f0:	200078d0 	.word	0x200078d0

080071f4 <_init>:
 80071f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071f6:	bf00      	nop
 80071f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071fa:	bc08      	pop	{r3}
 80071fc:	469e      	mov	lr, r3
 80071fe:	4770      	bx	lr

08007200 <_fini>:
 8007200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007202:	bf00      	nop
 8007204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007206:	bc08      	pop	{r3}
 8007208:	469e      	mov	lr, r3
 800720a:	4770      	bx	lr
