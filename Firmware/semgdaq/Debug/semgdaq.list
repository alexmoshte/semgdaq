
semgdaq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cad4  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013058  0800ccb0  0800ccb0  0001ccb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801fd08  0801fd08  000378d8  2**0
                  CONTENTS
  4 .ARM          00000000  0801fd08  0801fd08  000378d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801fd08  0801fd08  000378d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801fd08  0801fd08  0002fd08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801fd0c  0801fd0c  0002fd0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000078d8  20000000  0801fd10  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013f8c  200078d8  080275e8  000378d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001b864  080275e8  0003b864  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000378d8  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  00037908  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026088  00000000  00000000  000379c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005216  00000000  00000000  0005da48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001920  00000000  00000000  00062c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011de  00000000  00000000  00064580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023451  00000000  00000000  0006575e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021af0  00000000  00000000  00088baf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6cb8  00000000  00000000  000aa69f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006e10  00000000  00000000  00191358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  00198168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00004cd8  00000000  00000000  001981f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000118  00000000  00000000  0019cecb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200078d8 	.word	0x200078d8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800cc94 	.word	0x0800cc94

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200078dc 	.word	0x200078dc
 8000214:	0800cc94 	.word	0x0800cc94

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2uiz>:
 8000b40:	004a      	lsls	r2, r1, #1
 8000b42:	d211      	bcs.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b44:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b48:	d211      	bcs.n	8000b6e <__aeabi_d2uiz+0x2e>
 8000b4a:	d50d      	bpl.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b4c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b50:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b54:	d40e      	bmi.n	8000b74 <__aeabi_d2uiz+0x34>
 8000b56:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	4770      	bx	lr
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4770      	bx	lr
 8000b6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_d2uiz+0x3a>
 8000b74:	f04f 30ff 	mov.w	r0, #4294967295
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0000 	mov.w	r0, #0
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_d2f>:
 8000b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b88:	bf24      	itt	cs
 8000b8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b92:	d90d      	bls.n	8000bb0 <__aeabi_d2f+0x30>
 8000b94:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba8:	bf08      	it	eq
 8000baa:	f020 0001 	biceq.w	r0, r0, #1
 8000bae:	4770      	bx	lr
 8000bb0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb4:	d121      	bne.n	8000bfa <__aeabi_d2f+0x7a>
 8000bb6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bba:	bfbc      	itt	lt
 8000bbc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bc0:	4770      	bxlt	lr
 8000bc2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bca:	f1c2 0218 	rsb	r2, r2, #24
 8000bce:	f1c2 0c20 	rsb	ip, r2, #32
 8000bd2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bda:	bf18      	it	ne
 8000bdc:	f040 0001 	orrne.w	r0, r0, #1
 8000be0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bec:	ea40 000c 	orr.w	r0, r0, ip
 8000bf0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf8:	e7cc      	b.n	8000b94 <__aeabi_d2f+0x14>
 8000bfa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfe:	d107      	bne.n	8000c10 <__aeabi_d2f+0x90>
 8000c00:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c04:	bf1e      	ittt	ne
 8000c06:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c0a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0e:	4770      	bxne	lr
 8000c10:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c14:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop

08000c20 <ADC1_IN1_autocorr_calc>:
arm_status StatusCoeffs_5;
arm_status StatusCoeffs_6;

//FUNCTION DEFINITIONS
void ADC1_IN1_autocorr_calc(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
	/* Iterate through each lag */
	for(uint32_t n = 0; n <= AR_ORDER; n++)  // AR_ORDER is 10, so n runs from 0 to 10 (inclusive)
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	e01e      	b.n	8000c6a <ADC1_IN1_autocorr_calc+0x4a>
	{
		float32_t result_1 = 0.0f; // Initializing it to zero before calculation
 8000c2c:	f04f 0300 	mov.w	r3, #0
 8000c30:	607b      	str	r3, [r7, #4]

		/* Number of valid points for the dot product at this lag  for the data set*/
		uint32_t Blocksize_1 = ADC_DMA_SIXTEENTHBUFFERSIZE - AR_ORDER;
 8000c32:	23a5      	movs	r3, #165	; 0xa5
 8000c34:	60bb      	str	r3, [r7, #8]

		arm_dot_prod_f32(&(AR_ADC1_IN1.MA_ADC1_IN1_OutBfr[n]), AR_ADC1_IN1.MA_ADC1_IN1_OutBfr, Blocksize_1, &result_1); // A CMSIS DSP function for computing dot products
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	3308      	adds	r3, #8
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	4a0f      	ldr	r2, [pc, #60]	; (8000c7c <ADC1_IN1_autocorr_calc+0x5c>)
 8000c3e:	4413      	add	r3, r2
 8000c40:	1d18      	adds	r0, r3, #4
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	68ba      	ldr	r2, [r7, #8]
 8000c46:	490e      	ldr	r1, [pc, #56]	; (8000c80 <ADC1_IN1_autocorr_calc+0x60>)
 8000c48:	f00a fb86 	bl	800b358 <arm_dot_prod_f32>

		AutoCorr_1[n] = result_1 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8000c4c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000c50:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000c84 <ADC1_IN1_autocorr_calc+0x64>
 8000c54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c58:	4a0b      	ldr	r2, [pc, #44]	; (8000c88 <ADC1_IN1_autocorr_calc+0x68>)
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	4413      	add	r3, r2
 8000c60:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t n = 0; n <= AR_ORDER; n++)  // AR_ORDER is 10, so n runs from 0 to 10 (inclusive)
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	3301      	adds	r3, #1
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	2b0a      	cmp	r3, #10
 8000c6e:	d9dd      	bls.n	8000c2c <ADC1_IN1_autocorr_calc+0xc>
	}
}
 8000c70:	bf00      	nop
 8000c72:	bf00      	nop
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20007aec 	.word	0x20007aec
 8000c80:	20007b10 	.word	0x20007b10
 8000c84:	432f0000 	.word	0x432f0000
 8000c88:	200078f4 	.word	0x200078f4

08000c8c <ADC1_IN1_autoreg_coeffs>:

float32_t* ADC1_IN1_autoreg_coeffs(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 8000c92:	af00      	add	r7, sp, #0
	float32_t AC_Matrix_1 [AR_ORDER];

	for(uint32_t n=0; n < AR_ORDER; n++)
 8000c94:	2300      	movs	r3, #0
 8000c96:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8000c9a:	e013      	b.n	8000cc4 <ADC1_IN1_autoreg_coeffs+0x38>
	{
		AC_Matrix_1[n] = AutoCorr_1[n + 1]; // R1 to R10 corresponds to indices 1 to 10
 8000c9c:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	4a43      	ldr	r2, [pc, #268]	; (8000db0 <ADC1_IN1_autoreg_coeffs+0x124>)
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	4413      	add	r3, r2
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8000cb4:	443b      	add	r3, r7
 8000cb6:	3b38      	subs	r3, #56	; 0x38
 8000cb8:	601a      	str	r2, [r3, #0]
	for(uint32_t n=0; n < AR_ORDER; n++)
 8000cba:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8000cc4:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000cc8:	2b09      	cmp	r3, #9
 8000cca:	d9e7      	bls.n	8000c9c <ADC1_IN1_autoreg_coeffs+0x10>
	}

	arm_mat_init_f32(&ADC1_IN1_AC_mtx, AR_ORDER, 1, AC_Matrix_1); // Initializes the autocorrelations matrix
 8000ccc:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	210a      	movs	r1, #10
 8000cd4:	4837      	ldr	r0, [pc, #220]	; (8000db4 <ADC1_IN1_autoreg_coeffs+0x128>)
 8000cd6:	f00a f973 	bl	800afc0 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_1[AR_ORDER * AR_ORDER]; // Array that hold the matrix data (100 elements) according to the Yule-Walker equations

	/* Filling the Yule-Walker matrix with the appropriate values (100 elements) from the auto-correlations buffer values */
	for (int r = 0; r < AR_ORDER; r++)
 8000cda:	2300      	movs	r3, #0
 8000cdc:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8000ce0:	e02f      	b.n	8000d42 <ADC1_IN1_autoreg_coeffs+0xb6>
	{
	    for (int32_t c = 0; c < AR_ORDER; c++)
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8000ce8:	e022      	b.n	8000d30 <ADC1_IN1_autoreg_coeffs+0xa4>
	    {
	        /* Access the autocorrelation buffer using the absolute difference of indices */
	    	Yule_Walker_Matrix_1[r * 10 + c] = AutoCorr_1[abs(r - c)];  // We are placing the elements in a one-dimensional array Yule-Walker matrix as if it represents a 10x10 matrix. This is done by calculating the correct index for each matrix element using (i * 10 + j)
 8000cea:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8000cee:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8000cf2:	1ad3      	subs	r3, r2, r3
 8000cf4:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8000cf8:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8000cfc:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8000d00:	4613      	mov	r3, r2
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	4413      	add	r3, r2
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	461a      	mov	r2, r3
 8000d0a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8000d0e:	4413      	add	r3, r2
 8000d10:	4827      	ldr	r0, [pc, #156]	; (8000db0 <ADC1_IN1_autoreg_coeffs+0x124>)
 8000d12:	008a      	lsls	r2, r1, #2
 8000d14:	4402      	add	r2, r0
 8000d16:	6812      	ldr	r2, [r2, #0]
 8000d18:	f507 7156 	add.w	r1, r7, #856	; 0x358
 8000d1c:	f5a1 71e4 	sub.w	r1, r1, #456	; 0x1c8
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	440b      	add	r3, r1
 8000d24:	601a      	str	r2, [r3, #0]
	    for (int32_t c = 0; c < AR_ORDER; c++)
 8000d26:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8000d30:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8000d34:	2b09      	cmp	r3, #9
 8000d36:	ddd8      	ble.n	8000cea <ADC1_IN1_autoreg_coeffs+0x5e>
	for (int r = 0; r < AR_ORDER; r++)
 8000d38:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8000d42:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8000d46:	2b09      	cmp	r3, #9
 8000d48:	ddcb      	ble.n	8000ce2 <ADC1_IN1_autoreg_coeffs+0x56>
	    }
	}

	arm_mat_init_f32(&ADC1_IN1_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_1); // Initializes the Yule-Walker matrix
 8000d4a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000d4e:	220a      	movs	r2, #10
 8000d50:	210a      	movs	r1, #10
 8000d52:	4819      	ldr	r0, [pc, #100]	; (8000db8 <ADC1_IN1_autoreg_coeffs+0x12c>)
 8000d54:	f00a f934 	bl	800afc0 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_Inv_1 [AR_ORDER * AR_ORDER]; // Array that hold the inverse matrix data (100 elements)

	arm_mat_init_f32(&ADC1_IN1_Inv_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_Inv_1); // Initializes the inverse Yule-Walker matrix
 8000d58:	463b      	mov	r3, r7
 8000d5a:	220a      	movs	r2, #10
 8000d5c:	210a      	movs	r1, #10
 8000d5e:	4817      	ldr	r0, [pc, #92]	; (8000dbc <ADC1_IN1_autoreg_coeffs+0x130>)
 8000d60:	f00a f92e 	bl	800afc0 <arm_mat_init_f32>

	/* Calculate the inverse of the Yule-Walker matrix and return status of the operation */
	arm_status StatusInv_1 = arm_mat_inverse_f32(&ADC1_IN1_YW_mtx, &ADC1_IN1_Inv_YW_mtx);
 8000d64:	4915      	ldr	r1, [pc, #84]	; (8000dbc <ADC1_IN1_autoreg_coeffs+0x130>)
 8000d66:	4814      	ldr	r0, [pc, #80]	; (8000db8 <ADC1_IN1_autoreg_coeffs+0x12c>)
 8000d68:	f00a f824 	bl	800adb4 <arm_mat_inverse_f32>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b

	if(StatusInv_1 == ARM_MATH_SUCCESS) // Check if operation was successful
 8000d72:	f997 334b 	ldrsb.w	r3, [r7, #843]	; 0x34b
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d113      	bne.n	8000da2 <ADC1_IN1_autoreg_coeffs+0x116>
	{
		memset(AR_Coeffs_1, 0, AR_ORDER * sizeof(float32_t)); // Initializes the entire autocorrelations array to values zero
 8000d7a:	2228      	movs	r2, #40	; 0x28
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4810      	ldr	r0, [pc, #64]	; (8000dc0 <ADC1_IN1_autoreg_coeffs+0x134>)
 8000d80:	f00a fe02 	bl	800b988 <memset>

		arm_mat_init_f32(&ADC1_IN1_coeffs_mtx , AR_ORDER, 1 , AR_Coeffs_1); //Initializes the coefficients Matrix
 8000d84:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <ADC1_IN1_autoreg_coeffs+0x134>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	210a      	movs	r1, #10
 8000d8a:	480e      	ldr	r0, [pc, #56]	; (8000dc4 <ADC1_IN1_autoreg_coeffs+0x138>)
 8000d8c:	f00a f918 	bl	800afc0 <arm_mat_init_f32>

        StatusCoeffs_1 = arm_mat_mult_f32( &ADC1_IN1_Inv_YW_mtx, &ADC1_IN1_AC_mtx, &ADC1_IN1_coeffs_mtx );
 8000d90:	4a0c      	ldr	r2, [pc, #48]	; (8000dc4 <ADC1_IN1_autoreg_coeffs+0x138>)
 8000d92:	4908      	ldr	r1, [pc, #32]	; (8000db4 <ADC1_IN1_autoreg_coeffs+0x128>)
 8000d94:	4809      	ldr	r0, [pc, #36]	; (8000dbc <ADC1_IN1_autoreg_coeffs+0x130>)
 8000d96:	f009 ff6d 	bl	800ac74 <arm_mat_mult_f32>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <ADC1_IN1_autoreg_coeffs+0x13c>)
 8000da0:	701a      	strb	r2, [r3, #0]
	else
	{
         // Do something to indicate that the process has failed
	}

    return AR_Coeffs_1;
 8000da2:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <ADC1_IN1_autoreg_coeffs+0x134>)
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	200078f4 	.word	0x200078f4
 8000db4:	20009cf4 	.word	0x20009cf4
 8000db8:	20009c94 	.word	0x20009c94
 8000dbc:	20009cc4 	.word	0x20009cc4
 8000dc0:	200079fc 	.word	0x200079fc
 8000dc4:	20009d24 	.word	0x20009d24
 8000dc8:	20009d54 	.word	0x20009d54

08000dcc <ADC1_IN2_autocorr_calc>:



void ADC1_IN2_autocorr_calc(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
	/* Iterate through each lag */
	for(uint32_t n=0; n<AR_ORDER; n++)
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	e01e      	b.n	8000e16 <ADC1_IN2_autocorr_calc+0x4a>
	{
		float32_t result_2 = 0.0f; // Initializing it to zero before calculation
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	607b      	str	r3, [r7, #4]

		/* Number of valid points for the dot product at this lag */
		uint32_t Blocksize_2 = ADC_DMA_SIXTEENTHBUFFERSIZE - AR_ORDER;
 8000dde:	23a5      	movs	r3, #165	; 0xa5
 8000de0:	60bb      	str	r3, [r7, #8]

		arm_dot_prod_f32(&(AR_ADC1_IN2.MA_ADC1_IN2_OutBfr[n]), AR_ADC1_IN2.MA_ADC1_IN2_OutBfr, Blocksize_2, &result_2);
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	3308      	adds	r3, #8
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	4a0f      	ldr	r2, [pc, #60]	; (8000e28 <ADC1_IN2_autocorr_calc+0x5c>)
 8000dea:	4413      	add	r3, r2
 8000dec:	1d18      	adds	r0, r3, #4
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	68ba      	ldr	r2, [r7, #8]
 8000df2:	490e      	ldr	r1, [pc, #56]	; (8000e2c <ADC1_IN2_autocorr_calc+0x60>)
 8000df4:	f00a fab0 	bl	800b358 <arm_dot_prod_f32>

		AutoCorr_2[n] = result_2 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8000df8:	ed97 7a01 	vldr	s14, [r7, #4]
 8000dfc:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000e30 <ADC1_IN2_autocorr_calc+0x64>
 8000e00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e04:	4a0b      	ldr	r2, [pc, #44]	; (8000e34 <ADC1_IN2_autocorr_calc+0x68>)
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	4413      	add	r3, r2
 8000e0c:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t n=0; n<AR_ORDER; n++)
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	3301      	adds	r3, #1
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	2b09      	cmp	r3, #9
 8000e1a:	d9dd      	bls.n	8000dd8 <ADC1_IN2_autocorr_calc+0xc>
	}
}
 8000e1c:	bf00      	nop
 8000e1e:	bf00      	nop
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20008088 	.word	0x20008088
 8000e2c:	200080ac 	.word	0x200080ac
 8000e30:	432f0000 	.word	0x432f0000
 8000e34:	20007920 	.word	0x20007920

08000e38 <ADC1_IN2_autoreg_coeffs>:

float32_t* ADC1_IN2_autoreg_coeffs(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 8000e3e:	af00      	add	r7, sp, #0
	float32_t AC_Matrix_2 [AR_ORDER];

	for(uint32_t n=0; n < AR_ORDER; n++)
 8000e40:	2300      	movs	r3, #0
 8000e42:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8000e46:	e013      	b.n	8000e70 <ADC1_IN2_autoreg_coeffs+0x38>
	{
		AC_Matrix_2[n] = AutoCorr_2[n + 1]; // R1 to R10 corresponds to indices 1 to 10
 8000e48:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	4a43      	ldr	r2, [pc, #268]	; (8000f5c <ADC1_IN2_autoreg_coeffs+0x124>)
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	4413      	add	r3, r2
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8000e60:	443b      	add	r3, r7
 8000e62:	3b38      	subs	r3, #56	; 0x38
 8000e64:	601a      	str	r2, [r3, #0]
	for(uint32_t n=0; n < AR_ORDER; n++)
 8000e66:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8000e70:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000e74:	2b09      	cmp	r3, #9
 8000e76:	d9e7      	bls.n	8000e48 <ADC1_IN2_autoreg_coeffs+0x10>
	}

	arm_mat_init_f32(&ADC1_IN2_AC_mtx, AR_ORDER, 1, AC_Matrix_2); //Initializes the autocorrelations matrix
 8000e78:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	210a      	movs	r1, #10
 8000e80:	4837      	ldr	r0, [pc, #220]	; (8000f60 <ADC1_IN2_autoreg_coeffs+0x128>)
 8000e82:	f00a f89d 	bl	800afc0 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_2[AR_ORDER * AR_ORDER]; // Array that hold the matrix data (100 elements) according to the Yule-Walker equations

	/* Filling the Yule-Walker matrix with the appropriate values (100 elements) from the auto-correlations buffer values */
	for (int r = 0; r < AR_ORDER; r++)
 8000e86:	2300      	movs	r3, #0
 8000e88:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8000e8c:	e02f      	b.n	8000eee <ADC1_IN2_autoreg_coeffs+0xb6>
	{
	    for (int32_t c = 0; c < AR_ORDER; c++)
 8000e8e:	2300      	movs	r3, #0
 8000e90:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8000e94:	e022      	b.n	8000edc <ADC1_IN2_autoreg_coeffs+0xa4>
	    {
	        /* Access the autocorrelation buffer using the absolute difference of indices */
	    	Yule_Walker_Matrix_2[r * 10 + c] = AutoCorr_2[abs(r - c)];  // We are placing the elements in a one-dimensional array Yule-Walker matrix as if it represents a 10x10 matrix. This is done by calculating the correct index for each matrix element using (i * 10 + j)
 8000e96:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8000e9a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8000ea4:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8000ea8:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8000eac:	4613      	mov	r3, r2
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	4413      	add	r3, r2
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8000eba:	4413      	add	r3, r2
 8000ebc:	4827      	ldr	r0, [pc, #156]	; (8000f5c <ADC1_IN2_autoreg_coeffs+0x124>)
 8000ebe:	008a      	lsls	r2, r1, #2
 8000ec0:	4402      	add	r2, r0
 8000ec2:	6812      	ldr	r2, [r2, #0]
 8000ec4:	f507 7156 	add.w	r1, r7, #856	; 0x358
 8000ec8:	f5a1 71e4 	sub.w	r1, r1, #456	; 0x1c8
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	440b      	add	r3, r1
 8000ed0:	601a      	str	r2, [r3, #0]
	    for (int32_t c = 0; c < AR_ORDER; c++)
 8000ed2:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8000edc:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8000ee0:	2b09      	cmp	r3, #9
 8000ee2:	ddd8      	ble.n	8000e96 <ADC1_IN2_autoreg_coeffs+0x5e>
	for (int r = 0; r < AR_ORDER; r++)
 8000ee4:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8000ee8:	3301      	adds	r3, #1
 8000eea:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8000eee:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8000ef2:	2b09      	cmp	r3, #9
 8000ef4:	ddcb      	ble.n	8000e8e <ADC1_IN2_autoreg_coeffs+0x56>
	    }
	}

	arm_mat_init_f32(&ADC1_IN2_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_2); // Initializes the Yule-Walker matrix
 8000ef6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000efa:	220a      	movs	r2, #10
 8000efc:	210a      	movs	r1, #10
 8000efe:	4819      	ldr	r0, [pc, #100]	; (8000f64 <ADC1_IN2_autoreg_coeffs+0x12c>)
 8000f00:	f00a f85e 	bl	800afc0 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_Inv_2[AR_ORDER * AR_ORDER]; // Array that hold the inverse matrix data (100 elements)

	arm_mat_init_f32(&ADC1_IN2_Inv_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_Inv_2); // Initializes the inverse Yule-Walker matrix
 8000f04:	463b      	mov	r3, r7
 8000f06:	220a      	movs	r2, #10
 8000f08:	210a      	movs	r1, #10
 8000f0a:	4817      	ldr	r0, [pc, #92]	; (8000f68 <ADC1_IN2_autoreg_coeffs+0x130>)
 8000f0c:	f00a f858 	bl	800afc0 <arm_mat_init_f32>

	/* Calculate the inverse of the Yule-Walker matrix and return status of the operation */
	arm_status StatusInv_2 = arm_mat_inverse_f32(&ADC1_IN2_YW_mtx, &ADC1_IN2_Inv_YW_mtx);
 8000f10:	4915      	ldr	r1, [pc, #84]	; (8000f68 <ADC1_IN2_autoreg_coeffs+0x130>)
 8000f12:	4814      	ldr	r0, [pc, #80]	; (8000f64 <ADC1_IN2_autoreg_coeffs+0x12c>)
 8000f14:	f009 ff4e 	bl	800adb4 <arm_mat_inverse_f32>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b

	if(StatusInv_2 == ARM_MATH_SUCCESS) // Check if operation was successful
 8000f1e:	f997 334b 	ldrsb.w	r3, [r7, #843]	; 0x34b
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d113      	bne.n	8000f4e <ADC1_IN2_autoreg_coeffs+0x116>
	{
		memset(AR_Coeffs_2, 0, AR_ORDER * sizeof(float32_t)); // Initializes the entire autocorrelations array to values zero
 8000f26:	2228      	movs	r2, #40	; 0x28
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4810      	ldr	r0, [pc, #64]	; (8000f6c <ADC1_IN2_autoreg_coeffs+0x134>)
 8000f2c:	f00a fd2c 	bl	800b988 <memset>

		arm_mat_init_f32(&ADC1_IN2_coeffs_mtx , AR_ORDER, 1 , AR_Coeffs_2); //Initializes the coefficients Matrix
 8000f30:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <ADC1_IN2_autoreg_coeffs+0x134>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	210a      	movs	r1, #10
 8000f36:	480e      	ldr	r0, [pc, #56]	; (8000f70 <ADC1_IN2_autoreg_coeffs+0x138>)
 8000f38:	f00a f842 	bl	800afc0 <arm_mat_init_f32>

        StatusCoeffs_2 = arm_mat_mult_f32( &ADC1_IN2_Inv_YW_mtx, &ADC1_IN2_AC_mtx, &ADC1_IN2_coeffs_mtx );
 8000f3c:	4a0c      	ldr	r2, [pc, #48]	; (8000f70 <ADC1_IN2_autoreg_coeffs+0x138>)
 8000f3e:	4908      	ldr	r1, [pc, #32]	; (8000f60 <ADC1_IN2_autoreg_coeffs+0x128>)
 8000f40:	4809      	ldr	r0, [pc, #36]	; (8000f68 <ADC1_IN2_autoreg_coeffs+0x130>)
 8000f42:	f009 fe97 	bl	800ac74 <arm_mat_mult_f32>
 8000f46:	4603      	mov	r3, r0
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <ADC1_IN2_autoreg_coeffs+0x13c>)
 8000f4c:	701a      	strb	r2, [r3, #0]
	else
	{
         // Do something to indicate that the process has failed
	}

    return AR_Coeffs_2;
 8000f4e:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <ADC1_IN2_autoreg_coeffs+0x134>)
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20007920 	.word	0x20007920
 8000f60:	20009cfc 	.word	0x20009cfc
 8000f64:	20009c9c 	.word	0x20009c9c
 8000f68:	20009ccc 	.word	0x20009ccc
 8000f6c:	20007a24 	.word	0x20007a24
 8000f70:	20009d2c 	.word	0x20009d2c
 8000f74:	20009d55 	.word	0x20009d55

08000f78 <ADC2_IN3_autocorr_calc>:



void ADC2_IN3_autocorr_calc(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
	/* Iterate through each lag */
	for(uint32_t n=0; n<AR_ORDER; n++)
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	e01e      	b.n	8000fc2 <ADC2_IN3_autocorr_calc+0x4a>
	{
		float32_t result_3 = 0.0f; // Initializing it to zero before calculation
 8000f84:	f04f 0300 	mov.w	r3, #0
 8000f88:	607b      	str	r3, [r7, #4]

		/* Number of valid points for the dot product at this lag */
		uint32_t Blocksize_3 = ADC_DMA_SIXTEENTHBUFFERSIZE - AR_ORDER;
 8000f8a:	23a5      	movs	r3, #165	; 0xa5
 8000f8c:	60bb      	str	r3, [r7, #8]

		arm_dot_prod_f32(&(AR_ADC2_IN3.MA_ADC2_IN3_OutBfr[n]), AR_ADC2_IN3.MA_ADC2_IN3_OutBfr, Blocksize_3, &result_3);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	3308      	adds	r3, #8
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	4a0f      	ldr	r2, [pc, #60]	; (8000fd4 <ADC2_IN3_autocorr_calc+0x5c>)
 8000f96:	4413      	add	r3, r2
 8000f98:	1d18      	adds	r0, r3, #4
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	68ba      	ldr	r2, [r7, #8]
 8000f9e:	490e      	ldr	r1, [pc, #56]	; (8000fd8 <ADC2_IN3_autocorr_calc+0x60>)
 8000fa0:	f00a f9da 	bl	800b358 <arm_dot_prod_f32>

		AutoCorr_3[n] = result_3 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8000fa4:	ed97 7a01 	vldr	s14, [r7, #4]
 8000fa8:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000fdc <ADC2_IN3_autocorr_calc+0x64>
 8000fac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fb0:	4a0b      	ldr	r2, [pc, #44]	; (8000fe0 <ADC2_IN3_autocorr_calc+0x68>)
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	4413      	add	r3, r2
 8000fb8:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t n=0; n<AR_ORDER; n++)
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	2b09      	cmp	r3, #9
 8000fc6:	d9dd      	bls.n	8000f84 <ADC2_IN3_autocorr_calc+0xc>
	}
}
 8000fc8:	bf00      	nop
 8000fca:	bf00      	nop
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20008624 	.word	0x20008624
 8000fd8:	20008648 	.word	0x20008648
 8000fdc:	432f0000 	.word	0x432f0000
 8000fe0:	2000794c 	.word	0x2000794c

08000fe4 <ADC2_IN3_autoreg_coeffs>:

float32_t* ADC2_IN3_autoreg_coeffs(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 8000fea:	af00      	add	r7, sp, #0
	float32_t AC_Matrix_3 [AR_ORDER];

	for(uint32_t n=0; n < AR_ORDER; n++)
 8000fec:	2300      	movs	r3, #0
 8000fee:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8000ff2:	e013      	b.n	800101c <ADC2_IN3_autoreg_coeffs+0x38>
	{
		AC_Matrix_3[n] = AutoCorr_3[n + 1]; // R1 to R10 corresponds to indices 1 to 10
 8000ff4:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	4a43      	ldr	r2, [pc, #268]	; (8001108 <ADC2_IN3_autoreg_coeffs+0x124>)
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	4413      	add	r3, r2
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800100c:	443b      	add	r3, r7
 800100e:	3b38      	subs	r3, #56	; 0x38
 8001010:	601a      	str	r2, [r3, #0]
	for(uint32_t n=0; n < AR_ORDER; n++)
 8001012:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001016:	3301      	adds	r3, #1
 8001018:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800101c:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001020:	2b09      	cmp	r3, #9
 8001022:	d9e7      	bls.n	8000ff4 <ADC2_IN3_autoreg_coeffs+0x10>
	}

	arm_mat_init_f32(&ADC2_IN3_AC_mtx, AR_ORDER, 1, AC_Matrix_3); //Initializes the autocorrelations matrix
 8001024:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8001028:	2201      	movs	r2, #1
 800102a:	210a      	movs	r1, #10
 800102c:	4837      	ldr	r0, [pc, #220]	; (800110c <ADC2_IN3_autoreg_coeffs+0x128>)
 800102e:	f009 ffc7 	bl	800afc0 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_3[AR_ORDER * AR_ORDER]; // Array that hold the matrix data (100 elements) according to the Yule-Walker equations

	/* Filling the Yule-Walker matrix with the appropriate values (100 elements) from the auto-correlations buffer values */
	for (int r = 0; r < AR_ORDER; r++)
 8001032:	2300      	movs	r3, #0
 8001034:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8001038:	e02f      	b.n	800109a <ADC2_IN3_autoreg_coeffs+0xb6>
	{
	    for (int32_t c = 0; c < AR_ORDER; c++)
 800103a:	2300      	movs	r3, #0
 800103c:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8001040:	e022      	b.n	8001088 <ADC2_IN3_autoreg_coeffs+0xa4>
	    {
	        /* Access the autocorrelation buffer using the absolute difference of indices */
	    	Yule_Walker_Matrix_3[r * 10 + c] = AutoCorr_3[abs(r - c)];  // We are placing the elements in a one-dimensional array Yule-Walker matrix as if it represents a 10x10 matrix. This is done by calculating the correct index for each matrix element using (i * 10 + j)
 8001042:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8001046:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001050:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001054:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8001058:	4613      	mov	r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	4413      	add	r3, r2
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	461a      	mov	r2, r3
 8001062:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001066:	4413      	add	r3, r2
 8001068:	4827      	ldr	r0, [pc, #156]	; (8001108 <ADC2_IN3_autoreg_coeffs+0x124>)
 800106a:	008a      	lsls	r2, r1, #2
 800106c:	4402      	add	r2, r0
 800106e:	6812      	ldr	r2, [r2, #0]
 8001070:	f507 7156 	add.w	r1, r7, #856	; 0x358
 8001074:	f5a1 71e4 	sub.w	r1, r1, #456	; 0x1c8
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	440b      	add	r3, r1
 800107c:	601a      	str	r2, [r3, #0]
	    for (int32_t c = 0; c < AR_ORDER; c++)
 800107e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001082:	3301      	adds	r3, #1
 8001084:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8001088:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800108c:	2b09      	cmp	r3, #9
 800108e:	ddd8      	ble.n	8001042 <ADC2_IN3_autoreg_coeffs+0x5e>
	for (int r = 0; r < AR_ORDER; r++)
 8001090:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8001094:	3301      	adds	r3, #1
 8001096:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 800109a:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800109e:	2b09      	cmp	r3, #9
 80010a0:	ddcb      	ble.n	800103a <ADC2_IN3_autoreg_coeffs+0x56>
	    }
	}

	arm_mat_init_f32(&ADC2_IN3_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_3); // Initializes the Yule-Walker matrix
 80010a2:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80010a6:	220a      	movs	r2, #10
 80010a8:	210a      	movs	r1, #10
 80010aa:	4819      	ldr	r0, [pc, #100]	; (8001110 <ADC2_IN3_autoreg_coeffs+0x12c>)
 80010ac:	f009 ff88 	bl	800afc0 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_Inv_3[AR_ORDER * AR_ORDER]; // Array that hold the inverse matrix data (100 elements)

	arm_mat_init_f32(&ADC2_IN3_Inv_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_Inv_3); // Initializes the inverse Yule-Walker matrix
 80010b0:	463b      	mov	r3, r7
 80010b2:	220a      	movs	r2, #10
 80010b4:	210a      	movs	r1, #10
 80010b6:	4817      	ldr	r0, [pc, #92]	; (8001114 <ADC2_IN3_autoreg_coeffs+0x130>)
 80010b8:	f009 ff82 	bl	800afc0 <arm_mat_init_f32>

	/* Calculate the inverse of the Yule-Walker matrix and return status of the operation */
	arm_status StatusInv_3 = arm_mat_inverse_f32(&ADC2_IN3_YW_mtx, &ADC2_IN3_Inv_YW_mtx);
 80010bc:	4915      	ldr	r1, [pc, #84]	; (8001114 <ADC2_IN3_autoreg_coeffs+0x130>)
 80010be:	4814      	ldr	r0, [pc, #80]	; (8001110 <ADC2_IN3_autoreg_coeffs+0x12c>)
 80010c0:	f009 fe78 	bl	800adb4 <arm_mat_inverse_f32>
 80010c4:	4603      	mov	r3, r0
 80010c6:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b

	if(StatusInv_3 == ARM_MATH_SUCCESS) // Check if operation was successful
 80010ca:	f997 334b 	ldrsb.w	r3, [r7, #843]	; 0x34b
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d113      	bne.n	80010fa <ADC2_IN3_autoreg_coeffs+0x116>
	{
		memset(AR_Coeffs_3, 0, AR_ORDER * sizeof(float32_t)); // Initializes the entire autocorrelations array to values zero
 80010d2:	2228      	movs	r2, #40	; 0x28
 80010d4:	2100      	movs	r1, #0
 80010d6:	4810      	ldr	r0, [pc, #64]	; (8001118 <ADC2_IN3_autoreg_coeffs+0x134>)
 80010d8:	f00a fc56 	bl	800b988 <memset>

		arm_mat_init_f32(&ADC2_IN3_coeffs_mtx , AR_ORDER, 1 , AR_Coeffs_3); //Initializes the coefficients Matrix
 80010dc:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <ADC2_IN3_autoreg_coeffs+0x134>)
 80010de:	2201      	movs	r2, #1
 80010e0:	210a      	movs	r1, #10
 80010e2:	480e      	ldr	r0, [pc, #56]	; (800111c <ADC2_IN3_autoreg_coeffs+0x138>)
 80010e4:	f009 ff6c 	bl	800afc0 <arm_mat_init_f32>

        StatusCoeffs_3 = arm_mat_mult_f32( &ADC2_IN3_Inv_YW_mtx, &ADC2_IN3_AC_mtx, &ADC2_IN3_coeffs_mtx );
 80010e8:	4a0c      	ldr	r2, [pc, #48]	; (800111c <ADC2_IN3_autoreg_coeffs+0x138>)
 80010ea:	4908      	ldr	r1, [pc, #32]	; (800110c <ADC2_IN3_autoreg_coeffs+0x128>)
 80010ec:	4809      	ldr	r0, [pc, #36]	; (8001114 <ADC2_IN3_autoreg_coeffs+0x130>)
 80010ee:	f009 fdc1 	bl	800ac74 <arm_mat_mult_f32>
 80010f2:	4603      	mov	r3, r0
 80010f4:	461a      	mov	r2, r3
 80010f6:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <ADC2_IN3_autoreg_coeffs+0x13c>)
 80010f8:	701a      	strb	r2, [r3, #0]
	else
	{
         // Do something to indicate that the process has failed
	}

    return AR_Coeffs_3;
 80010fa:	4b07      	ldr	r3, [pc, #28]	; (8001118 <ADC2_IN3_autoreg_coeffs+0x134>)
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	2000794c 	.word	0x2000794c
 800110c:	20009d04 	.word	0x20009d04
 8001110:	20009ca4 	.word	0x20009ca4
 8001114:	20009cd4 	.word	0x20009cd4
 8001118:	20007a4c 	.word	0x20007a4c
 800111c:	20009d34 	.word	0x20009d34
 8001120:	20009d56 	.word	0x20009d56

08001124 <ADC2_IN4_autocorr_calc>:



void ADC2_IN4_autocorr_calc(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
	/* Iterate through each lag */
	for(uint32_t n=0; n<AR_ORDER; n++)
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	e01e      	b.n	800116e <ADC2_IN4_autocorr_calc+0x4a>
	{
		float32_t result_4 = 0.0f; // Initializing it to zero before calculation
 8001130:	f04f 0300 	mov.w	r3, #0
 8001134:	607b      	str	r3, [r7, #4]

		/* Number of valid points for the dot product at this lag */
		uint32_t Blocksize_4 = ADC_DMA_SIXTEENTHBUFFERSIZE - AR_ORDER;
 8001136:	23a5      	movs	r3, #165	; 0xa5
 8001138:	60bb      	str	r3, [r7, #8]

		arm_dot_prod_f32(&(AR_ADC2_IN4.MA_ADC2_IN4_OutBfr[n]), AR_ADC2_IN4.MA_ADC2_IN4_OutBfr, Blocksize_4, &result_4);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	3308      	adds	r3, #8
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	4a0f      	ldr	r2, [pc, #60]	; (8001180 <ADC2_IN4_autocorr_calc+0x5c>)
 8001142:	4413      	add	r3, r2
 8001144:	1d18      	adds	r0, r3, #4
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	68ba      	ldr	r2, [r7, #8]
 800114a:	490e      	ldr	r1, [pc, #56]	; (8001184 <ADC2_IN4_autocorr_calc+0x60>)
 800114c:	f00a f904 	bl	800b358 <arm_dot_prod_f32>

		AutoCorr_4[n] = result_4 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8001150:	ed97 7a01 	vldr	s14, [r7, #4]
 8001154:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001188 <ADC2_IN4_autocorr_calc+0x64>
 8001158:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800115c:	4a0b      	ldr	r2, [pc, #44]	; (800118c <ADC2_IN4_autocorr_calc+0x68>)
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	4413      	add	r3, r2
 8001164:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t n=0; n<AR_ORDER; n++)
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	3301      	adds	r3, #1
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	2b09      	cmp	r3, #9
 8001172:	d9dd      	bls.n	8001130 <ADC2_IN4_autocorr_calc+0xc>
	}
}
 8001174:	bf00      	nop
 8001176:	bf00      	nop
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20008bc0 	.word	0x20008bc0
 8001184:	20008be4 	.word	0x20008be4
 8001188:	432f0000 	.word	0x432f0000
 800118c:	20007978 	.word	0x20007978

08001190 <ADC2_IN4_autoreg_coeffs>:

float32_t* ADC2_IN4_autoreg_coeffs(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 8001196:	af00      	add	r7, sp, #0
	float32_t AC_Matrix_4 [AR_ORDER];

	for(uint32_t n=0; n < AR_ORDER; n++)
 8001198:	2300      	movs	r3, #0
 800119a:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800119e:	e013      	b.n	80011c8 <ADC2_IN4_autoreg_coeffs+0x38>
	{
		AC_Matrix_4[n] = AutoCorr_4[n + 1]; // R1 to R10 corresponds to indices 1 to 10
 80011a0:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80011a4:	3301      	adds	r3, #1
 80011a6:	4a43      	ldr	r2, [pc, #268]	; (80012b4 <ADC2_IN4_autoreg_coeffs+0x124>)
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80011b8:	443b      	add	r3, r7
 80011ba:	3b38      	subs	r3, #56	; 0x38
 80011bc:	601a      	str	r2, [r3, #0]
	for(uint32_t n=0; n < AR_ORDER; n++)
 80011be:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80011c2:	3301      	adds	r3, #1
 80011c4:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 80011c8:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80011cc:	2b09      	cmp	r3, #9
 80011ce:	d9e7      	bls.n	80011a0 <ADC2_IN4_autoreg_coeffs+0x10>
	}

	arm_mat_init_f32(&ADC2_IN4_AC_mtx, AR_ORDER, 1, AC_Matrix_4); //Initializes the autocorrelations matrix
 80011d0:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80011d4:	2201      	movs	r2, #1
 80011d6:	210a      	movs	r1, #10
 80011d8:	4837      	ldr	r0, [pc, #220]	; (80012b8 <ADC2_IN4_autoreg_coeffs+0x128>)
 80011da:	f009 fef1 	bl	800afc0 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_4[AR_ORDER * AR_ORDER]; // Array that hold the matrix data (100 elements) according to the Yule-Walker equations

	/* Filling the Yule-Walker matrix with the appropriate values (100 elements) from the auto-correlations buffer values */
	for (int r = 0; r < AR_ORDER; r++)
 80011de:	2300      	movs	r3, #0
 80011e0:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 80011e4:	e02f      	b.n	8001246 <ADC2_IN4_autoreg_coeffs+0xb6>
	{
	    for (int32_t c = 0; c < AR_ORDER; c++)
 80011e6:	2300      	movs	r3, #0
 80011e8:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 80011ec:	e022      	b.n	8001234 <ADC2_IN4_autoreg_coeffs+0xa4>
	    {
	        /* Access the autocorrelation buffer using the absolute difference of indices */
	    	Yule_Walker_Matrix_4[r * 10 + c] = AutoCorr_4[abs(r - c)];  // We are placing the elements in a one-dimensional array Yule-Walker matrix as if it represents a 10x10 matrix. This is done by calculating the correct index for each matrix element using (i * 10 + j)
 80011ee:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 80011f2:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80011fc:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001200:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8001204:	4613      	mov	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	4413      	add	r3, r2
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	461a      	mov	r2, r3
 800120e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001212:	4413      	add	r3, r2
 8001214:	4827      	ldr	r0, [pc, #156]	; (80012b4 <ADC2_IN4_autoreg_coeffs+0x124>)
 8001216:	008a      	lsls	r2, r1, #2
 8001218:	4402      	add	r2, r0
 800121a:	6812      	ldr	r2, [r2, #0]
 800121c:	f507 7156 	add.w	r1, r7, #856	; 0x358
 8001220:	f5a1 71e4 	sub.w	r1, r1, #456	; 0x1c8
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	440b      	add	r3, r1
 8001228:	601a      	str	r2, [r3, #0]
	    for (int32_t c = 0; c < AR_ORDER; c++)
 800122a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800122e:	3301      	adds	r3, #1
 8001230:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8001234:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001238:	2b09      	cmp	r3, #9
 800123a:	ddd8      	ble.n	80011ee <ADC2_IN4_autoreg_coeffs+0x5e>
	for (int r = 0; r < AR_ORDER; r++)
 800123c:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8001240:	3301      	adds	r3, #1
 8001242:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8001246:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800124a:	2b09      	cmp	r3, #9
 800124c:	ddcb      	ble.n	80011e6 <ADC2_IN4_autoreg_coeffs+0x56>
	    }
	}

	arm_mat_init_f32(&ADC2_IN4_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_4); // Initializes the Yule-Walker matrix
 800124e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001252:	220a      	movs	r2, #10
 8001254:	210a      	movs	r1, #10
 8001256:	4819      	ldr	r0, [pc, #100]	; (80012bc <ADC2_IN4_autoreg_coeffs+0x12c>)
 8001258:	f009 feb2 	bl	800afc0 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_Inv_4[AR_ORDER * AR_ORDER]; // Array that hold the inverse matrix data (100 elements)

	arm_mat_init_f32(&ADC2_IN4_Inv_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_Inv_4); // Initializes the inverse Yule-Walker matrix
 800125c:	463b      	mov	r3, r7
 800125e:	220a      	movs	r2, #10
 8001260:	210a      	movs	r1, #10
 8001262:	4817      	ldr	r0, [pc, #92]	; (80012c0 <ADC2_IN4_autoreg_coeffs+0x130>)
 8001264:	f009 feac 	bl	800afc0 <arm_mat_init_f32>

	/* Calculate the inverse of the Yule-Walker matrix and return status of the operation */
	arm_status StatusInv_4 = arm_mat_inverse_f32(&ADC2_IN4_YW_mtx, &ADC2_IN4_Inv_YW_mtx);
 8001268:	4915      	ldr	r1, [pc, #84]	; (80012c0 <ADC2_IN4_autoreg_coeffs+0x130>)
 800126a:	4814      	ldr	r0, [pc, #80]	; (80012bc <ADC2_IN4_autoreg_coeffs+0x12c>)
 800126c:	f009 fda2 	bl	800adb4 <arm_mat_inverse_f32>
 8001270:	4603      	mov	r3, r0
 8001272:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b

	if(StatusInv_4 == ARM_MATH_SUCCESS) // Check if operation was successful
 8001276:	f997 334b 	ldrsb.w	r3, [r7, #843]	; 0x34b
 800127a:	2b00      	cmp	r3, #0
 800127c:	d113      	bne.n	80012a6 <ADC2_IN4_autoreg_coeffs+0x116>
	{
		memset(AR_Coeffs_4, 0, AR_ORDER * sizeof(float32_t)); // Initializes the entire autocorrelations array to values zero
 800127e:	2228      	movs	r2, #40	; 0x28
 8001280:	2100      	movs	r1, #0
 8001282:	4810      	ldr	r0, [pc, #64]	; (80012c4 <ADC2_IN4_autoreg_coeffs+0x134>)
 8001284:	f00a fb80 	bl	800b988 <memset>

		arm_mat_init_f32(&ADC2_IN4_coeffs_mtx , AR_ORDER, 1 , AR_Coeffs_4); //Initializes the coefficients Matrix
 8001288:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <ADC2_IN4_autoreg_coeffs+0x134>)
 800128a:	2201      	movs	r2, #1
 800128c:	210a      	movs	r1, #10
 800128e:	480e      	ldr	r0, [pc, #56]	; (80012c8 <ADC2_IN4_autoreg_coeffs+0x138>)
 8001290:	f009 fe96 	bl	800afc0 <arm_mat_init_f32>

        StatusCoeffs_4 = arm_mat_mult_f32( &ADC2_IN4_Inv_YW_mtx, &ADC2_IN4_AC_mtx, &ADC2_IN4_coeffs_mtx );
 8001294:	4a0c      	ldr	r2, [pc, #48]	; (80012c8 <ADC2_IN4_autoreg_coeffs+0x138>)
 8001296:	4908      	ldr	r1, [pc, #32]	; (80012b8 <ADC2_IN4_autoreg_coeffs+0x128>)
 8001298:	4809      	ldr	r0, [pc, #36]	; (80012c0 <ADC2_IN4_autoreg_coeffs+0x130>)
 800129a:	f009 fceb 	bl	800ac74 <arm_mat_mult_f32>
 800129e:	4603      	mov	r3, r0
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <ADC2_IN4_autoreg_coeffs+0x13c>)
 80012a4:	701a      	strb	r2, [r3, #0]
	else
	{
         // Do something to indicate that the process has failed
	}

    return AR_Coeffs_4;
 80012a6:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <ADC2_IN4_autoreg_coeffs+0x134>)
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	f507 7756 	add.w	r7, r7, #856	; 0x358
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20007978 	.word	0x20007978
 80012b8:	20009d0c 	.word	0x20009d0c
 80012bc:	20009cac 	.word	0x20009cac
 80012c0:	20009cdc 	.word	0x20009cdc
 80012c4:	20007a74 	.word	0x20007a74
 80012c8:	20009d3c 	.word	0x20009d3c
 80012cc:	20009d57 	.word	0x20009d57

080012d0 <ADC3_IN1_autocorr_calc>:



void ADC3_IN1_autocorr_calc(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
	/* Iterate through each lag */
	for(uint32_t n=0; n<AR_ORDER; n++)
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	e01e      	b.n	800131a <ADC3_IN1_autocorr_calc+0x4a>
	{
		float32_t result_5 = 0.0f; // Initializing it to zero before calculation
 80012dc:	f04f 0300 	mov.w	r3, #0
 80012e0:	607b      	str	r3, [r7, #4]

		/* Number of valid points for the dot product at this lag */
		uint32_t Blocksize_5 = ADC_DMA_SIXTEENTHBUFFERSIZE - AR_ORDER;
 80012e2:	23a5      	movs	r3, #165	; 0xa5
 80012e4:	60bb      	str	r3, [r7, #8]

		arm_dot_prod_f32(&(AR_ADC3_IN1.MA_ADC3_IN1_OutBfr[n]), AR_ADC3_IN1.MA_ADC3_IN1_OutBfr, Blocksize_5, &result_5);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	3308      	adds	r3, #8
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	4a0f      	ldr	r2, [pc, #60]	; (800132c <ADC3_IN1_autocorr_calc+0x5c>)
 80012ee:	4413      	add	r3, r2
 80012f0:	1d18      	adds	r0, r3, #4
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	68ba      	ldr	r2, [r7, #8]
 80012f6:	490e      	ldr	r1, [pc, #56]	; (8001330 <ADC3_IN1_autocorr_calc+0x60>)
 80012f8:	f00a f82e 	bl	800b358 <arm_dot_prod_f32>

		AutoCorr_5[n] = result_5 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 80012fc:	ed97 7a01 	vldr	s14, [r7, #4]
 8001300:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001334 <ADC3_IN1_autocorr_calc+0x64>
 8001304:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001308:	4a0b      	ldr	r2, [pc, #44]	; (8001338 <ADC3_IN1_autocorr_calc+0x68>)
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	4413      	add	r3, r2
 8001310:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t n=0; n<AR_ORDER; n++)
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	3301      	adds	r3, #1
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2b09      	cmp	r3, #9
 800131e:	d9dd      	bls.n	80012dc <ADC3_IN1_autocorr_calc+0xc>
	}
}
 8001320:	bf00      	nop
 8001322:	bf00      	nop
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	2000915c 	.word	0x2000915c
 8001330:	20009180 	.word	0x20009180
 8001334:	432f0000 	.word	0x432f0000
 8001338:	200079a4 	.word	0x200079a4

0800133c <ADC3_IN1_autoreg_coeffs>:

float32_t* ADC3_IN1_autoreg_coeffs(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 8001342:	af00      	add	r7, sp, #0
	float32_t AC_Matrix_5 [AR_ORDER];

	for(uint32_t n=0; n < AR_ORDER; n++)
 8001344:	2300      	movs	r3, #0
 8001346:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800134a:	e013      	b.n	8001374 <ADC3_IN1_autoreg_coeffs+0x38>
	{
		AC_Matrix_5[n] = AutoCorr_5[n + 1]; // R1 to R10 corresponds to indices 1 to 10
 800134c:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001350:	3301      	adds	r3, #1
 8001352:	4a43      	ldr	r2, [pc, #268]	; (8001460 <ADC3_IN1_autoreg_coeffs+0x124>)
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4413      	add	r3, r2
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8001364:	443b      	add	r3, r7
 8001366:	3b38      	subs	r3, #56	; 0x38
 8001368:	601a      	str	r2, [r3, #0]
	for(uint32_t n=0; n < AR_ORDER; n++)
 800136a:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800136e:	3301      	adds	r3, #1
 8001370:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8001374:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001378:	2b09      	cmp	r3, #9
 800137a:	d9e7      	bls.n	800134c <ADC3_IN1_autoreg_coeffs+0x10>
	}

	arm_mat_init_f32(&ADC3_IN1_AC_mtx, AR_ORDER, 1, AC_Matrix_5); //Initializes the autocorrelations matrix
 800137c:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8001380:	2201      	movs	r2, #1
 8001382:	210a      	movs	r1, #10
 8001384:	4837      	ldr	r0, [pc, #220]	; (8001464 <ADC3_IN1_autoreg_coeffs+0x128>)
 8001386:	f009 fe1b 	bl	800afc0 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_5[AR_ORDER * AR_ORDER]; // Array that hold the matrix data (100 elements) according to the Yule-Walker equations

	/* Filling the Yule-Walker matrix with the appropriate values (100 elements) from the auto-correlations buffer values */
	for (int r = 0; r < AR_ORDER; r++)
 800138a:	2300      	movs	r3, #0
 800138c:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8001390:	e02f      	b.n	80013f2 <ADC3_IN1_autoreg_coeffs+0xb6>
	{
	    for (int32_t c = 0; c < AR_ORDER; c++)
 8001392:	2300      	movs	r3, #0
 8001394:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8001398:	e022      	b.n	80013e0 <ADC3_IN1_autoreg_coeffs+0xa4>
	    {
	        /* Access the autocorrelation buffer using the absolute difference of indices */
	    	Yule_Walker_Matrix_5[r * 10 + c] = AutoCorr_5[abs(r - c)];  // We are placing the elements in a one-dimensional array Yule-Walker matrix as if it represents a 10x10 matrix. This is done by calculating the correct index for each matrix element using (i * 10 + j)
 800139a:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 800139e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80013a8:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80013ac:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 80013b0:	4613      	mov	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	4413      	add	r3, r2
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	461a      	mov	r2, r3
 80013ba:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80013be:	4413      	add	r3, r2
 80013c0:	4827      	ldr	r0, [pc, #156]	; (8001460 <ADC3_IN1_autoreg_coeffs+0x124>)
 80013c2:	008a      	lsls	r2, r1, #2
 80013c4:	4402      	add	r2, r0
 80013c6:	6812      	ldr	r2, [r2, #0]
 80013c8:	f507 7156 	add.w	r1, r7, #856	; 0x358
 80013cc:	f5a1 71e4 	sub.w	r1, r1, #456	; 0x1c8
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	440b      	add	r3, r1
 80013d4:	601a      	str	r2, [r3, #0]
	    for (int32_t c = 0; c < AR_ORDER; c++)
 80013d6:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80013da:	3301      	adds	r3, #1
 80013dc:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 80013e0:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80013e4:	2b09      	cmp	r3, #9
 80013e6:	ddd8      	ble.n	800139a <ADC3_IN1_autoreg_coeffs+0x5e>
	for (int r = 0; r < AR_ORDER; r++)
 80013e8:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80013ec:	3301      	adds	r3, #1
 80013ee:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 80013f2:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80013f6:	2b09      	cmp	r3, #9
 80013f8:	ddcb      	ble.n	8001392 <ADC3_IN1_autoreg_coeffs+0x56>
	    }
	}

	arm_mat_init_f32(&ADC3_IN1_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_5); // Initializes the Yule-Walker matrix
 80013fa:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80013fe:	220a      	movs	r2, #10
 8001400:	210a      	movs	r1, #10
 8001402:	4819      	ldr	r0, [pc, #100]	; (8001468 <ADC3_IN1_autoreg_coeffs+0x12c>)
 8001404:	f009 fddc 	bl	800afc0 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_Inv_5[AR_ORDER * AR_ORDER]; // Array that hold the inverse matrix data (100 elements)

	arm_mat_init_f32(&ADC3_IN1_Inv_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_Inv_5); // Initializes the inverse Yule-Walker matrix
 8001408:	463b      	mov	r3, r7
 800140a:	220a      	movs	r2, #10
 800140c:	210a      	movs	r1, #10
 800140e:	4817      	ldr	r0, [pc, #92]	; (800146c <ADC3_IN1_autoreg_coeffs+0x130>)
 8001410:	f009 fdd6 	bl	800afc0 <arm_mat_init_f32>

	/* Calculate the inverse of the Yule-Walker matrix and return status of the operation */
	arm_status StatusInv_5 = arm_mat_inverse_f32(&ADC3_IN1_YW_mtx, &ADC3_IN1_Inv_YW_mtx);
 8001414:	4915      	ldr	r1, [pc, #84]	; (800146c <ADC3_IN1_autoreg_coeffs+0x130>)
 8001416:	4814      	ldr	r0, [pc, #80]	; (8001468 <ADC3_IN1_autoreg_coeffs+0x12c>)
 8001418:	f009 fccc 	bl	800adb4 <arm_mat_inverse_f32>
 800141c:	4603      	mov	r3, r0
 800141e:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b

	if(StatusInv_5 == ARM_MATH_SUCCESS) // Check if operation was successful
 8001422:	f997 334b 	ldrsb.w	r3, [r7, #843]	; 0x34b
 8001426:	2b00      	cmp	r3, #0
 8001428:	d113      	bne.n	8001452 <ADC3_IN1_autoreg_coeffs+0x116>
	{
		memset(AR_Coeffs_1, 0, AR_ORDER * sizeof(float32_t)); // Initializes the entire autocorrelations array to values zero
 800142a:	2228      	movs	r2, #40	; 0x28
 800142c:	2100      	movs	r1, #0
 800142e:	4810      	ldr	r0, [pc, #64]	; (8001470 <ADC3_IN1_autoreg_coeffs+0x134>)
 8001430:	f00a faaa 	bl	800b988 <memset>

		arm_mat_init_f32(&ADC3_IN1_coeffs_mtx , AR_ORDER, 1 , AR_Coeffs_5); //Initializes the coefficients Matrix
 8001434:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <ADC3_IN1_autoreg_coeffs+0x138>)
 8001436:	2201      	movs	r2, #1
 8001438:	210a      	movs	r1, #10
 800143a:	480f      	ldr	r0, [pc, #60]	; (8001478 <ADC3_IN1_autoreg_coeffs+0x13c>)
 800143c:	f009 fdc0 	bl	800afc0 <arm_mat_init_f32>

        StatusCoeffs_5 = arm_mat_mult_f32( &ADC3_IN1_Inv_YW_mtx, &ADC3_IN1_AC_mtx, &ADC3_IN1_coeffs_mtx );
 8001440:	4a0d      	ldr	r2, [pc, #52]	; (8001478 <ADC3_IN1_autoreg_coeffs+0x13c>)
 8001442:	4908      	ldr	r1, [pc, #32]	; (8001464 <ADC3_IN1_autoreg_coeffs+0x128>)
 8001444:	4809      	ldr	r0, [pc, #36]	; (800146c <ADC3_IN1_autoreg_coeffs+0x130>)
 8001446:	f009 fc15 	bl	800ac74 <arm_mat_mult_f32>
 800144a:	4603      	mov	r3, r0
 800144c:	461a      	mov	r2, r3
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <ADC3_IN1_autoreg_coeffs+0x140>)
 8001450:	701a      	strb	r2, [r3, #0]
	else
	{
         // Do something to indicate that the process has failed
	}

    return AR_Coeffs_5;
 8001452:	4b08      	ldr	r3, [pc, #32]	; (8001474 <ADC3_IN1_autoreg_coeffs+0x138>)
}
 8001454:	4618      	mov	r0, r3
 8001456:	f507 7756 	add.w	r7, r7, #856	; 0x358
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	200079a4 	.word	0x200079a4
 8001464:	20009d14 	.word	0x20009d14
 8001468:	20009cb4 	.word	0x20009cb4
 800146c:	20009ce4 	.word	0x20009ce4
 8001470:	200079fc 	.word	0x200079fc
 8001474:	20007a9c 	.word	0x20007a9c
 8001478:	20009d44 	.word	0x20009d44
 800147c:	20009d58 	.word	0x20009d58

08001480 <ADC3_IN2_autocorr_calc>:



void ADC3_IN2_autocorr_calc(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
	/* Iterate through each lag */
	for(uint32_t n=0; n<AR_ORDER; n++)
 8001486:	2300      	movs	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	e01e      	b.n	80014ca <ADC3_IN2_autocorr_calc+0x4a>
	{
		float32_t result_6 = 0.0f; // Initializing it to zero before calculation
 800148c:	f04f 0300 	mov.w	r3, #0
 8001490:	607b      	str	r3, [r7, #4]

		/* Number of valid points for the dot product at this lag */
		uint32_t Blocksize_6 = ADC_DMA_SIXTEENTHBUFFERSIZE - AR_ORDER;
 8001492:	23a5      	movs	r3, #165	; 0xa5
 8001494:	60bb      	str	r3, [r7, #8]

		arm_dot_prod_f32(&(AR_ADC3_IN2.MA_ADC3_IN2_OutBfr[n]), AR_ADC3_IN2.MA_ADC3_IN2_OutBfr, Blocksize_6, &result_6);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	3308      	adds	r3, #8
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4a0f      	ldr	r2, [pc, #60]	; (80014dc <ADC3_IN2_autocorr_calc+0x5c>)
 800149e:	4413      	add	r3, r2
 80014a0:	1d18      	adds	r0, r3, #4
 80014a2:	1d3b      	adds	r3, r7, #4
 80014a4:	68ba      	ldr	r2, [r7, #8]
 80014a6:	490e      	ldr	r1, [pc, #56]	; (80014e0 <ADC3_IN2_autocorr_calc+0x60>)
 80014a8:	f009 ff56 	bl	800b358 <arm_dot_prod_f32>

		AutoCorr_6[n] = result_6 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 80014ac:	ed97 7a01 	vldr	s14, [r7, #4]
 80014b0:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80014e4 <ADC3_IN2_autocorr_calc+0x64>
 80014b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014b8:	4a0b      	ldr	r2, [pc, #44]	; (80014e8 <ADC3_IN2_autocorr_calc+0x68>)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t n=0; n<AR_ORDER; n++)
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	3301      	adds	r3, #1
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2b09      	cmp	r3, #9
 80014ce:	d9dd      	bls.n	800148c <ADC3_IN2_autocorr_calc+0xc>
	}
}
 80014d0:	bf00      	nop
 80014d2:	bf00      	nop
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	200096f8 	.word	0x200096f8
 80014e0:	2000971c 	.word	0x2000971c
 80014e4:	432f0000 	.word	0x432f0000
 80014e8:	200079d0 	.word	0x200079d0

080014ec <ADC3_IN2_autoreg_coeffs>:

float32_t* ADC3_IN2_autoreg_coeffs(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 80014f2:	af00      	add	r7, sp, #0
	float32_t AC_Matrix_6 [AR_ORDER];

	for(uint32_t n=0; n < AR_ORDER; n++)
 80014f4:	2300      	movs	r3, #0
 80014f6:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 80014fa:	e013      	b.n	8001524 <ADC3_IN2_autoreg_coeffs+0x38>
	{
		AC_Matrix_6[n] = AutoCorr_6[n + 1]; // R1 to R10 corresponds to indices 1 to 10
 80014fc:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001500:	3301      	adds	r3, #1
 8001502:	4a43      	ldr	r2, [pc, #268]	; (8001610 <ADC3_IN2_autoreg_coeffs+0x124>)
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4413      	add	r3, r2
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8001514:	443b      	add	r3, r7
 8001516:	3b38      	subs	r3, #56	; 0x38
 8001518:	601a      	str	r2, [r3, #0]
	for(uint32_t n=0; n < AR_ORDER; n++)
 800151a:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800151e:	3301      	adds	r3, #1
 8001520:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8001524:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001528:	2b09      	cmp	r3, #9
 800152a:	d9e7      	bls.n	80014fc <ADC3_IN2_autoreg_coeffs+0x10>
	}

	arm_mat_init_f32(&ADC3_IN2_AC_mtx, AR_ORDER, 1, AC_Matrix_6); //Initializes the autocorrelations matrix
 800152c:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8001530:	2201      	movs	r2, #1
 8001532:	210a      	movs	r1, #10
 8001534:	4837      	ldr	r0, [pc, #220]	; (8001614 <ADC3_IN2_autoreg_coeffs+0x128>)
 8001536:	f009 fd43 	bl	800afc0 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_6[AR_ORDER * AR_ORDER]; // Array that hold the matrix data (100 elements) according to the Yule-Walker equations

	/* Filling the Yule-Walker matrix with the appropriate values (100 elements) from the auto-correlations buffer values */
	for (int r = 0; r < AR_ORDER; r++)
 800153a:	2300      	movs	r3, #0
 800153c:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8001540:	e02f      	b.n	80015a2 <ADC3_IN2_autoreg_coeffs+0xb6>
	{
	    for (int32_t c = 0; c < AR_ORDER; c++)
 8001542:	2300      	movs	r3, #0
 8001544:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8001548:	e022      	b.n	8001590 <ADC3_IN2_autoreg_coeffs+0xa4>
	    {
	        /* Access the autocorrelation buffer using the absolute difference of indices */
	    	Yule_Walker_Matrix_6[r * 10 + c] = AutoCorr_6[abs(r - c)];  // We are placing the elements in a one-dimensional array Yule-Walker matrix as if it represents a 10x10 matrix. This is done by calculating the correct index for each matrix element using (i * 10 + j)
 800154a:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 800154e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001558:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 800155c:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8001560:	4613      	mov	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	461a      	mov	r2, r3
 800156a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800156e:	4413      	add	r3, r2
 8001570:	4827      	ldr	r0, [pc, #156]	; (8001610 <ADC3_IN2_autoreg_coeffs+0x124>)
 8001572:	008a      	lsls	r2, r1, #2
 8001574:	4402      	add	r2, r0
 8001576:	6812      	ldr	r2, [r2, #0]
 8001578:	f507 7156 	add.w	r1, r7, #856	; 0x358
 800157c:	f5a1 71e4 	sub.w	r1, r1, #456	; 0x1c8
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	440b      	add	r3, r1
 8001584:	601a      	str	r2, [r3, #0]
	    for (int32_t c = 0; c < AR_ORDER; c++)
 8001586:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800158a:	3301      	adds	r3, #1
 800158c:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8001590:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001594:	2b09      	cmp	r3, #9
 8001596:	ddd8      	ble.n	800154a <ADC3_IN2_autoreg_coeffs+0x5e>
	for (int r = 0; r < AR_ORDER; r++)
 8001598:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800159c:	3301      	adds	r3, #1
 800159e:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 80015a2:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80015a6:	2b09      	cmp	r3, #9
 80015a8:	ddcb      	ble.n	8001542 <ADC3_IN2_autoreg_coeffs+0x56>
	    }
	}

	arm_mat_init_f32(&ADC3_IN2_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_6); // Initializes the Yule-Walker matrix
 80015aa:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80015ae:	220a      	movs	r2, #10
 80015b0:	210a      	movs	r1, #10
 80015b2:	4819      	ldr	r0, [pc, #100]	; (8001618 <ADC3_IN2_autoreg_coeffs+0x12c>)
 80015b4:	f009 fd04 	bl	800afc0 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_Inv_6[AR_ORDER * AR_ORDER]; // Array that hold the inverse matrix data (100 elements)

	arm_mat_init_f32(&ADC3_IN2_Inv_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_Inv_6); // Initializes the inverse Yule-Walker matrix
 80015b8:	463b      	mov	r3, r7
 80015ba:	220a      	movs	r2, #10
 80015bc:	210a      	movs	r1, #10
 80015be:	4817      	ldr	r0, [pc, #92]	; (800161c <ADC3_IN2_autoreg_coeffs+0x130>)
 80015c0:	f009 fcfe 	bl	800afc0 <arm_mat_init_f32>

	/* Calculate the inverse of the Yule-Walker matrix and return status of the operation */
	arm_status StatusInv_6 = arm_mat_inverse_f32(&ADC3_IN2_YW_mtx, &ADC3_IN2_Inv_YW_mtx);
 80015c4:	4915      	ldr	r1, [pc, #84]	; (800161c <ADC3_IN2_autoreg_coeffs+0x130>)
 80015c6:	4814      	ldr	r0, [pc, #80]	; (8001618 <ADC3_IN2_autoreg_coeffs+0x12c>)
 80015c8:	f009 fbf4 	bl	800adb4 <arm_mat_inverse_f32>
 80015cc:	4603      	mov	r3, r0
 80015ce:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b

	if(StatusInv_6 == ARM_MATH_SUCCESS) // Check if operation was successful
 80015d2:	f997 334b 	ldrsb.w	r3, [r7, #843]	; 0x34b
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d113      	bne.n	8001602 <ADC3_IN2_autoreg_coeffs+0x116>
	{
		memset(AR_Coeffs_6, 0, AR_ORDER * sizeof(float32_t)); // Initializes the entire autocorrelations array to values zero
 80015da:	2228      	movs	r2, #40	; 0x28
 80015dc:	2100      	movs	r1, #0
 80015de:	4810      	ldr	r0, [pc, #64]	; (8001620 <ADC3_IN2_autoreg_coeffs+0x134>)
 80015e0:	f00a f9d2 	bl	800b988 <memset>

		arm_mat_init_f32(&ADC3_IN2_coeffs_mtx , AR_ORDER, 1 , AR_Coeffs_6); //Initializes the coefficients Matrix
 80015e4:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <ADC3_IN2_autoreg_coeffs+0x134>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	210a      	movs	r1, #10
 80015ea:	480e      	ldr	r0, [pc, #56]	; (8001624 <ADC3_IN2_autoreg_coeffs+0x138>)
 80015ec:	f009 fce8 	bl	800afc0 <arm_mat_init_f32>

        StatusCoeffs_6 = arm_mat_mult_f32( &ADC3_IN2_Inv_YW_mtx, &ADC3_IN2_AC_mtx, &ADC3_IN2_coeffs_mtx );
 80015f0:	4a0c      	ldr	r2, [pc, #48]	; (8001624 <ADC3_IN2_autoreg_coeffs+0x138>)
 80015f2:	4908      	ldr	r1, [pc, #32]	; (8001614 <ADC3_IN2_autoreg_coeffs+0x128>)
 80015f4:	4809      	ldr	r0, [pc, #36]	; (800161c <ADC3_IN2_autoreg_coeffs+0x130>)
 80015f6:	f009 fb3d 	bl	800ac74 <arm_mat_mult_f32>
 80015fa:	4603      	mov	r3, r0
 80015fc:	461a      	mov	r2, r3
 80015fe:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <ADC3_IN2_autoreg_coeffs+0x13c>)
 8001600:	701a      	strb	r2, [r3, #0]
	else
	{
         // Do something to indicate that the process has failed
	}

    return AR_Coeffs_6;
 8001602:	4b07      	ldr	r3, [pc, #28]	; (8001620 <ADC3_IN2_autoreg_coeffs+0x134>)
}
 8001604:	4618      	mov	r0, r3
 8001606:	f507 7756 	add.w	r7, r7, #856	; 0x358
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	200079d0 	.word	0x200079d0
 8001614:	20009d1c 	.word	0x20009d1c
 8001618:	20009cbc 	.word	0x20009cbc
 800161c:	20009cec 	.word	0x20009cec
 8001620:	20007ac4 	.word	0x20007ac4
 8001624:	20009d4c 	.word	0x20009d4c
 8001628:	20009d59 	.word	0x20009d59

0800162c <MA_ADC1_IN1_Init>:
//VARIABLES
static float32_t  MA_IMPULSERESPONSE[MA_FILTER_LENGTH] = {0.125f, 0.125f, 0.125f, 0.125f, 0.125f, 0.125f, 0.125f, 0.125f}; // Impulse response coefficients

//FUNCTION DEFINITIONS
void MA_ADC1_IN1_Init (ADC1_IN1_MA *ADC1_IN1_MA_ptr)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001634:	2300      	movs	r3, #0
 8001636:	73fb      	strb	r3, [r7, #15]
 8001638:	e00a      	b.n	8001650 <MA_ADC1_IN1_Init+0x24>
	{
        ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr[j]=0.0f; // Clear the moving average buffer
 800163a:	7bfb      	ldrb	r3, [r7, #15]
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	4413      	add	r3, r2
 8001642:	3304      	adds	r3, #4
 8001644:	f04f 0200 	mov.w	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 800164a:	7bfb      	ldrb	r3, [r7, #15]
 800164c:	3301      	adds	r3, #1
 800164e:	73fb      	strb	r3, [r7, #15]
 8001650:	7bfb      	ldrb	r3, [r7, #15]
 8001652:	2b07      	cmp	r3, #7
 8001654:	d9f1      	bls.n	800163a <MA_ADC1_IN1_Init+0xe>
    }


	ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx=0; // Initialize the buffer index
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 800165c:	2300      	movs	r3, #0
 800165e:	60bb      	str	r3, [r7, #8]
 8001660:	e00b      	b.n	800167a <MA_ADC1_IN1_Init+0x4e>
	{
	    ADC1_IN1_MA_ptr->MA_ADC1_IN1_OutBfr[i] = 0.0f; // Clear the output buffer
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	3308      	adds	r3, #8
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	4413      	add	r3, r2
 800166c:	3304      	adds	r3, #4
 800166e:	f04f 0200 	mov.w	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	3301      	adds	r3, #1
 8001678:	60bb      	str	r3, [r7, #8]
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	2bae      	cmp	r3, #174	; 0xae
 800167e:	d9f0      	bls.n	8001662 <MA_ADC1_IN1_Init+0x36>
	}
}
 8001680:	bf00      	nop
 8001682:	bf00      	nop
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
	...

08001690 <MA_ADC1_IN1_Update>:

void MA_ADC1_IN1_Update(ADC1_IN1_MA *ADC1_IN1_MA_ptr)
{
 8001690:	b480      	push	{r7}
 8001692:	b087      	sub	sp, #28
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]
 800169c:	e05a      	b.n	8001754 <MA_ADC1_IN1_Update+0xc4>
    {

        ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr[ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx] = ADC1_IN1_NF_arg._NF_ADC1_IN1_bfr[u]; // Store the current input sample in the circular buffer
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4932      	ldr	r1, [pc, #200]	; (800176c <MA_ADC1_IN1_Update+0xdc>)
 80016a4:	697a      	ldr	r2, [r7, #20]
 80016a6:	3212      	adds	r2, #18
 80016a8:	0092      	lsls	r2, r2, #2
 80016aa:	440a      	add	r2, r1
 80016ac:	6812      	ldr	r2, [r2, #0]
 80016ae:	6879      	ldr	r1, [r7, #4]
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	440b      	add	r3, r1
 80016b4:	3304      	adds	r3, #4
 80016b6:	601a      	str	r2, [r3, #0]


        /* Increment the buffer index and wrap around if necessary */
        ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx++;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	1c5a      	adds	r2, r3, #1
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	601a      	str	r2, [r3, #0]

        if (ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx == MA_FILTER_LENGTH)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2b08      	cmp	r3, #8
 80016c8:	d102      	bne.n	80016d0 <MA_ADC1_IN1_Update+0x40>
        {
            ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx = 0;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
        }


        ADC1_IN1_MA_ptr->MA_ADC1_IN1_OutBfr[u] = 0.0f; // Initialize the current output sample inside the struct's output buffer
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	3308      	adds	r3, #8
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	3304      	adds	r3, #4
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_1 = ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx; // Set SumIndex_1 to the current buffer index
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	613b      	str	r3, [r7, #16]

        /* Perform convolution (dot product) with the impulse response */
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 80016e8:	2300      	movs	r3, #0
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	e02c      	b.n	8001748 <MA_ADC1_IN1_Update+0xb8>
        {
            /* Decrement index and wrap if necessary (moving backwards in the circular buffer) */
            if (SumIndex_1 > 0)
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d003      	beq.n	80016fc <MA_ADC1_IN1_Update+0x6c>
            {
                SumIndex_1--;
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	3b01      	subs	r3, #1
 80016f8:	613b      	str	r3, [r7, #16]
 80016fa:	e001      	b.n	8001700 <MA_ADC1_IN1_Update+0x70>
            }

            else
            {
                SumIndex_1 = MA_FILTER_LENGTH - 1;
 80016fc:	2307      	movs	r3, #7
 80016fe:	613b      	str	r3, [r7, #16]
            }

            /* Multiply impulse response with buffer sample and accumulate into output */
            ADC1_IN1_MA_ptr->MA_ADC1_IN1_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr[SumIndex_1];
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	3308      	adds	r3, #8
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	3304      	adds	r3, #4
 800170c:	ed93 7a00 	vldr	s14, [r3]
 8001710:	4a17      	ldr	r2, [pc, #92]	; (8001770 <MA_ADC1_IN1_Update+0xe0>)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	edd3 6a00 	vldr	s13, [r3]
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4413      	add	r3, r2
 8001724:	3304      	adds	r3, #4
 8001726:	edd3 7a00 	vldr	s15, [r3]
 800172a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800172e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	3308      	adds	r3, #8
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4413      	add	r3, r2
 800173c:	3304      	adds	r3, #4
 800173e:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	3301      	adds	r3, #1
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2b07      	cmp	r3, #7
 800174c:	d9cf      	bls.n	80016ee <MA_ADC1_IN1_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	3301      	adds	r3, #1
 8001752:	617b      	str	r3, [r7, #20]
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800175a:	4293      	cmp	r3, r2
 800175c:	d99f      	bls.n	800169e <MA_ADC1_IN1_Update+0xe>
        }

    }
}
 800175e:	bf00      	nop
 8001760:	bf00      	nop
 8001762:	371c      	adds	r7, #28
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	20000048 	.word	0x20000048
 8001770:	20000000 	.word	0x20000000

08001774 <MA_ADC1_IN2_Init>:



void MA_ADC1_IN2_Init (ADC1_IN2_MA *ADC1_IN2_MA_ptr)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 800177c:	2300      	movs	r3, #0
 800177e:	73fb      	strb	r3, [r7, #15]
 8001780:	e00a      	b.n	8001798 <MA_ADC1_IN2_Init+0x24>
	{
        ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr[j]=0.0f;
 8001782:	7bfb      	ldrb	r3, [r7, #15]
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	3304      	adds	r3, #4
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001792:	7bfb      	ldrb	r3, [r7, #15]
 8001794:	3301      	adds	r3, #1
 8001796:	73fb      	strb	r3, [r7, #15]
 8001798:	7bfb      	ldrb	r3, [r7, #15]
 800179a:	2b07      	cmp	r3, #7
 800179c:	d9f1      	bls.n	8001782 <MA_ADC1_IN2_Init+0xe>
    }


	ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx=0;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 80017a4:	2300      	movs	r3, #0
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	e00b      	b.n	80017c2 <MA_ADC1_IN2_Init+0x4e>
	{
	    ADC1_IN2_MA_ptr->MA_ADC1_IN2_OutBfr[i] = 0.0f;
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	3308      	adds	r3, #8
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4413      	add	r3, r2
 80017b4:	3304      	adds	r3, #4
 80017b6:	f04f 0200 	mov.w	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	3301      	adds	r3, #1
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	2bae      	cmp	r3, #174	; 0xae
 80017c6:	d9f0      	bls.n	80017aa <MA_ADC1_IN2_Init+0x36>
	}
}
 80017c8:	bf00      	nop
 80017ca:	bf00      	nop
 80017cc:	3714      	adds	r7, #20
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
	...

080017d8 <MA_ADC1_IN2_Update>:

void MA_ADC1_IN2_Update (ADC1_IN2_MA *ADC1_IN2_MA_ptr)
{
 80017d8:	b480      	push	{r7}
 80017da:	b087      	sub	sp, #28
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
 80017e4:	e05a      	b.n	800189c <MA_ADC1_IN2_Update+0xc4>
    {

        ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr[ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx] = ADC1_IN2_NF_arg._NF_ADC1_IN2_bfr[u];
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4932      	ldr	r1, [pc, #200]	; (80018b4 <MA_ADC1_IN2_Update+0xdc>)
 80017ec:	697a      	ldr	r2, [r7, #20]
 80017ee:	3212      	adds	r2, #18
 80017f0:	0092      	lsls	r2, r2, #2
 80017f2:	440a      	add	r2, r1
 80017f4:	6812      	ldr	r2, [r2, #0]
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	440b      	add	r3, r1
 80017fc:	3304      	adds	r3, #4
 80017fe:	601a      	str	r2, [r3, #0]



        ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx++;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	1c5a      	adds	r2, r3, #1
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	601a      	str	r2, [r3, #0]

        if (ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx == MA_FILTER_LENGTH)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2b08      	cmp	r3, #8
 8001810:	d102      	bne.n	8001818 <MA_ADC1_IN2_Update+0x40>
        {
            ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx = 0;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
        }


        ADC1_IN2_MA_ptr->MA_ADC1_IN2_OutBfr[u] = 0.0f;
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	3308      	adds	r3, #8
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	3304      	adds	r3, #4
 8001824:	f04f 0200 	mov.w	r2, #0
 8001828:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_2 = ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	613b      	str	r3, [r7, #16]


        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001830:	2300      	movs	r3, #0
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	e02c      	b.n	8001890 <MA_ADC1_IN2_Update+0xb8>
        {

            if (SumIndex_2 > 0)
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d003      	beq.n	8001844 <MA_ADC1_IN2_Update+0x6c>
            {
                SumIndex_2--;
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	3b01      	subs	r3, #1
 8001840:	613b      	str	r3, [r7, #16]
 8001842:	e001      	b.n	8001848 <MA_ADC1_IN2_Update+0x70>
            }

            else
            {
                SumIndex_2 = MA_FILTER_LENGTH - 1;
 8001844:	2307      	movs	r3, #7
 8001846:	613b      	str	r3, [r7, #16]
            }


            ADC1_IN2_MA_ptr->MA_ADC1_IN2_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr[SumIndex_2];
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	3308      	adds	r3, #8
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	4413      	add	r3, r2
 8001852:	3304      	adds	r3, #4
 8001854:	ed93 7a00 	vldr	s14, [r3]
 8001858:	4a17      	ldr	r2, [pc, #92]	; (80018b8 <MA_ADC1_IN2_Update+0xe0>)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	edd3 6a00 	vldr	s13, [r3]
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	3304      	adds	r3, #4
 800186e:	edd3 7a00 	vldr	s15, [r3]
 8001872:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001876:	ee77 7a27 	vadd.f32	s15, s14, s15
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	3308      	adds	r3, #8
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	3304      	adds	r3, #4
 8001886:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	3301      	adds	r3, #1
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2b07      	cmp	r3, #7
 8001894:	d9cf      	bls.n	8001836 <MA_ADC1_IN2_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	3301      	adds	r3, #1
 800189a:	617b      	str	r3, [r7, #20]
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d99f      	bls.n	80017e6 <MA_ADC1_IN2_Update+0xe>
        }

    }
}
 80018a6:	bf00      	nop
 80018a8:	bf00      	nop
 80018aa:	371c      	adds	r7, #28
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	20001454 	.word	0x20001454
 80018b8:	20000000 	.word	0x20000000

080018bc <MA_ADC2_IN3_Init>:



void MA_ADC2_IN3_Init (ADC2_IN3_MA *ADC2_IN3_MA_ptr)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 80018c4:	2300      	movs	r3, #0
 80018c6:	73fb      	strb	r3, [r7, #15]
 80018c8:	e00a      	b.n	80018e0 <MA_ADC2_IN3_Init+0x24>
	{
        ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr[j]=0.0f;
 80018ca:	7bfb      	ldrb	r3, [r7, #15]
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	3304      	adds	r3, #4
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 80018da:	7bfb      	ldrb	r3, [r7, #15]
 80018dc:	3301      	adds	r3, #1
 80018de:	73fb      	strb	r3, [r7, #15]
 80018e0:	7bfb      	ldrb	r3, [r7, #15]
 80018e2:	2b07      	cmp	r3, #7
 80018e4:	d9f1      	bls.n	80018ca <MA_ADC2_IN3_Init+0xe>
    }


	ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx=0;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 80018ec:	2300      	movs	r3, #0
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	e00b      	b.n	800190a <MA_ADC2_IN3_Init+0x4e>
	{
	    ADC2_IN3_MA_ptr->MA_ADC2_IN3_OutBfr[i] = 0.0f;
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	3308      	adds	r3, #8
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	3304      	adds	r3, #4
 80018fe:	f04f 0200 	mov.w	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	3301      	adds	r3, #1
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	2bae      	cmp	r3, #174	; 0xae
 800190e:	d9f0      	bls.n	80018f2 <MA_ADC2_IN3_Init+0x36>
	}
}
 8001910:	bf00      	nop
 8001912:	bf00      	nop
 8001914:	3714      	adds	r7, #20
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
	...

08001920 <MA_ADC2_IN3_Update>:

void MA_ADC2_IN3_Update (ADC2_IN3_MA *ADC2_IN3_MA_ptr)
{
 8001920:	b480      	push	{r7}
 8001922:	b087      	sub	sp, #28
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]
 800192c:	e05a      	b.n	80019e4 <MA_ADC2_IN3_Update+0xc4>
    {

        ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr[ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx] = ADC2_IN3_NF_arg._NF_ADC2_IN3_bfr[u]; // Store the current input sample in the circular buffer
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4932      	ldr	r1, [pc, #200]	; (80019fc <MA_ADC2_IN3_Update+0xdc>)
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	3212      	adds	r2, #18
 8001938:	0092      	lsls	r2, r2, #2
 800193a:	440a      	add	r2, r1
 800193c:	6812      	ldr	r2, [r2, #0]
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	440b      	add	r3, r1
 8001944:	3304      	adds	r3, #4
 8001946:	601a      	str	r2, [r3, #0]



        ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx++;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	1c5a      	adds	r2, r3, #1
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	601a      	str	r2, [r3, #0]

        if (ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx == MA_FILTER_LENGTH)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2b08      	cmp	r3, #8
 8001958:	d102      	bne.n	8001960 <MA_ADC2_IN3_Update+0x40>
        {
            ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx = 0;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
        }


        ADC2_IN3_MA_ptr->MA_ADC2_IN3_OutBfr[u] = 0.0f;
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	3308      	adds	r3, #8
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	3304      	adds	r3, #4
 800196c:	f04f 0200 	mov.w	r2, #0
 8001970:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_3 = ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	613b      	str	r3, [r7, #16]


        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001978:	2300      	movs	r3, #0
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	e02c      	b.n	80019d8 <MA_ADC2_IN3_Update+0xb8>
        {

            if (SumIndex_3 > 0)
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d003      	beq.n	800198c <MA_ADC2_IN3_Update+0x6c>
            {
                SumIndex_3--;
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	3b01      	subs	r3, #1
 8001988:	613b      	str	r3, [r7, #16]
 800198a:	e001      	b.n	8001990 <MA_ADC2_IN3_Update+0x70>
            }

            else
            {
                SumIndex_3 = MA_FILTER_LENGTH - 1;
 800198c:	2307      	movs	r3, #7
 800198e:	613b      	str	r3, [r7, #16]
            }


            ADC2_IN3_MA_ptr->MA_ADC2_IN3_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr[SumIndex_3];
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	3308      	adds	r3, #8
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	3304      	adds	r3, #4
 800199c:	ed93 7a00 	vldr	s14, [r3]
 80019a0:	4a17      	ldr	r2, [pc, #92]	; (8001a00 <MA_ADC2_IN3_Update+0xe0>)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4413      	add	r3, r2
 80019a8:	edd3 6a00 	vldr	s13, [r3]
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	4413      	add	r3, r2
 80019b4:	3304      	adds	r3, #4
 80019b6:	edd3 7a00 	vldr	s15, [r3]
 80019ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	3308      	adds	r3, #8
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	3304      	adds	r3, #4
 80019ce:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	3301      	adds	r3, #1
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2b07      	cmp	r3, #7
 80019dc:	d9cf      	bls.n	800197e <MA_ADC2_IN3_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	3301      	adds	r3, #1
 80019e2:	617b      	str	r3, [r7, #20]
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d99f      	bls.n	800192e <MA_ADC2_IN3_Update+0xe>
        }

    }

}
 80019ee:	bf00      	nop
 80019f0:	bf00      	nop
 80019f2:	371c      	adds	r7, #28
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	20002860 	.word	0x20002860
 8001a00:	20000000 	.word	0x20000000

08001a04 <MA_ADC2_IN4_Init>:



void MA_ADC2_IN4_Init (ADC2_IN4_MA *ADC2_IN4_MA_ptr)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	73fb      	strb	r3, [r7, #15]
 8001a10:	e00a      	b.n	8001a28 <MA_ADC2_IN4_Init+0x24>
	{
        ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr[j]=0.0f; // Clear the moving average buffer
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	3304      	adds	r3, #4
 8001a1c:	f04f 0200 	mov.w	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
 8001a24:	3301      	adds	r3, #1
 8001a26:	73fb      	strb	r3, [r7, #15]
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
 8001a2a:	2b07      	cmp	r3, #7
 8001a2c:	d9f1      	bls.n	8001a12 <MA_ADC2_IN4_Init+0xe>
    }


	ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx=0; // Initialize the buffer index
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001a34:	2300      	movs	r3, #0
 8001a36:	60bb      	str	r3, [r7, #8]
 8001a38:	e00b      	b.n	8001a52 <MA_ADC2_IN4_Init+0x4e>
	{
	    ADC2_IN4_MA_ptr->MA_ADC2_IN4_OutBfr[i] = 0.0f; // Clear the output buffer
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	3308      	adds	r3, #8
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	4413      	add	r3, r2
 8001a44:	3304      	adds	r3, #4
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	2bae      	cmp	r3, #174	; 0xae
 8001a56:	d9f0      	bls.n	8001a3a <MA_ADC2_IN4_Init+0x36>
	}
}
 8001a58:	bf00      	nop
 8001a5a:	bf00      	nop
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
	...

08001a68 <MA_ADC2_IN4_Update>:

void MA_ADC2_IN4_Update (ADC2_IN4_MA *ADC2_IN4_MA_ptr)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b087      	sub	sp, #28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	e05a      	b.n	8001b2c <MA_ADC2_IN4_Update+0xc4>
    {

        ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr[ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx] = ADC2_IN4_NF_arg._NF_ADC2_IN4_bfr[u]; // Store the current input sample in the circular buffer
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4932      	ldr	r1, [pc, #200]	; (8001b44 <MA_ADC2_IN4_Update+0xdc>)
 8001a7c:	697a      	ldr	r2, [r7, #20]
 8001a7e:	3212      	adds	r2, #18
 8001a80:	0092      	lsls	r2, r2, #2
 8001a82:	440a      	add	r2, r1
 8001a84:	6812      	ldr	r2, [r2, #0]
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	601a      	str	r2, [r3, #0]


        /* Increment the buffer index and wrap around if necessary */
        ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx++;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	1c5a      	adds	r2, r3, #1
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	601a      	str	r2, [r3, #0]

        if (ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx == MA_FILTER_LENGTH)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2b08      	cmp	r3, #8
 8001aa0:	d102      	bne.n	8001aa8 <MA_ADC2_IN4_Update+0x40>
        {
            ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx = 0;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
        }


        ADC2_IN4_MA_ptr->MA_ADC2_IN4_OutBfr[u] = 0.0f; // Initialize the current output sample inside the struct's output buffer
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	3308      	adds	r3, #8
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	3304      	adds	r3, #4
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_4 = ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx; // Set SumIndex_4 to the current buffer index
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	613b      	str	r3, [r7, #16]

        /* Perform convolution (dot product) with the impulse response */
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	e02c      	b.n	8001b20 <MA_ADC2_IN4_Update+0xb8>
        {
            /* Decrement index and wrap if necessary (moving backwards in the circular buffer) */
            if (SumIndex_4 > 0)
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <MA_ADC2_IN4_Update+0x6c>
            {
                SumIndex_4--;
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	e001      	b.n	8001ad8 <MA_ADC2_IN4_Update+0x70>
            }

            else
            {
                SumIndex_4 = MA_FILTER_LENGTH - 1;
 8001ad4:	2307      	movs	r3, #7
 8001ad6:	613b      	str	r3, [r7, #16]
            }

            /* Multiply impulse response with buffer sample and accumulate into output */
            ADC2_IN4_MA_ptr->MA_ADC2_IN4_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr[SumIndex_4];
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	3308      	adds	r3, #8
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	3304      	adds	r3, #4
 8001ae4:	ed93 7a00 	vldr	s14, [r3]
 8001ae8:	4a17      	ldr	r2, [pc, #92]	; (8001b48 <MA_ADC2_IN4_Update+0xe0>)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	edd3 6a00 	vldr	s13, [r3]
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	3304      	adds	r3, #4
 8001afe:	edd3 7a00 	vldr	s15, [r3]
 8001b02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	3308      	adds	r3, #8
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	3304      	adds	r3, #4
 8001b16:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2b07      	cmp	r3, #7
 8001b24:	d9cf      	bls.n	8001ac6 <MA_ADC2_IN4_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	617b      	str	r3, [r7, #20]
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d99f      	bls.n	8001a76 <MA_ADC2_IN4_Update+0xe>
        }

    }
}
 8001b36:	bf00      	nop
 8001b38:	bf00      	nop
 8001b3a:	371c      	adds	r7, #28
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	20003c6c 	.word	0x20003c6c
 8001b48:	20000000 	.word	0x20000000

08001b4c <MA_ADC3_IN1_Init>:




void MA_ADC3_IN1_Init (ADC3_IN1_MA *ADC3_IN1_MA_ptr)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001b54:	2300      	movs	r3, #0
 8001b56:	73fb      	strb	r3, [r7, #15]
 8001b58:	e00a      	b.n	8001b70 <MA_ADC3_IN1_Init+0x24>
	{
        ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr[j]=0.0f;
 8001b5a:	7bfb      	ldrb	r3, [r7, #15]
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	4413      	add	r3, r2
 8001b62:	3304      	adds	r3, #4
 8001b64:	f04f 0200 	mov.w	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001b6a:	7bfb      	ldrb	r3, [r7, #15]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	73fb      	strb	r3, [r7, #15]
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
 8001b72:	2b07      	cmp	r3, #7
 8001b74:	d9f1      	bls.n	8001b5a <MA_ADC3_IN1_Init+0xe>
    }


	ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx=0;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60bb      	str	r3, [r7, #8]
 8001b80:	e00b      	b.n	8001b9a <MA_ADC3_IN1_Init+0x4e>
	{
	    ADC3_IN1_MA_ptr->MA_ADC3_IN1_OutBfr[i] = 0.0f;
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	3308      	adds	r3, #8
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	3304      	adds	r3, #4
 8001b8e:	f04f 0200 	mov.w	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	3301      	adds	r3, #1
 8001b98:	60bb      	str	r3, [r7, #8]
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	2bae      	cmp	r3, #174	; 0xae
 8001b9e:	d9f0      	bls.n	8001b82 <MA_ADC3_IN1_Init+0x36>
	}
}
 8001ba0:	bf00      	nop
 8001ba2:	bf00      	nop
 8001ba4:	3714      	adds	r7, #20
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
	...

08001bb0 <MA_ADC3_IN1_Update>:

void MA_ADC3_IN1_Update (ADC3_IN1_MA *ADC3_IN1_MA_ptr)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b087      	sub	sp, #28
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]
 8001bbc:	e05a      	b.n	8001c74 <MA_ADC3_IN1_Update+0xc4>
    {

        ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr[ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx] = ADC3_IN1_NF_arg._NF_ADC3_IN1_bfr[u];
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4932      	ldr	r1, [pc, #200]	; (8001c8c <MA_ADC3_IN1_Update+0xdc>)
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	3212      	adds	r2, #18
 8001bc8:	0092      	lsls	r2, r2, #2
 8001bca:	440a      	add	r2, r1
 8001bcc:	6812      	ldr	r2, [r2, #0]
 8001bce:	6879      	ldr	r1, [r7, #4]
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	440b      	add	r3, r1
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	601a      	str	r2, [r3, #0]



        ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx++;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	1c5a      	adds	r2, r3, #1
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	601a      	str	r2, [r3, #0]

        if (ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx == MA_FILTER_LENGTH)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2b08      	cmp	r3, #8
 8001be8:	d102      	bne.n	8001bf0 <MA_ADC3_IN1_Update+0x40>
        {
            ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx = 0;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
        }


        ADC3_IN1_MA_ptr->MA_ADC3_IN1_OutBfr[u] = 0.0f;
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	3308      	adds	r3, #8
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	3304      	adds	r3, #4
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_5 = ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	613b      	str	r3, [r7, #16]


        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	e02c      	b.n	8001c68 <MA_ADC3_IN1_Update+0xb8>
        {

            if (SumIndex_5 > 0)
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d003      	beq.n	8001c1c <MA_ADC3_IN1_Update+0x6c>
            {
                SumIndex_5--;
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	3b01      	subs	r3, #1
 8001c18:	613b      	str	r3, [r7, #16]
 8001c1a:	e001      	b.n	8001c20 <MA_ADC3_IN1_Update+0x70>
            }

            else
            {
                SumIndex_5 = MA_FILTER_LENGTH - 1;
 8001c1c:	2307      	movs	r3, #7
 8001c1e:	613b      	str	r3, [r7, #16]
            }


            ADC3_IN1_MA_ptr->MA_ADC3_IN1_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr[SumIndex_5];
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	3308      	adds	r3, #8
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4413      	add	r3, r2
 8001c2a:	3304      	adds	r3, #4
 8001c2c:	ed93 7a00 	vldr	s14, [r3]
 8001c30:	4a17      	ldr	r2, [pc, #92]	; (8001c90 <MA_ADC3_IN1_Update+0xe0>)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	edd3 6a00 	vldr	s13, [r3]
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	3304      	adds	r3, #4
 8001c46:	edd3 7a00 	vldr	s15, [r3]
 8001c4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	3308      	adds	r3, #8
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4413      	add	r3, r2
 8001c5c:	3304      	adds	r3, #4
 8001c5e:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	3301      	adds	r3, #1
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2b07      	cmp	r3, #7
 8001c6c:	d9cf      	bls.n	8001c0e <MA_ADC3_IN1_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	3301      	adds	r3, #1
 8001c72:	617b      	str	r3, [r7, #20]
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d99f      	bls.n	8001bbe <MA_ADC3_IN1_Update+0xe>
        }
    }
}
 8001c7e:	bf00      	nop
 8001c80:	bf00      	nop
 8001c82:	371c      	adds	r7, #28
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	20005078 	.word	0x20005078
 8001c90:	20000000 	.word	0x20000000

08001c94 <MA_ADC3_IN2_Init>:




void MA_ADC3_IN2_Init (ADC3_IN2_MA *ADC3_IN2_MA_ptr)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	73fb      	strb	r3, [r7, #15]
 8001ca0:	e00a      	b.n	8001cb8 <MA_ADC3_IN2_Init+0x24>
	{
        ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr[j]=0.0f;
 8001ca2:	7bfb      	ldrb	r3, [r7, #15]
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	3304      	adds	r3, #4
 8001cac:	f04f 0200 	mov.w	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001cb2:	7bfb      	ldrb	r3, [r7, #15]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	73fb      	strb	r3, [r7, #15]
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
 8001cba:	2b07      	cmp	r3, #7
 8001cbc:	d9f1      	bls.n	8001ca2 <MA_ADC3_IN2_Init+0xe>
    }


	ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx=0;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	60bb      	str	r3, [r7, #8]
 8001cc8:	e00b      	b.n	8001ce2 <MA_ADC3_IN2_Init+0x4e>
	{
	    ADC3_IN2_MA_ptr->MA_ADC3_IN2_OutBfr[i] = 0.0f;
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	3308      	adds	r3, #8
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4413      	add	r3, r2
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	f04f 0200 	mov.w	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	60bb      	str	r3, [r7, #8]
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	2bae      	cmp	r3, #174	; 0xae
 8001ce6:	d9f0      	bls.n	8001cca <MA_ADC3_IN2_Init+0x36>
	}
}
 8001ce8:	bf00      	nop
 8001cea:	bf00      	nop
 8001cec:	3714      	adds	r7, #20
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
	...

08001cf8 <MA_ADC3_IN2_Update>:

void MA_ADC3_IN2_Update (ADC3_IN2_MA *ADC3_IN2_MA_ptr)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b087      	sub	sp, #28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
 8001d04:	e05a      	b.n	8001dbc <MA_ADC3_IN2_Update+0xc4>
    {

        ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr[ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx] = ADC3_IN2_NF_arg._NF_ADC3_IN2_bfr[u];
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4932      	ldr	r1, [pc, #200]	; (8001dd4 <MA_ADC3_IN2_Update+0xdc>)
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	3212      	adds	r2, #18
 8001d10:	0092      	lsls	r2, r2, #2
 8001d12:	440a      	add	r2, r1
 8001d14:	6812      	ldr	r2, [r2, #0]
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	3304      	adds	r3, #4
 8001d1e:	601a      	str	r2, [r3, #0]



        ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx++;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	1c5a      	adds	r2, r3, #1
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	601a      	str	r2, [r3, #0]

        if (ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx == MA_FILTER_LENGTH)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2b08      	cmp	r3, #8
 8001d30:	d102      	bne.n	8001d38 <MA_ADC3_IN2_Update+0x40>
        {
            ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx = 0;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
        }


        ADC3_IN2_MA_ptr->MA_ADC3_IN2_OutBfr[u] = 0.0f;
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	3308      	adds	r3, #8
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	3304      	adds	r3, #4
 8001d44:	f04f 0200 	mov.w	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_6 = ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	613b      	str	r3, [r7, #16]


        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001d50:	2300      	movs	r3, #0
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	e02c      	b.n	8001db0 <MA_ADC3_IN2_Update+0xb8>
        {

            if (SumIndex_6 > 0)
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d003      	beq.n	8001d64 <MA_ADC3_IN2_Update+0x6c>
            {
                SumIndex_6--;
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	e001      	b.n	8001d68 <MA_ADC3_IN2_Update+0x70>
            }

            else
            {
                SumIndex_6 = MA_FILTER_LENGTH - 1;
 8001d64:	2307      	movs	r3, #7
 8001d66:	613b      	str	r3, [r7, #16]
            }


            ADC3_IN2_MA_ptr->MA_ADC3_IN2_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr[SumIndex_6];
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	3308      	adds	r3, #8
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	3304      	adds	r3, #4
 8001d74:	ed93 7a00 	vldr	s14, [r3]
 8001d78:	4a17      	ldr	r2, [pc, #92]	; (8001dd8 <MA_ADC3_IN2_Update+0xe0>)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4413      	add	r3, r2
 8001d80:	edd3 6a00 	vldr	s13, [r3]
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	4413      	add	r3, r2
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	edd3 7a00 	vldr	s15, [r3]
 8001d92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	3308      	adds	r3, #8
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	3304      	adds	r3, #4
 8001da6:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	3301      	adds	r3, #1
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2b07      	cmp	r3, #7
 8001db4:	d9cf      	bls.n	8001d56 <MA_ADC3_IN2_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	3301      	adds	r3, #1
 8001dba:	617b      	str	r3, [r7, #20]
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d99f      	bls.n	8001d06 <MA_ADC3_IN2_Update+0xe>
        }

    }

}
 8001dc6:	bf00      	nop
 8001dc8:	bf00      	nop
 8001dca:	371c      	adds	r7, #28
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	20006484 	.word	0x20006484
 8001dd8:	20000000 	.word	0x20000000

08001ddc <init_ADC1_IN1_struct>:


//FUNCTION DEFINITIONS
/*Initializing the struct instance*/
void init_ADC1_IN1_struct(void)
  {
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
	if(ADC1_Current_buffer == 1)
 8001de0:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <init_ADC1_IN1_struct+0x34>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d107      	bne.n	8001df8 <init_ADC1_IN1_struct+0x1c>
	{
       //Ensure that ADC1_DMA_sort_ptr is initialized
	   ADC1_IN1_NF_arg.ADC1_IN1_psrc = (float32_t *)(ADC1_DMA_sort_ptr->ADC1_IN1_bfr_alt);   // Typecasting. Converts the data in IN1 data buffer to floating point values. Assigns the source buffer at runtime
 8001de8:	4b0a      	ldr	r3, [pc, #40]	; (8001e14 <init_ADC1_IN1_struct+0x38>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 8001df0:	331c      	adds	r3, #28
 8001df2:	4a09      	ldr	r2, [pc, #36]	; (8001e18 <init_ADC1_IN1_struct+0x3c>)
 8001df4:	6453      	str	r3, [r2, #68]	; 0x44
	else
	{
	   //Ensure that ADC1_DMA_sort_ptr is initialized
	   ADC1_IN1_NF_arg.ADC1_IN1_psrc = (float32_t *)(ADC1_DMA_sort_ptr->ADC1_IN1_bfr);   // Typecasting. Converts the data in IN1 data buffer to floating point values. Assigns the source buffer at runtime
	}
  }
 8001df6:	e006      	b.n	8001e06 <init_ADC1_IN1_struct+0x2a>
	   ADC1_IN1_NF_arg.ADC1_IN1_psrc = (float32_t *)(ADC1_DMA_sort_ptr->ADC1_IN1_bfr);   // Typecasting. Converts the data in IN1 data buffer to floating point values. Assigns the source buffer at runtime
 8001df8:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <init_ADC1_IN1_struct+0x38>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001e00:	3314      	adds	r3, #20
 8001e02:	4a05      	ldr	r2, [pc, #20]	; (8001e18 <init_ADC1_IN1_struct+0x3c>)
 8001e04:	6453      	str	r3, [r2, #68]	; 0x44
  }
 8001e06:	bf00      	nop
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	20007868 	.word	0x20007868
 8001e14:	2000bb30 	.word	0x2000bb30
 8001e18:	20000048 	.word	0x20000048

08001e1c <init_ADC1_IN1_FO_biquad_filter>:

void init_ADC1_IN1_FO_biquad_filter(void)
  {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8001e20:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <init_ADC1_IN1_FO_biquad_filter+0x1c>)
 8001e22:	7819      	ldrb	r1, [r3, #0]
 8001e24:	4b04      	ldr	r3, [pc, #16]	; (8001e38 <init_ADC1_IN1_FO_biquad_filter+0x1c>)
 8001e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e28:	4b03      	ldr	r3, [pc, #12]	; (8001e38 <init_ADC1_IN1_FO_biquad_filter+0x1c>)
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2c:	4803      	ldr	r0, [pc, #12]	; (8001e3c <init_ADC1_IN1_FO_biquad_filter+0x20>)
 8001e2e:	f009 fa87 	bl	800b340 <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC1_IN1_NF_arg.S1,  // Pointer to the instance
	        ADC1_IN1_NF_arg.ADC1_IN1_numstages, // Number of stages (2 in this case)
	        ADC1_IN1_NF_arg.ADC1_IN1_pcoeffs, // Pointer to coefficients array
	        ADC1_IN1_NF_arg.ADC1_IN1_pState // Pointer to the state buffer
	 );
  }
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20000048 	.word	0x20000048
 8001e3c:	20001420 	.word	0x20001420

08001e40 <update_ADC1_IN1_FO_biquad_filter>:

void update_ADC1_IN1_FO_biquad_filter(void)
   {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC1_IN1_NF_arg.S1, ADC1_IN1_NF_arg.ADC1_IN1_psrc , ADC1_IN1_NF_arg.ADC1_IN1_pdst, ADC1_IN1_NF_arg.ADC1_IN1_Blocksize);
 8001e44:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <update_ADC1_IN1_FO_biquad_filter+0x28>)
 8001e46:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001e48:	4b07      	ldr	r3, [pc, #28]	; (8001e68 <update_ADC1_IN1_FO_biquad_filter+0x28>)
 8001e4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e4e:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 8001e52:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <update_ADC1_IN1_FO_biquad_filter+0x28>)
 8001e54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e58:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8001e5c:	4803      	ldr	r0, [pc, #12]	; (8001e6c <update_ADC1_IN1_FO_biquad_filter+0x2c>)
 8001e5e:	f009 f8b3 	bl	800afc8 <arm_biquad_cascade_df2T_f32>
   }
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000048 	.word	0x20000048
 8001e6c:	20001420 	.word	0x20001420

08001e70 <init_ADC1_IN2_struct>:




void init_ADC1_IN2_struct(void)
  {
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0

	if(ADC1_Current_buffer == 1)
 8001e74:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <init_ADC1_IN2_struct+0x34>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d107      	bne.n	8001e8c <init_ADC1_IN2_struct+0x1c>
	{
       //Ensure that ADC1_DMA_sort_ptr is initialized
	   ADC1_IN2_NF_arg.ADC1_IN2_psrc = (float32_t *)(ADC1_DMA_sort_ptr->ADC1_IN2_bfr_alt);
 8001e7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ea8 <init_ADC1_IN2_struct+0x38>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f503 43c3 	add.w	r3, r3, #24960	; 0x6180
 8001e84:	3330      	adds	r3, #48	; 0x30
 8001e86:	4a09      	ldr	r2, [pc, #36]	; (8001eac <init_ADC1_IN2_struct+0x3c>)
 8001e88:	6453      	str	r3, [r2, #68]	; 0x44
	else
	{
	   //Ensure that ADC1_DMA_sort_ptr is initialized
	   ADC1_IN2_NF_arg.ADC1_IN2_psrc = (float32_t *)(ADC1_DMA_sort_ptr->ADC1_IN2_bfr);
	}
  }
 8001e8a:	e006      	b.n	8001e9a <init_ADC1_IN2_struct+0x2a>
	   ADC1_IN2_NF_arg.ADC1_IN2_psrc = (float32_t *)(ADC1_DMA_sort_ptr->ADC1_IN2_bfr);
 8001e8c:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <init_ADC1_IN2_struct+0x38>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8001e94:	3328      	adds	r3, #40	; 0x28
 8001e96:	4a05      	ldr	r2, [pc, #20]	; (8001eac <init_ADC1_IN2_struct+0x3c>)
 8001e98:	6453      	str	r3, [r2, #68]	; 0x44
  }
 8001e9a:	bf00      	nop
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	20007868 	.word	0x20007868
 8001ea8:	2000bb30 	.word	0x2000bb30
 8001eac:	20001454 	.word	0x20001454

08001eb0 <init_ADC1_IN2_FO_biquad_filter>:

void init_ADC1_IN2_FO_biquad_filter(void)
  {
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8001eb4:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <init_ADC1_IN2_FO_biquad_filter+0x1c>)
 8001eb6:	7819      	ldrb	r1, [r3, #0]
 8001eb8:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <init_ADC1_IN2_FO_biquad_filter+0x1c>)
 8001eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ebc:	4b03      	ldr	r3, [pc, #12]	; (8001ecc <init_ADC1_IN2_FO_biquad_filter+0x1c>)
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec0:	4803      	ldr	r0, [pc, #12]	; (8001ed0 <init_ADC1_IN2_FO_biquad_filter+0x20>)
 8001ec2:	f009 fa3d 	bl	800b340 <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC1_IN2_NF_arg.S2,
	        ADC1_IN2_NF_arg.ADC1_IN2_numstages,
	        ADC1_IN2_NF_arg.ADC1_IN2_pcoeffs,
	        ADC1_IN2_NF_arg.ADC1_IN2_pState
	 );
  }
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20001454 	.word	0x20001454
 8001ed0:	2000282c 	.word	0x2000282c

08001ed4 <update_ADC1_IN2_FO_biquad_filter>:

void update_ADC1_IN2_FO_biquad_filter(void)
   {
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC1_IN2_NF_arg.S2, ADC1_IN2_NF_arg.ADC1_IN2_psrc , ADC1_IN2_NF_arg.ADC1_IN2_pdst, ADC1_IN2_NF_arg.ADC1_IN2_Blocksize);
 8001ed8:	4b08      	ldr	r3, [pc, #32]	; (8001efc <update_ADC1_IN2_FO_biquad_filter+0x28>)
 8001eda:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001edc:	4b07      	ldr	r3, [pc, #28]	; (8001efc <update_ADC1_IN2_FO_biquad_filter+0x28>)
 8001ede:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ee2:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 8001ee6:	4b05      	ldr	r3, [pc, #20]	; (8001efc <update_ADC1_IN2_FO_biquad_filter+0x28>)
 8001ee8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8001ef0:	4803      	ldr	r0, [pc, #12]	; (8001f00 <update_ADC1_IN2_FO_biquad_filter+0x2c>)
 8001ef2:	f009 f869 	bl	800afc8 <arm_biquad_cascade_df2T_f32>
   }
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20001454 	.word	0x20001454
 8001f00:	2000282c 	.word	0x2000282c

08001f04 <init_ADC2_IN3_struct>:




void init_ADC2_IN3_struct(void)
  {
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0

	if(ADC2_Current_buffer == 1)
 8001f08:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <init_ADC2_IN3_struct+0x34>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d107      	bne.n	8001f20 <init_ADC2_IN3_struct+0x1c>
	{
       //Ensure that ADC1_DMA_sort_ptr is initialized
	   ADC2_IN3_NF_arg.ADC2_IN3_psrc = (float32_t *)(ADC2_DMA_sort_ptr->ADC2_IN3_bfr_alt);   // Typecasting. Converts the data in IN1 data buffer to floating point values. Assigns the source buffer at runtime
 8001f10:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <init_ADC2_IN3_struct+0x38>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 8001f18:	331c      	adds	r3, #28
 8001f1a:	4a09      	ldr	r2, [pc, #36]	; (8001f40 <init_ADC2_IN3_struct+0x3c>)
 8001f1c:	6453      	str	r3, [r2, #68]	; 0x44
	else
	{
	   //Ensure that ADC1_DMA_sort_ptr is initialized
	   ADC2_IN3_NF_arg.ADC2_IN3_psrc = (float32_t *)(ADC2_DMA_sort_ptr->ADC2_IN3_bfr);
	}
  }
 8001f1e:	e006      	b.n	8001f2e <init_ADC2_IN3_struct+0x2a>
	   ADC2_IN3_NF_arg.ADC2_IN3_psrc = (float32_t *)(ADC2_DMA_sort_ptr->ADC2_IN3_bfr);
 8001f20:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <init_ADC2_IN3_struct+0x38>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001f28:	3314      	adds	r3, #20
 8001f2a:	4a05      	ldr	r2, [pc, #20]	; (8001f40 <init_ADC2_IN3_struct+0x3c>)
 8001f2c:	6453      	str	r3, [r2, #68]	; 0x44
  }
 8001f2e:	bf00      	nop
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	20007869 	.word	0x20007869
 8001f3c:	2000bb34 	.word	0x2000bb34
 8001f40:	20002860 	.word	0x20002860

08001f44 <init_ADC2_IN3_FO_biquad_filter>:

void init_ADC2_IN3_FO_biquad_filter(void)
  {
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8001f48:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <init_ADC2_IN3_FO_biquad_filter+0x1c>)
 8001f4a:	7819      	ldrb	r1, [r3, #0]
 8001f4c:	4b04      	ldr	r3, [pc, #16]	; (8001f60 <init_ADC2_IN3_FO_biquad_filter+0x1c>)
 8001f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f50:	4b03      	ldr	r3, [pc, #12]	; (8001f60 <init_ADC2_IN3_FO_biquad_filter+0x1c>)
 8001f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f54:	4803      	ldr	r0, [pc, #12]	; (8001f64 <init_ADC2_IN3_FO_biquad_filter+0x20>)
 8001f56:	f009 f9f3 	bl	800b340 <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC2_IN3_NF_arg.S3,  // Pointer to the instance
	        ADC2_IN3_NF_arg.ADC2_IN3_numstages, // Number of stages (2 in this case)
	        ADC2_IN3_NF_arg.ADC2_IN3_pcoeffs, // Pointer to coefficients array
	        ADC2_IN3_NF_arg.ADC2_IN3_pState // Pointer to the state buffer
	 );
  }
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	20002860 	.word	0x20002860
 8001f64:	20003c38 	.word	0x20003c38

08001f68 <update_ADC2_IN3_FO_biquad_filter>:

void update_ADC2_IN3_FO_biquad_filter(void)
   {
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC2_IN3_NF_arg.S3, ADC2_IN3_NF_arg.ADC2_IN3_psrc , ADC2_IN3_NF_arg.ADC2_IN3_pdst, ADC2_IN3_NF_arg.ADC2_IN3_Blocksize);
 8001f6c:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <update_ADC2_IN3_FO_biquad_filter+0x28>)
 8001f6e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001f70:	4b07      	ldr	r3, [pc, #28]	; (8001f90 <update_ADC2_IN3_FO_biquad_filter+0x28>)
 8001f72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f76:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 8001f7a:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <update_ADC2_IN3_FO_biquad_filter+0x28>)
 8001f7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f80:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8001f84:	4803      	ldr	r0, [pc, #12]	; (8001f94 <update_ADC2_IN3_FO_biquad_filter+0x2c>)
 8001f86:	f009 f81f 	bl	800afc8 <arm_biquad_cascade_df2T_f32>
   }
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	20002860 	.word	0x20002860
 8001f94:	20003c38 	.word	0x20003c38

08001f98 <init_ADC2_IN4_struct>:




void init_ADC2_IN4_struct(void)
  {
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0

	if(ADC2_Current_buffer == 1)
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <init_ADC2_IN4_struct+0x34>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d107      	bne.n	8001fb4 <init_ADC2_IN4_struct+0x1c>
	{
       //Ensure that ADC1_DMA_sort_ptr is initialized
	   ADC2_IN4_NF_arg.ADC2_IN4_psrc = (float32_t *)(ADC2_DMA_sort_ptr->ADC2_IN4_bfr_alt);   // Typecasting. Converts the data in IN1 data buffer to floating point values. Assigns the source buffer at runtime
 8001fa4:	4b0a      	ldr	r3, [pc, #40]	; (8001fd0 <init_ADC2_IN4_struct+0x38>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f503 43c3 	add.w	r3, r3, #24960	; 0x6180
 8001fac:	3330      	adds	r3, #48	; 0x30
 8001fae:	4a09      	ldr	r2, [pc, #36]	; (8001fd4 <init_ADC2_IN4_struct+0x3c>)
 8001fb0:	6453      	str	r3, [r2, #68]	; 0x44
	else
	{
	   //Ensure that ADC1_DMA_sort_ptr is initialized
	   ADC2_IN4_NF_arg.ADC2_IN4_psrc = (float32_t *)(ADC2_DMA_sort_ptr->ADC2_IN4_bfr);
	}
  }
 8001fb2:	e006      	b.n	8001fc2 <init_ADC2_IN4_struct+0x2a>
	   ADC2_IN4_NF_arg.ADC2_IN4_psrc = (float32_t *)(ADC2_DMA_sort_ptr->ADC2_IN4_bfr);
 8001fb4:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <init_ADC2_IN4_struct+0x38>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8001fbc:	3328      	adds	r3, #40	; 0x28
 8001fbe:	4a05      	ldr	r2, [pc, #20]	; (8001fd4 <init_ADC2_IN4_struct+0x3c>)
 8001fc0:	6453      	str	r3, [r2, #68]	; 0x44
  }
 8001fc2:	bf00      	nop
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	20007869 	.word	0x20007869
 8001fd0:	2000bb34 	.word	0x2000bb34
 8001fd4:	20003c6c 	.word	0x20003c6c

08001fd8 <init_ADC2_IN4_FO_biquad_filter>:

void init_ADC2_IN4_FO_biquad_filter(void)
  {
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8001fdc:	4b05      	ldr	r3, [pc, #20]	; (8001ff4 <init_ADC2_IN4_FO_biquad_filter+0x1c>)
 8001fde:	7819      	ldrb	r1, [r3, #0]
 8001fe0:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <init_ADC2_IN4_FO_biquad_filter+0x1c>)
 8001fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fe4:	4b03      	ldr	r3, [pc, #12]	; (8001ff4 <init_ADC2_IN4_FO_biquad_filter+0x1c>)
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe8:	4803      	ldr	r0, [pc, #12]	; (8001ff8 <init_ADC2_IN4_FO_biquad_filter+0x20>)
 8001fea:	f009 f9a9 	bl	800b340 <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC2_IN4_NF_arg.S4,
	        ADC2_IN4_NF_arg.ADC2_IN4_numstages,
	        ADC2_IN4_NF_arg.ADC2_IN4_pcoeffs,
	        ADC2_IN4_NF_arg.ADC2_IN4_pState
	 );
  }
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20003c6c 	.word	0x20003c6c
 8001ff8:	20005044 	.word	0x20005044

08001ffc <update_ADC2_IN4_FO_biquad_filter>:

void update_ADC2_IN4_FO_biquad_filter(void)
   {
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC2_IN4_NF_arg.S4, ADC2_IN4_NF_arg.ADC2_IN4_psrc , ADC2_IN4_NF_arg.ADC2_IN4_pdst, ADC2_IN4_NF_arg.ADC2_IN4_Blocksize);
 8002000:	4b08      	ldr	r3, [pc, #32]	; (8002024 <update_ADC2_IN4_FO_biquad_filter+0x28>)
 8002002:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002004:	4b07      	ldr	r3, [pc, #28]	; (8002024 <update_ADC2_IN4_FO_biquad_filter+0x28>)
 8002006:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800200a:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 800200e:	4b05      	ldr	r3, [pc, #20]	; (8002024 <update_ADC2_IN4_FO_biquad_filter+0x28>)
 8002010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002014:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8002018:	4803      	ldr	r0, [pc, #12]	; (8002028 <update_ADC2_IN4_FO_biquad_filter+0x2c>)
 800201a:	f008 ffd5 	bl	800afc8 <arm_biquad_cascade_df2T_f32>
   }
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	20003c6c 	.word	0x20003c6c
 8002028:	20005044 	.word	0x20005044

0800202c <init_ADC3_IN1_struct>:




void init_ADC3_IN1_struct(void)
  {
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
    if(ADC3_Current_buffer == 1)
 8002030:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <init_ADC3_IN1_struct+0x34>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d107      	bne.n	8002048 <init_ADC3_IN1_struct+0x1c>
	{
       //Ensure that ADC1_DMA_sort_ptr is initialized
	   ADC3_IN1_NF_arg.ADC3_IN1_psrc = (float32_t *)(ADC3_DMA_sort_ptr->ADC3_IN1_bfr_alt);
 8002038:	4b0a      	ldr	r3, [pc, #40]	; (8002064 <init_ADC3_IN1_struct+0x38>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 8002040:	331c      	adds	r3, #28
 8002042:	4a09      	ldr	r2, [pc, #36]	; (8002068 <init_ADC3_IN1_struct+0x3c>)
 8002044:	6453      	str	r3, [r2, #68]	; 0x44
	else
	{
	   //Ensure that ADC1_DMA_sort_ptr is initialized
	   ADC3_IN1_NF_arg.ADC3_IN1_psrc = (float32_t *)(ADC3_DMA_sort_ptr->ADC3_IN1_bfr);
	}
  }
 8002046:	e006      	b.n	8002056 <init_ADC3_IN1_struct+0x2a>
	   ADC3_IN1_NF_arg.ADC3_IN1_psrc = (float32_t *)(ADC3_DMA_sort_ptr->ADC3_IN1_bfr);
 8002048:	4b06      	ldr	r3, [pc, #24]	; (8002064 <init_ADC3_IN1_struct+0x38>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8002050:	3314      	adds	r3, #20
 8002052:	4a05      	ldr	r2, [pc, #20]	; (8002068 <init_ADC3_IN1_struct+0x3c>)
 8002054:	6453      	str	r3, [r2, #68]	; 0x44
  }
 8002056:	bf00      	nop
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	2000786a 	.word	0x2000786a
 8002064:	2000bb38 	.word	0x2000bb38
 8002068:	20005078 	.word	0x20005078

0800206c <init_ADC3_IN1_FO_biquad_filter>:

void init_ADC3_IN1_FO_biquad_filter(void)
  {
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8002070:	4b05      	ldr	r3, [pc, #20]	; (8002088 <init_ADC3_IN1_FO_biquad_filter+0x1c>)
 8002072:	7819      	ldrb	r1, [r3, #0]
 8002074:	4b04      	ldr	r3, [pc, #16]	; (8002088 <init_ADC3_IN1_FO_biquad_filter+0x1c>)
 8002076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002078:	4b03      	ldr	r3, [pc, #12]	; (8002088 <init_ADC3_IN1_FO_biquad_filter+0x1c>)
 800207a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207c:	4803      	ldr	r0, [pc, #12]	; (800208c <init_ADC3_IN1_FO_biquad_filter+0x20>)
 800207e:	f009 f95f 	bl	800b340 <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC3_IN1_NF_arg.S5,
	        ADC3_IN1_NF_arg.ADC3_IN1_numstages,
	        ADC3_IN1_NF_arg.ADC3_IN1_pcoeffs,
	        ADC3_IN1_NF_arg.ADC3_IN1_pState
	 );
  }
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20005078 	.word	0x20005078
 800208c:	20006450 	.word	0x20006450

08002090 <update_ADC3_IN1_FO_biquad_filter>:

void update_ADC3_IN1_FO_biquad_filter(void)
   {
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC3_IN1_NF_arg.S5, ADC3_IN1_NF_arg.ADC3_IN1_psrc, ADC3_IN1_NF_arg.ADC3_IN1_pdst, ADC3_IN1_NF_arg.ADC3_IN1_Blocksize);
 8002094:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <update_ADC3_IN1_FO_biquad_filter+0x28>)
 8002096:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002098:	4b07      	ldr	r3, [pc, #28]	; (80020b8 <update_ADC3_IN1_FO_biquad_filter+0x28>)
 800209a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800209e:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 80020a2:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <update_ADC3_IN1_FO_biquad_filter+0x28>)
 80020a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80020ac:	4803      	ldr	r0, [pc, #12]	; (80020bc <update_ADC3_IN1_FO_biquad_filter+0x2c>)
 80020ae:	f008 ff8b 	bl	800afc8 <arm_biquad_cascade_df2T_f32>
   }
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20005078 	.word	0x20005078
 80020bc:	20006450 	.word	0x20006450

080020c0 <init_ADC3_IN2_struct>:




void init_ADC3_IN2_struct(void)
  {
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
    if(ADC3_Current_buffer == 1)
 80020c4:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <init_ADC3_IN2_struct+0x34>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d107      	bne.n	80020dc <init_ADC3_IN2_struct+0x1c>
	{
       //Ensure that ADC1_DMA_sort_ptr is initialized
	   ADC3_IN2_NF_arg.ADC3_IN2_psrc = (float32_t *)(ADC3_DMA_sort_ptr->ADC3_IN2_bfr_alt);
 80020cc:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <init_ADC3_IN2_struct+0x38>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f503 43c3 	add.w	r3, r3, #24960	; 0x6180
 80020d4:	3330      	adds	r3, #48	; 0x30
 80020d6:	4a09      	ldr	r2, [pc, #36]	; (80020fc <init_ADC3_IN2_struct+0x3c>)
 80020d8:	6453      	str	r3, [r2, #68]	; 0x44
	else
	{
	   //Ensure that ADC1_DMA_sort_ptr is initialized
	   ADC3_IN2_NF_arg.ADC3_IN2_psrc = (float32_t *)(ADC3_DMA_sort_ptr->ADC3_IN2_bfr);
	}
  }
 80020da:	e006      	b.n	80020ea <init_ADC3_IN2_struct+0x2a>
	   ADC3_IN2_NF_arg.ADC3_IN2_psrc = (float32_t *)(ADC3_DMA_sort_ptr->ADC3_IN2_bfr);
 80020dc:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <init_ADC3_IN2_struct+0x38>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 80020e4:	3328      	adds	r3, #40	; 0x28
 80020e6:	4a05      	ldr	r2, [pc, #20]	; (80020fc <init_ADC3_IN2_struct+0x3c>)
 80020e8:	6453      	str	r3, [r2, #68]	; 0x44
  }
 80020ea:	bf00      	nop
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	2000786a 	.word	0x2000786a
 80020f8:	2000bb38 	.word	0x2000bb38
 80020fc:	20006484 	.word	0x20006484

08002100 <init_ADC3_IN2_FO_biquad_filter>:

void init_ADC3_IN2_FO_biquad_filter(void)
  {
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8002104:	4b05      	ldr	r3, [pc, #20]	; (800211c <init_ADC3_IN2_FO_biquad_filter+0x1c>)
 8002106:	7819      	ldrb	r1, [r3, #0]
 8002108:	4b04      	ldr	r3, [pc, #16]	; (800211c <init_ADC3_IN2_FO_biquad_filter+0x1c>)
 800210a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800210c:	4b03      	ldr	r3, [pc, #12]	; (800211c <init_ADC3_IN2_FO_biquad_filter+0x1c>)
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	4803      	ldr	r0, [pc, #12]	; (8002120 <init_ADC3_IN2_FO_biquad_filter+0x20>)
 8002112:	f009 f915 	bl	800b340 <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC3_IN2_NF_arg.S6,  // Pointer to the instance
	        ADC3_IN2_NF_arg.ADC3_IN2_numstages,                                     // Number of stages (2 in this case)
	        ADC3_IN2_NF_arg.ADC3_IN2_pcoeffs,                                       // Pointer to coefficients array
	        ADC3_IN2_NF_arg.ADC3_IN2_pState                                         // Pointer to the state buffer
	 );
  }
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	20006484 	.word	0x20006484
 8002120:	2000785c 	.word	0x2000785c

08002124 <update_ADC3_IN2_FO_biquad_filter>:

void update_ADC3_IN2_FO_biquad_filter(void)
   {
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC3_IN2_NF_arg.S6, ADC3_IN2_NF_arg.ADC3_IN2_psrc, ADC3_IN2_NF_arg.ADC3_IN2_pdst, ADC3_IN2_NF_arg.ADC3_IN2_Blocksize);
 8002128:	4b08      	ldr	r3, [pc, #32]	; (800214c <update_ADC3_IN2_FO_biquad_filter+0x28>)
 800212a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800212c:	4b07      	ldr	r3, [pc, #28]	; (800214c <update_ADC3_IN2_FO_biquad_filter+0x28>)
 800212e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002132:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 8002136:	4b05      	ldr	r3, [pc, #20]	; (800214c <update_ADC3_IN2_FO_biquad_filter+0x28>)
 8002138:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800213c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8002140:	4803      	ldr	r0, [pc, #12]	; (8002150 <update_ADC3_IN2_FO_biquad_filter+0x2c>)
 8002142:	f008 ff41 	bl	800afc8 <arm_biquad_cascade_df2T_f32>
   }
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20006484 	.word	0x20006484
 8002150:	2000785c 	.word	0x2000785c

08002154 <ADC1_IN1_OffsetCalc>:

//INCLUDES
#include "_ADCn_INx_Offset.h"

float32_t  ADC1_IN1_OffsetCalc(ADC1_IN1_MA *ADC1_IN1_Offset_ptr)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
	float32_t Sum_1 = 0.0f; // Initialize the sum to zero
 800215c:	f04f 0300 	mov.w	r3, #0
 8002160:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8002162:	2300      	movs	r3, #0
 8002164:	60bb      	str	r3, [r7, #8]
 8002166:	e010      	b.n	800218a <ADC1_IN1_OffsetCalc+0x36>
	{
		Sum_1 += ADC1_IN1_Offset_ptr->MA_ADC1_IN1_OutBfr[h];  // Accumulate the sum of all values in the moving average buffer
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	3308      	adds	r3, #8
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	3304      	adds	r3, #4
 8002174:	edd3 7a00 	vldr	s15, [r3]
 8002178:	ed97 7a03 	vldr	s14, [r7, #12]
 800217c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002180:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	3301      	adds	r3, #1
 8002188:	60bb      	str	r3, [r7, #8]
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	2bae      	cmp	r3, #174	; 0xae
 800218e:	d9eb      	bls.n	8002168 <ADC1_IN1_OffsetCalc+0x14>
	}

	return Sum_1/ADC_DMA_SIXTEENTHBUFFERSIZE; // Return the mean (baseline)
 8002190:	edd7 7a03 	vldr	s15, [r7, #12]
 8002194:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80021b0 <ADC1_IN1_OffsetCalc+0x5c>
 8002198:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800219c:	eef0 7a66 	vmov.f32	s15, s13
}
 80021a0:	eeb0 0a67 	vmov.f32	s0, s15
 80021a4:	3714      	adds	r7, #20
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	432f0000 	.word	0x432f0000

080021b4 <ADC1_IN2_OffsetCalc>:



float32_t  ADC1_IN2_OffsetCalc(ADC1_IN2_MA *ADC1_IN2_Offset_ptr)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
	float32_t Sum_2 = 0.0f;
 80021bc:	f04f 0300 	mov.w	r3, #0
 80021c0:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80021c2:	2300      	movs	r3, #0
 80021c4:	60bb      	str	r3, [r7, #8]
 80021c6:	e010      	b.n	80021ea <ADC1_IN2_OffsetCalc+0x36>
	{
		Sum_2 += ADC1_IN2_Offset_ptr->MA_ADC1_IN2_OutBfr[h];
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	3308      	adds	r3, #8
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4413      	add	r3, r2
 80021d2:	3304      	adds	r3, #4
 80021d4:	edd3 7a00 	vldr	s15, [r3]
 80021d8:	ed97 7a03 	vldr	s14, [r7, #12]
 80021dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021e0:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	3301      	adds	r3, #1
 80021e8:	60bb      	str	r3, [r7, #8]
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	2bae      	cmp	r3, #174	; 0xae
 80021ee:	d9eb      	bls.n	80021c8 <ADC1_IN2_OffsetCalc+0x14>
	}

	return Sum_2/ADC_DMA_SIXTEENTHBUFFERSIZE;
 80021f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80021f4:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002210 <ADC1_IN2_OffsetCalc+0x5c>
 80021f8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80021fc:	eef0 7a66 	vmov.f32	s15, s13
}
 8002200:	eeb0 0a67 	vmov.f32	s0, s15
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	432f0000 	.word	0x432f0000

08002214 <ADC2_IN3_OffsetCalc>:



float32_t  ADC2_IN3_OffsetCalc(ADC2_IN3_MA *ADC2_IN3_Offset_ptr)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
	float32_t Sum_3 = 0.0f;
 800221c:	f04f 0300 	mov.w	r3, #0
 8002220:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8002222:	2300      	movs	r3, #0
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	e010      	b.n	800224a <ADC2_IN3_OffsetCalc+0x36>
	{
		Sum_3 += ADC2_IN3_Offset_ptr->MA_ADC2_IN3_OutBfr[h];
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	3308      	adds	r3, #8
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	3304      	adds	r3, #4
 8002234:	edd3 7a00 	vldr	s15, [r3]
 8002238:	ed97 7a03 	vldr	s14, [r7, #12]
 800223c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002240:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	3301      	adds	r3, #1
 8002248:	60bb      	str	r3, [r7, #8]
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	2bae      	cmp	r3, #174	; 0xae
 800224e:	d9eb      	bls.n	8002228 <ADC2_IN3_OffsetCalc+0x14>
	}

	return Sum_3/ADC_DMA_SIXTEENTHBUFFERSIZE;
 8002250:	edd7 7a03 	vldr	s15, [r7, #12]
 8002254:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002270 <ADC2_IN3_OffsetCalc+0x5c>
 8002258:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800225c:	eef0 7a66 	vmov.f32	s15, s13
}
 8002260:	eeb0 0a67 	vmov.f32	s0, s15
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	432f0000 	.word	0x432f0000

08002274 <ADC2_IN4_OffsetCalc>:



float32_t  ADC2_IN4_OffsetCalc(ADC2_IN4_MA *ADC2_IN4_Offset_ptr)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
	float32_t Sum_4 = 0.0f;
 800227c:	f04f 0300 	mov.w	r3, #0
 8002280:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8002282:	2300      	movs	r3, #0
 8002284:	60bb      	str	r3, [r7, #8]
 8002286:	e010      	b.n	80022aa <ADC2_IN4_OffsetCalc+0x36>
	{
		Sum_4 += ADC2_IN4_Offset_ptr->MA_ADC2_IN4_OutBfr[h];
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	3308      	adds	r3, #8
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	4413      	add	r3, r2
 8002292:	3304      	adds	r3, #4
 8002294:	edd3 7a00 	vldr	s15, [r3]
 8002298:	ed97 7a03 	vldr	s14, [r7, #12]
 800229c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022a0:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	3301      	adds	r3, #1
 80022a8:	60bb      	str	r3, [r7, #8]
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	2bae      	cmp	r3, #174	; 0xae
 80022ae:	d9eb      	bls.n	8002288 <ADC2_IN4_OffsetCalc+0x14>
	}

	return Sum_4/ADC_DMA_SIXTEENTHBUFFERSIZE;
 80022b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80022b4:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80022d0 <ADC2_IN4_OffsetCalc+0x5c>
 80022b8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80022bc:	eef0 7a66 	vmov.f32	s15, s13
}
 80022c0:	eeb0 0a67 	vmov.f32	s0, s15
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	432f0000 	.word	0x432f0000

080022d4 <ADC3_IN1_OffsetCalc>:



float32_t  ADC3_IN1_OffsetCalc(ADC3_IN1_MA *ADC3_IN1_Offset_ptr)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
	float32_t Sum_5 = 0.0f; // Initialize the sum to zero
 80022dc:	f04f 0300 	mov.w	r3, #0
 80022e0:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80022e2:	2300      	movs	r3, #0
 80022e4:	60bb      	str	r3, [r7, #8]
 80022e6:	e010      	b.n	800230a <ADC3_IN1_OffsetCalc+0x36>
	{
		Sum_5 += ADC3_IN1_Offset_ptr->MA_ADC3_IN1_OutBfr[h];  // Accumulate the sum of all values in the buffer
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	3308      	adds	r3, #8
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	3304      	adds	r3, #4
 80022f4:	edd3 7a00 	vldr	s15, [r3]
 80022f8:	ed97 7a03 	vldr	s14, [r7, #12]
 80022fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002300:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	3301      	adds	r3, #1
 8002308:	60bb      	str	r3, [r7, #8]
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	2bae      	cmp	r3, #174	; 0xae
 800230e:	d9eb      	bls.n	80022e8 <ADC3_IN1_OffsetCalc+0x14>
	}

	return Sum_5/ADC_DMA_SIXTEENTHBUFFERSIZE; // Return the mean (baseline)
 8002310:	edd7 7a03 	vldr	s15, [r7, #12]
 8002314:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002330 <ADC3_IN1_OffsetCalc+0x5c>
 8002318:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800231c:	eef0 7a66 	vmov.f32	s15, s13
}
 8002320:	eeb0 0a67 	vmov.f32	s0, s15
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	432f0000 	.word	0x432f0000

08002334 <ADC3_IN2_OffsetCalc>:



float32_t  ADC3_IN2_OffsetCalc(ADC3_IN2_MA *ADC3_IN2_Offset_ptr)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
	float32_t Sum_6 = 0.0f;
 800233c:	f04f 0300 	mov.w	r3, #0
 8002340:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8002342:	2300      	movs	r3, #0
 8002344:	60bb      	str	r3, [r7, #8]
 8002346:	e010      	b.n	800236a <ADC3_IN2_OffsetCalc+0x36>
	{
		Sum_6 += ADC3_IN2_Offset_ptr->MA_ADC3_IN2_OutBfr[h];
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	3308      	adds	r3, #8
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	4413      	add	r3, r2
 8002352:	3304      	adds	r3, #4
 8002354:	edd3 7a00 	vldr	s15, [r3]
 8002358:	ed97 7a03 	vldr	s14, [r7, #12]
 800235c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002360:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	3301      	adds	r3, #1
 8002368:	60bb      	str	r3, [r7, #8]
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	2bae      	cmp	r3, #174	; 0xae
 800236e:	d9eb      	bls.n	8002348 <ADC3_IN2_OffsetCalc+0x14>
	}

	return Sum_6/ADC_DMA_SIXTEENTHBUFFERSIZE;
 8002370:	edd7 7a03 	vldr	s15, [r7, #12]
 8002374:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002390 <ADC3_IN2_OffsetCalc+0x5c>
 8002378:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800237c:	eef0 7a66 	vmov.f32	s15, s13
}
 8002380:	eeb0 0a67 	vmov.f32	s0, s15
 8002384:	3714      	adds	r7, #20
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	432f0000 	.word	0x432f0000

08002394 <ADC1_IN1_SD_BL>:
//INCLUSIONS
#include "_ADCn_INx_SD_BL.h"

//FUNCTION DEFINITIONS
float32_t  ADC1_IN1_SD_BL(ADC1_IN1_MA *ADC1_IN1_SD_BL_ptr, float32_t Mean_1)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_1 = 0.0f;
 80023a0:	f04f 0300 	mov.w	r3, #0
 80023a4:	617b      	str	r3, [r7, #20]
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 80023a6:	2300      	movs	r3, #0
 80023a8:	613b      	str	r3, [r7, #16]
 80023aa:	e01a      	b.n	80023e2 <ADC1_IN1_SD_BL+0x4e>
  {
	  float32_t Diff_1 = ADC1_IN1_SD_BL_ptr->MA_ADC1_IN1_OutBfr[q] - Mean_1;
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	3308      	adds	r3, #8
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	4413      	add	r3, r2
 80023b6:	3304      	adds	r3, #4
 80023b8:	ed93 7a00 	vldr	s14, [r3]
 80023bc:	edd7 7a00 	vldr	s15, [r7]
 80023c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023c4:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_1 += Diff_1 * Diff_1;
 80023c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80023cc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80023d0:	ed97 7a05 	vldr	s14, [r7, #20]
 80023d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023d8:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	3301      	adds	r3, #1
 80023e0:	613b      	str	r3, [r7, #16]
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	2bae      	cmp	r3, #174	; 0xae
 80023e6:	d9e1      	bls.n	80023ac <ADC1_IN1_SD_BL+0x18>
  }

  Variance_1 /= ADC_DMA_SIXTEENTHBUFFERSIZE; // Average the squared differences
 80023e8:	ed97 7a05 	vldr	s14, [r7, #20]
 80023ec:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002428 <ADC1_IN1_SD_BL+0x94>
 80023f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023f4:	edc7 7a05 	vstr	s15, [r7, #20]

  return sqrt(Variance_1); //Square root of variance
 80023f8:	6978      	ldr	r0, [r7, #20]
 80023fa:	f7fe f871 	bl	80004e0 <__aeabi_f2d>
 80023fe:	4602      	mov	r2, r0
 8002400:	460b      	mov	r3, r1
 8002402:	ec43 2b10 	vmov	d0, r2, r3
 8002406:	f009 fbab 	bl	800bb60 <sqrt>
 800240a:	ec53 2b10 	vmov	r2, r3, d0
 800240e:	4610      	mov	r0, r2
 8002410:	4619      	mov	r1, r3
 8002412:	f7fe fbb5 	bl	8000b80 <__aeabi_d2f>
 8002416:	4603      	mov	r3, r0
 8002418:	ee07 3a90 	vmov	s15, r3
}
 800241c:	eeb0 0a67 	vmov.f32	s0, s15
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	432f0000 	.word	0x432f0000

0800242c <ADC1_IN2_SD_BL>:


float32_t  ADC1_IN2_SD_BL(ADC1_IN2_MA *ADC1_IN2_SD_BL_ptr, float32_t Mean_2)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_2 = 0.0f;
 8002438:	f04f 0300 	mov.w	r3, #0
 800243c:	617b      	str	r3, [r7, #20]
  for (uint32_t  s=0; s<ADC_DMA_SIXTEENTHBUFFERSIZE; s++)
 800243e:	2300      	movs	r3, #0
 8002440:	613b      	str	r3, [r7, #16]
 8002442:	e01a      	b.n	800247a <ADC1_IN2_SD_BL+0x4e>
  {
	  float32_t Diff_2 = ADC1_IN2_SD_BL_ptr->MA_ADC1_IN2_OutBfr[s] - Mean_2;
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	3308      	adds	r3, #8
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	3304      	adds	r3, #4
 8002450:	ed93 7a00 	vldr	s14, [r3]
 8002454:	edd7 7a00 	vldr	s15, [r7]
 8002458:	ee77 7a67 	vsub.f32	s15, s14, s15
 800245c:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_2 += Diff_2 * Diff_2;
 8002460:	edd7 7a03 	vldr	s15, [r7, #12]
 8002464:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002468:	ed97 7a05 	vldr	s14, [r7, #20]
 800246c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002470:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  s=0; s<ADC_DMA_SIXTEENTHBUFFERSIZE; s++)
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	3301      	adds	r3, #1
 8002478:	613b      	str	r3, [r7, #16]
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	2bae      	cmp	r3, #174	; 0xae
 800247e:	d9e1      	bls.n	8002444 <ADC1_IN2_SD_BL+0x18>
  }

  Variance_2 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 8002480:	ed97 7a05 	vldr	s14, [r7, #20]
 8002484:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80024c0 <ADC1_IN2_SD_BL+0x94>
 8002488:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800248c:	edc7 7a05 	vstr	s15, [r7, #20]

 return sqrt(Variance_2);
 8002490:	6978      	ldr	r0, [r7, #20]
 8002492:	f7fe f825 	bl	80004e0 <__aeabi_f2d>
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	ec43 2b10 	vmov	d0, r2, r3
 800249e:	f009 fb5f 	bl	800bb60 <sqrt>
 80024a2:	ec53 2b10 	vmov	r2, r3, d0
 80024a6:	4610      	mov	r0, r2
 80024a8:	4619      	mov	r1, r3
 80024aa:	f7fe fb69 	bl	8000b80 <__aeabi_d2f>
 80024ae:	4603      	mov	r3, r0
 80024b0:	ee07 3a90 	vmov	s15, r3

}
 80024b4:	eeb0 0a67 	vmov.f32	s0, s15
 80024b8:	3718      	adds	r7, #24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	432f0000 	.word	0x432f0000

080024c4 <ADC2_IN3_SD_BL>:


float32_t  ADC2_IN3_SD_BL(ADC2_IN3_MA *ADC2_IN3_SD_BL_ptr, float32_t Mean_3)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_3 = 0.0f;
 80024d0:	f04f 0300 	mov.w	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]
  for (uint32_t  v=0; v<ADC_DMA_SIXTEENTHBUFFERSIZE; v++)
 80024d6:	2300      	movs	r3, #0
 80024d8:	613b      	str	r3, [r7, #16]
 80024da:	e01a      	b.n	8002512 <ADC2_IN3_SD_BL+0x4e>
  {
	  float32_t Diff_3 = ADC2_IN3_SD_BL_ptr->MA_ADC2_IN3_OutBfr[v] - Mean_3;
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	3308      	adds	r3, #8
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	3304      	adds	r3, #4
 80024e8:	ed93 7a00 	vldr	s14, [r3]
 80024ec:	edd7 7a00 	vldr	s15, [r7]
 80024f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024f4:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_3 += Diff_3 * Diff_3;
 80024f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80024fc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002500:	ed97 7a05 	vldr	s14, [r7, #20]
 8002504:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002508:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  v=0; v<ADC_DMA_SIXTEENTHBUFFERSIZE; v++)
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	3301      	adds	r3, #1
 8002510:	613b      	str	r3, [r7, #16]
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	2bae      	cmp	r3, #174	; 0xae
 8002516:	d9e1      	bls.n	80024dc <ADC2_IN3_SD_BL+0x18>
  }

  Variance_3 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 8002518:	ed97 7a05 	vldr	s14, [r7, #20]
 800251c:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002558 <ADC2_IN3_SD_BL+0x94>
 8002520:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002524:	edc7 7a05 	vstr	s15, [r7, #20]

  return sqrt(Variance_3);
 8002528:	6978      	ldr	r0, [r7, #20]
 800252a:	f7fd ffd9 	bl	80004e0 <__aeabi_f2d>
 800252e:	4602      	mov	r2, r0
 8002530:	460b      	mov	r3, r1
 8002532:	ec43 2b10 	vmov	d0, r2, r3
 8002536:	f009 fb13 	bl	800bb60 <sqrt>
 800253a:	ec53 2b10 	vmov	r2, r3, d0
 800253e:	4610      	mov	r0, r2
 8002540:	4619      	mov	r1, r3
 8002542:	f7fe fb1d 	bl	8000b80 <__aeabi_d2f>
 8002546:	4603      	mov	r3, r0
 8002548:	ee07 3a90 	vmov	s15, r3

}
 800254c:	eeb0 0a67 	vmov.f32	s0, s15
 8002550:	3718      	adds	r7, #24
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	432f0000 	.word	0x432f0000

0800255c <ADC2_IN4_SD_BL>:


float32_t  ADC2_IN4_SD_BL(ADC2_IN4_MA *ADC2_IN4_SD_BL_ptr, float32_t Mean_4)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_4 = 0.0f;
 8002568:	f04f 0300 	mov.w	r3, #0
 800256c:	617b      	str	r3, [r7, #20]
  for (uint32_t  w=0; w<ADC_DMA_SIXTEENTHBUFFERSIZE; w++)
 800256e:	2300      	movs	r3, #0
 8002570:	613b      	str	r3, [r7, #16]
 8002572:	e01a      	b.n	80025aa <ADC2_IN4_SD_BL+0x4e>
  {
	  float32_t Diff_4 = ADC2_IN4_SD_BL_ptr->MA_ADC2_IN4_OutBfr[w] - Mean_4;
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	3308      	adds	r3, #8
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4413      	add	r3, r2
 800257e:	3304      	adds	r3, #4
 8002580:	ed93 7a00 	vldr	s14, [r3]
 8002584:	edd7 7a00 	vldr	s15, [r7]
 8002588:	ee77 7a67 	vsub.f32	s15, s14, s15
 800258c:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_4 += Diff_4 * Diff_4;
 8002590:	edd7 7a03 	vldr	s15, [r7, #12]
 8002594:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002598:	ed97 7a05 	vldr	s14, [r7, #20]
 800259c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025a0:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  w=0; w<ADC_DMA_SIXTEENTHBUFFERSIZE; w++)
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	3301      	adds	r3, #1
 80025a8:	613b      	str	r3, [r7, #16]
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	2bae      	cmp	r3, #174	; 0xae
 80025ae:	d9e1      	bls.n	8002574 <ADC2_IN4_SD_BL+0x18>
  }

  Variance_4 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 80025b0:	ed97 7a05 	vldr	s14, [r7, #20]
 80025b4:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80025f0 <ADC2_IN4_SD_BL+0x94>
 80025b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025bc:	edc7 7a05 	vstr	s15, [r7, #20]

 return sqrt(Variance_4);
 80025c0:	6978      	ldr	r0, [r7, #20]
 80025c2:	f7fd ff8d 	bl	80004e0 <__aeabi_f2d>
 80025c6:	4602      	mov	r2, r0
 80025c8:	460b      	mov	r3, r1
 80025ca:	ec43 2b10 	vmov	d0, r2, r3
 80025ce:	f009 fac7 	bl	800bb60 <sqrt>
 80025d2:	ec53 2b10 	vmov	r2, r3, d0
 80025d6:	4610      	mov	r0, r2
 80025d8:	4619      	mov	r1, r3
 80025da:	f7fe fad1 	bl	8000b80 <__aeabi_d2f>
 80025de:	4603      	mov	r3, r0
 80025e0:	ee07 3a90 	vmov	s15, r3

}
 80025e4:	eeb0 0a67 	vmov.f32	s0, s15
 80025e8:	3718      	adds	r7, #24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	432f0000 	.word	0x432f0000

080025f4 <ADC3_IN1_SD_BL>:


float32_t  ADC3_IN1_SD_BL(ADC3_IN1_MA *ADC3_IN1_SD_BL_ptr, float32_t Mean_5)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_5 = 0.0f;
 8002600:	f04f 0300 	mov.w	r3, #0
 8002604:	617b      	str	r3, [r7, #20]
  for (uint32_t  d=0; d<ADC_DMA_SIXTEENTHBUFFERSIZE; d++)
 8002606:	2300      	movs	r3, #0
 8002608:	613b      	str	r3, [r7, #16]
 800260a:	e01a      	b.n	8002642 <ADC3_IN1_SD_BL+0x4e>
  {
	  float32_t Diff_5 = ADC3_IN1_SD_BL_ptr->MA_ADC3_IN1_OutBfr[d] - Mean_5;
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	3308      	adds	r3, #8
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4413      	add	r3, r2
 8002616:	3304      	adds	r3, #4
 8002618:	ed93 7a00 	vldr	s14, [r3]
 800261c:	edd7 7a00 	vldr	s15, [r7]
 8002620:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002624:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_5 += Diff_5 * Diff_5;
 8002628:	edd7 7a03 	vldr	s15, [r7, #12]
 800262c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002630:	ed97 7a05 	vldr	s14, [r7, #20]
 8002634:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002638:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  d=0; d<ADC_DMA_SIXTEENTHBUFFERSIZE; d++)
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	3301      	adds	r3, #1
 8002640:	613b      	str	r3, [r7, #16]
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	2bae      	cmp	r3, #174	; 0xae
 8002646:	d9e1      	bls.n	800260c <ADC3_IN1_SD_BL+0x18>
  }

  Variance_5 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 8002648:	ed97 7a05 	vldr	s14, [r7, #20]
 800264c:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002688 <ADC3_IN1_SD_BL+0x94>
 8002650:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002654:	edc7 7a05 	vstr	s15, [r7, #20]

 return sqrt(Variance_5);
 8002658:	6978      	ldr	r0, [r7, #20]
 800265a:	f7fd ff41 	bl	80004e0 <__aeabi_f2d>
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	ec43 2b10 	vmov	d0, r2, r3
 8002666:	f009 fa7b 	bl	800bb60 <sqrt>
 800266a:	ec53 2b10 	vmov	r2, r3, d0
 800266e:	4610      	mov	r0, r2
 8002670:	4619      	mov	r1, r3
 8002672:	f7fe fa85 	bl	8000b80 <__aeabi_d2f>
 8002676:	4603      	mov	r3, r0
 8002678:	ee07 3a90 	vmov	s15, r3

}
 800267c:	eeb0 0a67 	vmov.f32	s0, s15
 8002680:	3718      	adds	r7, #24
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	432f0000 	.word	0x432f0000

0800268c <ADC3_IN2_SD_BL>:


float32_t  ADC3_IN2_SD_BL(ADC3_IN2_MA *ADC3_IN2_SD_BL_ptr, float32_t Mean_6)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_6 = 0.0f;
 8002698:	f04f 0300 	mov.w	r3, #0
 800269c:	617b      	str	r3, [r7, #20]
  for (uint32_t  c=0; c<ADC_DMA_SIXTEENTHBUFFERSIZE; c++)
 800269e:	2300      	movs	r3, #0
 80026a0:	613b      	str	r3, [r7, #16]
 80026a2:	e01a      	b.n	80026da <ADC3_IN2_SD_BL+0x4e>
  {
	  float32_t Diff_6 = ADC3_IN2_SD_BL_ptr->MA_ADC3_IN2_OutBfr[c] - Mean_6;
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	3308      	adds	r3, #8
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4413      	add	r3, r2
 80026ae:	3304      	adds	r3, #4
 80026b0:	ed93 7a00 	vldr	s14, [r3]
 80026b4:	edd7 7a00 	vldr	s15, [r7]
 80026b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026bc:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_6 += Diff_6 * Diff_6;
 80026c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80026c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80026c8:	ed97 7a05 	vldr	s14, [r7, #20]
 80026cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026d0:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  c=0; c<ADC_DMA_SIXTEENTHBUFFERSIZE; c++)
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	3301      	adds	r3, #1
 80026d8:	613b      	str	r3, [r7, #16]
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	2bae      	cmp	r3, #174	; 0xae
 80026de:	d9e1      	bls.n	80026a4 <ADC3_IN2_SD_BL+0x18>
  }

  Variance_6 /= ADC_DMA_SIXTEENTHBUFFERSIZE; // Average the squared differences
 80026e0:	ed97 7a05 	vldr	s14, [r7, #20]
 80026e4:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002720 <ADC3_IN2_SD_BL+0x94>
 80026e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026ec:	edc7 7a05 	vstr	s15, [r7, #20]

  return sqrt(Variance_6); //Square root of variance
 80026f0:	6978      	ldr	r0, [r7, #20]
 80026f2:	f7fd fef5 	bl	80004e0 <__aeabi_f2d>
 80026f6:	4602      	mov	r2, r0
 80026f8:	460b      	mov	r3, r1
 80026fa:	ec43 2b10 	vmov	d0, r2, r3
 80026fe:	f009 fa2f 	bl	800bb60 <sqrt>
 8002702:	ec53 2b10 	vmov	r2, r3, d0
 8002706:	4610      	mov	r0, r2
 8002708:	4619      	mov	r1, r3
 800270a:	f7fe fa39 	bl	8000b80 <__aeabi_d2f>
 800270e:	4603      	mov	r3, r0
 8002710:	ee07 3a90 	vmov	s15, r3

}
 8002714:	eeb0 0a67 	vmov.f32	s0, s15
 8002718:	3718      	adds	r7, #24
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	432f0000 	.word	0x432f0000

08002724 <ADC1_IN1_SSC>:
//INCLUDES
#include "_ADCn_INx_SSC.h"

//FUNCTION DEFINITIONS
float32_t ADC1_IN1_SSC(ADC1_IN1_MA *ADC1_IN1_SSC_ptr, float32_t Threshold_1)
{
 8002724:	b480      	push	{r7}
 8002726:	b087      	sub	sp, #28
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	ed87 0a00 	vstr	s0, [r7]
  float32_t SSC_Count_1 = 0.0f;
 8002730:	f04f 0300 	mov.w	r3, #0
 8002734:	617b      	str	r3, [r7, #20]

  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002736:	2301      	movs	r3, #1
 8002738:	613b      	str	r3, [r7, #16]
 800273a:	e055      	b.n	80027e8 <ADC1_IN1_SSC+0xc4>
  {
	float32_t SSC_Diff_1 = ADC1_IN1_SSC_ptr->MA_ADC1_IN1_OutBfr[n] - ADC1_IN1_SSC_ptr->MA_ADC1_IN1_OutBfr[n-1];
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	3308      	adds	r3, #8
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
 8002746:	3304      	adds	r3, #4
 8002748:	ed93 7a00 	vldr	s14, [r3]
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	3b01      	subs	r3, #1
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	3308      	adds	r3, #8
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	3304      	adds	r3, #4
 800275a:	edd3 7a00 	vldr	s15, [r3]
 800275e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002762:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t SSC_Diff_2 = ADC1_IN1_SSC_ptr->MA_ADC1_IN1_OutBfr[n+1] - ADC1_IN1_SSC_ptr->MA_ADC1_IN1_OutBfr[n];
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	3301      	adds	r3, #1
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	3308      	adds	r3, #8
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4413      	add	r3, r2
 8002772:	3304      	adds	r3, #4
 8002774:	ed93 7a00 	vldr	s14, [r3]
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	3308      	adds	r3, #8
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4413      	add	r3, r2
 8002782:	3304      	adds	r3, #4
 8002784:	edd3 7a00 	vldr	s15, [r3]
 8002788:	ee77 7a67 	vsub.f32	s15, s14, s15
 800278c:	edc7 7a02 	vstr	s15, [r7, #8]

	if ( SSC_Diff_1 * SSC_Diff_2 > 0 && (fabs (SSC_Diff_1) > Threshold_1 || fabs (SSC_Diff_2) > Threshold_1) )
 8002790:	ed97 7a03 	vldr	s14, [r7, #12]
 8002794:	edd7 7a02 	vldr	s15, [r7, #8]
 8002798:	ee67 7a27 	vmul.f32	s15, s14, s15
 800279c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a4:	dd1d      	ble.n	80027e2 <ADC1_IN1_SSC+0xbe>
 80027a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80027aa:	eef0 7ae7 	vabs.f32	s15, s15
 80027ae:	ed97 7a00 	vldr	s14, [r7]
 80027b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ba:	d40a      	bmi.n	80027d2 <ADC1_IN1_SSC+0xae>
 80027bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80027c0:	eef0 7ae7 	vabs.f32	s15, s15
 80027c4:	ed97 7a00 	vldr	s14, [r7]
 80027c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027d0:	d507      	bpl.n	80027e2 <ADC1_IN1_SSC+0xbe>
	{
       SSC_Count_1++;
 80027d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80027d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80027da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027de:	edc7 7a05 	vstr	s15, [r7, #20]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	3301      	adds	r3, #1
 80027e6:	613b      	str	r3, [r7, #16]
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	2bae      	cmp	r3, #174	; 0xae
 80027ec:	d9a6      	bls.n	800273c <ADC1_IN1_SSC+0x18>
	}
  }

  return SSC_Count_1;
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	ee07 3a90 	vmov	s15, r3
}
 80027f4:	eeb0 0a67 	vmov.f32	s0, s15
 80027f8:	371c      	adds	r7, #28
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <ADC1_IN2_SSC>:


float32_t ADC1_IN2_SSC(ADC1_IN2_MA *ADC1_IN2_SSC_ptr, float32_t Threshold_2)
{
 8002802:	b480      	push	{r7}
 8002804:	b087      	sub	sp, #28
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
 800280a:	ed87 0a00 	vstr	s0, [r7]
  float32_t SSC_Count_2 = 0.0f;
 800280e:	f04f 0300 	mov.w	r3, #0
 8002812:	617b      	str	r3, [r7, #20]

  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002814:	2301      	movs	r3, #1
 8002816:	613b      	str	r3, [r7, #16]
 8002818:	e055      	b.n	80028c6 <ADC1_IN2_SSC+0xc4>
  {
	float32_t SSC_Diff_3 = ADC1_IN2_SSC_ptr->MA_ADC1_IN2_OutBfr[n] - ADC1_IN2_SSC_ptr->MA_ADC1_IN2_OutBfr[n-1];
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	3308      	adds	r3, #8
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	3304      	adds	r3, #4
 8002826:	ed93 7a00 	vldr	s14, [r3]
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	3b01      	subs	r3, #1
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	3308      	adds	r3, #8
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4413      	add	r3, r2
 8002836:	3304      	adds	r3, #4
 8002838:	edd3 7a00 	vldr	s15, [r3]
 800283c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002840:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t SSC_Diff_4 = ADC1_IN2_SSC_ptr->MA_ADC1_IN2_OutBfr[n+1] - ADC1_IN2_SSC_ptr->MA_ADC1_IN2_OutBfr[n];
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	3301      	adds	r3, #1
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	3308      	adds	r3, #8
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4413      	add	r3, r2
 8002850:	3304      	adds	r3, #4
 8002852:	ed93 7a00 	vldr	s14, [r3]
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	3308      	adds	r3, #8
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4413      	add	r3, r2
 8002860:	3304      	adds	r3, #4
 8002862:	edd3 7a00 	vldr	s15, [r3]
 8002866:	ee77 7a67 	vsub.f32	s15, s14, s15
 800286a:	edc7 7a02 	vstr	s15, [r7, #8]

	if ( SSC_Diff_3 * SSC_Diff_4 > 0 && (fabs (SSC_Diff_3) > Threshold_2 || fabs (SSC_Diff_4) > Threshold_2) )
 800286e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002872:	edd7 7a02 	vldr	s15, [r7, #8]
 8002876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800287a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800287e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002882:	dd1d      	ble.n	80028c0 <ADC1_IN2_SSC+0xbe>
 8002884:	edd7 7a03 	vldr	s15, [r7, #12]
 8002888:	eef0 7ae7 	vabs.f32	s15, s15
 800288c:	ed97 7a00 	vldr	s14, [r7]
 8002890:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002898:	d40a      	bmi.n	80028b0 <ADC1_IN2_SSC+0xae>
 800289a:	edd7 7a02 	vldr	s15, [r7, #8]
 800289e:	eef0 7ae7 	vabs.f32	s15, s15
 80028a2:	ed97 7a00 	vldr	s14, [r7]
 80028a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ae:	d507      	bpl.n	80028c0 <ADC1_IN2_SSC+0xbe>
	{
       SSC_Count_2++;
 80028b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80028b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80028b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028bc:	edc7 7a05 	vstr	s15, [r7, #20]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	3301      	adds	r3, #1
 80028c4:	613b      	str	r3, [r7, #16]
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	2bae      	cmp	r3, #174	; 0xae
 80028ca:	d9a6      	bls.n	800281a <ADC1_IN2_SSC+0x18>
	}
  }

  return SSC_Count_2;
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	ee07 3a90 	vmov	s15, r3
}
 80028d2:	eeb0 0a67 	vmov.f32	s0, s15
 80028d6:	371c      	adds	r7, #28
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <ADC2_IN3_SSC>:


float32_t ADC2_IN3_SSC(ADC2_IN3_MA *ADC2_IN3_SSC_ptr, float32_t Threshold_3)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b087      	sub	sp, #28
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	ed87 0a00 	vstr	s0, [r7]
  float32_t SSC_Count_3 = 0.0f;
 80028ec:	f04f 0300 	mov.w	r3, #0
 80028f0:	617b      	str	r3, [r7, #20]

  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 80028f2:	2301      	movs	r3, #1
 80028f4:	613b      	str	r3, [r7, #16]
 80028f6:	e055      	b.n	80029a4 <ADC2_IN3_SSC+0xc4>
  {
	float32_t SSC_Diff_5 = ADC2_IN3_SSC_ptr->MA_ADC2_IN3_OutBfr[n] - ADC2_IN3_SSC_ptr->MA_ADC2_IN3_OutBfr[n-1];
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	3308      	adds	r3, #8
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	3304      	adds	r3, #4
 8002904:	ed93 7a00 	vldr	s14, [r3]
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	3b01      	subs	r3, #1
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	3308      	adds	r3, #8
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4413      	add	r3, r2
 8002914:	3304      	adds	r3, #4
 8002916:	edd3 7a00 	vldr	s15, [r3]
 800291a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800291e:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t SSC_Diff_6 = ADC2_IN3_SSC_ptr->MA_ADC2_IN3_OutBfr[n+1] - ADC2_IN3_SSC_ptr->MA_ADC2_IN3_OutBfr[n];
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	3301      	adds	r3, #1
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	3308      	adds	r3, #8
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4413      	add	r3, r2
 800292e:	3304      	adds	r3, #4
 8002930:	ed93 7a00 	vldr	s14, [r3]
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	3308      	adds	r3, #8
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	3304      	adds	r3, #4
 8002940:	edd3 7a00 	vldr	s15, [r3]
 8002944:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002948:	edc7 7a02 	vstr	s15, [r7, #8]

	if ( SSC_Diff_5 * SSC_Diff_6 > 0 && (fabs (SSC_Diff_5) > Threshold_3 || fabs (SSC_Diff_6) > Threshold_3) )
 800294c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002950:	edd7 7a02 	vldr	s15, [r7, #8]
 8002954:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002958:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800295c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002960:	dd1d      	ble.n	800299e <ADC2_IN3_SSC+0xbe>
 8002962:	edd7 7a03 	vldr	s15, [r7, #12]
 8002966:	eef0 7ae7 	vabs.f32	s15, s15
 800296a:	ed97 7a00 	vldr	s14, [r7]
 800296e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002976:	d40a      	bmi.n	800298e <ADC2_IN3_SSC+0xae>
 8002978:	edd7 7a02 	vldr	s15, [r7, #8]
 800297c:	eef0 7ae7 	vabs.f32	s15, s15
 8002980:	ed97 7a00 	vldr	s14, [r7]
 8002984:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800298c:	d507      	bpl.n	800299e <ADC2_IN3_SSC+0xbe>
	{
       SSC_Count_3++;
 800298e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002992:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002996:	ee77 7a87 	vadd.f32	s15, s15, s14
 800299a:	edc7 7a05 	vstr	s15, [r7, #20]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	3301      	adds	r3, #1
 80029a2:	613b      	str	r3, [r7, #16]
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	2bae      	cmp	r3, #174	; 0xae
 80029a8:	d9a6      	bls.n	80028f8 <ADC2_IN3_SSC+0x18>
	}
  }

  return SSC_Count_3;
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	ee07 3a90 	vmov	s15, r3
}
 80029b0:	eeb0 0a67 	vmov.f32	s0, s15
 80029b4:	371c      	adds	r7, #28
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <ADC2_IN4_SSC>:


float32_t ADC2_IN4_SSC(ADC2_IN4_MA *ADC2_IN4_SSC_ptr, float32_t Threshold_4)
{
 80029be:	b480      	push	{r7}
 80029c0:	b087      	sub	sp, #28
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
 80029c6:	ed87 0a00 	vstr	s0, [r7]
  float32_t SSC_Count_4 = 0.0f;
 80029ca:	f04f 0300 	mov.w	r3, #0
 80029ce:	617b      	str	r3, [r7, #20]

  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 80029d0:	2301      	movs	r3, #1
 80029d2:	613b      	str	r3, [r7, #16]
 80029d4:	e055      	b.n	8002a82 <ADC2_IN4_SSC+0xc4>
  {
	float32_t SSC_Diff_7 = ADC2_IN4_SSC_ptr->MA_ADC2_IN4_OutBfr[n] - ADC2_IN4_SSC_ptr->MA_ADC2_IN4_OutBfr[n-1];
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	3308      	adds	r3, #8
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4413      	add	r3, r2
 80029e0:	3304      	adds	r3, #4
 80029e2:	ed93 7a00 	vldr	s14, [r3]
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	3b01      	subs	r3, #1
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	3308      	adds	r3, #8
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	3304      	adds	r3, #4
 80029f4:	edd3 7a00 	vldr	s15, [r3]
 80029f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029fc:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t SSC_Diff_8 = ADC2_IN4_SSC_ptr->MA_ADC2_IN4_OutBfr[n+1] - ADC2_IN4_SSC_ptr->MA_ADC2_IN4_OutBfr[n];
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	3301      	adds	r3, #1
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	3308      	adds	r3, #8
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4413      	add	r3, r2
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	ed93 7a00 	vldr	s14, [r3]
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	3308      	adds	r3, #8
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4413      	add	r3, r2
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	edd3 7a00 	vldr	s15, [r3]
 8002a22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a26:	edc7 7a02 	vstr	s15, [r7, #8]

	if ( SSC_Diff_7 * SSC_Diff_8 > 0 && (fabs (SSC_Diff_7) > Threshold_4 || fabs (SSC_Diff_8) > Threshold_4) )
 8002a2a:	ed97 7a03 	vldr	s14, [r7, #12]
 8002a2e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a3e:	dd1d      	ble.n	8002a7c <ADC2_IN4_SSC+0xbe>
 8002a40:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a44:	eef0 7ae7 	vabs.f32	s15, s15
 8002a48:	ed97 7a00 	vldr	s14, [r7]
 8002a4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a54:	d40a      	bmi.n	8002a6c <ADC2_IN4_SSC+0xae>
 8002a56:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a5a:	eef0 7ae7 	vabs.f32	s15, s15
 8002a5e:	ed97 7a00 	vldr	s14, [r7]
 8002a62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a6a:	d507      	bpl.n	8002a7c <ADC2_IN4_SSC+0xbe>
	{
       SSC_Count_4++;
 8002a6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a78:	edc7 7a05 	vstr	s15, [r7, #20]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	613b      	str	r3, [r7, #16]
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	2bae      	cmp	r3, #174	; 0xae
 8002a86:	d9a6      	bls.n	80029d6 <ADC2_IN4_SSC+0x18>
	}
  }

  return SSC_Count_4;
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	ee07 3a90 	vmov	s15, r3
}
 8002a8e:	eeb0 0a67 	vmov.f32	s0, s15
 8002a92:	371c      	adds	r7, #28
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <ADC3_IN1_SSC>:


float32_t ADC3_IN1_SSC(ADC3_IN1_MA *ADC3_IN1_SSC_ptr, float32_t Threshold_5)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b087      	sub	sp, #28
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	ed87 0a00 	vstr	s0, [r7]
  float32_t SSC_Count_5 = 0.0f;
 8002aa8:	f04f 0300 	mov.w	r3, #0
 8002aac:	617b      	str	r3, [r7, #20]

  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002aae:	2301      	movs	r3, #1
 8002ab0:	613b      	str	r3, [r7, #16]
 8002ab2:	e055      	b.n	8002b60 <ADC3_IN1_SSC+0xc4>
  {
	float32_t SSC_Diff_9 = ADC3_IN1_SSC_ptr->MA_ADC3_IN1_OutBfr[n] - ADC3_IN1_SSC_ptr->MA_ADC3_IN1_OutBfr[n-1];
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	3308      	adds	r3, #8
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4413      	add	r3, r2
 8002abe:	3304      	adds	r3, #4
 8002ac0:	ed93 7a00 	vldr	s14, [r3]
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	3308      	adds	r3, #8
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4413      	add	r3, r2
 8002ad0:	3304      	adds	r3, #4
 8002ad2:	edd3 7a00 	vldr	s15, [r3]
 8002ad6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ada:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t SSC_Diff_10 = ADC3_IN1_SSC_ptr->MA_ADC3_IN1_OutBfr[n+1] - ADC3_IN1_SSC_ptr->MA_ADC3_IN1_OutBfr[n];
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	3308      	adds	r3, #8
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	3304      	adds	r3, #4
 8002aec:	ed93 7a00 	vldr	s14, [r3]
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	3308      	adds	r3, #8
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	3304      	adds	r3, #4
 8002afc:	edd3 7a00 	vldr	s15, [r3]
 8002b00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b04:	edc7 7a02 	vstr	s15, [r7, #8]

	if ( SSC_Diff_9 * SSC_Diff_10 > 0 && (fabs (SSC_Diff_9) > Threshold_5 || fabs (SSC_Diff_10) > Threshold_5) )
 8002b08:	ed97 7a03 	vldr	s14, [r7, #12]
 8002b0c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b1c:	dd1d      	ble.n	8002b5a <ADC3_IN1_SSC+0xbe>
 8002b1e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b22:	eef0 7ae7 	vabs.f32	s15, s15
 8002b26:	ed97 7a00 	vldr	s14, [r7]
 8002b2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b32:	d40a      	bmi.n	8002b4a <ADC3_IN1_SSC+0xae>
 8002b34:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b38:	eef0 7ae7 	vabs.f32	s15, s15
 8002b3c:	ed97 7a00 	vldr	s14, [r7]
 8002b40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b48:	d507      	bpl.n	8002b5a <ADC3_IN1_SSC+0xbe>
	{
       SSC_Count_5++;
 8002b4a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002b52:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b56:	edc7 7a05 	vstr	s15, [r7, #20]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	613b      	str	r3, [r7, #16]
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	2bae      	cmp	r3, #174	; 0xae
 8002b64:	d9a6      	bls.n	8002ab4 <ADC3_IN1_SSC+0x18>
	}
  }

  return SSC_Count_5;
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	ee07 3a90 	vmov	s15, r3
}
 8002b6c:	eeb0 0a67 	vmov.f32	s0, s15
 8002b70:	371c      	adds	r7, #28
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <ADC3_IN2_SSC>:


float32_t ADC3_IN2_SSC(ADC3_IN2_MA *ADC3_IN2_SSC_ptr, float32_t Threshold_6)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b087      	sub	sp, #28
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
 8002b82:	ed87 0a00 	vstr	s0, [r7]
  float32_t SSC_Count_6 = 0.0f;
 8002b86:	f04f 0300 	mov.w	r3, #0
 8002b8a:	617b      	str	r3, [r7, #20]

  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	613b      	str	r3, [r7, #16]
 8002b90:	e055      	b.n	8002c3e <ADC3_IN2_SSC+0xc4>
  {
	float32_t SSC_Diff_11 = ADC3_IN2_SSC_ptr->MA_ADC3_IN2_OutBfr[n] - ADC3_IN2_SSC_ptr->MA_ADC3_IN2_OutBfr[n-1];
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	3308      	adds	r3, #8
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4413      	add	r3, r2
 8002b9c:	3304      	adds	r3, #4
 8002b9e:	ed93 7a00 	vldr	s14, [r3]
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	3308      	adds	r3, #8
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	3304      	adds	r3, #4
 8002bb0:	edd3 7a00 	vldr	s15, [r3]
 8002bb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bb8:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t SSC_Diff_12 = ADC3_IN2_SSC_ptr->MA_ADC3_IN2_OutBfr[n+1] - ADC3_IN2_SSC_ptr->MA_ADC3_IN2_OutBfr[n];
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	3308      	adds	r3, #8
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4413      	add	r3, r2
 8002bc8:	3304      	adds	r3, #4
 8002bca:	ed93 7a00 	vldr	s14, [r3]
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	3308      	adds	r3, #8
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4413      	add	r3, r2
 8002bd8:	3304      	adds	r3, #4
 8002bda:	edd3 7a00 	vldr	s15, [r3]
 8002bde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002be2:	edc7 7a02 	vstr	s15, [r7, #8]

	if ( SSC_Diff_11 * SSC_Diff_12 > 0 && (fabs (SSC_Diff_11) > Threshold_6 || fabs (SSC_Diff_12) > Threshold_6) )
 8002be6:	ed97 7a03 	vldr	s14, [r7, #12]
 8002bea:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bf2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bfa:	dd1d      	ble.n	8002c38 <ADC3_IN2_SSC+0xbe>
 8002bfc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c00:	eef0 7ae7 	vabs.f32	s15, s15
 8002c04:	ed97 7a00 	vldr	s14, [r7]
 8002c08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c10:	d40a      	bmi.n	8002c28 <ADC3_IN2_SSC+0xae>
 8002c12:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c16:	eef0 7ae7 	vabs.f32	s15, s15
 8002c1a:	ed97 7a00 	vldr	s14, [r7]
 8002c1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c26:	d507      	bpl.n	8002c38 <ADC3_IN2_SSC+0xbe>
	{
       SSC_Count_6++;
 8002c28:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c30:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c34:	edc7 7a05 	vstr	s15, [r7, #20]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	613b      	str	r3, [r7, #16]
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	2bae      	cmp	r3, #174	; 0xae
 8002c42:	d9a6      	bls.n	8002b92 <ADC3_IN2_SSC+0x18>
	}
  }

  return SSC_Count_6;
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	ee07 3a90 	vmov	s15, r3
}
 8002c4a:	eeb0 0a67 	vmov.f32	s0, s15
 8002c4e:	371c      	adds	r7, #28
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <ADC1_IN1_STFT_Update>:
float32_t FFT_Mag_Res_6[ADC_DMA_SIXTEENTHBUFFERSIZE / 2];


//FUNCTION DEFINITIONS
float32_t* ADC1_IN1_STFT_Update(ADC1_IN1_STFT_par*ADC1_IN1_STFT_par_ptr, ADC1_IN1_MA*ADC1_IN1_STFT_ptr)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b088      	sub	sp, #32
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
	ADC1_IN1_STFT_par_ptr->Sigma_1 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6); // The Gaussian window spans about + or - 3 * Sigma_1 from the mean (center of the window). Setting Sigma_1 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6) ensures that almost all of the window (99.7%) lies within the buffer
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a68      	ldr	r2, [pc, #416]	; (8002e08 <ADC1_IN1_STFT_Update+0x1b0>)
 8002c66:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
	ADC1_IN1_STFT_par_ptr->mu_1 = ((ADC_DMA_SIXTEENTHBUFFERSIZE-1)/(2.0f)); // To ensure symmetry
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a67      	ldr	r2, [pc, #412]	; (8002e0c <ADC1_IN1_STFT_Update+0x1b4>)
 8002c6e:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

    /* Generating the Gaussian window*/
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002c72:	2300      	movs	r3, #0
 8002c74:	61fb      	str	r3, [r7, #28]
 8002c76:	e041      	b.n	8002cfc <ADC1_IN1_STFT_Update+0xa4>
	{
		float32_t exponent_1 = -0.5f*(pow(((n - ADC1_IN1_STFT_par_ptr->mu_1)/ADC1_IN1_STFT_par_ptr->Sigma_1), 2));
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	ee07 3a90 	vmov	s15, r3
 8002c7e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 8002c88:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	edd3 7aaf 	vldr	s15, [r3, #700]	; 0x2bc
 8002c92:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002c96:	ee16 0a90 	vmov	r0, s13
 8002c9a:	f7fd fc21 	bl	80004e0 <__aeabi_f2d>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	ed9f 1b57 	vldr	d1, [pc, #348]	; 8002e00 <ADC1_IN1_STFT_Update+0x1a8>
 8002ca6:	ec43 2b10 	vmov	d0, r2, r3
 8002caa:	f008 fee9 	bl	800ba80 <pow>
 8002cae:	ec51 0b10 	vmov	r0, r1, d0
 8002cb2:	f04f 0200 	mov.w	r2, #0
 8002cb6:	4b56      	ldr	r3, [pc, #344]	; (8002e10 <ADC1_IN1_STFT_Update+0x1b8>)
 8002cb8:	f7fd fc6a 	bl	8000590 <__aeabi_dmul>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	4610      	mov	r0, r2
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	f7fd ff5c 	bl	8000b80 <__aeabi_d2f>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	60bb      	str	r3, [r7, #8]
		ADC1_IN1_STFT_par_ptr->Gaussian_Win_1[n] = exp(exponent_1);
 8002ccc:	68b8      	ldr	r0, [r7, #8]
 8002cce:	f7fd fc07 	bl	80004e0 <__aeabi_f2d>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	ec43 2b10 	vmov	d0, r2, r3
 8002cda:	f008 fe89 	bl	800b9f0 <exp>
 8002cde:	ec53 2b10 	vmov	r2, r3, d0
 8002ce2:	4610      	mov	r0, r2
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	f7fd ff4b 	bl	8000b80 <__aeabi_d2f>
 8002cea:	4601      	mov	r1, r0
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	6019      	str	r1, [r3, #0]
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	61fb      	str	r3, [r7, #28]
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	2bae      	cmp	r3, #174	; 0xae
 8002d00:	d9ba      	bls.n	8002c78 <ADC1_IN1_STFT_Update+0x20>
	}

	/* Windows the moving average output buffer with the Gaussian window */
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 8002d02:	2300      	movs	r3, #0
 8002d04:	61bb      	str	r3, [r7, #24]
 8002d06:	e01a      	b.n	8002d3e <ADC1_IN1_STFT_Update+0xe6>
	{
		ADC1_IN1_STFT_par_ptr->Windowed_STFT_bfr_1[m] = ADC1_IN1_STFT_ptr->MA_ADC1_IN1_OutBfr[m] * ADC1_IN1_STFT_par_ptr->Gaussian_Win_1[m];
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	3308      	adds	r3, #8
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4413      	add	r3, r2
 8002d12:	3304      	adds	r3, #4
 8002d14:	ed93 7a00 	vldr	s14, [r3]
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4413      	add	r3, r2
 8002d20:	edd3 7a00 	vldr	s15, [r3]
 8002d24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	33b0      	adds	r3, #176	; 0xb0
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	3304      	adds	r3, #4
 8002d34:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	61bb      	str	r3, [r7, #24]
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	2bae      	cmp	r3, #174	; 0xae
 8002d42:	d9e1      	bls.n	8002d08 <ADC1_IN1_STFT_Update+0xb0>
	}

	/* Initializes the FFT operation and if the initialization is successful, it computes the FFT from the specified source buffer */
	arm_status FFT_status_1 = arm_rfft_fast_init_f32 (&ADC1_IN1_FFT, ADC_DMA_SIXTEENTHBUFFERSIZE);
 8002d44:	21af      	movs	r1, #175	; 0xaf
 8002d46:	4833      	ldr	r0, [pc, #204]	; (8002e14 <ADC1_IN1_STFT_Update+0x1bc>)
 8002d48:	f007 fad2 	bl	800a2f0 <arm_rfft_fast_init_f32>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	73fb      	strb	r3, [r7, #15]

	if (FFT_status_1 == ARM_MATH_SUCCESS)
 8002d50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d14b      	bne.n	8002df0 <ADC1_IN1_STFT_Update+0x198>
	{
		arm_rfft_fast_f32 (&ADC1_IN1_FFT, ADC1_IN1_STFT_par_ptr->Windowed_STFT_bfr_1 , ADC1_IN1_STFT_par_ptr->ADC1_IN1_FFT_Out_bfr, 0 );
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f503 7131 	add.w	r1, r3, #708	; 0x2c4
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f503 62b0 	add.w	r2, r3, #1408	; 0x580
 8002d64:	2300      	movs	r3, #0
 8002d66:	482b      	ldr	r0, [pc, #172]	; (8002e14 <ADC1_IN1_STFT_Update+0x1bc>)
 8002d68:	f007 fba6 	bl	800a4b8 <arm_rfft_fast_f32>

		uint32_t mag_indx_1 = 0.0f; // Index to fill the frequency magnitude response buffer without skips
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	617b      	str	r3, [r7, #20]

		for (uint32_t p = 0; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 8002d70:	2300      	movs	r3, #0
 8002d72:	613b      	str	r3, [r7, #16]
 8002d74:	e039      	b.n	8002dea <ADC1_IN1_STFT_Update+0x192>
		{
			FFT_Mag_Res_1[mag_indx_1] = sqrtf((ADC1_IN1_STFT_par_ptr->ADC1_IN1_FFT_Out_bfr[p] * ADC1_IN1_STFT_par_ptr->ADC1_IN1_FFT_Out_bfr[p]) + (ADC1_IN1_STFT_par_ptr->ADC1_IN1_FFT_Out_bfr[p+1] * ADC1_IN1_STFT_par_ptr->ADC1_IN1_FFT_Out_bfr[p+1])); // Calculates the magnitude response
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	ed93 7a00 	vldr	s14, [r3]
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	4413      	add	r3, r2
 8002d92:	edd3 7a00 	vldr	s15, [r3]
 8002d96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	4413      	add	r3, r2
 8002da8:	edd3 6a00 	vldr	s13, [r3]
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	3301      	adds	r3, #1
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	edd3 7a00 	vldr	s15, [r3]
 8002dbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dc6:	eeb0 0a67 	vmov.f32	s0, s15
 8002dca:	f008 fef5 	bl	800bbb8 <sqrtf>
 8002dce:	eef0 7a40 	vmov.f32	s15, s0
 8002dd2:	4a11      	ldr	r2, [pc, #68]	; (8002e18 <ADC1_IN1_STFT_Update+0x1c0>)
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	edc3 7a00 	vstr	s15, [r3]

			mag_indx_1++;
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	3301      	adds	r3, #1
 8002de2:	617b      	str	r3, [r7, #20]
		for (uint32_t p = 0; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	3302      	adds	r3, #2
 8002de8:	613b      	str	r3, [r7, #16]
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	2bae      	cmp	r3, #174	; 0xae
 8002dee:	d9c2      	bls.n	8002d76 <ADC1_IN1_STFT_Update+0x11e>
		}
	}

	return FFT_Mag_Res_1;
 8002df0:	4b09      	ldr	r3, [pc, #36]	; (8002e18 <ADC1_IN1_STFT_Update+0x1c0>)
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3720      	adds	r7, #32
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	f3af 8000 	nop.w
 8002e00:	00000000 	.word	0x00000000
 8002e04:	40000000 	.word	0x40000000
 8002e08:	41e80000 	.word	0x41e80000
 8002e0c:	42ae0000 	.word	0x42ae0000
 8002e10:	bfe00000 	.word	0xbfe00000
 8002e14:	20009dbc 	.word	0x20009dbc
 8002e18:	20009e4c 	.word	0x20009e4c
 8002e1c:	00000000 	.word	0x00000000

08002e20 <ADC1_IN2_STFT_Update>:

float32_t* ADC1_IN2_STFT_Update(ADC1_IN2_STFT_par*ADC1_IN2_STFT_par_ptr, ADC1_IN2_MA*ADC1_IN2_STFT_ptr)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b088      	sub	sp, #32
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
	ADC1_IN2_STFT_par_ptr->Sigma_2 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a66      	ldr	r2, [pc, #408]	; (8002fc8 <ADC1_IN2_STFT_Update+0x1a8>)
 8002e2e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
	ADC1_IN2_STFT_par_ptr->mu_2 = ((ADC_DMA_SIXTEENTHBUFFERSIZE-1)/(2.0f));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a65      	ldr	r2, [pc, #404]	; (8002fcc <ADC1_IN2_STFT_Update+0x1ac>)
 8002e36:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	61fb      	str	r3, [r7, #28]
 8002e3e:	e041      	b.n	8002ec4 <ADC1_IN2_STFT_Update+0xa4>
	{
		float32_t exponent_2 = -0.5f*(pow(((n - ADC1_IN2_STFT_par_ptr->mu_2)/ADC1_IN2_STFT_par_ptr->Sigma_2), 2));
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	ee07 3a90 	vmov	s15, r3
 8002e46:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 8002e50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	edd3 7aaf 	vldr	s15, [r3, #700]	; 0x2bc
 8002e5a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002e5e:	ee16 0a90 	vmov	r0, s13
 8002e62:	f7fd fb3d 	bl	80004e0 <__aeabi_f2d>
 8002e66:	4602      	mov	r2, r0
 8002e68:	460b      	mov	r3, r1
 8002e6a:	ed9f 1b55 	vldr	d1, [pc, #340]	; 8002fc0 <ADC1_IN2_STFT_Update+0x1a0>
 8002e6e:	ec43 2b10 	vmov	d0, r2, r3
 8002e72:	f008 fe05 	bl	800ba80 <pow>
 8002e76:	ec51 0b10 	vmov	r0, r1, d0
 8002e7a:	f04f 0200 	mov.w	r2, #0
 8002e7e:	4b54      	ldr	r3, [pc, #336]	; (8002fd0 <ADC1_IN2_STFT_Update+0x1b0>)
 8002e80:	f7fd fb86 	bl	8000590 <__aeabi_dmul>
 8002e84:	4602      	mov	r2, r0
 8002e86:	460b      	mov	r3, r1
 8002e88:	4610      	mov	r0, r2
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	f7fd fe78 	bl	8000b80 <__aeabi_d2f>
 8002e90:	4603      	mov	r3, r0
 8002e92:	60bb      	str	r3, [r7, #8]
		ADC1_IN2_STFT_par_ptr->Gaussian_Win_2[n] = exp(exponent_2);
 8002e94:	68b8      	ldr	r0, [r7, #8]
 8002e96:	f7fd fb23 	bl	80004e0 <__aeabi_f2d>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	ec43 2b10 	vmov	d0, r2, r3
 8002ea2:	f008 fda5 	bl	800b9f0 <exp>
 8002ea6:	ec53 2b10 	vmov	r2, r3, d0
 8002eaa:	4610      	mov	r0, r2
 8002eac:	4619      	mov	r1, r3
 8002eae:	f7fd fe67 	bl	8000b80 <__aeabi_d2f>
 8002eb2:	4601      	mov	r1, r0
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4413      	add	r3, r2
 8002ebc:	6019      	str	r1, [r3, #0]
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	61fb      	str	r3, [r7, #28]
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	2bae      	cmp	r3, #174	; 0xae
 8002ec8:	d9ba      	bls.n	8002e40 <ADC1_IN2_STFT_Update+0x20>
	}

	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61bb      	str	r3, [r7, #24]
 8002ece:	e01a      	b.n	8002f06 <ADC1_IN2_STFT_Update+0xe6>
	{
		ADC1_IN2_STFT_par_ptr->Windowed_STFT_bfr_2[m] = ADC1_IN2_STFT_ptr->MA_ADC1_IN2_OutBfr[m] * ADC1_IN2_STFT_par_ptr->Gaussian_Win_2[m];
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	3308      	adds	r3, #8
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	4413      	add	r3, r2
 8002eda:	3304      	adds	r3, #4
 8002edc:	ed93 7a00 	vldr	s14, [r3]
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	edd3 7a00 	vldr	s15, [r3]
 8002eec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	33b0      	adds	r3, #176	; 0xb0
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	3304      	adds	r3, #4
 8002efc:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	3301      	adds	r3, #1
 8002f04:	61bb      	str	r3, [r7, #24]
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	2bae      	cmp	r3, #174	; 0xae
 8002f0a:	d9e1      	bls.n	8002ed0 <ADC1_IN2_STFT_Update+0xb0>
	}

	/* Initializes the FFT operation and if the initialization is successful, it computes the FFT from the specified source buffer */
	arm_status FFT_status_2 = arm_rfft_fast_init_f32 (&ADC1_IN2_FFT, ADC_DMA_SIXTEENTHBUFFERSIZE);
 8002f0c:	21af      	movs	r1, #175	; 0xaf
 8002f0e:	4831      	ldr	r0, [pc, #196]	; (8002fd4 <ADC1_IN2_STFT_Update+0x1b4>)
 8002f10:	f007 f9ee 	bl	800a2f0 <arm_rfft_fast_init_f32>
 8002f14:	4603      	mov	r3, r0
 8002f16:	73fb      	strb	r3, [r7, #15]

	if (FFT_status_2 == ARM_MATH_SUCCESS)
 8002f18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d149      	bne.n	8002fb4 <ADC1_IN2_STFT_Update+0x194>
	{
		arm_rfft_fast_f32 (&ADC1_IN2_FFT, ADC1_IN2_STFT_par_ptr->Windowed_STFT_bfr_2 , ADC1_IN2_STFT_par_ptr->ADC1_IN2_FFT_Out_bfr, 0 );
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f503 7131 	add.w	r1, r3, #708	; 0x2c4
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f503 62b0 	add.w	r2, r3, #1408	; 0x580
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	4829      	ldr	r0, [pc, #164]	; (8002fd4 <ADC1_IN2_STFT_Update+0x1b4>)
 8002f30:	f007 fac2 	bl	800a4b8 <arm_rfft_fast_f32>

		uint32_t mag_indx_2 = 0.0f;
 8002f34:	2300      	movs	r3, #0
 8002f36:	617b      	str	r3, [r7, #20]

		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 8002f38:	e039      	b.n	8002fae <ADC1_IN2_STFT_Update+0x18e>
		{
			FFT_Mag_Res_2[mag_indx_2] = sqrtf((ADC1_IN2_STFT_par_ptr->ADC1_IN2_FFT_Out_bfr[p] * ADC1_IN2_STFT_par_ptr->ADC1_IN2_FFT_Out_bfr[p]) + (ADC1_IN2_STFT_par_ptr->ADC1_IN2_FFT_Out_bfr[p+1] * ADC1_IN2_STFT_par_ptr->ADC1_IN2_FFT_Out_bfr[p+1]));
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	ed93 7a00 	vldr	s14, [r3]
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	4413      	add	r3, r2
 8002f56:	edd3 7a00 	vldr	s15, [r3]
 8002f5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	3301      	adds	r3, #1
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4413      	add	r3, r2
 8002f6c:	edd3 6a00 	vldr	s13, [r3]
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	3301      	adds	r3, #1
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4413      	add	r3, r2
 8002f7e:	edd3 7a00 	vldr	s15, [r3]
 8002f82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f8a:	eeb0 0a67 	vmov.f32	s0, s15
 8002f8e:	f008 fe13 	bl	800bbb8 <sqrtf>
 8002f92:	eef0 7a40 	vmov.f32	s15, s0
 8002f96:	4a10      	ldr	r2, [pc, #64]	; (8002fd8 <ADC1_IN2_STFT_Update+0x1b8>)
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4413      	add	r3, r2
 8002f9e:	edc3 7a00 	vstr	s15, [r3]

			mag_indx_2++;
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	617b      	str	r3, [r7, #20]
		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	3302      	adds	r3, #2
 8002fac:	613b      	str	r3, [r7, #16]
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	2bae      	cmp	r3, #174	; 0xae
 8002fb2:	d9c2      	bls.n	8002f3a <ADC1_IN2_STFT_Update+0x11a>
		}
	}

	return FFT_Mag_Res_2;
 8002fb4:	4b08      	ldr	r3, [pc, #32]	; (8002fd8 <ADC1_IN2_STFT_Update+0x1b8>)
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3720      	adds	r7, #32
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	00000000 	.word	0x00000000
 8002fc4:	40000000 	.word	0x40000000
 8002fc8:	41e80000 	.word	0x41e80000
 8002fcc:	42ae0000 	.word	0x42ae0000
 8002fd0:	bfe00000 	.word	0xbfe00000
 8002fd4:	20009dd4 	.word	0x20009dd4
 8002fd8:	20009fa8 	.word	0x20009fa8
 8002fdc:	00000000 	.word	0x00000000

08002fe0 <ADC2_IN3_STFT_Update>:

float32_t* ADC2_IN3_STFT_Update(ADC2_IN3_STFT_par*ADC2_IN3_STFT_par_ptr, ADC2_IN3_MA*ADC2_IN3_STFT_ptr)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b088      	sub	sp, #32
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
	ADC2_IN3_STFT_par_ptr->Sigma_3 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6); // The Gaussian window spans about + or - 3 * Sigma_1 from the mean (center of the window). Setting Sigma_1 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6) ensures that almost all of the window (99.7%) lies within the buffer
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a66      	ldr	r2, [pc, #408]	; (8003188 <ADC2_IN3_STFT_Update+0x1a8>)
 8002fee:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
	ADC2_IN3_STFT_par_ptr->mu_3 = ((ADC_DMA_SIXTEENTHBUFFERSIZE-1)/(2.0f));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a65      	ldr	r2, [pc, #404]	; (800318c <ADC2_IN3_STFT_Update+0x1ac>)
 8002ff6:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

    /* Generating the Gaussian window*/
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61fb      	str	r3, [r7, #28]
 8002ffe:	e041      	b.n	8003084 <ADC2_IN3_STFT_Update+0xa4>
	{
		float32_t exponent_3 = -0.5f*(pow(((n - ADC2_IN3_STFT_par_ptr->mu_3)/ADC2_IN3_STFT_par_ptr->Sigma_3), 2));
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	ee07 3a90 	vmov	s15, r3
 8003006:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 8003010:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	edd3 7aaf 	vldr	s15, [r3, #700]	; 0x2bc
 800301a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800301e:	ee16 0a90 	vmov	r0, s13
 8003022:	f7fd fa5d 	bl	80004e0 <__aeabi_f2d>
 8003026:	4602      	mov	r2, r0
 8003028:	460b      	mov	r3, r1
 800302a:	ed9f 1b55 	vldr	d1, [pc, #340]	; 8003180 <ADC2_IN3_STFT_Update+0x1a0>
 800302e:	ec43 2b10 	vmov	d0, r2, r3
 8003032:	f008 fd25 	bl	800ba80 <pow>
 8003036:	ec51 0b10 	vmov	r0, r1, d0
 800303a:	f04f 0200 	mov.w	r2, #0
 800303e:	4b54      	ldr	r3, [pc, #336]	; (8003190 <ADC2_IN3_STFT_Update+0x1b0>)
 8003040:	f7fd faa6 	bl	8000590 <__aeabi_dmul>
 8003044:	4602      	mov	r2, r0
 8003046:	460b      	mov	r3, r1
 8003048:	4610      	mov	r0, r2
 800304a:	4619      	mov	r1, r3
 800304c:	f7fd fd98 	bl	8000b80 <__aeabi_d2f>
 8003050:	4603      	mov	r3, r0
 8003052:	60bb      	str	r3, [r7, #8]
		ADC2_IN3_STFT_par_ptr->Gaussian_Win_3[n] = exp(exponent_3);
 8003054:	68b8      	ldr	r0, [r7, #8]
 8003056:	f7fd fa43 	bl	80004e0 <__aeabi_f2d>
 800305a:	4602      	mov	r2, r0
 800305c:	460b      	mov	r3, r1
 800305e:	ec43 2b10 	vmov	d0, r2, r3
 8003062:	f008 fcc5 	bl	800b9f0 <exp>
 8003066:	ec53 2b10 	vmov	r2, r3, d0
 800306a:	4610      	mov	r0, r2
 800306c:	4619      	mov	r1, r3
 800306e:	f7fd fd87 	bl	8000b80 <__aeabi_d2f>
 8003072:	4601      	mov	r1, r0
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4413      	add	r3, r2
 800307c:	6019      	str	r1, [r3, #0]
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	3301      	adds	r3, #1
 8003082:	61fb      	str	r3, [r7, #28]
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	2bae      	cmp	r3, #174	; 0xae
 8003088:	d9ba      	bls.n	8003000 <ADC2_IN3_STFT_Update+0x20>
	}

	/* Windows the moving average output buffer with the Gaussian window */
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 800308a:	2300      	movs	r3, #0
 800308c:	61bb      	str	r3, [r7, #24]
 800308e:	e01a      	b.n	80030c6 <ADC2_IN3_STFT_Update+0xe6>
	{
		ADC2_IN3_STFT_par_ptr->Windowed_STFT_bfr_3[m] = ADC2_IN3_STFT_ptr->MA_ADC2_IN3_OutBfr[m] * ADC2_IN3_STFT_par_ptr->Gaussian_Win_3[m];
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	3308      	adds	r3, #8
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4413      	add	r3, r2
 800309a:	3304      	adds	r3, #4
 800309c:	ed93 7a00 	vldr	s14, [r3]
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4413      	add	r3, r2
 80030a8:	edd3 7a00 	vldr	s15, [r3]
 80030ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	33b0      	adds	r3, #176	; 0xb0
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4413      	add	r3, r2
 80030ba:	3304      	adds	r3, #4
 80030bc:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	3301      	adds	r3, #1
 80030c4:	61bb      	str	r3, [r7, #24]
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	2bae      	cmp	r3, #174	; 0xae
 80030ca:	d9e1      	bls.n	8003090 <ADC2_IN3_STFT_Update+0xb0>
	}

	arm_status FFT_status_3 = arm_rfft_fast_init_f32 (&ADC2_IN3_FFT, ADC_DMA_SIXTEENTHBUFFERSIZE);
 80030cc:	21af      	movs	r1, #175	; 0xaf
 80030ce:	4831      	ldr	r0, [pc, #196]	; (8003194 <ADC2_IN3_STFT_Update+0x1b4>)
 80030d0:	f007 f90e 	bl	800a2f0 <arm_rfft_fast_init_f32>
 80030d4:	4603      	mov	r3, r0
 80030d6:	73fb      	strb	r3, [r7, #15]

	if (FFT_status_3 == ARM_MATH_SUCCESS)
 80030d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d149      	bne.n	8003174 <ADC2_IN3_STFT_Update+0x194>
	{
		arm_rfft_fast_f32 (&ADC2_IN3_FFT, ADC2_IN3_STFT_par_ptr->Windowed_STFT_bfr_3 , ADC2_IN3_STFT_par_ptr->ADC2_IN3_FFT_Out_bfr, 0 );
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f503 7131 	add.w	r1, r3, #708	; 0x2c4
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f503 62b0 	add.w	r2, r3, #1408	; 0x580
 80030ec:	2300      	movs	r3, #0
 80030ee:	4829      	ldr	r0, [pc, #164]	; (8003194 <ADC2_IN3_STFT_Update+0x1b4>)
 80030f0:	f007 f9e2 	bl	800a4b8 <arm_rfft_fast_f32>

		uint32_t mag_indx_3 = 0.0f;
 80030f4:	2300      	movs	r3, #0
 80030f6:	617b      	str	r3, [r7, #20]

		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 80030f8:	e039      	b.n	800316e <ADC2_IN3_STFT_Update+0x18e>
		{
			FFT_Mag_Res_3[mag_indx_3] = sqrtf((ADC2_IN3_STFT_par_ptr->ADC2_IN3_FFT_Out_bfr[p] * ADC2_IN3_STFT_par_ptr->ADC2_IN3_FFT_Out_bfr[p]) + (ADC2_IN3_STFT_par_ptr->ADC2_IN3_FFT_Out_bfr[p+1] * ADC2_IN3_STFT_par_ptr->ADC2_IN3_FFT_Out_bfr[p+1]));
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	ed93 7a00 	vldr	s14, [r3]
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	edd3 7a00 	vldr	s15, [r3]
 800311a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	3301      	adds	r3, #1
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	4413      	add	r3, r2
 800312c:	edd3 6a00 	vldr	s13, [r3]
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	3301      	adds	r3, #1
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	edd3 7a00 	vldr	s15, [r3]
 8003142:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003146:	ee77 7a27 	vadd.f32	s15, s14, s15
 800314a:	eeb0 0a67 	vmov.f32	s0, s15
 800314e:	f008 fd33 	bl	800bbb8 <sqrtf>
 8003152:	eef0 7a40 	vmov.f32	s15, s0
 8003156:	4a10      	ldr	r2, [pc, #64]	; (8003198 <ADC2_IN3_STFT_Update+0x1b8>)
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	edc3 7a00 	vstr	s15, [r3]

			mag_indx_3++;
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	3301      	adds	r3, #1
 8003166:	617b      	str	r3, [r7, #20]
		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	3302      	adds	r3, #2
 800316c:	613b      	str	r3, [r7, #16]
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	2bae      	cmp	r3, #174	; 0xae
 8003172:	d9c2      	bls.n	80030fa <ADC2_IN3_STFT_Update+0x11a>
		}
	}

	return FFT_Mag_Res_3;
 8003174:	4b08      	ldr	r3, [pc, #32]	; (8003198 <ADC2_IN3_STFT_Update+0x1b8>)
}
 8003176:	4618      	mov	r0, r3
 8003178:	3720      	adds	r7, #32
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	00000000 	.word	0x00000000
 8003184:	40000000 	.word	0x40000000
 8003188:	41e80000 	.word	0x41e80000
 800318c:	42ae0000 	.word	0x42ae0000
 8003190:	bfe00000 	.word	0xbfe00000
 8003194:	20009dec 	.word	0x20009dec
 8003198:	2000a104 	.word	0x2000a104
 800319c:	00000000 	.word	0x00000000

080031a0 <ADC2_IN4_STFT_Update>:

float32_t* ADC2_IN4_STFT_Update(ADC2_IN4_STFT_par*ADC2_IN4_STFT_par_ptr, ADC2_IN4_MA*ADC2_IN4_STFT_ptr)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b088      	sub	sp, #32
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
	ADC2_IN4_STFT_par_ptr->Sigma_4 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6); // The Gaussian window spans about + or - 3 * Sigma_1 from the mean (center of the window). Setting Sigma_1 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6) ensures that almost all of the window (99.7%) lies within the buffer
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a66      	ldr	r2, [pc, #408]	; (8003348 <ADC2_IN4_STFT_Update+0x1a8>)
 80031ae:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
	ADC2_IN4_STFT_par_ptr->mu_4 = ((ADC_DMA_SIXTEENTHBUFFERSIZE-1)/(2.0f));
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a65      	ldr	r2, [pc, #404]	; (800334c <ADC2_IN4_STFT_Update+0x1ac>)
 80031b6:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 80031ba:	2300      	movs	r3, #0
 80031bc:	61fb      	str	r3, [r7, #28]
 80031be:	e041      	b.n	8003244 <ADC2_IN4_STFT_Update+0xa4>
	{
		float32_t exponent_4 = -0.5f*(pow(((n - ADC2_IN4_STFT_par_ptr->mu_4)/ADC2_IN4_STFT_par_ptr->Sigma_4), 2));
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	ee07 3a90 	vmov	s15, r3
 80031c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 80031d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	edd3 7aaf 	vldr	s15, [r3, #700]	; 0x2bc
 80031da:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80031de:	ee16 0a90 	vmov	r0, s13
 80031e2:	f7fd f97d 	bl	80004e0 <__aeabi_f2d>
 80031e6:	4602      	mov	r2, r0
 80031e8:	460b      	mov	r3, r1
 80031ea:	ed9f 1b55 	vldr	d1, [pc, #340]	; 8003340 <ADC2_IN4_STFT_Update+0x1a0>
 80031ee:	ec43 2b10 	vmov	d0, r2, r3
 80031f2:	f008 fc45 	bl	800ba80 <pow>
 80031f6:	ec51 0b10 	vmov	r0, r1, d0
 80031fa:	f04f 0200 	mov.w	r2, #0
 80031fe:	4b54      	ldr	r3, [pc, #336]	; (8003350 <ADC2_IN4_STFT_Update+0x1b0>)
 8003200:	f7fd f9c6 	bl	8000590 <__aeabi_dmul>
 8003204:	4602      	mov	r2, r0
 8003206:	460b      	mov	r3, r1
 8003208:	4610      	mov	r0, r2
 800320a:	4619      	mov	r1, r3
 800320c:	f7fd fcb8 	bl	8000b80 <__aeabi_d2f>
 8003210:	4603      	mov	r3, r0
 8003212:	60bb      	str	r3, [r7, #8]
		ADC2_IN4_STFT_par_ptr->Gaussian_Win_4[n] = exp(exponent_4);
 8003214:	68b8      	ldr	r0, [r7, #8]
 8003216:	f7fd f963 	bl	80004e0 <__aeabi_f2d>
 800321a:	4602      	mov	r2, r0
 800321c:	460b      	mov	r3, r1
 800321e:	ec43 2b10 	vmov	d0, r2, r3
 8003222:	f008 fbe5 	bl	800b9f0 <exp>
 8003226:	ec53 2b10 	vmov	r2, r3, d0
 800322a:	4610      	mov	r0, r2
 800322c:	4619      	mov	r1, r3
 800322e:	f7fd fca7 	bl	8000b80 <__aeabi_d2f>
 8003232:	4601      	mov	r1, r0
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4413      	add	r3, r2
 800323c:	6019      	str	r1, [r3, #0]
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	3301      	adds	r3, #1
 8003242:	61fb      	str	r3, [r7, #28]
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	2bae      	cmp	r3, #174	; 0xae
 8003248:	d9ba      	bls.n	80031c0 <ADC2_IN4_STFT_Update+0x20>
	}

	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 800324a:	2300      	movs	r3, #0
 800324c:	61bb      	str	r3, [r7, #24]
 800324e:	e01a      	b.n	8003286 <ADC2_IN4_STFT_Update+0xe6>
	{
		ADC2_IN4_STFT_par_ptr->Windowed_STFT_bfr_4[m] = ADC2_IN4_STFT_ptr->MA_ADC2_IN4_OutBfr[m] * ADC2_IN4_STFT_par_ptr->Gaussian_Win_4[m];
 8003250:	683a      	ldr	r2, [r7, #0]
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	3308      	adds	r3, #8
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	3304      	adds	r3, #4
 800325c:	ed93 7a00 	vldr	s14, [r3]
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	edd3 7a00 	vldr	s15, [r3]
 800326c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	33b0      	adds	r3, #176	; 0xb0
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	3304      	adds	r3, #4
 800327c:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	3301      	adds	r3, #1
 8003284:	61bb      	str	r3, [r7, #24]
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	2bae      	cmp	r3, #174	; 0xae
 800328a:	d9e1      	bls.n	8003250 <ADC2_IN4_STFT_Update+0xb0>
	}

	arm_status FFT_status_4 = arm_rfft_fast_init_f32 (&ADC2_IN4_FFT, ADC_DMA_SIXTEENTHBUFFERSIZE);
 800328c:	21af      	movs	r1, #175	; 0xaf
 800328e:	4831      	ldr	r0, [pc, #196]	; (8003354 <ADC2_IN4_STFT_Update+0x1b4>)
 8003290:	f007 f82e 	bl	800a2f0 <arm_rfft_fast_init_f32>
 8003294:	4603      	mov	r3, r0
 8003296:	73fb      	strb	r3, [r7, #15]

	if (FFT_status_4 == ARM_MATH_SUCCESS)
 8003298:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d149      	bne.n	8003334 <ADC2_IN4_STFT_Update+0x194>
	{
		arm_rfft_fast_f32 (&ADC2_IN4_FFT, ADC2_IN4_STFT_par_ptr->Windowed_STFT_bfr_4 , ADC2_IN4_STFT_par_ptr->ADC2_IN4_FFT_Out_bfr, 0 );
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f503 7131 	add.w	r1, r3, #708	; 0x2c4
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f503 62b0 	add.w	r2, r3, #1408	; 0x580
 80032ac:	2300      	movs	r3, #0
 80032ae:	4829      	ldr	r0, [pc, #164]	; (8003354 <ADC2_IN4_STFT_Update+0x1b4>)
 80032b0:	f007 f902 	bl	800a4b8 <arm_rfft_fast_f32>

		uint32_t mag_indx_4 = 0.0f;
 80032b4:	2300      	movs	r3, #0
 80032b6:	617b      	str	r3, [r7, #20]

		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 80032b8:	e039      	b.n	800332e <ADC2_IN4_STFT_Update+0x18e>
		{
			FFT_Mag_Res_3[mag_indx_4] = sqrtf((ADC2_IN4_STFT_par_ptr->ADC2_IN4_FFT_Out_bfr[p] * ADC2_IN4_STFT_par_ptr->ADC2_IN4_FFT_Out_bfr[p]) + (ADC2_IN4_STFT_par_ptr->ADC2_IN4_FFT_Out_bfr[p+1] * ADC2_IN4_STFT_par_ptr->ADC2_IN4_FFT_Out_bfr[p+1]));
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	ed93 7a00 	vldr	s14, [r3]
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	edd3 7a00 	vldr	s15, [r3]
 80032da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	3301      	adds	r3, #1
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	4413      	add	r3, r2
 80032ec:	edd3 6a00 	vldr	s13, [r3]
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	3301      	adds	r3, #1
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4413      	add	r3, r2
 80032fe:	edd3 7a00 	vldr	s15, [r3]
 8003302:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003306:	ee77 7a27 	vadd.f32	s15, s14, s15
 800330a:	eeb0 0a67 	vmov.f32	s0, s15
 800330e:	f008 fc53 	bl	800bbb8 <sqrtf>
 8003312:	eef0 7a40 	vmov.f32	s15, s0
 8003316:	4a10      	ldr	r2, [pc, #64]	; (8003358 <ADC2_IN4_STFT_Update+0x1b8>)
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4413      	add	r3, r2
 800331e:	edc3 7a00 	vstr	s15, [r3]

			mag_indx_4++;
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	3301      	adds	r3, #1
 8003326:	617b      	str	r3, [r7, #20]
		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	3302      	adds	r3, #2
 800332c:	613b      	str	r3, [r7, #16]
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	2bae      	cmp	r3, #174	; 0xae
 8003332:	d9c2      	bls.n	80032ba <ADC2_IN4_STFT_Update+0x11a>
		}
	}

	return FFT_Mag_Res_4;
 8003334:	4b09      	ldr	r3, [pc, #36]	; (800335c <ADC2_IN4_STFT_Update+0x1bc>)
}
 8003336:	4618      	mov	r0, r3
 8003338:	3720      	adds	r7, #32
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	00000000 	.word	0x00000000
 8003344:	40000000 	.word	0x40000000
 8003348:	41e80000 	.word	0x41e80000
 800334c:	42ae0000 	.word	0x42ae0000
 8003350:	bfe00000 	.word	0xbfe00000
 8003354:	20009e04 	.word	0x20009e04
 8003358:	2000a104 	.word	0x2000a104
 800335c:	2000a260 	.word	0x2000a260

08003360 <ADC3_IN1_STFT_Update>:

float32_t* ADC3_IN1_STFT_Update(ADC3_IN1_STFT_par*ADC3_IN1_STFT_par_ptr, ADC3_IN1_MA*ADC3_IN1_STFT_ptr)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b088      	sub	sp, #32
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
	ADC3_IN1_STFT_par_ptr->Sigma_5 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6); // The Gaussian window spans about + or - 3 * Sigma_1 from the mean (center of the window). Setting Sigma_1 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6) ensures that almost all of the window (99.7%) lies within the buffer
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a66      	ldr	r2, [pc, #408]	; (8003508 <ADC3_IN1_STFT_Update+0x1a8>)
 800336e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
	ADC3_IN1_STFT_par_ptr->mu_5 = ((ADC_DMA_SIXTEENTHBUFFERSIZE-1)/(2.0f));
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a65      	ldr	r2, [pc, #404]	; (800350c <ADC3_IN1_STFT_Update+0x1ac>)
 8003376:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

    /* Generating the Gaussian window*/
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 800337a:	2300      	movs	r3, #0
 800337c:	61fb      	str	r3, [r7, #28]
 800337e:	e041      	b.n	8003404 <ADC3_IN1_STFT_Update+0xa4>
	{
		float32_t exponent_5 = -0.5f*(pow(((n - ADC3_IN1_STFT_par_ptr->mu_5)/ADC3_IN1_STFT_par_ptr->Sigma_5), 2));
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	ee07 3a90 	vmov	s15, r3
 8003386:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 8003390:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	edd3 7aaf 	vldr	s15, [r3, #700]	; 0x2bc
 800339a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800339e:	ee16 0a90 	vmov	r0, s13
 80033a2:	f7fd f89d 	bl	80004e0 <__aeabi_f2d>
 80033a6:	4602      	mov	r2, r0
 80033a8:	460b      	mov	r3, r1
 80033aa:	ed9f 1b55 	vldr	d1, [pc, #340]	; 8003500 <ADC3_IN1_STFT_Update+0x1a0>
 80033ae:	ec43 2b10 	vmov	d0, r2, r3
 80033b2:	f008 fb65 	bl	800ba80 <pow>
 80033b6:	ec51 0b10 	vmov	r0, r1, d0
 80033ba:	f04f 0200 	mov.w	r2, #0
 80033be:	4b54      	ldr	r3, [pc, #336]	; (8003510 <ADC3_IN1_STFT_Update+0x1b0>)
 80033c0:	f7fd f8e6 	bl	8000590 <__aeabi_dmul>
 80033c4:	4602      	mov	r2, r0
 80033c6:	460b      	mov	r3, r1
 80033c8:	4610      	mov	r0, r2
 80033ca:	4619      	mov	r1, r3
 80033cc:	f7fd fbd8 	bl	8000b80 <__aeabi_d2f>
 80033d0:	4603      	mov	r3, r0
 80033d2:	60bb      	str	r3, [r7, #8]
		ADC3_IN1_STFT_par_ptr->Gaussian_Win_5[n] = exp(exponent_5);
 80033d4:	68b8      	ldr	r0, [r7, #8]
 80033d6:	f7fd f883 	bl	80004e0 <__aeabi_f2d>
 80033da:	4602      	mov	r2, r0
 80033dc:	460b      	mov	r3, r1
 80033de:	ec43 2b10 	vmov	d0, r2, r3
 80033e2:	f008 fb05 	bl	800b9f0 <exp>
 80033e6:	ec53 2b10 	vmov	r2, r3, d0
 80033ea:	4610      	mov	r0, r2
 80033ec:	4619      	mov	r1, r3
 80033ee:	f7fd fbc7 	bl	8000b80 <__aeabi_d2f>
 80033f2:	4601      	mov	r1, r0
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4413      	add	r3, r2
 80033fc:	6019      	str	r1, [r3, #0]
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	3301      	adds	r3, #1
 8003402:	61fb      	str	r3, [r7, #28]
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	2bae      	cmp	r3, #174	; 0xae
 8003408:	d9ba      	bls.n	8003380 <ADC3_IN1_STFT_Update+0x20>
	}

	/* Windows the moving average output buffer with the Gaussian window */
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 800340a:	2300      	movs	r3, #0
 800340c:	61bb      	str	r3, [r7, #24]
 800340e:	e01a      	b.n	8003446 <ADC3_IN1_STFT_Update+0xe6>
	{
		ADC3_IN1_STFT_par_ptr->Windowed_STFT_bfr_5[m] = ADC3_IN1_STFT_ptr->MA_ADC3_IN1_OutBfr[m] * ADC3_IN1_STFT_par_ptr->Gaussian_Win_5[m];
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	3308      	adds	r3, #8
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	3304      	adds	r3, #4
 800341c:	ed93 7a00 	vldr	s14, [r3]
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4413      	add	r3, r2
 8003428:	edd3 7a00 	vldr	s15, [r3]
 800342c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	33b0      	adds	r3, #176	; 0xb0
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4413      	add	r3, r2
 800343a:	3304      	adds	r3, #4
 800343c:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	3301      	adds	r3, #1
 8003444:	61bb      	str	r3, [r7, #24]
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	2bae      	cmp	r3, #174	; 0xae
 800344a:	d9e1      	bls.n	8003410 <ADC3_IN1_STFT_Update+0xb0>
	}

	/* Initializes the FFT operation and if the initialization is successful, it computes the FFT from the specified source buffer */
	arm_status FFT_status_5 = arm_rfft_fast_init_f32 (&ADC3_IN1_FFT, ADC_DMA_SIXTEENTHBUFFERSIZE);
 800344c:	21af      	movs	r1, #175	; 0xaf
 800344e:	4831      	ldr	r0, [pc, #196]	; (8003514 <ADC3_IN1_STFT_Update+0x1b4>)
 8003450:	f006 ff4e 	bl	800a2f0 <arm_rfft_fast_init_f32>
 8003454:	4603      	mov	r3, r0
 8003456:	73fb      	strb	r3, [r7, #15]

	if (FFT_status_5 == ARM_MATH_SUCCESS)
 8003458:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d149      	bne.n	80034f4 <ADC3_IN1_STFT_Update+0x194>
	{
		arm_rfft_fast_f32 (&ADC3_IN1_FFT, ADC3_IN1_STFT_par_ptr->Windowed_STFT_bfr_5 , ADC3_IN1_STFT_par_ptr->ADC3_IN1_FFT_Out_bfr, 0 );
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f503 7131 	add.w	r1, r3, #708	; 0x2c4
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f503 62b0 	add.w	r2, r3, #1408	; 0x580
 800346c:	2300      	movs	r3, #0
 800346e:	4829      	ldr	r0, [pc, #164]	; (8003514 <ADC3_IN1_STFT_Update+0x1b4>)
 8003470:	f007 f822 	bl	800a4b8 <arm_rfft_fast_f32>

		uint32_t mag_indx_5 = 0.0f;
 8003474:	2300      	movs	r3, #0
 8003476:	617b      	str	r3, [r7, #20]

		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 8003478:	e039      	b.n	80034ee <ADC3_IN1_STFT_Update+0x18e>
		{
			FFT_Mag_Res_3[mag_indx_5] = sqrtf((ADC3_IN1_STFT_par_ptr->ADC3_IN1_FFT_Out_bfr[p] * ADC3_IN1_STFT_par_ptr->ADC3_IN1_FFT_Out_bfr[p]) + (ADC3_IN1_STFT_par_ptr->ADC3_IN1_FFT_Out_bfr[p+1] * ADC3_IN1_STFT_par_ptr->ADC3_IN1_FFT_Out_bfr[p+1]));
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	ed93 7a00 	vldr	s14, [r3]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4413      	add	r3, r2
 8003496:	edd3 7a00 	vldr	s15, [r3]
 800349a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	3301      	adds	r3, #1
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	edd3 6a00 	vldr	s13, [r3]
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	3301      	adds	r3, #1
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	edd3 7a00 	vldr	s15, [r3]
 80034c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034ca:	eeb0 0a67 	vmov.f32	s0, s15
 80034ce:	f008 fb73 	bl	800bbb8 <sqrtf>
 80034d2:	eef0 7a40 	vmov.f32	s15, s0
 80034d6:	4a10      	ldr	r2, [pc, #64]	; (8003518 <ADC3_IN1_STFT_Update+0x1b8>)
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4413      	add	r3, r2
 80034de:	edc3 7a00 	vstr	s15, [r3]

			mag_indx_5++;
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	3301      	adds	r3, #1
 80034e6:	617b      	str	r3, [r7, #20]
		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	3302      	adds	r3, #2
 80034ec:	613b      	str	r3, [r7, #16]
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	2bae      	cmp	r3, #174	; 0xae
 80034f2:	d9c2      	bls.n	800347a <ADC3_IN1_STFT_Update+0x11a>
		}
	}

	return FFT_Mag_Res_5;
 80034f4:	4b09      	ldr	r3, [pc, #36]	; (800351c <ADC3_IN1_STFT_Update+0x1bc>)
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3720      	adds	r7, #32
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	00000000 	.word	0x00000000
 8003504:	40000000 	.word	0x40000000
 8003508:	41e80000 	.word	0x41e80000
 800350c:	42ae0000 	.word	0x42ae0000
 8003510:	bfe00000 	.word	0xbfe00000
 8003514:	20009e1c 	.word	0x20009e1c
 8003518:	2000a104 	.word	0x2000a104
 800351c:	2000a3bc 	.word	0x2000a3bc

08003520 <ADC3_IN2_STFT_Update>:

float32_t* ADC3_IN2_STFT_Update(ADC3_IN2_STFT_par*ADC3_IN2_STFT_par_ptr, ADC3_IN2_MA*ADC3_IN2_STFT_ptr)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b088      	sub	sp, #32
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
	ADC3_IN2_STFT_par_ptr->Sigma_6 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6); // The Gaussian window spans about + or - 3 * Sigma_1 from the mean (center of the window). Setting Sigma_1 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6) ensures that almost all of the window (99.7%) lies within the buffer
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a66      	ldr	r2, [pc, #408]	; (80036c8 <ADC3_IN2_STFT_Update+0x1a8>)
 800352e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
	ADC3_IN2_STFT_par_ptr->mu_6 = ((ADC_DMA_SIXTEENTHBUFFERSIZE-1)/(2.0f));
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a65      	ldr	r2, [pc, #404]	; (80036cc <ADC3_IN2_STFT_Update+0x1ac>)
 8003536:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

    /* Generating the Gaussian window*/
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 800353a:	2300      	movs	r3, #0
 800353c:	61fb      	str	r3, [r7, #28]
 800353e:	e041      	b.n	80035c4 <ADC3_IN2_STFT_Update+0xa4>
	{
		float32_t exponent_6 = -0.5f*(pow(((n - ADC3_IN2_STFT_par_ptr->mu_6)/ADC3_IN2_STFT_par_ptr->Sigma_6), 2));
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	ee07 3a90 	vmov	s15, r3
 8003546:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 8003550:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	edd3 7aaf 	vldr	s15, [r3, #700]	; 0x2bc
 800355a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800355e:	ee16 0a90 	vmov	r0, s13
 8003562:	f7fc ffbd 	bl	80004e0 <__aeabi_f2d>
 8003566:	4602      	mov	r2, r0
 8003568:	460b      	mov	r3, r1
 800356a:	ed9f 1b55 	vldr	d1, [pc, #340]	; 80036c0 <ADC3_IN2_STFT_Update+0x1a0>
 800356e:	ec43 2b10 	vmov	d0, r2, r3
 8003572:	f008 fa85 	bl	800ba80 <pow>
 8003576:	ec51 0b10 	vmov	r0, r1, d0
 800357a:	f04f 0200 	mov.w	r2, #0
 800357e:	4b54      	ldr	r3, [pc, #336]	; (80036d0 <ADC3_IN2_STFT_Update+0x1b0>)
 8003580:	f7fd f806 	bl	8000590 <__aeabi_dmul>
 8003584:	4602      	mov	r2, r0
 8003586:	460b      	mov	r3, r1
 8003588:	4610      	mov	r0, r2
 800358a:	4619      	mov	r1, r3
 800358c:	f7fd faf8 	bl	8000b80 <__aeabi_d2f>
 8003590:	4603      	mov	r3, r0
 8003592:	60bb      	str	r3, [r7, #8]
		ADC3_IN2_STFT_par_ptr->Gaussian_Win_6[n] = exp(exponent_6);
 8003594:	68b8      	ldr	r0, [r7, #8]
 8003596:	f7fc ffa3 	bl	80004e0 <__aeabi_f2d>
 800359a:	4602      	mov	r2, r0
 800359c:	460b      	mov	r3, r1
 800359e:	ec43 2b10 	vmov	d0, r2, r3
 80035a2:	f008 fa25 	bl	800b9f0 <exp>
 80035a6:	ec53 2b10 	vmov	r2, r3, d0
 80035aa:	4610      	mov	r0, r2
 80035ac:	4619      	mov	r1, r3
 80035ae:	f7fd fae7 	bl	8000b80 <__aeabi_d2f>
 80035b2:	4601      	mov	r1, r0
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4413      	add	r3, r2
 80035bc:	6019      	str	r1, [r3, #0]
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	3301      	adds	r3, #1
 80035c2:	61fb      	str	r3, [r7, #28]
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	2bae      	cmp	r3, #174	; 0xae
 80035c8:	d9ba      	bls.n	8003540 <ADC3_IN2_STFT_Update+0x20>
	}

	/* Windows the moving average output buffer with the Gaussian window */
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 80035ca:	2300      	movs	r3, #0
 80035cc:	61bb      	str	r3, [r7, #24]
 80035ce:	e01a      	b.n	8003606 <ADC3_IN2_STFT_Update+0xe6>
	{
		ADC3_IN2_STFT_par_ptr->Windowed_STFT_bfr_6[m] = ADC3_IN2_STFT_ptr->MA_ADC3_IN2_OutBfr[m] * ADC3_IN2_STFT_par_ptr->Gaussian_Win_6[m];
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	3308      	adds	r3, #8
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	3304      	adds	r3, #4
 80035dc:	ed93 7a00 	vldr	s14, [r3]
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4413      	add	r3, r2
 80035e8:	edd3 7a00 	vldr	s15, [r3]
 80035ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	33b0      	adds	r3, #176	; 0xb0
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	4413      	add	r3, r2
 80035fa:	3304      	adds	r3, #4
 80035fc:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	3301      	adds	r3, #1
 8003604:	61bb      	str	r3, [r7, #24]
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	2bae      	cmp	r3, #174	; 0xae
 800360a:	d9e1      	bls.n	80035d0 <ADC3_IN2_STFT_Update+0xb0>
	}

	/* Initializes the FFT operation and if the initialization is successful, it computes the FFT from the specified source buffer */
	arm_status FFT_status_6 = arm_rfft_fast_init_f32 (&ADC3_IN2_FFT, ADC_DMA_SIXTEENTHBUFFERSIZE);
 800360c:	21af      	movs	r1, #175	; 0xaf
 800360e:	4831      	ldr	r0, [pc, #196]	; (80036d4 <ADC3_IN2_STFT_Update+0x1b4>)
 8003610:	f006 fe6e 	bl	800a2f0 <arm_rfft_fast_init_f32>
 8003614:	4603      	mov	r3, r0
 8003616:	73fb      	strb	r3, [r7, #15]

	if (FFT_status_6 == ARM_MATH_SUCCESS)
 8003618:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d149      	bne.n	80036b4 <ADC3_IN2_STFT_Update+0x194>
	{
		arm_rfft_fast_f32 (&ADC3_IN2_FFT, ADC3_IN2_STFT_par_ptr->Windowed_STFT_bfr_6 , ADC3_IN2_STFT_par_ptr->ADC3_IN2_FFT_Out_bfr, 0 );
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f503 7131 	add.w	r1, r3, #708	; 0x2c4
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f503 62b0 	add.w	r2, r3, #1408	; 0x580
 800362c:	2300      	movs	r3, #0
 800362e:	4829      	ldr	r0, [pc, #164]	; (80036d4 <ADC3_IN2_STFT_Update+0x1b4>)
 8003630:	f006 ff42 	bl	800a4b8 <arm_rfft_fast_f32>

		uint32_t mag_indx_6 = 0.0f;
 8003634:	2300      	movs	r3, #0
 8003636:	617b      	str	r3, [r7, #20]

		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 8003638:	e039      	b.n	80036ae <ADC3_IN2_STFT_Update+0x18e>
		{
			FFT_Mag_Res_3[mag_indx_6] = sqrtf((ADC3_IN2_STFT_par_ptr->ADC3_IN2_FFT_Out_bfr[p] * ADC3_IN2_STFT_par_ptr->ADC3_IN2_FFT_Out_bfr[p]) + (ADC3_IN2_STFT_par_ptr->ADC3_IN2_FFT_Out_bfr[p+1] * ADC3_IN2_STFT_par_ptr->ADC3_IN2_FFT_Out_bfr[p+1]));
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4413      	add	r3, r2
 8003646:	ed93 7a00 	vldr	s14, [r3]
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	4413      	add	r3, r2
 8003656:	edd3 7a00 	vldr	s15, [r3]
 800365a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	3301      	adds	r3, #1
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	4413      	add	r3, r2
 800366c:	edd3 6a00 	vldr	s13, [r3]
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	3301      	adds	r3, #1
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4413      	add	r3, r2
 800367e:	edd3 7a00 	vldr	s15, [r3]
 8003682:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003686:	ee77 7a27 	vadd.f32	s15, s14, s15
 800368a:	eeb0 0a67 	vmov.f32	s0, s15
 800368e:	f008 fa93 	bl	800bbb8 <sqrtf>
 8003692:	eef0 7a40 	vmov.f32	s15, s0
 8003696:	4a10      	ldr	r2, [pc, #64]	; (80036d8 <ADC3_IN2_STFT_Update+0x1b8>)
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	edc3 7a00 	vstr	s15, [r3]

			mag_indx_6++;
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	3301      	adds	r3, #1
 80036a6:	617b      	str	r3, [r7, #20]
		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	3302      	adds	r3, #2
 80036ac:	613b      	str	r3, [r7, #16]
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	2bae      	cmp	r3, #174	; 0xae
 80036b2:	d9c2      	bls.n	800363a <ADC3_IN2_STFT_Update+0x11a>
		}
	}

	return FFT_Mag_Res_6;
 80036b4:	4b09      	ldr	r3, [pc, #36]	; (80036dc <ADC3_IN2_STFT_Update+0x1bc>)
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3720      	adds	r7, #32
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	00000000 	.word	0x00000000
 80036c4:	40000000 	.word	0x40000000
 80036c8:	41e80000 	.word	0x41e80000
 80036cc:	42ae0000 	.word	0x42ae0000
 80036d0:	bfe00000 	.word	0xbfe00000
 80036d4:	20009e34 	.word	0x20009e34
 80036d8:	2000a104 	.word	0x2000a104
 80036dc:	2000a518 	.word	0x2000a518

080036e0 <ADC1_IN1_TKEO>:
float32_t ADC3_IN2_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE];


//FUNCTION DEFINITIONS
uint8_t ADC1_IN1_TKEO(ADC1_IN1_MA *ADC1_IN1_TKEO_ptr, float32_t StnDev_BL_1)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b08c      	sub	sp, #48	; 0x30
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	ed87 0a00 	vstr	s0, [r7]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 80036ec:	2301      	movs	r3, #1
 80036ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036f0:	e030      	b.n	8003754 <ADC1_IN1_TKEO+0x74>
  {
	  ADC1_IN1_Tkeo_bfr[n]= (ADC1_IN1_TKEO_ptr->MA_ADC1_IN1_OutBfr[n] * ADC1_IN1_TKEO_ptr->MA_ADC1_IN1_OutBfr[n]) - (ADC1_IN1_TKEO_ptr->MA_ADC1_IN1_OutBfr[n-1] * ADC1_IN1_TKEO_ptr->MA_ADC1_IN1_OutBfr[n+1]);
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f6:	3308      	adds	r3, #8
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	3304      	adds	r3, #4
 80036fe:	ed93 7a00 	vldr	s14, [r3]
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003706:	3308      	adds	r3, #8
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	4413      	add	r3, r2
 800370c:	3304      	adds	r3, #4
 800370e:	edd3 7a00 	vldr	s15, [r3]
 8003712:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003718:	3b01      	subs	r3, #1
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	3308      	adds	r3, #8
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	4413      	add	r3, r2
 8003722:	3304      	adds	r3, #4
 8003724:	edd3 6a00 	vldr	s13, [r3]
 8003728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800372a:	3301      	adds	r3, #1
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	3308      	adds	r3, #8
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4413      	add	r3, r2
 8003734:	3304      	adds	r3, #4
 8003736:	edd3 7a00 	vldr	s15, [r3]
 800373a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800373e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003742:	4a47      	ldr	r2, [pc, #284]	; (8003860 <ADC1_IN1_TKEO+0x180>)
 8003744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4413      	add	r3, r2
 800374a:	edc3 7a00 	vstr	s15, [r3]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 800374e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003750:	3301      	adds	r3, #1
 8003752:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003756:	2bad      	cmp	r3, #173	; 0xad
 8003758:	d9cb      	bls.n	80036f2 <ADC1_IN1_TKEO+0x12>
  }

  /* Handling boundary conditions */
  ADC1_IN1_Tkeo_bfr[0] = 0.0f;
 800375a:	4b41      	ldr	r3, [pc, #260]	; (8003860 <ADC1_IN1_TKEO+0x180>)
 800375c:	f04f 0200 	mov.w	r2, #0
 8003760:	601a      	str	r2, [r3, #0]
  ADC1_IN1_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE-1] = 0.0f;
 8003762:	4b3f      	ldr	r3, [pc, #252]	; (8003860 <ADC1_IN1_TKEO+0x180>)
 8003764:	f04f 0200 	mov.w	r2, #0
 8003768:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8


  float32_t Tkeo_Sum_1 = 0.0f; // Initialize the sum to zero
 800376c:	f04f 0300 	mov.w	r3, #0
 8003770:	62bb      	str	r3, [r7, #40]	; 0x28
  float32_t Tkeo_mean_1 =0.0f; // Initialize the mean to zero
 8003772:	f04f 0300 	mov.w	r3, #0
 8003776:	61bb      	str	r3, [r7, #24]
  float32_t Tkeo_Variance_1 = 0.0f; // Initialize variance to zero
 8003778:	f04f 0300 	mov.w	r3, #0
 800377c:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t Tkeo_SD_1 = 0.0f; //Initialize standard deviation to zero
 800377e:	f04f 0300 	mov.w	r3, #0
 8003782:	617b      	str	r3, [r7, #20]

  uint8_t Tkeo_flag_1 = 0;
 8003784:	2300      	movs	r3, #0
 8003786:	74fb      	strb	r3, [r7, #19]

  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003788:	2300      	movs	r3, #0
 800378a:	623b      	str	r3, [r7, #32]
 800378c:	e00e      	b.n	80037ac <ADC1_IN1_TKEO+0xcc>
  {
	Tkeo_Sum_1 += ADC1_IN1_Tkeo_bfr[h];  // Accumulate the sum of all values in the buffer
 800378e:	4a34      	ldr	r2, [pc, #208]	; (8003860 <ADC1_IN1_TKEO+0x180>)
 8003790:	6a3b      	ldr	r3, [r7, #32]
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	4413      	add	r3, r2
 8003796:	edd3 7a00 	vldr	s15, [r3]
 800379a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800379e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037a2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80037a6:	6a3b      	ldr	r3, [r7, #32]
 80037a8:	3301      	adds	r3, #1
 80037aa:	623b      	str	r3, [r7, #32]
 80037ac:	6a3b      	ldr	r3, [r7, #32]
 80037ae:	2bae      	cmp	r3, #174	; 0xae
 80037b0:	d9ed      	bls.n	800378e <ADC1_IN1_TKEO+0xae>
  }

  Tkeo_mean_1 = Tkeo_Sum_1 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 80037b2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80037b6:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8003864 <ADC1_IN1_TKEO+0x184>
 80037ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037be:	edc7 7a06 	vstr	s15, [r7, #24]


  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 80037c2:	2300      	movs	r3, #0
 80037c4:	61fb      	str	r3, [r7, #28]
 80037c6:	e018      	b.n	80037fa <ADC1_IN1_TKEO+0x11a>
  {
  	float32_t Tkeo_Diff_1 = ADC1_IN1_Tkeo_bfr[q] - Tkeo_mean_1;
 80037c8:	4a25      	ldr	r2, [pc, #148]	; (8003860 <ADC1_IN1_TKEO+0x180>)
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	4413      	add	r3, r2
 80037d0:	ed93 7a00 	vldr	s14, [r3]
 80037d4:	edd7 7a06 	vldr	s15, [r7, #24]
 80037d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037dc:	edc7 7a03 	vstr	s15, [r7, #12]
  	Tkeo_Variance_1 += Tkeo_Diff_1 * Tkeo_Diff_1;
 80037e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80037e4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80037e8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80037ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037f0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	3301      	adds	r3, #1
 80037f8:	61fb      	str	r3, [r7, #28]
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	2bae      	cmp	r3, #174	; 0xae
 80037fe:	d9e3      	bls.n	80037c8 <ADC1_IN1_TKEO+0xe8>
  }

  Tkeo_Variance_1 /= ADC_DMA_SIXTEENTHBUFFERSIZE; // Average the squared differences
 8003800:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003804:	eddf 6a17 	vldr	s13, [pc, #92]	; 8003864 <ADC1_IN1_TKEO+0x184>
 8003808:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800380c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  Tkeo_SD_1 = sqrt(Tkeo_Variance_1);
 8003810:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003812:	f7fc fe65 	bl	80004e0 <__aeabi_f2d>
 8003816:	4602      	mov	r2, r0
 8003818:	460b      	mov	r3, r1
 800381a:	ec43 2b10 	vmov	d0, r2, r3
 800381e:	f008 f99f 	bl	800bb60 <sqrt>
 8003822:	ec53 2b10 	vmov	r2, r3, d0
 8003826:	4610      	mov	r0, r2
 8003828:	4619      	mov	r1, r3
 800382a:	f7fd f9a9 	bl	8000b80 <__aeabi_d2f>
 800382e:	4603      	mov	r3, r0
 8003830:	617b      	str	r3, [r7, #20]

  if (Tkeo_SD_1 > 3 * StnDev_BL_1)
 8003832:	edd7 7a00 	vldr	s15, [r7]
 8003836:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800383a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800383e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003842:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800384a:	dd03      	ble.n	8003854 <ADC1_IN1_TKEO+0x174>
  {
	  Tkeo_flag_1 = 1;
 800384c:	2301      	movs	r3, #1
 800384e:	74fb      	strb	r3, [r7, #19]

	  return  Tkeo_flag_1;
 8003850:	7cfb      	ldrb	r3, [r7, #19]
 8003852:	e000      	b.n	8003856 <ADC1_IN1_TKEO+0x176>
  }

  else
  {
	  return 0;
 8003854:	2300      	movs	r3, #0
  }


}
 8003856:	4618      	mov	r0, r3
 8003858:	3730      	adds	r7, #48	; 0x30
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	2000a674 	.word	0x2000a674
 8003864:	432f0000 	.word	0x432f0000

08003868 <ADC1_IN2_TKEO>:


uint8_t ADC1_IN2_TKEO(ADC1_IN2_MA *ADC1_IN2_TKEO_ptr, float32_t StnDev_BL_2)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b08c      	sub	sp, #48	; 0x30
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	ed87 0a00 	vstr	s0, [r7]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8003874:	2301      	movs	r3, #1
 8003876:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003878:	e030      	b.n	80038dc <ADC1_IN2_TKEO+0x74>
  {
	  ADC1_IN2_Tkeo_bfr[n]= (ADC1_IN2_TKEO_ptr->MA_ADC1_IN2_OutBfr[n] * ADC1_IN2_TKEO_ptr->MA_ADC1_IN2_OutBfr[n]) - (ADC1_IN2_TKEO_ptr->MA_ADC1_IN2_OutBfr[n-1] * ADC1_IN2_TKEO_ptr->MA_ADC1_IN2_OutBfr[n+1]);
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800387e:	3308      	adds	r3, #8
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	4413      	add	r3, r2
 8003884:	3304      	adds	r3, #4
 8003886:	ed93 7a00 	vldr	s14, [r3]
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800388e:	3308      	adds	r3, #8
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	4413      	add	r3, r2
 8003894:	3304      	adds	r3, #4
 8003896:	edd3 7a00 	vldr	s15, [r3]
 800389a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800389e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a0:	3b01      	subs	r3, #1
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	3308      	adds	r3, #8
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	4413      	add	r3, r2
 80038aa:	3304      	adds	r3, #4
 80038ac:	edd3 6a00 	vldr	s13, [r3]
 80038b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b2:	3301      	adds	r3, #1
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	3308      	adds	r3, #8
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4413      	add	r3, r2
 80038bc:	3304      	adds	r3, #4
 80038be:	edd3 7a00 	vldr	s15, [r3]
 80038c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038ca:	4a47      	ldr	r2, [pc, #284]	; (80039e8 <ADC1_IN2_TKEO+0x180>)
 80038cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4413      	add	r3, r2
 80038d2:	edc3 7a00 	vstr	s15, [r3]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 80038d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d8:	3301      	adds	r3, #1
 80038da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038de:	2bad      	cmp	r3, #173	; 0xad
 80038e0:	d9cb      	bls.n	800387a <ADC1_IN2_TKEO+0x12>
  }


  ADC1_IN2_Tkeo_bfr[0] = 0.0f;
 80038e2:	4b41      	ldr	r3, [pc, #260]	; (80039e8 <ADC1_IN2_TKEO+0x180>)
 80038e4:	f04f 0200 	mov.w	r2, #0
 80038e8:	601a      	str	r2, [r3, #0]
  ADC1_IN2_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE-1] = 0.0f;
 80038ea:	4b3f      	ldr	r3, [pc, #252]	; (80039e8 <ADC1_IN2_TKEO+0x180>)
 80038ec:	f04f 0200 	mov.w	r2, #0
 80038f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8


  float32_t Tkeo_Sum_2 = 0.0f;
 80038f4:	f04f 0300 	mov.w	r3, #0
 80038f8:	62bb      	str	r3, [r7, #40]	; 0x28
  float32_t Tkeo_mean_2 =0.0f;
 80038fa:	f04f 0300 	mov.w	r3, #0
 80038fe:	61bb      	str	r3, [r7, #24]
  float32_t Tkeo_Variance_2 = 0.0f;
 8003900:	f04f 0300 	mov.w	r3, #0
 8003904:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t Tkeo_SD_2 = 0.0f;
 8003906:	f04f 0300 	mov.w	r3, #0
 800390a:	617b      	str	r3, [r7, #20]

  uint8_t Tkeo_flag_2 = 0;
 800390c:	2300      	movs	r3, #0
 800390e:	74fb      	strb	r3, [r7, #19]

  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003910:	2300      	movs	r3, #0
 8003912:	623b      	str	r3, [r7, #32]
 8003914:	e00e      	b.n	8003934 <ADC1_IN2_TKEO+0xcc>
  {
	Tkeo_Sum_2 += ADC1_IN2_Tkeo_bfr[h];
 8003916:	4a34      	ldr	r2, [pc, #208]	; (80039e8 <ADC1_IN2_TKEO+0x180>)
 8003918:	6a3b      	ldr	r3, [r7, #32]
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4413      	add	r3, r2
 800391e:	edd3 7a00 	vldr	s15, [r3]
 8003922:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003926:	ee77 7a27 	vadd.f32	s15, s14, s15
 800392a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 800392e:	6a3b      	ldr	r3, [r7, #32]
 8003930:	3301      	adds	r3, #1
 8003932:	623b      	str	r3, [r7, #32]
 8003934:	6a3b      	ldr	r3, [r7, #32]
 8003936:	2bae      	cmp	r3, #174	; 0xae
 8003938:	d9ed      	bls.n	8003916 <ADC1_IN2_TKEO+0xae>
  }

  Tkeo_mean_2 = Tkeo_Sum_2 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 800393a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800393e:	eddf 6a2b 	vldr	s13, [pc, #172]	; 80039ec <ADC1_IN2_TKEO+0x184>
 8003942:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003946:	edc7 7a06 	vstr	s15, [r7, #24]


  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 800394a:	2300      	movs	r3, #0
 800394c:	61fb      	str	r3, [r7, #28]
 800394e:	e018      	b.n	8003982 <ADC1_IN2_TKEO+0x11a>
  {
  	float32_t Tkeo_Diff_2 = ADC1_IN2_Tkeo_bfr[q] - Tkeo_mean_2;
 8003950:	4a25      	ldr	r2, [pc, #148]	; (80039e8 <ADC1_IN2_TKEO+0x180>)
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	4413      	add	r3, r2
 8003958:	ed93 7a00 	vldr	s14, [r3]
 800395c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003960:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003964:	edc7 7a03 	vstr	s15, [r7, #12]
  	Tkeo_Variance_2 += Tkeo_Diff_2 * Tkeo_Diff_2;
 8003968:	edd7 7a03 	vldr	s15, [r7, #12]
 800396c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003970:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003974:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003978:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	3301      	adds	r3, #1
 8003980:	61fb      	str	r3, [r7, #28]
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	2bae      	cmp	r3, #174	; 0xae
 8003986:	d9e3      	bls.n	8003950 <ADC1_IN2_TKEO+0xe8>
  }

  Tkeo_Variance_2 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 8003988:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800398c:	eddf 6a17 	vldr	s13, [pc, #92]	; 80039ec <ADC1_IN2_TKEO+0x184>
 8003990:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003994:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  Tkeo_SD_2 = sqrt(Tkeo_Variance_2);
 8003998:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800399a:	f7fc fda1 	bl	80004e0 <__aeabi_f2d>
 800399e:	4602      	mov	r2, r0
 80039a0:	460b      	mov	r3, r1
 80039a2:	ec43 2b10 	vmov	d0, r2, r3
 80039a6:	f008 f8db 	bl	800bb60 <sqrt>
 80039aa:	ec53 2b10 	vmov	r2, r3, d0
 80039ae:	4610      	mov	r0, r2
 80039b0:	4619      	mov	r1, r3
 80039b2:	f7fd f8e5 	bl	8000b80 <__aeabi_d2f>
 80039b6:	4603      	mov	r3, r0
 80039b8:	617b      	str	r3, [r7, #20]

  if (Tkeo_SD_2 > 3 * StnDev_BL_2)
 80039ba:	edd7 7a00 	vldr	s15, [r7]
 80039be:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80039c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039c6:	ed97 7a05 	vldr	s14, [r7, #20]
 80039ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039d2:	dd03      	ble.n	80039dc <ADC1_IN2_TKEO+0x174>
  {
	  Tkeo_flag_2 = 1;
 80039d4:	2301      	movs	r3, #1
 80039d6:	74fb      	strb	r3, [r7, #19]

	  return  Tkeo_flag_2;
 80039d8:	7cfb      	ldrb	r3, [r7, #19]
 80039da:	e000      	b.n	80039de <ADC1_IN2_TKEO+0x176>
  }

  else
  {
	  return 0;
 80039dc:	2300      	movs	r3, #0
  }


}
 80039de:	4618      	mov	r0, r3
 80039e0:	3730      	adds	r7, #48	; 0x30
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	2000a930 	.word	0x2000a930
 80039ec:	432f0000 	.word	0x432f0000

080039f0 <ADC2_IN3_TKEO>:



uint8_t ADC2_IN3_TKEO(ADC2_IN3_MA *ADC2_IN3_TKEO_ptr, float32_t StnDev_BL_3)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b08c      	sub	sp, #48	; 0x30
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	ed87 0a00 	vstr	s0, [r7]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 80039fc:	2301      	movs	r3, #1
 80039fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a00:	e030      	b.n	8003a64 <ADC2_IN3_TKEO+0x74>
  {
	  ADC2_IN3_Tkeo_bfr[n]= (ADC2_IN3_TKEO_ptr->MA_ADC2_IN3_OutBfr[n] * ADC2_IN3_TKEO_ptr->MA_ADC2_IN3_OutBfr[n]) - (ADC2_IN3_TKEO_ptr->MA_ADC2_IN3_OutBfr[n-1] * ADC2_IN3_TKEO_ptr->MA_ADC2_IN3_OutBfr[n+1]);
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a06:	3308      	adds	r3, #8
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	4413      	add	r3, r2
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	ed93 7a00 	vldr	s14, [r3]
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a16:	3308      	adds	r3, #8
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4413      	add	r3, r2
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	edd3 7a00 	vldr	s15, [r3]
 8003a22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	3308      	adds	r3, #8
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4413      	add	r3, r2
 8003a32:	3304      	adds	r3, #4
 8003a34:	edd3 6a00 	vldr	s13, [r3]
 8003a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	3308      	adds	r3, #8
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	4413      	add	r3, r2
 8003a44:	3304      	adds	r3, #4
 8003a46:	edd3 7a00 	vldr	s15, [r3]
 8003a4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a52:	4a47      	ldr	r2, [pc, #284]	; (8003b70 <ADC2_IN3_TKEO+0x180>)
 8003a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4413      	add	r3, r2
 8003a5a:	edc3 7a00 	vstr	s15, [r3]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8003a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a60:	3301      	adds	r3, #1
 8003a62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a66:	2bad      	cmp	r3, #173	; 0xad
 8003a68:	d9cb      	bls.n	8003a02 <ADC2_IN3_TKEO+0x12>
  }


  ADC2_IN3_Tkeo_bfr[0] = 0.0f;
 8003a6a:	4b41      	ldr	r3, [pc, #260]	; (8003b70 <ADC2_IN3_TKEO+0x180>)
 8003a6c:	f04f 0200 	mov.w	r2, #0
 8003a70:	601a      	str	r2, [r3, #0]
  ADC2_IN3_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE-1] = 0.0f;
 8003a72:	4b3f      	ldr	r3, [pc, #252]	; (8003b70 <ADC2_IN3_TKEO+0x180>)
 8003a74:	f04f 0200 	mov.w	r2, #0
 8003a78:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8


  float32_t Tkeo_Sum_3 = 0.0f;
 8003a7c:	f04f 0300 	mov.w	r3, #0
 8003a80:	62bb      	str	r3, [r7, #40]	; 0x28
  float32_t Tkeo_mean_3 =0.0f;
 8003a82:	f04f 0300 	mov.w	r3, #0
 8003a86:	61bb      	str	r3, [r7, #24]
  float32_t Tkeo_Variance_3 = 0.0f;
 8003a88:	f04f 0300 	mov.w	r3, #0
 8003a8c:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t Tkeo_SD_3 = 0.0f;
 8003a8e:	f04f 0300 	mov.w	r3, #0
 8003a92:	617b      	str	r3, [r7, #20]

  uint8_t Tkeo_flag_3 = 0;
 8003a94:	2300      	movs	r3, #0
 8003a96:	74fb      	strb	r3, [r7, #19]

  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003a98:	2300      	movs	r3, #0
 8003a9a:	623b      	str	r3, [r7, #32]
 8003a9c:	e00e      	b.n	8003abc <ADC2_IN3_TKEO+0xcc>
  {
	Tkeo_Sum_3 += ADC2_IN3_Tkeo_bfr[h];
 8003a9e:	4a34      	ldr	r2, [pc, #208]	; (8003b70 <ADC2_IN3_TKEO+0x180>)
 8003aa0:	6a3b      	ldr	r3, [r7, #32]
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	4413      	add	r3, r2
 8003aa6:	edd3 7a00 	vldr	s15, [r3]
 8003aaa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003aae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ab2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	3301      	adds	r3, #1
 8003aba:	623b      	str	r3, [r7, #32]
 8003abc:	6a3b      	ldr	r3, [r7, #32]
 8003abe:	2bae      	cmp	r3, #174	; 0xae
 8003ac0:	d9ed      	bls.n	8003a9e <ADC2_IN3_TKEO+0xae>
  }

  Tkeo_mean_3 = Tkeo_Sum_3 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8003ac2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003ac6:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8003b74 <ADC2_IN3_TKEO+0x184>
 8003aca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ace:	edc7 7a06 	vstr	s15, [r7, #24]


  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	61fb      	str	r3, [r7, #28]
 8003ad6:	e018      	b.n	8003b0a <ADC2_IN3_TKEO+0x11a>
  {
  	float32_t Tkeo_Diff_3 = ADC2_IN3_Tkeo_bfr[q] - Tkeo_mean_3;
 8003ad8:	4a25      	ldr	r2, [pc, #148]	; (8003b70 <ADC2_IN3_TKEO+0x180>)
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4413      	add	r3, r2
 8003ae0:	ed93 7a00 	vldr	s14, [r3]
 8003ae4:	edd7 7a06 	vldr	s15, [r7, #24]
 8003ae8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003aec:	edc7 7a03 	vstr	s15, [r7, #12]
  	Tkeo_Variance_3 += Tkeo_Diff_3 * Tkeo_Diff_3;
 8003af0:	edd7 7a03 	vldr	s15, [r7, #12]
 8003af4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003af8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003afc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b00:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	3301      	adds	r3, #1
 8003b08:	61fb      	str	r3, [r7, #28]
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	2bae      	cmp	r3, #174	; 0xae
 8003b0e:	d9e3      	bls.n	8003ad8 <ADC2_IN3_TKEO+0xe8>
  }

  Tkeo_Variance_3 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 8003b10:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003b14:	eddf 6a17 	vldr	s13, [pc, #92]	; 8003b74 <ADC2_IN3_TKEO+0x184>
 8003b18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b1c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  Tkeo_SD_3 = sqrt(Tkeo_Variance_3);
 8003b20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b22:	f7fc fcdd 	bl	80004e0 <__aeabi_f2d>
 8003b26:	4602      	mov	r2, r0
 8003b28:	460b      	mov	r3, r1
 8003b2a:	ec43 2b10 	vmov	d0, r2, r3
 8003b2e:	f008 f817 	bl	800bb60 <sqrt>
 8003b32:	ec53 2b10 	vmov	r2, r3, d0
 8003b36:	4610      	mov	r0, r2
 8003b38:	4619      	mov	r1, r3
 8003b3a:	f7fd f821 	bl	8000b80 <__aeabi_d2f>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	617b      	str	r3, [r7, #20]

  if (Tkeo_SD_3 > 3 * StnDev_BL_3)
 8003b42:	edd7 7a00 	vldr	s15, [r7]
 8003b46:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003b4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b4e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003b52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b5a:	dd03      	ble.n	8003b64 <ADC2_IN3_TKEO+0x174>
  {
	  Tkeo_flag_3 = 1;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	74fb      	strb	r3, [r7, #19]

	  return  Tkeo_flag_3;
 8003b60:	7cfb      	ldrb	r3, [r7, #19]
 8003b62:	e000      	b.n	8003b66 <ADC2_IN3_TKEO+0x176>
  }

  else
  {
	  return 0;
 8003b64:	2300      	movs	r3, #0
  }


}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3730      	adds	r7, #48	; 0x30
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	2000abec 	.word	0x2000abec
 8003b74:	432f0000 	.word	0x432f0000

08003b78 <ADC2_IN4_TKEO>:


uint8_t ADC2_IN4_TKEO(ADC2_IN4_MA *ADC2_IN4_TKEO_ptr, float32_t StnDev_BL_4)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b08c      	sub	sp, #48	; 0x30
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	ed87 0a00 	vstr	s0, [r7]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8003b84:	2301      	movs	r3, #1
 8003b86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b88:	e030      	b.n	8003bec <ADC2_IN4_TKEO+0x74>
  {
	  ADC2_IN4_Tkeo_bfr[n]= (ADC2_IN4_TKEO_ptr->MA_ADC2_IN4_OutBfr[n] * ADC2_IN4_TKEO_ptr->MA_ADC2_IN4_OutBfr[n]) - (ADC2_IN4_TKEO_ptr->MA_ADC2_IN4_OutBfr[n-1] * ADC2_IN4_TKEO_ptr->MA_ADC2_IN4_OutBfr[n+1]);
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8e:	3308      	adds	r3, #8
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4413      	add	r3, r2
 8003b94:	3304      	adds	r3, #4
 8003b96:	ed93 7a00 	vldr	s14, [r3]
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b9e:	3308      	adds	r3, #8
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	4413      	add	r3, r2
 8003ba4:	3304      	adds	r3, #4
 8003ba6:	edd3 7a00 	vldr	s15, [r3]
 8003baa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	3308      	adds	r3, #8
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4413      	add	r3, r2
 8003bba:	3304      	adds	r3, #4
 8003bbc:	edd3 6a00 	vldr	s13, [r3]
 8003bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	3308      	adds	r3, #8
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	4413      	add	r3, r2
 8003bcc:	3304      	adds	r3, #4
 8003bce:	edd3 7a00 	vldr	s15, [r3]
 8003bd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bda:	4a47      	ldr	r2, [pc, #284]	; (8003cf8 <ADC2_IN4_TKEO+0x180>)
 8003bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	4413      	add	r3, r2
 8003be2:	edc3 7a00 	vstr	s15, [r3]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8003be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be8:	3301      	adds	r3, #1
 8003bea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bee:	2bad      	cmp	r3, #173	; 0xad
 8003bf0:	d9cb      	bls.n	8003b8a <ADC2_IN4_TKEO+0x12>
  }


  ADC2_IN4_Tkeo_bfr[0] = 0.0f;
 8003bf2:	4b41      	ldr	r3, [pc, #260]	; (8003cf8 <ADC2_IN4_TKEO+0x180>)
 8003bf4:	f04f 0200 	mov.w	r2, #0
 8003bf8:	601a      	str	r2, [r3, #0]
  ADC2_IN4_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE-1] = 0.0f;
 8003bfa:	4b3f      	ldr	r3, [pc, #252]	; (8003cf8 <ADC2_IN4_TKEO+0x180>)
 8003bfc:	f04f 0200 	mov.w	r2, #0
 8003c00:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8


  float32_t Tkeo_Sum_4 = 0.0f;
 8003c04:	f04f 0300 	mov.w	r3, #0
 8003c08:	62bb      	str	r3, [r7, #40]	; 0x28
  float32_t Tkeo_mean_4 =0.0f;
 8003c0a:	f04f 0300 	mov.w	r3, #0
 8003c0e:	61bb      	str	r3, [r7, #24]
  float32_t Tkeo_Variance_4 = 0.0f;
 8003c10:	f04f 0300 	mov.w	r3, #0
 8003c14:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t Tkeo_SD_4 = 0.0f;
 8003c16:	f04f 0300 	mov.w	r3, #0
 8003c1a:	617b      	str	r3, [r7, #20]

  uint8_t Tkeo_flag_4 = 0;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	74fb      	strb	r3, [r7, #19]

  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003c20:	2300      	movs	r3, #0
 8003c22:	623b      	str	r3, [r7, #32]
 8003c24:	e00e      	b.n	8003c44 <ADC2_IN4_TKEO+0xcc>
  {
	Tkeo_Sum_4 += ADC2_IN4_Tkeo_bfr[h];
 8003c26:	4a34      	ldr	r2, [pc, #208]	; (8003cf8 <ADC2_IN4_TKEO+0x180>)
 8003c28:	6a3b      	ldr	r3, [r7, #32]
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4413      	add	r3, r2
 8003c2e:	edd3 7a00 	vldr	s15, [r3]
 8003c32:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003c36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c3a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003c3e:	6a3b      	ldr	r3, [r7, #32]
 8003c40:	3301      	adds	r3, #1
 8003c42:	623b      	str	r3, [r7, #32]
 8003c44:	6a3b      	ldr	r3, [r7, #32]
 8003c46:	2bae      	cmp	r3, #174	; 0xae
 8003c48:	d9ed      	bls.n	8003c26 <ADC2_IN4_TKEO+0xae>
  }

  Tkeo_mean_4 = Tkeo_Sum_4 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8003c4a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003c4e:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8003cfc <ADC2_IN4_TKEO+0x184>
 8003c52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c56:	edc7 7a06 	vstr	s15, [r7, #24]


  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	61fb      	str	r3, [r7, #28]
 8003c5e:	e018      	b.n	8003c92 <ADC2_IN4_TKEO+0x11a>
  {
  	float32_t Tkeo_Diff_4 = ADC2_IN4_Tkeo_bfr[q] - Tkeo_mean_4;
 8003c60:	4a25      	ldr	r2, [pc, #148]	; (8003cf8 <ADC2_IN4_TKEO+0x180>)
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	4413      	add	r3, r2
 8003c68:	ed93 7a00 	vldr	s14, [r3]
 8003c6c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003c70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c74:	edc7 7a03 	vstr	s15, [r7, #12]
  	Tkeo_Variance_4 += Tkeo_Diff_4 * Tkeo_Diff_4;
 8003c78:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c7c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003c80:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003c84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c88:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	3301      	adds	r3, #1
 8003c90:	61fb      	str	r3, [r7, #28]
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	2bae      	cmp	r3, #174	; 0xae
 8003c96:	d9e3      	bls.n	8003c60 <ADC2_IN4_TKEO+0xe8>
  }

  Tkeo_Variance_4 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 8003c98:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003c9c:	eddf 6a17 	vldr	s13, [pc, #92]	; 8003cfc <ADC2_IN4_TKEO+0x184>
 8003ca0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ca4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  Tkeo_SD_4 = sqrt(Tkeo_Variance_4);
 8003ca8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003caa:	f7fc fc19 	bl	80004e0 <__aeabi_f2d>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	ec43 2b10 	vmov	d0, r2, r3
 8003cb6:	f007 ff53 	bl	800bb60 <sqrt>
 8003cba:	ec53 2b10 	vmov	r2, r3, d0
 8003cbe:	4610      	mov	r0, r2
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	f7fc ff5d 	bl	8000b80 <__aeabi_d2f>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	617b      	str	r3, [r7, #20]

  if (Tkeo_SD_4 > 3 * StnDev_BL_4)
 8003cca:	edd7 7a00 	vldr	s15, [r7]
 8003cce:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003cd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cd6:	ed97 7a05 	vldr	s14, [r7, #20]
 8003cda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ce2:	dd03      	ble.n	8003cec <ADC2_IN4_TKEO+0x174>
  {
	  Tkeo_flag_4 = 1;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	74fb      	strb	r3, [r7, #19]

	  return  Tkeo_flag_4;
 8003ce8:	7cfb      	ldrb	r3, [r7, #19]
 8003cea:	e000      	b.n	8003cee <ADC2_IN4_TKEO+0x176>
  }

  else
  {
	  return 0;
 8003cec:	2300      	movs	r3, #0
  }


}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3730      	adds	r7, #48	; 0x30
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	2000aea8 	.word	0x2000aea8
 8003cfc:	432f0000 	.word	0x432f0000

08003d00 <ADC3_IN1_TKEO>:



uint8_t ADC3_IN1_TKEO(ADC3_IN1_MA *ADC3_IN1_TKEO_ptr, float32_t StnDev_BL_5)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b08c      	sub	sp, #48	; 0x30
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	ed87 0a00 	vstr	s0, [r7]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d10:	e030      	b.n	8003d74 <ADC3_IN1_TKEO+0x74>
  {
	  ADC3_IN1_Tkeo_bfr[n]= (ADC3_IN1_TKEO_ptr->MA_ADC3_IN1_OutBfr[n] * ADC3_IN1_TKEO_ptr->MA_ADC3_IN1_OutBfr[n]) - (ADC3_IN1_TKEO_ptr->MA_ADC3_IN1_OutBfr[n-1] * ADC3_IN1_TKEO_ptr->MA_ADC3_IN1_OutBfr[n+1]);
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d16:	3308      	adds	r3, #8
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	4413      	add	r3, r2
 8003d1c:	3304      	adds	r3, #4
 8003d1e:	ed93 7a00 	vldr	s14, [r3]
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d26:	3308      	adds	r3, #8
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	4413      	add	r3, r2
 8003d2c:	3304      	adds	r3, #4
 8003d2e:	edd3 7a00 	vldr	s15, [r3]
 8003d32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	3308      	adds	r3, #8
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	4413      	add	r3, r2
 8003d42:	3304      	adds	r3, #4
 8003d44:	edd3 6a00 	vldr	s13, [r3]
 8003d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	3308      	adds	r3, #8
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	4413      	add	r3, r2
 8003d54:	3304      	adds	r3, #4
 8003d56:	edd3 7a00 	vldr	s15, [r3]
 8003d5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d62:	4a47      	ldr	r2, [pc, #284]	; (8003e80 <ADC3_IN1_TKEO+0x180>)
 8003d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	4413      	add	r3, r2
 8003d6a:	edc3 7a00 	vstr	s15, [r3]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8003d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d70:	3301      	adds	r3, #1
 8003d72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d76:	2bad      	cmp	r3, #173	; 0xad
 8003d78:	d9cb      	bls.n	8003d12 <ADC3_IN1_TKEO+0x12>
  }

  /* Handling boundary conditions */
  ADC3_IN1_Tkeo_bfr[0] = 0.0f;
 8003d7a:	4b41      	ldr	r3, [pc, #260]	; (8003e80 <ADC3_IN1_TKEO+0x180>)
 8003d7c:	f04f 0200 	mov.w	r2, #0
 8003d80:	601a      	str	r2, [r3, #0]
  ADC3_IN1_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE-1] = 0.0f;
 8003d82:	4b3f      	ldr	r3, [pc, #252]	; (8003e80 <ADC3_IN1_TKEO+0x180>)
 8003d84:	f04f 0200 	mov.w	r2, #0
 8003d88:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8


  float32_t Tkeo_Sum_5 = 0.0f; // Initialize the sum to zero
 8003d8c:	f04f 0300 	mov.w	r3, #0
 8003d90:	62bb      	str	r3, [r7, #40]	; 0x28
  float32_t Tkeo_mean_5 =0.0f; // Initialize the mean to zero
 8003d92:	f04f 0300 	mov.w	r3, #0
 8003d96:	61bb      	str	r3, [r7, #24]
  float32_t Tkeo_Variance_5 = 0.0f; // Initialize variance to zero
 8003d98:	f04f 0300 	mov.w	r3, #0
 8003d9c:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t Tkeo_SD_5 = 0.0f; //Initialize standard deviation to zero
 8003d9e:	f04f 0300 	mov.w	r3, #0
 8003da2:	617b      	str	r3, [r7, #20]

  uint8_t Tkeo_flag_5 = 0;
 8003da4:	2300      	movs	r3, #0
 8003da6:	74fb      	strb	r3, [r7, #19]

  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003da8:	2300      	movs	r3, #0
 8003daa:	623b      	str	r3, [r7, #32]
 8003dac:	e00e      	b.n	8003dcc <ADC3_IN1_TKEO+0xcc>
  {
	Tkeo_Sum_5 += ADC3_IN1_Tkeo_bfr[h];  // Accumulate the sum of all values in the buffer
 8003dae:	4a34      	ldr	r2, [pc, #208]	; (8003e80 <ADC3_IN1_TKEO+0x180>)
 8003db0:	6a3b      	ldr	r3, [r7, #32]
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	4413      	add	r3, r2
 8003db6:	edd3 7a00 	vldr	s15, [r3]
 8003dba:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003dbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dc2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003dc6:	6a3b      	ldr	r3, [r7, #32]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	623b      	str	r3, [r7, #32]
 8003dcc:	6a3b      	ldr	r3, [r7, #32]
 8003dce:	2bae      	cmp	r3, #174	; 0xae
 8003dd0:	d9ed      	bls.n	8003dae <ADC3_IN1_TKEO+0xae>
  }

  Tkeo_mean_5 = Tkeo_Sum_5 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8003dd2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003dd6:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8003e84 <ADC3_IN1_TKEO+0x184>
 8003dda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003dde:	edc7 7a06 	vstr	s15, [r7, #24]


  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8003de2:	2300      	movs	r3, #0
 8003de4:	61fb      	str	r3, [r7, #28]
 8003de6:	e018      	b.n	8003e1a <ADC3_IN1_TKEO+0x11a>
  {
  	float32_t Tkeo_Diff_5 = ADC3_IN1_Tkeo_bfr[q] - Tkeo_mean_5;
 8003de8:	4a25      	ldr	r2, [pc, #148]	; (8003e80 <ADC3_IN1_TKEO+0x180>)
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	4413      	add	r3, r2
 8003df0:	ed93 7a00 	vldr	s14, [r3]
 8003df4:	edd7 7a06 	vldr	s15, [r7, #24]
 8003df8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dfc:	edc7 7a03 	vstr	s15, [r7, #12]
  	Tkeo_Variance_5 += Tkeo_Diff_5 * Tkeo_Diff_5;
 8003e00:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e04:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003e08:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003e0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e10:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	3301      	adds	r3, #1
 8003e18:	61fb      	str	r3, [r7, #28]
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	2bae      	cmp	r3, #174	; 0xae
 8003e1e:	d9e3      	bls.n	8003de8 <ADC3_IN1_TKEO+0xe8>
  }

  Tkeo_Variance_5 /= ADC_DMA_SIXTEENTHBUFFERSIZE; // Average the squared differences
 8003e20:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003e24:	eddf 6a17 	vldr	s13, [pc, #92]	; 8003e84 <ADC3_IN1_TKEO+0x184>
 8003e28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e2c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  Tkeo_SD_5 = sqrt(Tkeo_Variance_5);
 8003e30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e32:	f7fc fb55 	bl	80004e0 <__aeabi_f2d>
 8003e36:	4602      	mov	r2, r0
 8003e38:	460b      	mov	r3, r1
 8003e3a:	ec43 2b10 	vmov	d0, r2, r3
 8003e3e:	f007 fe8f 	bl	800bb60 <sqrt>
 8003e42:	ec53 2b10 	vmov	r2, r3, d0
 8003e46:	4610      	mov	r0, r2
 8003e48:	4619      	mov	r1, r3
 8003e4a:	f7fc fe99 	bl	8000b80 <__aeabi_d2f>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	617b      	str	r3, [r7, #20]

  if (Tkeo_SD_5 > 3 * StnDev_BL_5)
 8003e52:	edd7 7a00 	vldr	s15, [r7]
 8003e56:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003e5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e5e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003e62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e6a:	dd03      	ble.n	8003e74 <ADC3_IN1_TKEO+0x174>
  {
	  Tkeo_flag_5 = 1;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	74fb      	strb	r3, [r7, #19]

	  return  Tkeo_flag_5;
 8003e70:	7cfb      	ldrb	r3, [r7, #19]
 8003e72:	e000      	b.n	8003e76 <ADC3_IN1_TKEO+0x176>
  }

  else
  {
	  return 0;
 8003e74:	2300      	movs	r3, #0
  }


}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3730      	adds	r7, #48	; 0x30
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	2000b164 	.word	0x2000b164
 8003e84:	432f0000 	.word	0x432f0000

08003e88 <ADC3_IN2_TKEO>:



uint8_t ADC3_IN2_TKEO(ADC3_IN2_MA *ADC3_IN2_TKEO_ptr, float32_t StnDev_BL_6)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b08c      	sub	sp, #48	; 0x30
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	ed87 0a00 	vstr	s0, [r7]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8003e94:	2301      	movs	r3, #1
 8003e96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e98:	e030      	b.n	8003efc <ADC3_IN2_TKEO+0x74>
  {
	  ADC3_IN2_Tkeo_bfr[n]= (ADC3_IN2_TKEO_ptr->MA_ADC3_IN2_OutBfr[n] * ADC3_IN2_TKEO_ptr->MA_ADC3_IN2_OutBfr[n]) - (ADC3_IN2_TKEO_ptr->MA_ADC3_IN2_OutBfr[n-1] * ADC3_IN2_TKEO_ptr->MA_ADC3_IN2_OutBfr[n+1]);
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9e:	3308      	adds	r3, #8
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	4413      	add	r3, r2
 8003ea4:	3304      	adds	r3, #4
 8003ea6:	ed93 7a00 	vldr	s14, [r3]
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eae:	3308      	adds	r3, #8
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	4413      	add	r3, r2
 8003eb4:	3304      	adds	r3, #4
 8003eb6:	edd3 7a00 	vldr	s15, [r3]
 8003eba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	3308      	adds	r3, #8
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	4413      	add	r3, r2
 8003eca:	3304      	adds	r3, #4
 8003ecc:	edd3 6a00 	vldr	s13, [r3]
 8003ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	3308      	adds	r3, #8
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	4413      	add	r3, r2
 8003edc:	3304      	adds	r3, #4
 8003ede:	edd3 7a00 	vldr	s15, [r3]
 8003ee2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ee6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003eea:	4a47      	ldr	r2, [pc, #284]	; (8004008 <ADC3_IN2_TKEO+0x180>)
 8003eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4413      	add	r3, r2
 8003ef2:	edc3 7a00 	vstr	s15, [r3]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8003ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef8:	3301      	adds	r3, #1
 8003efa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003efe:	2bad      	cmp	r3, #173	; 0xad
 8003f00:	d9cb      	bls.n	8003e9a <ADC3_IN2_TKEO+0x12>
  }


  ADC3_IN2_Tkeo_bfr[0] = 0.0f;
 8003f02:	4b41      	ldr	r3, [pc, #260]	; (8004008 <ADC3_IN2_TKEO+0x180>)
 8003f04:	f04f 0200 	mov.w	r2, #0
 8003f08:	601a      	str	r2, [r3, #0]
  ADC3_IN2_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE-1] = 0.0f;
 8003f0a:	4b3f      	ldr	r3, [pc, #252]	; (8004008 <ADC3_IN2_TKEO+0x180>)
 8003f0c:	f04f 0200 	mov.w	r2, #0
 8003f10:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8


  float32_t Tkeo_Sum_6 = 0.0f;
 8003f14:	f04f 0300 	mov.w	r3, #0
 8003f18:	62bb      	str	r3, [r7, #40]	; 0x28
  float32_t Tkeo_mean_6 =0.0f;
 8003f1a:	f04f 0300 	mov.w	r3, #0
 8003f1e:	61bb      	str	r3, [r7, #24]
  float32_t Tkeo_Variance_6 = 0.0f;
 8003f20:	f04f 0300 	mov.w	r3, #0
 8003f24:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t Tkeo_SD_6 = 0.0f;
 8003f26:	f04f 0300 	mov.w	r3, #0
 8003f2a:	617b      	str	r3, [r7, #20]

  uint8_t Tkeo_flag_6 = 0;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	74fb      	strb	r3, [r7, #19]

  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003f30:	2300      	movs	r3, #0
 8003f32:	623b      	str	r3, [r7, #32]
 8003f34:	e00e      	b.n	8003f54 <ADC3_IN2_TKEO+0xcc>
  {
	Tkeo_Sum_6 += ADC3_IN2_Tkeo_bfr[h];
 8003f36:	4a34      	ldr	r2, [pc, #208]	; (8004008 <ADC3_IN2_TKEO+0x180>)
 8003f38:	6a3b      	ldr	r3, [r7, #32]
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	4413      	add	r3, r2
 8003f3e:	edd3 7a00 	vldr	s15, [r3]
 8003f42:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003f46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f4a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003f4e:	6a3b      	ldr	r3, [r7, #32]
 8003f50:	3301      	adds	r3, #1
 8003f52:	623b      	str	r3, [r7, #32]
 8003f54:	6a3b      	ldr	r3, [r7, #32]
 8003f56:	2bae      	cmp	r3, #174	; 0xae
 8003f58:	d9ed      	bls.n	8003f36 <ADC3_IN2_TKEO+0xae>
  }

  Tkeo_mean_6 = Tkeo_Sum_6 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8003f5a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003f5e:	eddf 6a2b 	vldr	s13, [pc, #172]	; 800400c <ADC3_IN2_TKEO+0x184>
 8003f62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f66:	edc7 7a06 	vstr	s15, [r7, #24]


  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	61fb      	str	r3, [r7, #28]
 8003f6e:	e018      	b.n	8003fa2 <ADC3_IN2_TKEO+0x11a>
  {
  	float32_t Tkeo_Diff_6 = ADC3_IN2_Tkeo_bfr[q] - Tkeo_mean_6;
 8003f70:	4a25      	ldr	r2, [pc, #148]	; (8004008 <ADC3_IN2_TKEO+0x180>)
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4413      	add	r3, r2
 8003f78:	ed93 7a00 	vldr	s14, [r3]
 8003f7c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003f80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f84:	edc7 7a03 	vstr	s15, [r7, #12]
  	Tkeo_Variance_6 += Tkeo_Diff_6 * Tkeo_Diff_6;
 8003f88:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f8c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003f90:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003f94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f98:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	61fb      	str	r3, [r7, #28]
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	2bae      	cmp	r3, #174	; 0xae
 8003fa6:	d9e3      	bls.n	8003f70 <ADC3_IN2_TKEO+0xe8>
  }

  Tkeo_Variance_6 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 8003fa8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003fac:	eddf 6a17 	vldr	s13, [pc, #92]	; 800400c <ADC3_IN2_TKEO+0x184>
 8003fb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fb4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  Tkeo_SD_6 = sqrt(Tkeo_Variance_6);
 8003fb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003fba:	f7fc fa91 	bl	80004e0 <__aeabi_f2d>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	ec43 2b10 	vmov	d0, r2, r3
 8003fc6:	f007 fdcb 	bl	800bb60 <sqrt>
 8003fca:	ec53 2b10 	vmov	r2, r3, d0
 8003fce:	4610      	mov	r0, r2
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	f7fc fdd5 	bl	8000b80 <__aeabi_d2f>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	617b      	str	r3, [r7, #20]

  if (Tkeo_SD_6 > 3 * StnDev_BL_6)
 8003fda:	edd7 7a00 	vldr	s15, [r7]
 8003fde:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003fe2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fe6:	ed97 7a05 	vldr	s14, [r7, #20]
 8003fea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ff2:	dd03      	ble.n	8003ffc <ADC3_IN2_TKEO+0x174>
  {
	  Tkeo_flag_6 = 1;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	74fb      	strb	r3, [r7, #19]

	  return  Tkeo_flag_6;
 8003ff8:	7cfb      	ldrb	r3, [r7, #19]
 8003ffa:	e000      	b.n	8003ffe <ADC3_IN2_TKEO+0x176>
  }

  else
  {
	  return 0;
 8003ffc:	2300      	movs	r3, #0
  }


}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3730      	adds	r7, #48	; 0x30
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	2000b420 	.word	0x2000b420
 800400c:	432f0000 	.word	0x432f0000

08004010 <ADC1_DMA_sort_uhb>:
uint8_t ADC2_Current_buffer = 1;
uint8_t ADC3_Current_buffer = 1;

//FUNCTION DEFINITIONS
void ADC1_DMA_sort_uhb (void)
{
 8004010:	b590      	push	{r4, r7, lr}
 8004012:	b087      	sub	sp, #28
 8004014:	af00      	add	r7, sp, #0
  if(ADC1_Current_buffer == 1)
 8004016:	4b66      	ldr	r3, [pc, #408]	; (80041b0 <ADC1_DMA_sort_uhb+0x1a0>)
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d15f      	bne.n	80040de <ADC1_DMA_sort_uhb+0xce>
  {
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)  //Scans the upper half of the DMA buffer
 800401e:	2300      	movs	r3, #0
 8004020:	617b      	str	r3, [r7, #20]
 8004022:	e057      	b.n	80040d4 <ADC1_DMA_sort_uhb+0xc4>
	{
		if(m==0 || (m%2==0)) // Checks that the buffer register location is even and loads the data
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d004      	beq.n	8004034 <ADC1_DMA_sort_uhb+0x24>
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	f003 0301 	and.w	r3, r3, #1
 8004030:	2b00      	cmp	r3, #0
 8004032:	d126      	bne.n	8004082 <ADC1_DMA_sort_uhb+0x72>
		{
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)  // Stores data on the upper half of IN1 channel data buffer
 8004034:	2300      	movs	r3, #0
 8004036:	613b      	str	r3, [r7, #16]
 8004038:	e01e      	b.n	8004078 <ADC1_DMA_sort_uhb+0x68>
			{
				ADC1_DMA_sort_ptr->ADC1_IN1_bfr[n] = ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 800403a:	4b5e      	ldr	r3, [pc, #376]	; (80041b4 <ADC1_DMA_sort_uhb+0x1a4>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004044:	4618      	mov	r0, r3
 8004046:	f7fc fa29 	bl	800049c <__aeabi_ui2d>
 800404a:	a357      	add	r3, pc, #348	; (adr r3, 80041a8 <ADC1_DMA_sort_uhb+0x198>)
 800404c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004050:	f7fc fa9e 	bl	8000590 <__aeabi_dmul>
 8004054:	4602      	mov	r2, r0
 8004056:	460b      	mov	r3, r1
 8004058:	4956      	ldr	r1, [pc, #344]	; (80041b4 <ADC1_DMA_sort_uhb+0x1a4>)
 800405a:	680c      	ldr	r4, [r1, #0]
 800405c:	4610      	mov	r0, r2
 800405e:	4619      	mov	r1, r3
 8004060:	f7fc fd6e 	bl	8000b40 <__aeabi_d2uiz>
 8004064:	4602      	mov	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4423      	add	r3, r4
 8004070:	605a      	str	r2, [r3, #4]
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)  // Stores data on the upper half of IN1 channel data buffer
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	3301      	adds	r3, #1
 8004076:	613b      	str	r3, [r7, #16]
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 800407e:	d3dc      	bcc.n	800403a <ADC1_DMA_sort_uhb+0x2a>
 8004080:	e025      	b.n	80040ce <ADC1_DMA_sort_uhb+0xbe>
            }
        }
		else  // Checks that the buffer register location is odd and loads the data
		{
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)  // Stores data on the upper half of IN2 channel data buffer
 8004082:	2300      	movs	r3, #0
 8004084:	60fb      	str	r3, [r7, #12]
 8004086:	e01e      	b.n	80040c6 <ADC1_DMA_sort_uhb+0xb6>
			{
				ADC1_DMA_sort_ptr->ADC1_IN2_bfr[p] = ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 8004088:	4b4a      	ldr	r3, [pc, #296]	; (80041b4 <ADC1_DMA_sort_uhb+0x1a4>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004092:	4618      	mov	r0, r3
 8004094:	f7fc fa02 	bl	800049c <__aeabi_ui2d>
 8004098:	a343      	add	r3, pc, #268	; (adr r3, 80041a8 <ADC1_DMA_sort_uhb+0x198>)
 800409a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800409e:	f7fc fa77 	bl	8000590 <__aeabi_dmul>
 80040a2:	4602      	mov	r2, r0
 80040a4:	460b      	mov	r3, r1
 80040a6:	4943      	ldr	r1, [pc, #268]	; (80041b4 <ADC1_DMA_sort_uhb+0x1a4>)
 80040a8:	680c      	ldr	r4, [r1, #0]
 80040aa:	4610      	mov	r0, r2
 80040ac:	4619      	mov	r1, r3
 80040ae:	f7fc fd47 	bl	8000b40 <__aeabi_d2uiz>
 80040b2:	4602      	mov	r2, r0
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80040ba:	330a      	adds	r3, #10
 80040bc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)  // Stores data on the upper half of IN2 channel data buffer
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	3301      	adds	r3, #1
 80040c4:	60fb      	str	r3, [r7, #12]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 80040cc:	d3dc      	bcc.n	8004088 <ADC1_DMA_sort_uhb+0x78>
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)  //Scans the upper half of the DMA buffer
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	3301      	adds	r3, #1
 80040d2:	617b      	str	r3, [r7, #20]
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 80040da:	d9a3      	bls.n	8004024 <ADC1_DMA_sort_uhb+0x14>
	  			}
	  		}
	     }

  }
};
 80040dc:	e05e      	b.n	800419c <ADC1_DMA_sort_uhb+0x18c>
	  for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)  //Scans the upper half of the DMA buffer
 80040de:	2300      	movs	r3, #0
 80040e0:	60bb      	str	r3, [r7, #8]
 80040e2:	e057      	b.n	8004194 <ADC1_DMA_sort_uhb+0x184>
	  		if(m==0 || (m%2==0)) // Checks that the buffer register location is even and loads the data
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d004      	beq.n	80040f4 <ADC1_DMA_sort_uhb+0xe4>
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	f003 0301 	and.w	r3, r3, #1
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d126      	bne.n	8004142 <ADC1_DMA_sort_uhb+0x132>
	  			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)  // Stores data on the upper half of IN1 channel data buffer
 80040f4:	2300      	movs	r3, #0
 80040f6:	607b      	str	r3, [r7, #4]
 80040f8:	e01e      	b.n	8004138 <ADC1_DMA_sort_uhb+0x128>
	  				ADC1_DMA_sort_ptr->ADC1_IN1_bfr_alt[n] = ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 80040fa:	4b2e      	ldr	r3, [pc, #184]	; (80041b4 <ADC1_DMA_sort_uhb+0x1a4>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68ba      	ldr	r2, [r7, #8]
 8004100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004104:	4618      	mov	r0, r3
 8004106:	f7fc f9c9 	bl	800049c <__aeabi_ui2d>
 800410a:	a327      	add	r3, pc, #156	; (adr r3, 80041a8 <ADC1_DMA_sort_uhb+0x198>)
 800410c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004110:	f7fc fa3e 	bl	8000590 <__aeabi_dmul>
 8004114:	4602      	mov	r2, r0
 8004116:	460b      	mov	r3, r1
 8004118:	4926      	ldr	r1, [pc, #152]	; (80041b4 <ADC1_DMA_sort_uhb+0x1a4>)
 800411a:	680c      	ldr	r4, [r1, #0]
 800411c:	4610      	mov	r0, r2
 800411e:	4619      	mov	r1, r3
 8004120:	f7fc fd0e 	bl	8000b40 <__aeabi_d2uiz>
 8004124:	4602      	mov	r2, r0
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f603 63a6 	addw	r3, r3, #3750	; 0xea6
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4423      	add	r3, r4
 8004130:	605a      	str	r2, [r3, #4]
	  			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)  // Stores data on the upper half of IN1 channel data buffer
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	3301      	adds	r3, #1
 8004136:	607b      	str	r3, [r7, #4]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 800413e:	d3dc      	bcc.n	80040fa <ADC1_DMA_sort_uhb+0xea>
 8004140:	e025      	b.n	800418e <ADC1_DMA_sort_uhb+0x17e>
	  			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)  // Stores data on the upper half of IN2 channel data buffer
 8004142:	2300      	movs	r3, #0
 8004144:	603b      	str	r3, [r7, #0]
 8004146:	e01e      	b.n	8004186 <ADC1_DMA_sort_uhb+0x176>
	  				ADC1_DMA_sort_ptr->ADC1_IN2_bfr_alt[p] = ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 8004148:	4b1a      	ldr	r3, [pc, #104]	; (80041b4 <ADC1_DMA_sort_uhb+0x1a4>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68ba      	ldr	r2, [r7, #8]
 800414e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004152:	4618      	mov	r0, r3
 8004154:	f7fc f9a2 	bl	800049c <__aeabi_ui2d>
 8004158:	a313      	add	r3, pc, #76	; (adr r3, 80041a8 <ADC1_DMA_sort_uhb+0x198>)
 800415a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800415e:	f7fc fa17 	bl	8000590 <__aeabi_dmul>
 8004162:	4602      	mov	r2, r0
 8004164:	460b      	mov	r3, r1
 8004166:	4913      	ldr	r1, [pc, #76]	; (80041b4 <ADC1_DMA_sort_uhb+0x1a4>)
 8004168:	680c      	ldr	r4, [r1, #0]
 800416a:	4610      	mov	r0, r2
 800416c:	4619      	mov	r1, r3
 800416e:	f7fc fce7 	bl	8000b40 <__aeabi_d2uiz>
 8004172:	4602      	mov	r2, r0
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 800417a:	330c      	adds	r3, #12
 800417c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	  			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)  // Stores data on the upper half of IN2 channel data buffer
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	3301      	adds	r3, #1
 8004184:	603b      	str	r3, [r7, #0]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 800418c:	d3dc      	bcc.n	8004148 <ADC1_DMA_sort_uhb+0x138>
	  for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)  //Scans the upper half of the DMA buffer
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	3301      	adds	r3, #1
 8004192:	60bb      	str	r3, [r7, #8]
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 800419a:	d9a3      	bls.n	80040e4 <ADC1_DMA_sort_uhb+0xd4>
};
 800419c:	bf00      	nop
 800419e:	371c      	adds	r7, #28
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd90      	pop	{r4, r7, pc}
 80041a4:	f3af 8000 	nop.w
 80041a8:	66666666 	.word	0x66666666
 80041ac:	3f4a6666 	.word	0x3f4a6666
 80041b0:	20007868 	.word	0x20007868
 80041b4:	2000bb30 	.word	0x2000bb30

080041b8 <ADC1_DMA_sort_lhb>:


void ADC1_DMA_sort_lhb (void)
{
 80041b8:	b590      	push	{r4, r7, lr}
 80041ba:	b087      	sub	sp, #28
 80041bc:	af00      	add	r7, sp, #0
  if (ADC1_Current_buffer == 1)
 80041be:	4b6c      	ldr	r3, [pc, #432]	; (8004370 <ADC1_DMA_sort_lhb+0x1b8>)
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d166      	bne.n	8004294 <ADC1_DMA_sort_lhb+0xdc>
  {
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++) // Scans the lower half of the DMA buffer
 80041c6:	f240 43e2 	movw	r3, #1250	; 0x4e2
 80041ca:	617b      	str	r3, [r7, #20]
 80041cc:	e059      	b.n	8004282 <ADC1_DMA_sort_lhb+0xca>
	{
		if(m==0||(m%2==0)) // Checks that the buffer register location is even and loads the data
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d004      	beq.n	80041de <ADC1_DMA_sort_lhb+0x26>
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d127      	bne.n	800422e <ADC1_DMA_sort_lhb+0x76>
		{
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)  // Stores data on the lower half of IN1 channel data buffer
 80041de:	f240 2371 	movw	r3, #625	; 0x271
 80041e2:	613b      	str	r3, [r7, #16]
 80041e4:	e01e      	b.n	8004224 <ADC1_DMA_sort_lhb+0x6c>
			{
				ADC1_DMA_sort_ptr->ADC1_IN1_bfr[n] = ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 80041e6:	4b63      	ldr	r3, [pc, #396]	; (8004374 <ADC1_DMA_sort_lhb+0x1bc>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7fc f953 	bl	800049c <__aeabi_ui2d>
 80041f6:	a35c      	add	r3, pc, #368	; (adr r3, 8004368 <ADC1_DMA_sort_lhb+0x1b0>)
 80041f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fc:	f7fc f9c8 	bl	8000590 <__aeabi_dmul>
 8004200:	4602      	mov	r2, r0
 8004202:	460b      	mov	r3, r1
 8004204:	495b      	ldr	r1, [pc, #364]	; (8004374 <ADC1_DMA_sort_lhb+0x1bc>)
 8004206:	680c      	ldr	r4, [r1, #0]
 8004208:	4610      	mov	r0, r2
 800420a:	4619      	mov	r1, r3
 800420c:	f7fc fc98 	bl	8000b40 <__aeabi_d2uiz>
 8004210:	4602      	mov	r2, r0
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	4423      	add	r3, r4
 800421c:	605a      	str	r2, [r3, #4]
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)  // Stores data on the lower half of IN1 channel data buffer
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	3301      	adds	r3, #1
 8004222:	613b      	str	r3, [r7, #16]
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 800422a:	d9dc      	bls.n	80041e6 <ADC1_DMA_sort_lhb+0x2e>
 800422c:	e026      	b.n	800427c <ADC1_DMA_sort_lhb+0xc4>
            }
        }
		else  // Checks that the buffer register location is odd and loads the data
		{
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)  // Stores data on the lower half of IN2 channel data buffer
 800422e:	f240 2371 	movw	r3, #625	; 0x271
 8004232:	60fb      	str	r3, [r7, #12]
 8004234:	e01e      	b.n	8004274 <ADC1_DMA_sort_lhb+0xbc>
			{
				ADC1_DMA_sort_ptr->ADC1_IN2_bfr[p] = ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 8004236:	4b4f      	ldr	r3, [pc, #316]	; (8004374 <ADC1_DMA_sort_lhb+0x1bc>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004240:	4618      	mov	r0, r3
 8004242:	f7fc f92b 	bl	800049c <__aeabi_ui2d>
 8004246:	a348      	add	r3, pc, #288	; (adr r3, 8004368 <ADC1_DMA_sort_lhb+0x1b0>)
 8004248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424c:	f7fc f9a0 	bl	8000590 <__aeabi_dmul>
 8004250:	4602      	mov	r2, r0
 8004252:	460b      	mov	r3, r1
 8004254:	4947      	ldr	r1, [pc, #284]	; (8004374 <ADC1_DMA_sort_lhb+0x1bc>)
 8004256:	680c      	ldr	r4, [r1, #0]
 8004258:	4610      	mov	r0, r2
 800425a:	4619      	mov	r1, r3
 800425c:	f7fc fc70 	bl	8000b40 <__aeabi_d2uiz>
 8004260:	4602      	mov	r2, r0
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8004268:	330a      	adds	r3, #10
 800426a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)  // Stores data on the lower half of IN2 channel data buffer
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	3301      	adds	r3, #1
 8004272:	60fb      	str	r3, [r7, #12]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 800427a:	d9dc      	bls.n	8004236 <ADC1_DMA_sort_lhb+0x7e>
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++) // Scans the lower half of the DMA buffer
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	3301      	adds	r3, #1
 8004280:	617b      	str	r3, [r7, #20]
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f640 12c2 	movw	r2, #2498	; 0x9c2
 8004288:	4293      	cmp	r3, r2
 800428a:	d9a0      	bls.n	80041ce <ADC1_DMA_sort_lhb+0x16>
			}
		}
     }

	ADC1_Current_buffer = 2;
 800428c:	4b38      	ldr	r3, [pc, #224]	; (8004370 <ADC1_DMA_sort_lhb+0x1b8>)
 800428e:	2202      	movs	r2, #2
 8004290:	701a      	strb	r2, [r3, #0]
	 }

	ADC1_Current_buffer = 1;
   }

};
 8004292:	e065      	b.n	8004360 <ADC1_DMA_sort_lhb+0x1a8>
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++) // Scans the lower half of the DMA buffer
 8004294:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8004298:	60bb      	str	r3, [r7, #8]
 800429a:	e059      	b.n	8004350 <ADC1_DMA_sort_lhb+0x198>
		if(m==0||(m%2==0)) // Checks that the buffer register location is even and loads the data
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d004      	beq.n	80042ac <ADC1_DMA_sort_lhb+0xf4>
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d127      	bne.n	80042fc <ADC1_DMA_sort_lhb+0x144>
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)  // Stores data on the lower half of IN1 channel data buffer
 80042ac:	f240 2371 	movw	r3, #625	; 0x271
 80042b0:	607b      	str	r3, [r7, #4]
 80042b2:	e01e      	b.n	80042f2 <ADC1_DMA_sort_lhb+0x13a>
				ADC1_DMA_sort_ptr->ADC1_IN1_bfr_alt[n] = ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 80042b4:	4b2f      	ldr	r3, [pc, #188]	; (8004374 <ADC1_DMA_sort_lhb+0x1bc>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68ba      	ldr	r2, [r7, #8]
 80042ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042be:	4618      	mov	r0, r3
 80042c0:	f7fc f8ec 	bl	800049c <__aeabi_ui2d>
 80042c4:	a328      	add	r3, pc, #160	; (adr r3, 8004368 <ADC1_DMA_sort_lhb+0x1b0>)
 80042c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ca:	f7fc f961 	bl	8000590 <__aeabi_dmul>
 80042ce:	4602      	mov	r2, r0
 80042d0:	460b      	mov	r3, r1
 80042d2:	4928      	ldr	r1, [pc, #160]	; (8004374 <ADC1_DMA_sort_lhb+0x1bc>)
 80042d4:	680c      	ldr	r4, [r1, #0]
 80042d6:	4610      	mov	r0, r2
 80042d8:	4619      	mov	r1, r3
 80042da:	f7fc fc31 	bl	8000b40 <__aeabi_d2uiz>
 80042de:	4602      	mov	r2, r0
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f603 63a6 	addw	r3, r3, #3750	; 0xea6
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4423      	add	r3, r4
 80042ea:	605a      	str	r2, [r3, #4]
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)  // Stores data on the lower half of IN1 channel data buffer
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	3301      	adds	r3, #1
 80042f0:	607b      	str	r3, [r7, #4]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 80042f8:	d9dc      	bls.n	80042b4 <ADC1_DMA_sort_lhb+0xfc>
 80042fa:	e026      	b.n	800434a <ADC1_DMA_sort_lhb+0x192>
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)  // Stores data on the lower half of IN2 channel data buffer
 80042fc:	f240 2371 	movw	r3, #625	; 0x271
 8004300:	603b      	str	r3, [r7, #0]
 8004302:	e01e      	b.n	8004342 <ADC1_DMA_sort_lhb+0x18a>
				ADC1_DMA_sort_ptr->ADC1_IN2_bfr_alt[p] = ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 8004304:	4b1b      	ldr	r3, [pc, #108]	; (8004374 <ADC1_DMA_sort_lhb+0x1bc>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68ba      	ldr	r2, [r7, #8]
 800430a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800430e:	4618      	mov	r0, r3
 8004310:	f7fc f8c4 	bl	800049c <__aeabi_ui2d>
 8004314:	a314      	add	r3, pc, #80	; (adr r3, 8004368 <ADC1_DMA_sort_lhb+0x1b0>)
 8004316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800431a:	f7fc f939 	bl	8000590 <__aeabi_dmul>
 800431e:	4602      	mov	r2, r0
 8004320:	460b      	mov	r3, r1
 8004322:	4914      	ldr	r1, [pc, #80]	; (8004374 <ADC1_DMA_sort_lhb+0x1bc>)
 8004324:	680c      	ldr	r4, [r1, #0]
 8004326:	4610      	mov	r0, r2
 8004328:	4619      	mov	r1, r3
 800432a:	f7fc fc09 	bl	8000b40 <__aeabi_d2uiz>
 800432e:	4602      	mov	r2, r0
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 8004336:	330c      	adds	r3, #12
 8004338:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)  // Stores data on the lower half of IN2 channel data buffer
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	3301      	adds	r3, #1
 8004340:	603b      	str	r3, [r7, #0]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8004348:	d9dc      	bls.n	8004304 <ADC1_DMA_sort_lhb+0x14c>
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++) // Scans the lower half of the DMA buffer
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	3301      	adds	r3, #1
 800434e:	60bb      	str	r3, [r7, #8]
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	f640 12c2 	movw	r2, #2498	; 0x9c2
 8004356:	4293      	cmp	r3, r2
 8004358:	d9a0      	bls.n	800429c <ADC1_DMA_sort_lhb+0xe4>
	ADC1_Current_buffer = 1;
 800435a:	4b05      	ldr	r3, [pc, #20]	; (8004370 <ADC1_DMA_sort_lhb+0x1b8>)
 800435c:	2201      	movs	r2, #1
 800435e:	701a      	strb	r2, [r3, #0]
};
 8004360:	bf00      	nop
 8004362:	371c      	adds	r7, #28
 8004364:	46bd      	mov	sp, r7
 8004366:	bd90      	pop	{r4, r7, pc}
 8004368:	66666666 	.word	0x66666666
 800436c:	3f4a6666 	.word	0x3f4a6666
 8004370:	20007868 	.word	0x20007868
 8004374:	2000bb30 	.word	0x2000bb30

08004378 <ADC2_DMA_sort_uhb>:


void ADC2_DMA_sort_uhb (void)
{
 8004378:	b590      	push	{r4, r7, lr}
 800437a:	b087      	sub	sp, #28
 800437c:	af00      	add	r7, sp, #0
  if(ADC2_Current_buffer == 1)
 800437e:	4b66      	ldr	r3, [pc, #408]	; (8004518 <ADC2_DMA_sort_uhb+0x1a0>)
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d15f      	bne.n	8004446 <ADC2_DMA_sort_uhb+0xce>
  {
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 8004386:	2300      	movs	r3, #0
 8004388:	617b      	str	r3, [r7, #20]
 800438a:	e057      	b.n	800443c <ADC2_DMA_sort_uhb+0xc4>
	{
		if(m==0 || (m%2==0))
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d004      	beq.n	800439c <ADC2_DMA_sort_uhb+0x24>
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	2b00      	cmp	r3, #0
 800439a:	d126      	bne.n	80043ea <ADC2_DMA_sort_uhb+0x72>
		{
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 800439c:	2300      	movs	r3, #0
 800439e:	613b      	str	r3, [r7, #16]
 80043a0:	e01e      	b.n	80043e0 <ADC2_DMA_sort_uhb+0x68>
			{
				ADC2_DMA_sort_ptr->ADC2_IN3_bfr[n] = ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 80043a2:	4b5e      	ldr	r3, [pc, #376]	; (800451c <ADC2_DMA_sort_uhb+0x1a4>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7fc f875 	bl	800049c <__aeabi_ui2d>
 80043b2:	a357      	add	r3, pc, #348	; (adr r3, 8004510 <ADC2_DMA_sort_uhb+0x198>)
 80043b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b8:	f7fc f8ea 	bl	8000590 <__aeabi_dmul>
 80043bc:	4602      	mov	r2, r0
 80043be:	460b      	mov	r3, r1
 80043c0:	4956      	ldr	r1, [pc, #344]	; (800451c <ADC2_DMA_sort_uhb+0x1a4>)
 80043c2:	680c      	ldr	r4, [r1, #0]
 80043c4:	4610      	mov	r0, r2
 80043c6:	4619      	mov	r1, r3
 80043c8:	f7fc fbba 	bl	8000b40 <__aeabi_d2uiz>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	4423      	add	r3, r4
 80043d8:	605a      	str	r2, [r3, #4]
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	3301      	adds	r3, #1
 80043de:	613b      	str	r3, [r7, #16]
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 80043e6:	d3dc      	bcc.n	80043a2 <ADC2_DMA_sort_uhb+0x2a>
 80043e8:	e025      	b.n	8004436 <ADC2_DMA_sort_uhb+0xbe>
            }
        }
		else
		{
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 80043ea:	2300      	movs	r3, #0
 80043ec:	60fb      	str	r3, [r7, #12]
 80043ee:	e01e      	b.n	800442e <ADC2_DMA_sort_uhb+0xb6>
			{
				ADC2_DMA_sort_ptr->ADC2_IN4_bfr[p] = ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 80043f0:	4b4a      	ldr	r3, [pc, #296]	; (800451c <ADC2_DMA_sort_uhb+0x1a4>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fc f84e 	bl	800049c <__aeabi_ui2d>
 8004400:	a343      	add	r3, pc, #268	; (adr r3, 8004510 <ADC2_DMA_sort_uhb+0x198>)
 8004402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004406:	f7fc f8c3 	bl	8000590 <__aeabi_dmul>
 800440a:	4602      	mov	r2, r0
 800440c:	460b      	mov	r3, r1
 800440e:	4943      	ldr	r1, [pc, #268]	; (800451c <ADC2_DMA_sort_uhb+0x1a4>)
 8004410:	680c      	ldr	r4, [r1, #0]
 8004412:	4610      	mov	r0, r2
 8004414:	4619      	mov	r1, r3
 8004416:	f7fc fb93 	bl	8000b40 <__aeabi_d2uiz>
 800441a:	4602      	mov	r2, r0
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8004422:	330a      	adds	r3, #10
 8004424:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	3301      	adds	r3, #1
 800442c:	60fb      	str	r3, [r7, #12]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8004434:	d3dc      	bcc.n	80043f0 <ADC2_DMA_sort_uhb+0x78>
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	3301      	adds	r3, #1
 800443a:	617b      	str	r3, [r7, #20]
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8004442:	d9a3      	bls.n	800438c <ADC2_DMA_sort_uhb+0x14>
  			}
  		}
     }
   }

};
 8004444:	e05e      	b.n	8004504 <ADC2_DMA_sort_uhb+0x18c>
  	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 8004446:	2300      	movs	r3, #0
 8004448:	60bb      	str	r3, [r7, #8]
 800444a:	e057      	b.n	80044fc <ADC2_DMA_sort_uhb+0x184>
  		if(m==0 || (m%2==0))
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d004      	beq.n	800445c <ADC2_DMA_sort_uhb+0xe4>
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b00      	cmp	r3, #0
 800445a:	d126      	bne.n	80044aa <ADC2_DMA_sort_uhb+0x132>
  			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 800445c:	2300      	movs	r3, #0
 800445e:	607b      	str	r3, [r7, #4]
 8004460:	e01e      	b.n	80044a0 <ADC2_DMA_sort_uhb+0x128>
  				ADC2_DMA_sort_ptr->ADC2_IN3_bfr_alt[n] = ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 8004462:	4b2e      	ldr	r3, [pc, #184]	; (800451c <ADC2_DMA_sort_uhb+0x1a4>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800446c:	4618      	mov	r0, r3
 800446e:	f7fc f815 	bl	800049c <__aeabi_ui2d>
 8004472:	a327      	add	r3, pc, #156	; (adr r3, 8004510 <ADC2_DMA_sort_uhb+0x198>)
 8004474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004478:	f7fc f88a 	bl	8000590 <__aeabi_dmul>
 800447c:	4602      	mov	r2, r0
 800447e:	460b      	mov	r3, r1
 8004480:	4926      	ldr	r1, [pc, #152]	; (800451c <ADC2_DMA_sort_uhb+0x1a4>)
 8004482:	680c      	ldr	r4, [r1, #0]
 8004484:	4610      	mov	r0, r2
 8004486:	4619      	mov	r1, r3
 8004488:	f7fc fb5a 	bl	8000b40 <__aeabi_d2uiz>
 800448c:	4602      	mov	r2, r0
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f603 63a6 	addw	r3, r3, #3750	; 0xea6
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4423      	add	r3, r4
 8004498:	605a      	str	r2, [r3, #4]
  			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	3301      	adds	r3, #1
 800449e:	607b      	str	r3, [r7, #4]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 80044a6:	d3dc      	bcc.n	8004462 <ADC2_DMA_sort_uhb+0xea>
 80044a8:	e025      	b.n	80044f6 <ADC2_DMA_sort_uhb+0x17e>
  			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 80044aa:	2300      	movs	r3, #0
 80044ac:	603b      	str	r3, [r7, #0]
 80044ae:	e01e      	b.n	80044ee <ADC2_DMA_sort_uhb+0x176>
  				ADC2_DMA_sort_ptr->ADC2_IN4_bfr_alt[p] = ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 80044b0:	4b1a      	ldr	r3, [pc, #104]	; (800451c <ADC2_DMA_sort_uhb+0x1a4>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68ba      	ldr	r2, [r7, #8]
 80044b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7fb ffee 	bl	800049c <__aeabi_ui2d>
 80044c0:	a313      	add	r3, pc, #76	; (adr r3, 8004510 <ADC2_DMA_sort_uhb+0x198>)
 80044c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c6:	f7fc f863 	bl	8000590 <__aeabi_dmul>
 80044ca:	4602      	mov	r2, r0
 80044cc:	460b      	mov	r3, r1
 80044ce:	4913      	ldr	r1, [pc, #76]	; (800451c <ADC2_DMA_sort_uhb+0x1a4>)
 80044d0:	680c      	ldr	r4, [r1, #0]
 80044d2:	4610      	mov	r0, r2
 80044d4:	4619      	mov	r1, r3
 80044d6:	f7fc fb33 	bl	8000b40 <__aeabi_d2uiz>
 80044da:	4602      	mov	r2, r0
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 80044e2:	330c      	adds	r3, #12
 80044e4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
  			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	3301      	adds	r3, #1
 80044ec:	603b      	str	r3, [r7, #0]
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 80044f4:	d3dc      	bcc.n	80044b0 <ADC2_DMA_sort_uhb+0x138>
  	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	3301      	adds	r3, #1
 80044fa:	60bb      	str	r3, [r7, #8]
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8004502:	d9a3      	bls.n	800444c <ADC2_DMA_sort_uhb+0xd4>
};
 8004504:	bf00      	nop
 8004506:	371c      	adds	r7, #28
 8004508:	46bd      	mov	sp, r7
 800450a:	bd90      	pop	{r4, r7, pc}
 800450c:	f3af 8000 	nop.w
 8004510:	66666666 	.word	0x66666666
 8004514:	3f4a6666 	.word	0x3f4a6666
 8004518:	20007869 	.word	0x20007869
 800451c:	2000bb34 	.word	0x2000bb34

08004520 <ADC2_DMA_sort_lhb>:


void ADC2_DMA_sort_lhb (void)
{
 8004520:	b590      	push	{r4, r7, lr}
 8004522:	b087      	sub	sp, #28
 8004524:	af00      	add	r7, sp, #0
  if(ADC2_Current_buffer == 1)
 8004526:	4b6c      	ldr	r3, [pc, #432]	; (80046d8 <ADC2_DMA_sort_lhb+0x1b8>)
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d166      	bne.n	80045fc <ADC2_DMA_sort_lhb+0xdc>
  {
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 800452e:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8004532:	617b      	str	r3, [r7, #20]
 8004534:	e059      	b.n	80045ea <ADC2_DMA_sort_lhb+0xca>
	{
		if(m==0||(m%2==0))
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d004      	beq.n	8004546 <ADC2_DMA_sort_lhb+0x26>
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b00      	cmp	r3, #0
 8004544:	d127      	bne.n	8004596 <ADC2_DMA_sort_lhb+0x76>
		{
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 8004546:	f240 2371 	movw	r3, #625	; 0x271
 800454a:	613b      	str	r3, [r7, #16]
 800454c:	e01e      	b.n	800458c <ADC2_DMA_sort_lhb+0x6c>
			{
				ADC2_DMA_sort_ptr->ADC2_IN3_bfr[n] = ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 800454e:	4b63      	ldr	r3, [pc, #396]	; (80046dc <ADC2_DMA_sort_lhb+0x1bc>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004558:	4618      	mov	r0, r3
 800455a:	f7fb ff9f 	bl	800049c <__aeabi_ui2d>
 800455e:	a35c      	add	r3, pc, #368	; (adr r3, 80046d0 <ADC2_DMA_sort_lhb+0x1b0>)
 8004560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004564:	f7fc f814 	bl	8000590 <__aeabi_dmul>
 8004568:	4602      	mov	r2, r0
 800456a:	460b      	mov	r3, r1
 800456c:	495b      	ldr	r1, [pc, #364]	; (80046dc <ADC2_DMA_sort_lhb+0x1bc>)
 800456e:	680c      	ldr	r4, [r1, #0]
 8004570:	4610      	mov	r0, r2
 8004572:	4619      	mov	r1, r3
 8004574:	f7fc fae4 	bl	8000b40 <__aeabi_d2uiz>
 8004578:	4602      	mov	r2, r0
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	4423      	add	r3, r4
 8004584:	605a      	str	r2, [r3, #4]
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	3301      	adds	r3, #1
 800458a:	613b      	str	r3, [r7, #16]
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8004592:	d9dc      	bls.n	800454e <ADC2_DMA_sort_lhb+0x2e>
 8004594:	e026      	b.n	80045e4 <ADC2_DMA_sort_lhb+0xc4>
            }
        }
		else
		{
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 8004596:	f240 2371 	movw	r3, #625	; 0x271
 800459a:	60fb      	str	r3, [r7, #12]
 800459c:	e01e      	b.n	80045dc <ADC2_DMA_sort_lhb+0xbc>
			{
				ADC2_DMA_sort_ptr->ADC2_IN4_bfr[p] = ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 800459e:	4b4f      	ldr	r3, [pc, #316]	; (80046dc <ADC2_DMA_sort_lhb+0x1bc>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7fb ff77 	bl	800049c <__aeabi_ui2d>
 80045ae:	a348      	add	r3, pc, #288	; (adr r3, 80046d0 <ADC2_DMA_sort_lhb+0x1b0>)
 80045b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b4:	f7fb ffec 	bl	8000590 <__aeabi_dmul>
 80045b8:	4602      	mov	r2, r0
 80045ba:	460b      	mov	r3, r1
 80045bc:	4947      	ldr	r1, [pc, #284]	; (80046dc <ADC2_DMA_sort_lhb+0x1bc>)
 80045be:	680c      	ldr	r4, [r1, #0]
 80045c0:	4610      	mov	r0, r2
 80045c2:	4619      	mov	r1, r3
 80045c4:	f7fc fabc 	bl	8000b40 <__aeabi_d2uiz>
 80045c8:	4602      	mov	r2, r0
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80045d0:	330a      	adds	r3, #10
 80045d2:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	3301      	adds	r3, #1
 80045da:	60fb      	str	r3, [r7, #12]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 80045e2:	d9dc      	bls.n	800459e <ADC2_DMA_sort_lhb+0x7e>
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	3301      	adds	r3, #1
 80045e8:	617b      	str	r3, [r7, #20]
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f640 12c2 	movw	r2, #2498	; 0x9c2
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d9a0      	bls.n	8004536 <ADC2_DMA_sort_lhb+0x16>
			}
		}
	}

	ADC2_Current_buffer = 2;
 80045f4:	4b38      	ldr	r3, [pc, #224]	; (80046d8 <ADC2_DMA_sort_lhb+0x1b8>)
 80045f6:	2202      	movs	r2, #2
 80045f8:	701a      	strb	r2, [r3, #0]
  	 }

  	ADC2_Current_buffer = 1;
   }

};
 80045fa:	e065      	b.n	80046c8 <ADC2_DMA_sort_lhb+0x1a8>
  	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 80045fc:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8004600:	60bb      	str	r3, [r7, #8]
 8004602:	e059      	b.n	80046b8 <ADC2_DMA_sort_lhb+0x198>
  		if(m==0||(m%2==0))
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d004      	beq.n	8004614 <ADC2_DMA_sort_lhb+0xf4>
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b00      	cmp	r3, #0
 8004612:	d127      	bne.n	8004664 <ADC2_DMA_sort_lhb+0x144>
  			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 8004614:	f240 2371 	movw	r3, #625	; 0x271
 8004618:	607b      	str	r3, [r7, #4]
 800461a:	e01e      	b.n	800465a <ADC2_DMA_sort_lhb+0x13a>
  				ADC2_DMA_sort_ptr->ADC2_IN3_bfr_alt[n] = ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 800461c:	4b2f      	ldr	r3, [pc, #188]	; (80046dc <ADC2_DMA_sort_lhb+0x1bc>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004626:	4618      	mov	r0, r3
 8004628:	f7fb ff38 	bl	800049c <__aeabi_ui2d>
 800462c:	a328      	add	r3, pc, #160	; (adr r3, 80046d0 <ADC2_DMA_sort_lhb+0x1b0>)
 800462e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004632:	f7fb ffad 	bl	8000590 <__aeabi_dmul>
 8004636:	4602      	mov	r2, r0
 8004638:	460b      	mov	r3, r1
 800463a:	4928      	ldr	r1, [pc, #160]	; (80046dc <ADC2_DMA_sort_lhb+0x1bc>)
 800463c:	680c      	ldr	r4, [r1, #0]
 800463e:	4610      	mov	r0, r2
 8004640:	4619      	mov	r1, r3
 8004642:	f7fc fa7d 	bl	8000b40 <__aeabi_d2uiz>
 8004646:	4602      	mov	r2, r0
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f603 63a6 	addw	r3, r3, #3750	; 0xea6
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4423      	add	r3, r4
 8004652:	605a      	str	r2, [r3, #4]
  			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	3301      	adds	r3, #1
 8004658:	607b      	str	r3, [r7, #4]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8004660:	d9dc      	bls.n	800461c <ADC2_DMA_sort_lhb+0xfc>
 8004662:	e026      	b.n	80046b2 <ADC2_DMA_sort_lhb+0x192>
  			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 8004664:	f240 2371 	movw	r3, #625	; 0x271
 8004668:	603b      	str	r3, [r7, #0]
 800466a:	e01e      	b.n	80046aa <ADC2_DMA_sort_lhb+0x18a>
  				ADC2_DMA_sort_ptr->ADC2_IN4_bfr_alt[p] = ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 800466c:	4b1b      	ldr	r3, [pc, #108]	; (80046dc <ADC2_DMA_sort_lhb+0x1bc>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68ba      	ldr	r2, [r7, #8]
 8004672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004676:	4618      	mov	r0, r3
 8004678:	f7fb ff10 	bl	800049c <__aeabi_ui2d>
 800467c:	a314      	add	r3, pc, #80	; (adr r3, 80046d0 <ADC2_DMA_sort_lhb+0x1b0>)
 800467e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004682:	f7fb ff85 	bl	8000590 <__aeabi_dmul>
 8004686:	4602      	mov	r2, r0
 8004688:	460b      	mov	r3, r1
 800468a:	4914      	ldr	r1, [pc, #80]	; (80046dc <ADC2_DMA_sort_lhb+0x1bc>)
 800468c:	680c      	ldr	r4, [r1, #0]
 800468e:	4610      	mov	r0, r2
 8004690:	4619      	mov	r1, r3
 8004692:	f7fc fa55 	bl	8000b40 <__aeabi_d2uiz>
 8004696:	4602      	mov	r2, r0
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 800469e:	330c      	adds	r3, #12
 80046a0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
  			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	3301      	adds	r3, #1
 80046a8:	603b      	str	r3, [r7, #0]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 80046b0:	d9dc      	bls.n	800466c <ADC2_DMA_sort_lhb+0x14c>
  	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	3301      	adds	r3, #1
 80046b6:	60bb      	str	r3, [r7, #8]
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	f640 12c2 	movw	r2, #2498	; 0x9c2
 80046be:	4293      	cmp	r3, r2
 80046c0:	d9a0      	bls.n	8004604 <ADC2_DMA_sort_lhb+0xe4>
  	ADC2_Current_buffer = 1;
 80046c2:	4b05      	ldr	r3, [pc, #20]	; (80046d8 <ADC2_DMA_sort_lhb+0x1b8>)
 80046c4:	2201      	movs	r2, #1
 80046c6:	701a      	strb	r2, [r3, #0]
};
 80046c8:	bf00      	nop
 80046ca:	371c      	adds	r7, #28
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd90      	pop	{r4, r7, pc}
 80046d0:	66666666 	.word	0x66666666
 80046d4:	3f4a6666 	.word	0x3f4a6666
 80046d8:	20007869 	.word	0x20007869
 80046dc:	2000bb34 	.word	0x2000bb34

080046e0 <ADC3_DMA_sort_uhb>:


void ADC3_DMA_sort_uhb (void)
{
 80046e0:	b590      	push	{r4, r7, lr}
 80046e2:	b087      	sub	sp, #28
 80046e4:	af00      	add	r7, sp, #0
  if(ADC3_Current_buffer == 1)
 80046e6:	4b66      	ldr	r3, [pc, #408]	; (8004880 <ADC3_DMA_sort_uhb+0x1a0>)
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d15f      	bne.n	80047ae <ADC3_DMA_sort_uhb+0xce>
  {
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 80046ee:	2300      	movs	r3, #0
 80046f0:	617b      	str	r3, [r7, #20]
 80046f2:	e057      	b.n	80047a4 <ADC3_DMA_sort_uhb+0xc4>
	{
		if(m==0 || (m%2==0))
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d004      	beq.n	8004704 <ADC3_DMA_sort_uhb+0x24>
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	f003 0301 	and.w	r3, r3, #1
 8004700:	2b00      	cmp	r3, #0
 8004702:	d126      	bne.n	8004752 <ADC3_DMA_sort_uhb+0x72>
		{
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 8004704:	2300      	movs	r3, #0
 8004706:	613b      	str	r3, [r7, #16]
 8004708:	e01e      	b.n	8004748 <ADC3_DMA_sort_uhb+0x68>
			{
				ADC3_DMA_sort_ptr->ADC3_IN1_bfr[n] = ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 800470a:	4b5e      	ldr	r3, [pc, #376]	; (8004884 <ADC3_DMA_sort_uhb+0x1a4>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004714:	4618      	mov	r0, r3
 8004716:	f7fb fec1 	bl	800049c <__aeabi_ui2d>
 800471a:	a357      	add	r3, pc, #348	; (adr r3, 8004878 <ADC3_DMA_sort_uhb+0x198>)
 800471c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004720:	f7fb ff36 	bl	8000590 <__aeabi_dmul>
 8004724:	4602      	mov	r2, r0
 8004726:	460b      	mov	r3, r1
 8004728:	4956      	ldr	r1, [pc, #344]	; (8004884 <ADC3_DMA_sort_uhb+0x1a4>)
 800472a:	680c      	ldr	r4, [r1, #0]
 800472c:	4610      	mov	r0, r2
 800472e:	4619      	mov	r1, r3
 8004730:	f7fc fa06 	bl	8000b40 <__aeabi_d2uiz>
 8004734:	4602      	mov	r2, r0
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	4423      	add	r3, r4
 8004740:	605a      	str	r2, [r3, #4]
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	3301      	adds	r3, #1
 8004746:	613b      	str	r3, [r7, #16]
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 800474e:	d3dc      	bcc.n	800470a <ADC3_DMA_sort_uhb+0x2a>
 8004750:	e025      	b.n	800479e <ADC3_DMA_sort_uhb+0xbe>
            }
        }
		else
		{
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 8004752:	2300      	movs	r3, #0
 8004754:	60fb      	str	r3, [r7, #12]
 8004756:	e01e      	b.n	8004796 <ADC3_DMA_sort_uhb+0xb6>
			{
				ADC3_DMA_sort_ptr->ADC3_IN2_bfr[p] = ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 8004758:	4b4a      	ldr	r3, [pc, #296]	; (8004884 <ADC3_DMA_sort_uhb+0x1a4>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004762:	4618      	mov	r0, r3
 8004764:	f7fb fe9a 	bl	800049c <__aeabi_ui2d>
 8004768:	a343      	add	r3, pc, #268	; (adr r3, 8004878 <ADC3_DMA_sort_uhb+0x198>)
 800476a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476e:	f7fb ff0f 	bl	8000590 <__aeabi_dmul>
 8004772:	4602      	mov	r2, r0
 8004774:	460b      	mov	r3, r1
 8004776:	4943      	ldr	r1, [pc, #268]	; (8004884 <ADC3_DMA_sort_uhb+0x1a4>)
 8004778:	680c      	ldr	r4, [r1, #0]
 800477a:	4610      	mov	r0, r2
 800477c:	4619      	mov	r1, r3
 800477e:	f7fc f9df 	bl	8000b40 <__aeabi_d2uiz>
 8004782:	4602      	mov	r2, r0
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800478a:	330a      	adds	r3, #10
 800478c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	3301      	adds	r3, #1
 8004794:	60fb      	str	r3, [r7, #12]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 800479c:	d3dc      	bcc.n	8004758 <ADC3_DMA_sort_uhb+0x78>
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	3301      	adds	r3, #1
 80047a2:	617b      	str	r3, [r7, #20]
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 80047aa:	d9a3      	bls.n	80046f4 <ADC3_DMA_sort_uhb+0x14>
  			}
  		}
     }
   }

};
 80047ac:	e05e      	b.n	800486c <ADC3_DMA_sort_uhb+0x18c>
  	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 80047ae:	2300      	movs	r3, #0
 80047b0:	60bb      	str	r3, [r7, #8]
 80047b2:	e057      	b.n	8004864 <ADC3_DMA_sort_uhb+0x184>
  		if(m==0 || (m%2==0))
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d004      	beq.n	80047c4 <ADC3_DMA_sort_uhb+0xe4>
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	f003 0301 	and.w	r3, r3, #1
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d126      	bne.n	8004812 <ADC3_DMA_sort_uhb+0x132>
  			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 80047c4:	2300      	movs	r3, #0
 80047c6:	607b      	str	r3, [r7, #4]
 80047c8:	e01e      	b.n	8004808 <ADC3_DMA_sort_uhb+0x128>
  				ADC3_DMA_sort_ptr->ADC3_IN1_bfr_alt[n] = ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 80047ca:	4b2e      	ldr	r3, [pc, #184]	; (8004884 <ADC3_DMA_sort_uhb+0x1a4>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7fb fe61 	bl	800049c <__aeabi_ui2d>
 80047da:	a327      	add	r3, pc, #156	; (adr r3, 8004878 <ADC3_DMA_sort_uhb+0x198>)
 80047dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e0:	f7fb fed6 	bl	8000590 <__aeabi_dmul>
 80047e4:	4602      	mov	r2, r0
 80047e6:	460b      	mov	r3, r1
 80047e8:	4926      	ldr	r1, [pc, #152]	; (8004884 <ADC3_DMA_sort_uhb+0x1a4>)
 80047ea:	680c      	ldr	r4, [r1, #0]
 80047ec:	4610      	mov	r0, r2
 80047ee:	4619      	mov	r1, r3
 80047f0:	f7fc f9a6 	bl	8000b40 <__aeabi_d2uiz>
 80047f4:	4602      	mov	r2, r0
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f603 63a6 	addw	r3, r3, #3750	; 0xea6
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	4423      	add	r3, r4
 8004800:	605a      	str	r2, [r3, #4]
  			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	3301      	adds	r3, #1
 8004806:	607b      	str	r3, [r7, #4]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 800480e:	d3dc      	bcc.n	80047ca <ADC3_DMA_sort_uhb+0xea>
 8004810:	e025      	b.n	800485e <ADC3_DMA_sort_uhb+0x17e>
  			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 8004812:	2300      	movs	r3, #0
 8004814:	603b      	str	r3, [r7, #0]
 8004816:	e01e      	b.n	8004856 <ADC3_DMA_sort_uhb+0x176>
  				ADC3_DMA_sort_ptr->ADC3_IN2_bfr_alt[p] = ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 8004818:	4b1a      	ldr	r3, [pc, #104]	; (8004884 <ADC3_DMA_sort_uhb+0x1a4>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68ba      	ldr	r2, [r7, #8]
 800481e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004822:	4618      	mov	r0, r3
 8004824:	f7fb fe3a 	bl	800049c <__aeabi_ui2d>
 8004828:	a313      	add	r3, pc, #76	; (adr r3, 8004878 <ADC3_DMA_sort_uhb+0x198>)
 800482a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482e:	f7fb feaf 	bl	8000590 <__aeabi_dmul>
 8004832:	4602      	mov	r2, r0
 8004834:	460b      	mov	r3, r1
 8004836:	4913      	ldr	r1, [pc, #76]	; (8004884 <ADC3_DMA_sort_uhb+0x1a4>)
 8004838:	680c      	ldr	r4, [r1, #0]
 800483a:	4610      	mov	r0, r2
 800483c:	4619      	mov	r1, r3
 800483e:	f7fc f97f 	bl	8000b40 <__aeabi_d2uiz>
 8004842:	4602      	mov	r2, r0
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 800484a:	330c      	adds	r3, #12
 800484c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
  			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	3301      	adds	r3, #1
 8004854:	603b      	str	r3, [r7, #0]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 800485c:	d3dc      	bcc.n	8004818 <ADC3_DMA_sort_uhb+0x138>
  	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	3301      	adds	r3, #1
 8004862:	60bb      	str	r3, [r7, #8]
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 800486a:	d9a3      	bls.n	80047b4 <ADC3_DMA_sort_uhb+0xd4>
};
 800486c:	bf00      	nop
 800486e:	371c      	adds	r7, #28
 8004870:	46bd      	mov	sp, r7
 8004872:	bd90      	pop	{r4, r7, pc}
 8004874:	f3af 8000 	nop.w
 8004878:	66666666 	.word	0x66666666
 800487c:	3f4a6666 	.word	0x3f4a6666
 8004880:	2000786a 	.word	0x2000786a
 8004884:	2000bb38 	.word	0x2000bb38

08004888 <ADC3_DMA_sort_lhb>:


void ADC3_DMA_sort_lhb (void)
{
 8004888:	b590      	push	{r4, r7, lr}
 800488a:	b087      	sub	sp, #28
 800488c:	af00      	add	r7, sp, #0
  if(ADC3_Current_buffer == 1)
 800488e:	4b6c      	ldr	r3, [pc, #432]	; (8004a40 <ADC3_DMA_sort_lhb+0x1b8>)
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d166      	bne.n	8004964 <ADC3_DMA_sort_lhb+0xdc>
  {
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 8004896:	f240 43e2 	movw	r3, #1250	; 0x4e2
 800489a:	617b      	str	r3, [r7, #20]
 800489c:	e059      	b.n	8004952 <ADC3_DMA_sort_lhb+0xca>
	{
		if(m==0||(m%2==0))
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d004      	beq.n	80048ae <ADC3_DMA_sort_lhb+0x26>
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d127      	bne.n	80048fe <ADC3_DMA_sort_lhb+0x76>
		{
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 80048ae:	f240 2371 	movw	r3, #625	; 0x271
 80048b2:	613b      	str	r3, [r7, #16]
 80048b4:	e01e      	b.n	80048f4 <ADC3_DMA_sort_lhb+0x6c>
			{
				ADC3_DMA_sort_ptr->ADC3_IN1_bfr[n] = ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 80048b6:	4b63      	ldr	r3, [pc, #396]	; (8004a44 <ADC3_DMA_sort_lhb+0x1bc>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7fb fdeb 	bl	800049c <__aeabi_ui2d>
 80048c6:	a35c      	add	r3, pc, #368	; (adr r3, 8004a38 <ADC3_DMA_sort_lhb+0x1b0>)
 80048c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048cc:	f7fb fe60 	bl	8000590 <__aeabi_dmul>
 80048d0:	4602      	mov	r2, r0
 80048d2:	460b      	mov	r3, r1
 80048d4:	495b      	ldr	r1, [pc, #364]	; (8004a44 <ADC3_DMA_sort_lhb+0x1bc>)
 80048d6:	680c      	ldr	r4, [r1, #0]
 80048d8:	4610      	mov	r0, r2
 80048da:	4619      	mov	r1, r3
 80048dc:	f7fc f930 	bl	8000b40 <__aeabi_d2uiz>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	4423      	add	r3, r4
 80048ec:	605a      	str	r2, [r3, #4]
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	3301      	adds	r3, #1
 80048f2:	613b      	str	r3, [r7, #16]
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 80048fa:	d9dc      	bls.n	80048b6 <ADC3_DMA_sort_lhb+0x2e>
 80048fc:	e026      	b.n	800494c <ADC3_DMA_sort_lhb+0xc4>
            }
        }
		else
		{
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 80048fe:	f240 2371 	movw	r3, #625	; 0x271
 8004902:	60fb      	str	r3, [r7, #12]
 8004904:	e01e      	b.n	8004944 <ADC3_DMA_sort_lhb+0xbc>
			{
				ADC3_DMA_sort_ptr->ADC3_IN2_bfr[p] = ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 8004906:	4b4f      	ldr	r3, [pc, #316]	; (8004a44 <ADC3_DMA_sort_lhb+0x1bc>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004910:	4618      	mov	r0, r3
 8004912:	f7fb fdc3 	bl	800049c <__aeabi_ui2d>
 8004916:	a348      	add	r3, pc, #288	; (adr r3, 8004a38 <ADC3_DMA_sort_lhb+0x1b0>)
 8004918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491c:	f7fb fe38 	bl	8000590 <__aeabi_dmul>
 8004920:	4602      	mov	r2, r0
 8004922:	460b      	mov	r3, r1
 8004924:	4947      	ldr	r1, [pc, #284]	; (8004a44 <ADC3_DMA_sort_lhb+0x1bc>)
 8004926:	680c      	ldr	r4, [r1, #0]
 8004928:	4610      	mov	r0, r2
 800492a:	4619      	mov	r1, r3
 800492c:	f7fc f908 	bl	8000b40 <__aeabi_d2uiz>
 8004930:	4602      	mov	r2, r0
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8004938:	330a      	adds	r3, #10
 800493a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	3301      	adds	r3, #1
 8004942:	60fb      	str	r3, [r7, #12]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 800494a:	d9dc      	bls.n	8004906 <ADC3_DMA_sort_lhb+0x7e>
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	3301      	adds	r3, #1
 8004950:	617b      	str	r3, [r7, #20]
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f640 12c2 	movw	r2, #2498	; 0x9c2
 8004958:	4293      	cmp	r3, r2
 800495a:	d9a0      	bls.n	800489e <ADC3_DMA_sort_lhb+0x16>
			}
		}
     }

	ADC3_Current_buffer = 2;
 800495c:	4b38      	ldr	r3, [pc, #224]	; (8004a40 <ADC3_DMA_sort_lhb+0x1b8>)
 800495e:	2202      	movs	r2, #2
 8004960:	701a      	strb	r2, [r3, #0]

  	ADC3_Current_buffer = 1;
  }


};
 8004962:	e065      	b.n	8004a30 <ADC3_DMA_sort_lhb+0x1a8>
  	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 8004964:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8004968:	60bb      	str	r3, [r7, #8]
 800496a:	e059      	b.n	8004a20 <ADC3_DMA_sort_lhb+0x198>
  		if(m==0||(m%2==0))
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d004      	beq.n	800497c <ADC3_DMA_sort_lhb+0xf4>
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	2b00      	cmp	r3, #0
 800497a:	d127      	bne.n	80049cc <ADC3_DMA_sort_lhb+0x144>
  			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 800497c:	f240 2371 	movw	r3, #625	; 0x271
 8004980:	607b      	str	r3, [r7, #4]
 8004982:	e01e      	b.n	80049c2 <ADC3_DMA_sort_lhb+0x13a>
  				ADC3_DMA_sort_ptr->ADC3_IN1_bfr_alt[n] = ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 8004984:	4b2f      	ldr	r3, [pc, #188]	; (8004a44 <ADC3_DMA_sort_lhb+0x1bc>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68ba      	ldr	r2, [r7, #8]
 800498a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800498e:	4618      	mov	r0, r3
 8004990:	f7fb fd84 	bl	800049c <__aeabi_ui2d>
 8004994:	a328      	add	r3, pc, #160	; (adr r3, 8004a38 <ADC3_DMA_sort_lhb+0x1b0>)
 8004996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499a:	f7fb fdf9 	bl	8000590 <__aeabi_dmul>
 800499e:	4602      	mov	r2, r0
 80049a0:	460b      	mov	r3, r1
 80049a2:	4928      	ldr	r1, [pc, #160]	; (8004a44 <ADC3_DMA_sort_lhb+0x1bc>)
 80049a4:	680c      	ldr	r4, [r1, #0]
 80049a6:	4610      	mov	r0, r2
 80049a8:	4619      	mov	r1, r3
 80049aa:	f7fc f8c9 	bl	8000b40 <__aeabi_d2uiz>
 80049ae:	4602      	mov	r2, r0
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f603 63a6 	addw	r3, r3, #3750	; 0xea6
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	4423      	add	r3, r4
 80049ba:	605a      	str	r2, [r3, #4]
  			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	3301      	adds	r3, #1
 80049c0:	607b      	str	r3, [r7, #4]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 80049c8:	d9dc      	bls.n	8004984 <ADC3_DMA_sort_lhb+0xfc>
 80049ca:	e026      	b.n	8004a1a <ADC3_DMA_sort_lhb+0x192>
  			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 80049cc:	f240 2371 	movw	r3, #625	; 0x271
 80049d0:	603b      	str	r3, [r7, #0]
 80049d2:	e01e      	b.n	8004a12 <ADC3_DMA_sort_lhb+0x18a>
  				ADC3_DMA_sort_ptr->ADC3_IN2_bfr_alt[p] = ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 80049d4:	4b1b      	ldr	r3, [pc, #108]	; (8004a44 <ADC3_DMA_sort_lhb+0x1bc>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68ba      	ldr	r2, [r7, #8]
 80049da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049de:	4618      	mov	r0, r3
 80049e0:	f7fb fd5c 	bl	800049c <__aeabi_ui2d>
 80049e4:	a314      	add	r3, pc, #80	; (adr r3, 8004a38 <ADC3_DMA_sort_lhb+0x1b0>)
 80049e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ea:	f7fb fdd1 	bl	8000590 <__aeabi_dmul>
 80049ee:	4602      	mov	r2, r0
 80049f0:	460b      	mov	r3, r1
 80049f2:	4914      	ldr	r1, [pc, #80]	; (8004a44 <ADC3_DMA_sort_lhb+0x1bc>)
 80049f4:	680c      	ldr	r4, [r1, #0]
 80049f6:	4610      	mov	r0, r2
 80049f8:	4619      	mov	r1, r3
 80049fa:	f7fc f8a1 	bl	8000b40 <__aeabi_d2uiz>
 80049fe:	4602      	mov	r2, r0
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 8004a06:	330c      	adds	r3, #12
 8004a08:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
  			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	3301      	adds	r3, #1
 8004a10:	603b      	str	r3, [r7, #0]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8004a18:	d9dc      	bls.n	80049d4 <ADC3_DMA_sort_lhb+0x14c>
  	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	60bb      	str	r3, [r7, #8]
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f640 12c2 	movw	r2, #2498	; 0x9c2
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d9a0      	bls.n	800496c <ADC3_DMA_sort_lhb+0xe4>
  	ADC3_Current_buffer = 1;
 8004a2a:	4b05      	ldr	r3, [pc, #20]	; (8004a40 <ADC3_DMA_sort_lhb+0x1b8>)
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	701a      	strb	r2, [r3, #0]
};
 8004a30:	bf00      	nop
 8004a32:	371c      	adds	r7, #28
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd90      	pop	{r4, r7, pc}
 8004a38:	66666666 	.word	0x66666666
 8004a3c:	3f4a6666 	.word	0x3f4a6666
 8004a40:	2000786a 	.word	0x2000786a
 8004a44:	2000bb38 	.word	0x2000bb38

08004a48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004a4e:	f001 fd28 	bl	80064a2 <HAL_Init>

  /* USER CODE BEGIN Init */
  init_ADC1_IN1_struct(); // Pointer to the source buffer is initialized at runtime
 8004a52:	f7fd f9c3 	bl	8001ddc <init_ADC1_IN1_struct>
  init_ADC1_IN1_FO_biquad_filter();  // Initializes the filter coefficients and variables
 8004a56:	f7fd f9e1 	bl	8001e1c <init_ADC1_IN1_FO_biquad_filter>
  MA_ADC1_IN1_Init(&MovingAverage_ADC1_IN1); // Initializes all the output and moving average buffers to zero and the index to zero
 8004a5a:	48a9      	ldr	r0, [pc, #676]	; (8004d00 <main+0x2b8>)
 8004a5c:	f7fc fde6 	bl	800162c <MA_ADC1_IN1_Init>

  init_ADC1_IN2_struct();
 8004a60:	f7fd fa06 	bl	8001e70 <init_ADC1_IN2_struct>
  init_ADC1_IN2_FO_biquad_filter();
 8004a64:	f7fd fa24 	bl	8001eb0 <init_ADC1_IN2_FO_biquad_filter>
  MA_ADC1_IN2_Init(&MovingAverage_ADC1_IN2);
 8004a68:	48a6      	ldr	r0, [pc, #664]	; (8004d04 <main+0x2bc>)
 8004a6a:	f7fc fe83 	bl	8001774 <MA_ADC1_IN2_Init>

  init_ADC2_IN3_struct();
 8004a6e:	f7fd fa49 	bl	8001f04 <init_ADC2_IN3_struct>
  init_ADC2_IN3_FO_biquad_filter();
 8004a72:	f7fd fa67 	bl	8001f44 <init_ADC2_IN3_FO_biquad_filter>
  MA_ADC2_IN3_Init(&MovingAverage_ADC2_IN3);
 8004a76:	48a4      	ldr	r0, [pc, #656]	; (8004d08 <main+0x2c0>)
 8004a78:	f7fc ff20 	bl	80018bc <MA_ADC2_IN3_Init>

  init_ADC2_IN4_struct();
 8004a7c:	f7fd fa8c 	bl	8001f98 <init_ADC2_IN4_struct>
  init_ADC2_IN4_FO_biquad_filter();
 8004a80:	f7fd faaa 	bl	8001fd8 <init_ADC2_IN4_FO_biquad_filter>
  MA_ADC2_IN4_Init(&MovingAverage_ADC2_IN4);
 8004a84:	48a1      	ldr	r0, [pc, #644]	; (8004d0c <main+0x2c4>)
 8004a86:	f7fc ffbd 	bl	8001a04 <MA_ADC2_IN4_Init>

  init_ADC3_IN1_struct();
 8004a8a:	f7fd facf 	bl	800202c <init_ADC3_IN1_struct>
  init_ADC3_IN1_FO_biquad_filter();
 8004a8e:	f7fd faed 	bl	800206c <init_ADC3_IN1_FO_biquad_filter>
  MA_ADC3_IN1_Init(&MovingAverage_ADC3_IN1);
 8004a92:	489f      	ldr	r0, [pc, #636]	; (8004d10 <main+0x2c8>)
 8004a94:	f7fd f85a 	bl	8001b4c <MA_ADC3_IN1_Init>

  init_ADC3_IN2_struct();
 8004a98:	f7fd fb12 	bl	80020c0 <init_ADC3_IN2_struct>
  init_ADC3_IN2_FO_biquad_filter();
 8004a9c:	f7fd fb30 	bl	8002100 <init_ADC3_IN2_FO_biquad_filter>
  MA_ADC3_IN2_Init(&MovingAverage_ADC3_IN2);
 8004aa0:	489c      	ldr	r0, [pc, #624]	; (8004d14 <main+0x2cc>)
 8004aa2:	f7fd f8f7 	bl	8001c94 <MA_ADC3_IN2_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004aa6:	f000 fab9 	bl	800501c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004aaa:	f000 fdeb 	bl	8005684 <MX_GPIO_Init>
  MX_DMA_Init();
 8004aae:	f000 fd93 	bl	80055d8 <MX_DMA_Init>
  MX_ADC1_Init();
 8004ab2:	f000 fafd 	bl	80050b0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8004ab6:	f000 fb85 	bl	80051c4 <MX_ADC2_Init>
  MX_ADC3_Init();
 8004aba:	f000 fbfb 	bl	80052b4 <MX_ADC3_Init>
  MX_FMAC_Init();
 8004abe:	f000 fcb7 	bl	8005430 <MX_FMAC_Init>
  MX_TIM6_Init();
 8004ac2:	f000 fcc9 	bl	8005458 <MX_TIM6_Init>
  MX_TIM7_Init();
 8004ac6:	f000 fcfd 	bl	80054c4 <MX_TIM7_Init>
  MX_TIM20_Init();
 8004aca:	f000 fd31 	bl	8005530 <MX_TIM20_Init>
  MX_DAC1_Init();
 8004ace:	f000 fc69 	bl	80053a4 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  // Enable the EXTI line 2 interrupt
  HAL_NVIC_SetPriority(EXTI2_IRQn, 2, 0);  // Set priority
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	2102      	movs	r1, #2
 8004ad6:	2008      	movs	r0, #8
 8004ad8:	f003 f955 	bl	8007d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn); // Enable the interrupt in NVIC (Interrupt is triggered by pressing the push button)
 8004adc:	2008      	movs	r0, #8
 8004ade:	f003 f96c 	bl	8007dba <HAL_NVIC_EnableIRQ>

  EXT12_IRQHandler(); // When the push button is pressed - starts all ADCs with DMA, starts the sorting algorithm for each ADC, calculates the offset from the baseline and the standard deviation from the baseline data (for all channels). Finally, it toggles the status LED to indicate that acquisition has started
 8004ae2:	f000 fe33 	bl	800574c <EXT12_IRQHandler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if (Buffer_ADC1_Ready == 1) // Checks if the flag for the channel buffer fills is set for ADC1
 8004ae6:	4b8c      	ldr	r3, [pc, #560]	; (8004d18 <main+0x2d0>)
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	f040 80a7 	bne.w	8004c40 <main+0x1f8>
	{
	  /* DSP SECTION */
	  update_ADC1_IN1_FO_biquad_filter();  // Filters channel 1 data
 8004af2:	f7fd f9a5 	bl	8001e40 <update_ADC1_IN1_FO_biquad_filter>
	  MA_ADC1_IN1_Update(&MovingAverage_ADC1_IN1); // Performs the moving average
 8004af6:	4882      	ldr	r0, [pc, #520]	; (8004d00 <main+0x2b8>)
 8004af8:	f7fc fdca 	bl	8001690 <MA_ADC1_IN1_Update>
	  for (uint32_t y = 0; y < ADC_DMA_SIXTEENTHBUFFERSIZE; y++)
 8004afc:	2300      	movs	r3, #0
 8004afe:	617b      	str	r3, [r7, #20]
 8004b00:	e017      	b.n	8004b32 <main+0xea>
	  {
		  MovingAverage_ADC1_IN1.MA_ADC1_IN1_OutBfr[y]  -= Offset_1; // Subtracts the stored offset
 8004b02:	4a7f      	ldr	r2, [pc, #508]	; (8004d00 <main+0x2b8>)
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	3308      	adds	r3, #8
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	4413      	add	r3, r2
 8004b0c:	3304      	adds	r3, #4
 8004b0e:	ed93 7a00 	vldr	s14, [r3]
 8004b12:	4b82      	ldr	r3, [pc, #520]	; (8004d1c <main+0x2d4>)
 8004b14:	edd3 7a00 	vldr	s15, [r3]
 8004b18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b1c:	4a78      	ldr	r2, [pc, #480]	; (8004d00 <main+0x2b8>)
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	3308      	adds	r3, #8
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	4413      	add	r3, r2
 8004b26:	3304      	adds	r3, #4
 8004b28:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t y = 0; y < ADC_DMA_SIXTEENTHBUFFERSIZE; y++)
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	3301      	adds	r3, #1
 8004b30:	617b      	str	r3, [r7, #20]
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	2bae      	cmp	r3, #174	; 0xae
 8004b36:	d9e4      	bls.n	8004b02 <main+0xba>
      #ifdef MONITOR_CHANNEL_1_LEFT
	  ADC1_IN1_DAC_Update(&DAC1_ADC1_IN1); // For monitoring the channel on an oscilloscope through the DAC
      #endif

	  /* FEATURE EXCTRACTION SECTION */
      TKEO_1 = ADC1_IN1_TKEO(&TKEO_ADC1_IN1, SD_BL_1); // Performs the windowing through the TKEO operator and returns binary data to indicate presence or absence of muscle activation
 8004b38:	4b79      	ldr	r3, [pc, #484]	; (8004d20 <main+0x2d8>)
 8004b3a:	edd3 7a00 	vldr	s15, [r3]
 8004b3e:	eeb0 0a67 	vmov.f32	s0, s15
 8004b42:	4878      	ldr	r0, [pc, #480]	; (8004d24 <main+0x2dc>)
 8004b44:	f7fe fdcc 	bl	80036e0 <ADC1_IN1_TKEO>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	4b76      	ldr	r3, [pc, #472]	; (8004d28 <main+0x2e0>)
 8004b4e:	701a      	strb	r2, [r3, #0]

      if(TKEO_1 == 1) // Only runs when there is muscle activation.
 8004b50:	4b75      	ldr	r3, [pc, #468]	; (8004d28 <main+0x2e0>)
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d11e      	bne.n	8004b96 <main+0x14e>
      {
      /* Slope sign change */
      SSC_1 = ADC1_IN1_SSC(&SSC_ADC1_IN1, 0.5 * Offset_1); // Calculates slope sign changes for active segments
 8004b58:	4b70      	ldr	r3, [pc, #448]	; (8004d1c <main+0x2d4>)
 8004b5a:	edd3 7a00 	vldr	s15, [r3]
 8004b5e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004b62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b66:	eeb0 0a67 	vmov.f32	s0, s15
 8004b6a:	4870      	ldr	r0, [pc, #448]	; (8004d2c <main+0x2e4>)
 8004b6c:	f7fd fdda 	bl	8002724 <ADC1_IN1_SSC>
 8004b70:	eef0 7a40 	vmov.f32	s15, s0
 8004b74:	4b6e      	ldr	r3, [pc, #440]	; (8004d30 <main+0x2e8>)
 8004b76:	edc3 7a00 	vstr	s15, [r3]
      /*Computes the autocorrelation values and the autoregression coefficients and returns the latter*/
      ADC1_IN1_autocorr_calc();
 8004b7a:	f7fc f851 	bl	8000c20 <ADC1_IN1_autocorr_calc>
      AR_1 = ADC1_IN1_autoreg_coeffs();
 8004b7e:	f7fc f885 	bl	8000c8c <ADC1_IN1_autoreg_coeffs>
 8004b82:	4603      	mov	r3, r0
 8004b84:	4a6b      	ldr	r2, [pc, #428]	; (8004d34 <main+0x2ec>)
 8004b86:	6013      	str	r3, [r2, #0]
      /* Computes the Short Time Fourier Transform from the moving average buffer */
      STFT_1 = ADC1_IN1_STFT_Update(&STFT_par_ADC1_IN1, &STFT_ADC1_IN1);
 8004b88:	496b      	ldr	r1, [pc, #428]	; (8004d38 <main+0x2f0>)
 8004b8a:	486c      	ldr	r0, [pc, #432]	; (8004d3c <main+0x2f4>)
 8004b8c:	f7fe f864 	bl	8002c58 <ADC1_IN1_STFT_Update>
 8004b90:	4603      	mov	r3, r0
 8004b92:	4a6b      	ldr	r2, [pc, #428]	; (8004d40 <main+0x2f8>)
 8004b94:	6013      	str	r3, [r2, #0]
      }


	  update_ADC1_IN2_FO_biquad_filter();
 8004b96:	f7fd f99d 	bl	8001ed4 <update_ADC1_IN2_FO_biquad_filter>
	  MA_ADC1_IN2_Update(&MovingAverage_ADC1_IN2);
 8004b9a:	485a      	ldr	r0, [pc, #360]	; (8004d04 <main+0x2bc>)
 8004b9c:	f7fc fe1c 	bl	80017d8 <MA_ADC1_IN2_Update>
	  for (uint32_t z = 0; z < ADC_DMA_SIXTEENTHBUFFERSIZE; z++)
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	613b      	str	r3, [r7, #16]
 8004ba4:	e017      	b.n	8004bd6 <main+0x18e>
	  {
		  MovingAverage_ADC1_IN2.MA_ADC1_IN2_OutBfr[z]  -= Offset_2;
 8004ba6:	4a57      	ldr	r2, [pc, #348]	; (8004d04 <main+0x2bc>)
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	3308      	adds	r3, #8
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	4413      	add	r3, r2
 8004bb0:	3304      	adds	r3, #4
 8004bb2:	ed93 7a00 	vldr	s14, [r3]
 8004bb6:	4b63      	ldr	r3, [pc, #396]	; (8004d44 <main+0x2fc>)
 8004bb8:	edd3 7a00 	vldr	s15, [r3]
 8004bbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bc0:	4a50      	ldr	r2, [pc, #320]	; (8004d04 <main+0x2bc>)
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	3308      	adds	r3, #8
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	4413      	add	r3, r2
 8004bca:	3304      	adds	r3, #4
 8004bcc:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t z = 0; z < ADC_DMA_SIXTEENTHBUFFERSIZE; z++)
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	613b      	str	r3, [r7, #16]
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	2bae      	cmp	r3, #174	; 0xae
 8004bda:	d9e4      	bls.n	8004ba6 <main+0x15e>
      #ifdef MONITOR_CHANNEL_4_RIGHT
	  ADC1_IN2_DAC_Update(&DAC1_ADC1_IN2);
      #endif


	  TKEO_2 = ADC1_IN2_TKEO(&TKEO_ADC1_IN2, SD_BL_2);
 8004bdc:	4b5a      	ldr	r3, [pc, #360]	; (8004d48 <main+0x300>)
 8004bde:	edd3 7a00 	vldr	s15, [r3]
 8004be2:	eeb0 0a67 	vmov.f32	s0, s15
 8004be6:	4859      	ldr	r0, [pc, #356]	; (8004d4c <main+0x304>)
 8004be8:	f7fe fe3e 	bl	8003868 <ADC1_IN2_TKEO>
 8004bec:	4603      	mov	r3, r0
 8004bee:	461a      	mov	r2, r3
 8004bf0:	4b57      	ldr	r3, [pc, #348]	; (8004d50 <main+0x308>)
 8004bf2:	701a      	strb	r2, [r3, #0]

	  if(TKEO_2 == 1)
 8004bf4:	4b56      	ldr	r3, [pc, #344]	; (8004d50 <main+0x308>)
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d11e      	bne.n	8004c3a <main+0x1f2>
	  {
	  SSC_2 = ADC1_IN2_SSC(&SSC_ADC1_IN2, 0.5 * Offset_2);
 8004bfc:	4b51      	ldr	r3, [pc, #324]	; (8004d44 <main+0x2fc>)
 8004bfe:	edd3 7a00 	vldr	s15, [r3]
 8004c02:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004c06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c0a:	eeb0 0a67 	vmov.f32	s0, s15
 8004c0e:	4851      	ldr	r0, [pc, #324]	; (8004d54 <main+0x30c>)
 8004c10:	f7fd fdf7 	bl	8002802 <ADC1_IN2_SSC>
 8004c14:	eef0 7a40 	vmov.f32	s15, s0
 8004c18:	4b4f      	ldr	r3, [pc, #316]	; (8004d58 <main+0x310>)
 8004c1a:	edc3 7a00 	vstr	s15, [r3]
	  ADC1_IN2_autocorr_calc();
 8004c1e:	f7fc f8d5 	bl	8000dcc <ADC1_IN2_autocorr_calc>
	  AR_2 = ADC1_IN2_autoreg_coeffs();
 8004c22:	f7fc f909 	bl	8000e38 <ADC1_IN2_autoreg_coeffs>
 8004c26:	4603      	mov	r3, r0
 8004c28:	4a4c      	ldr	r2, [pc, #304]	; (8004d5c <main+0x314>)
 8004c2a:	6013      	str	r3, [r2, #0]
	  STFT_2 = ADC1_IN2_STFT_Update(&STFT_par_ADC1_IN2, &STFT_ADC1_IN2);
 8004c2c:	494c      	ldr	r1, [pc, #304]	; (8004d60 <main+0x318>)
 8004c2e:	484d      	ldr	r0, [pc, #308]	; (8004d64 <main+0x31c>)
 8004c30:	f7fe f8f6 	bl	8002e20 <ADC1_IN2_STFT_Update>
 8004c34:	4603      	mov	r3, r0
 8004c36:	4a4c      	ldr	r2, [pc, #304]	; (8004d68 <main+0x320>)
 8004c38:	6013      	str	r3, [r2, #0]
	  }

	  Buffer_ADC1_Ready = 0; // After processing is done the flag is cleared
 8004c3a:	4b37      	ldr	r3, [pc, #220]	; (8004d18 <main+0x2d0>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	701a      	strb	r2, [r3, #0]

	}

	if (Buffer_ADC2_Ready == 1)
 8004c40:	4b4a      	ldr	r3, [pc, #296]	; (8004d6c <main+0x324>)
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	f040 80f3 	bne.w	8004e32 <main+0x3ea>
	{
	  update_ADC2_IN3_FO_biquad_filter();
 8004c4c:	f7fd f98c 	bl	8001f68 <update_ADC2_IN3_FO_biquad_filter>
	  MA_ADC2_IN3_Update(&MovingAverage_ADC2_IN3);
 8004c50:	482d      	ldr	r0, [pc, #180]	; (8004d08 <main+0x2c0>)
 8004c52:	f7fc fe65 	bl	8001920 <MA_ADC2_IN3_Update>
	  for (uint32_t g = 0; g <ADC_DMA_SIXTEENTHBUFFERSIZE; g++)
 8004c56:	2300      	movs	r3, #0
 8004c58:	60fb      	str	r3, [r7, #12]
 8004c5a:	e017      	b.n	8004c8c <main+0x244>
	  {
		  MovingAverage_ADC2_IN3.MA_ADC2_IN3_OutBfr[g]  -= Offset_3;
 8004c5c:	4a2a      	ldr	r2, [pc, #168]	; (8004d08 <main+0x2c0>)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	3308      	adds	r3, #8
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	4413      	add	r3, r2
 8004c66:	3304      	adds	r3, #4
 8004c68:	ed93 7a00 	vldr	s14, [r3]
 8004c6c:	4b40      	ldr	r3, [pc, #256]	; (8004d70 <main+0x328>)
 8004c6e:	edd3 7a00 	vldr	s15, [r3]
 8004c72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c76:	4a24      	ldr	r2, [pc, #144]	; (8004d08 <main+0x2c0>)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	3308      	adds	r3, #8
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	4413      	add	r3, r2
 8004c80:	3304      	adds	r3, #4
 8004c82:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t g = 0; g <ADC_DMA_SIXTEENTHBUFFERSIZE; g++)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	3301      	adds	r3, #1
 8004c8a:	60fb      	str	r3, [r7, #12]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2bae      	cmp	r3, #174	; 0xae
 8004c90:	d9e4      	bls.n	8004c5c <main+0x214>

      #ifdef MONITOR_CHANNEL_2_LEFT
	  ADC2_IN3_DAC_Update(&DAC1_ADC2_IN3);
      #endif

	  TKEO_3 = ADC2_IN3_TKEO(&TKEO_ADC2_IN3, SD_BL_3);
 8004c92:	4b38      	ldr	r3, [pc, #224]	; (8004d74 <main+0x32c>)
 8004c94:	edd3 7a00 	vldr	s15, [r3]
 8004c98:	eeb0 0a67 	vmov.f32	s0, s15
 8004c9c:	4836      	ldr	r0, [pc, #216]	; (8004d78 <main+0x330>)
 8004c9e:	f7fe fea7 	bl	80039f0 <ADC2_IN3_TKEO>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	4b35      	ldr	r3, [pc, #212]	; (8004d7c <main+0x334>)
 8004ca8:	701a      	strb	r2, [r3, #0]

	  if(TKEO_3 == 1)
 8004caa:	4b34      	ldr	r3, [pc, #208]	; (8004d7c <main+0x334>)
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d11e      	bne.n	8004cf0 <main+0x2a8>
	  {
	  SSC_3 = ADC2_IN3_SSC(&SSC_ADC2_IN3, 0.5 * Offset_3);
 8004cb2:	4b2f      	ldr	r3, [pc, #188]	; (8004d70 <main+0x328>)
 8004cb4:	edd3 7a00 	vldr	s15, [r3]
 8004cb8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004cbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cc0:	eeb0 0a67 	vmov.f32	s0, s15
 8004cc4:	482e      	ldr	r0, [pc, #184]	; (8004d80 <main+0x338>)
 8004cc6:	f7fd fe0b 	bl	80028e0 <ADC2_IN3_SSC>
 8004cca:	eef0 7a40 	vmov.f32	s15, s0
 8004cce:	4b2d      	ldr	r3, [pc, #180]	; (8004d84 <main+0x33c>)
 8004cd0:	edc3 7a00 	vstr	s15, [r3]
	  ADC2_IN3_autocorr_calc();
 8004cd4:	f7fc f950 	bl	8000f78 <ADC2_IN3_autocorr_calc>
	  AR_3 = ADC2_IN3_autoreg_coeffs();
 8004cd8:	f7fc f984 	bl	8000fe4 <ADC2_IN3_autoreg_coeffs>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	4a2a      	ldr	r2, [pc, #168]	; (8004d88 <main+0x340>)
 8004ce0:	6013      	str	r3, [r2, #0]
	  STFT_3 = ADC2_IN3_STFT_Update(&STFT_par_ADC2_IN3, &STFT_ADC2_IN3);
 8004ce2:	492a      	ldr	r1, [pc, #168]	; (8004d8c <main+0x344>)
 8004ce4:	482a      	ldr	r0, [pc, #168]	; (8004d90 <main+0x348>)
 8004ce6:	f7fe f97b 	bl	8002fe0 <ADC2_IN3_STFT_Update>
 8004cea:	4603      	mov	r3, r0
 8004cec:	4a29      	ldr	r2, [pc, #164]	; (8004d94 <main+0x34c>)
 8004cee:	6013      	str	r3, [r2, #0]
	  }


	  update_ADC2_IN4_FO_biquad_filter();
 8004cf0:	f7fd f984 	bl	8001ffc <update_ADC2_IN4_FO_biquad_filter>
	  MA_ADC2_IN4_Update(&MovingAverage_ADC2_IN4);
 8004cf4:	4805      	ldr	r0, [pc, #20]	; (8004d0c <main+0x2c4>)
 8004cf6:	f7fc feb7 	bl	8001a68 <MA_ADC2_IN4_Update>
	  for (uint32_t e = 0; e < ADC_DMA_SIXTEENTHBUFFERSIZE; e++)
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	60bb      	str	r3, [r7, #8]
 8004cfe:	e063      	b.n	8004dc8 <main+0x380>
 8004d00:	2000bb3c 	.word	0x2000bb3c
 8004d04:	2000c0d8 	.word	0x2000c0d8
 8004d08:	2000c674 	.word	0x2000c674
 8004d0c:	2000cc10 	.word	0x2000cc10
 8004d10:	2000d1ac 	.word	0x2000d1ac
 8004d14:	2000d748 	.word	0x2000d748
 8004d18:	2001b720 	.word	0x2001b720
 8004d1c:	2001b698 	.word	0x2001b698
 8004d20:	2001b6b8 	.word	0x2001b6b8
 8004d24:	20012034 	.word	0x20012034
 8004d28:	2001b6d0 	.word	0x2001b6d0
 8004d2c:	200141dc 	.word	0x200141dc
 8004d30:	2001b6d8 	.word	0x2001b6d8
 8004d34:	2001b6f0 	.word	0x2001b6f0
 8004d38:	20016384 	.word	0x20016384
 8004d3c:	2001852c 	.word	0x2001852c
 8004d40:	2001b708 	.word	0x2001b708
 8004d44:	2001b69c 	.word	0x2001b69c
 8004d48:	2001b6bc 	.word	0x2001b6bc
 8004d4c:	200125d0 	.word	0x200125d0
 8004d50:	2001b6d1 	.word	0x2001b6d1
 8004d54:	20014778 	.word	0x20014778
 8004d58:	2001b6dc 	.word	0x2001b6dc
 8004d5c:	2001b6f4 	.word	0x2001b6f4
 8004d60:	20016920 	.word	0x20016920
 8004d64:	20018d68 	.word	0x20018d68
 8004d68:	2001b70c 	.word	0x2001b70c
 8004d6c:	2001b721 	.word	0x2001b721
 8004d70:	2001b6a0 	.word	0x2001b6a0
 8004d74:	2001b6c0 	.word	0x2001b6c0
 8004d78:	20012b6c 	.word	0x20012b6c
 8004d7c:	2001b6d2 	.word	0x2001b6d2
 8004d80:	20014d14 	.word	0x20014d14
 8004d84:	2001b6e0 	.word	0x2001b6e0
 8004d88:	2001b6f8 	.word	0x2001b6f8
 8004d8c:	20016ebc 	.word	0x20016ebc
 8004d90:	200195a4 	.word	0x200195a4
 8004d94:	2001b710 	.word	0x2001b710
	  {
		  MovingAverage_ADC2_IN4.MA_ADC2_IN4_OutBfr[e]  -= Offset_4;
 8004d98:	4a7d      	ldr	r2, [pc, #500]	; (8004f90 <main+0x548>)
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	3308      	adds	r3, #8
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	4413      	add	r3, r2
 8004da2:	3304      	adds	r3, #4
 8004da4:	ed93 7a00 	vldr	s14, [r3]
 8004da8:	4b7a      	ldr	r3, [pc, #488]	; (8004f94 <main+0x54c>)
 8004daa:	edd3 7a00 	vldr	s15, [r3]
 8004dae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004db2:	4a77      	ldr	r2, [pc, #476]	; (8004f90 <main+0x548>)
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	3308      	adds	r3, #8
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	4413      	add	r3, r2
 8004dbc:	3304      	adds	r3, #4
 8004dbe:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t e = 0; e < ADC_DMA_SIXTEENTHBUFFERSIZE; e++)
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	60bb      	str	r3, [r7, #8]
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	2bae      	cmp	r3, #174	; 0xae
 8004dcc:	d9e4      	bls.n	8004d98 <main+0x350>

      #ifdef MONITOR_CHANNEL_5_RIGHT
	  ADC2_IN4_DAC_Update(&DAC1_ADC2_IN4);
      #endif

	  TKEO_4 = ADC2_IN4_TKEO(&TKEO_ADC2_IN4, SD_BL_4);
 8004dce:	4b72      	ldr	r3, [pc, #456]	; (8004f98 <main+0x550>)
 8004dd0:	edd3 7a00 	vldr	s15, [r3]
 8004dd4:	eeb0 0a67 	vmov.f32	s0, s15
 8004dd8:	4870      	ldr	r0, [pc, #448]	; (8004f9c <main+0x554>)
 8004dda:	f7fe fecd 	bl	8003b78 <ADC2_IN4_TKEO>
 8004dde:	4603      	mov	r3, r0
 8004de0:	461a      	mov	r2, r3
 8004de2:	4b6f      	ldr	r3, [pc, #444]	; (8004fa0 <main+0x558>)
 8004de4:	701a      	strb	r2, [r3, #0]

	  if(TKEO_4 == 1)
 8004de6:	4b6e      	ldr	r3, [pc, #440]	; (8004fa0 <main+0x558>)
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d11e      	bne.n	8004e2c <main+0x3e4>
	  {
	  SSC_4 = ADC2_IN4_SSC(&SSC_ADC2_IN4, 0.5 * Offset_4);
 8004dee:	4b69      	ldr	r3, [pc, #420]	; (8004f94 <main+0x54c>)
 8004df0:	edd3 7a00 	vldr	s15, [r3]
 8004df4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004df8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004dfc:	eeb0 0a67 	vmov.f32	s0, s15
 8004e00:	4868      	ldr	r0, [pc, #416]	; (8004fa4 <main+0x55c>)
 8004e02:	f7fd fddc 	bl	80029be <ADC2_IN4_SSC>
 8004e06:	eef0 7a40 	vmov.f32	s15, s0
 8004e0a:	4b67      	ldr	r3, [pc, #412]	; (8004fa8 <main+0x560>)
 8004e0c:	edc3 7a00 	vstr	s15, [r3]
	  ADC2_IN4_autocorr_calc();
 8004e10:	f7fc f988 	bl	8001124 <ADC2_IN4_autocorr_calc>
	  AR_4 = ADC2_IN4_autoreg_coeffs();
 8004e14:	f7fc f9bc 	bl	8001190 <ADC2_IN4_autoreg_coeffs>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	4a64      	ldr	r2, [pc, #400]	; (8004fac <main+0x564>)
 8004e1c:	6013      	str	r3, [r2, #0]
	  STFT_4 = ADC2_IN4_STFT_Update(&STFT_par_ADC2_IN4, &STFT_ADC2_IN4);
 8004e1e:	4964      	ldr	r1, [pc, #400]	; (8004fb0 <main+0x568>)
 8004e20:	4864      	ldr	r0, [pc, #400]	; (8004fb4 <main+0x56c>)
 8004e22:	f7fe f9bd 	bl	80031a0 <ADC2_IN4_STFT_Update>
 8004e26:	4603      	mov	r3, r0
 8004e28:	4a63      	ldr	r2, [pc, #396]	; (8004fb8 <main+0x570>)
 8004e2a:	6013      	str	r3, [r2, #0]
	  }

	  Buffer_ADC2_Ready = 0;
 8004e2c:	4b63      	ldr	r3, [pc, #396]	; (8004fbc <main+0x574>)
 8004e2e:	2200      	movs	r2, #0
 8004e30:	701a      	strb	r2, [r3, #0]
	}

	if (Buffer_ADC3_Ready == 1)
 8004e32:	4b63      	ldr	r3, [pc, #396]	; (8004fc0 <main+0x578>)
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	f47f ae54 	bne.w	8004ae6 <main+0x9e>
	{
	  update_ADC3_IN1_FO_biquad_filter();
 8004e3e:	f7fd f927 	bl	8002090 <update_ADC3_IN1_FO_biquad_filter>
	  MA_ADC3_IN1_Update(&MovingAverage_ADC3_IN1);
 8004e42:	4860      	ldr	r0, [pc, #384]	; (8004fc4 <main+0x57c>)
 8004e44:	f7fc feb4 	bl	8001bb0 <MA_ADC3_IN1_Update>
	  for (uint32_t b = 0; b < ADC_DMA_SIXTEENTHBUFFERSIZE; b++)
 8004e48:	2300      	movs	r3, #0
 8004e4a:	607b      	str	r3, [r7, #4]
 8004e4c:	e017      	b.n	8004e7e <main+0x436>
	  {
		  MovingAverage_ADC3_IN1.MA_ADC3_IN1_OutBfr[b]  -= Offset_5;
 8004e4e:	4a5d      	ldr	r2, [pc, #372]	; (8004fc4 <main+0x57c>)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	3308      	adds	r3, #8
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4413      	add	r3, r2
 8004e58:	3304      	adds	r3, #4
 8004e5a:	ed93 7a00 	vldr	s14, [r3]
 8004e5e:	4b5a      	ldr	r3, [pc, #360]	; (8004fc8 <main+0x580>)
 8004e60:	edd3 7a00 	vldr	s15, [r3]
 8004e64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e68:	4a56      	ldr	r2, [pc, #344]	; (8004fc4 <main+0x57c>)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	3308      	adds	r3, #8
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4413      	add	r3, r2
 8004e72:	3304      	adds	r3, #4
 8004e74:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t b = 0; b < ADC_DMA_SIXTEENTHBUFFERSIZE; b++)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	607b      	str	r3, [r7, #4]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2bae      	cmp	r3, #174	; 0xae
 8004e82:	d9e4      	bls.n	8004e4e <main+0x406>
      #ifdef MONITOR_CHANNEL_3_LEFT
	  ADC3_IN1_DAC_Update(&DAC1_ADC3_IN1);
      #endif


	  TKEO_5 = ADC3_IN1_TKEO(&TKEO_ADC3_IN1, SD_BL_5);
 8004e84:	4b51      	ldr	r3, [pc, #324]	; (8004fcc <main+0x584>)
 8004e86:	edd3 7a00 	vldr	s15, [r3]
 8004e8a:	eeb0 0a67 	vmov.f32	s0, s15
 8004e8e:	4850      	ldr	r0, [pc, #320]	; (8004fd0 <main+0x588>)
 8004e90:	f7fe ff36 	bl	8003d00 <ADC3_IN1_TKEO>
 8004e94:	4603      	mov	r3, r0
 8004e96:	461a      	mov	r2, r3
 8004e98:	4b4e      	ldr	r3, [pc, #312]	; (8004fd4 <main+0x58c>)
 8004e9a:	701a      	strb	r2, [r3, #0]

	  if(TKEO_5 == 1)
 8004e9c:	4b4d      	ldr	r3, [pc, #308]	; (8004fd4 <main+0x58c>)
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d11e      	bne.n	8004ee2 <main+0x49a>
	  {
	  SSC_5 = ADC3_IN1_SSC(&SSC_ADC3_IN1, 0.5 * Offset_5);
 8004ea4:	4b48      	ldr	r3, [pc, #288]	; (8004fc8 <main+0x580>)
 8004ea6:	edd3 7a00 	vldr	s15, [r3]
 8004eaa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004eae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004eb2:	eeb0 0a67 	vmov.f32	s0, s15
 8004eb6:	4848      	ldr	r0, [pc, #288]	; (8004fd8 <main+0x590>)
 8004eb8:	f7fd fdf0 	bl	8002a9c <ADC3_IN1_SSC>
 8004ebc:	eef0 7a40 	vmov.f32	s15, s0
 8004ec0:	4b46      	ldr	r3, [pc, #280]	; (8004fdc <main+0x594>)
 8004ec2:	edc3 7a00 	vstr	s15, [r3]
	  ADC3_IN1_autocorr_calc();
 8004ec6:	f7fc fa03 	bl	80012d0 <ADC3_IN1_autocorr_calc>
	  AR_5 = ADC3_IN1_autoreg_coeffs();
 8004eca:	f7fc fa37 	bl	800133c <ADC3_IN1_autoreg_coeffs>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	4a43      	ldr	r2, [pc, #268]	; (8004fe0 <main+0x598>)
 8004ed2:	6013      	str	r3, [r2, #0]
	  STFT_5 = ADC3_IN1_STFT_Update(&STFT_par_ADC3_IN1, &STFT_ADC3_IN1);
 8004ed4:	4943      	ldr	r1, [pc, #268]	; (8004fe4 <main+0x59c>)
 8004ed6:	4844      	ldr	r0, [pc, #272]	; (8004fe8 <main+0x5a0>)
 8004ed8:	f7fe fa42 	bl	8003360 <ADC3_IN1_STFT_Update>
 8004edc:	4603      	mov	r3, r0
 8004ede:	4a43      	ldr	r2, [pc, #268]	; (8004fec <main+0x5a4>)
 8004ee0:	6013      	str	r3, [r2, #0]
	  }


	  /* DSP SECTION */
	  update_ADC3_IN2_FO_biquad_filter(); // Notch filters channel 2 data
 8004ee2:	f7fd f91f 	bl	8002124 <update_ADC3_IN2_FO_biquad_filter>
	  MA_ADC3_IN2_Update(&MovingAverage_ADC3_IN2); // Performs the moving average
 8004ee6:	4842      	ldr	r0, [pc, #264]	; (8004ff0 <main+0x5a8>)
 8004ee8:	f7fc ff06 	bl	8001cf8 <MA_ADC3_IN2_Update>
	  for (uint32_t c = 0; c < ADC_DMA_SIXTEENTHBUFFERSIZE; c++)
 8004eec:	2300      	movs	r3, #0
 8004eee:	603b      	str	r3, [r7, #0]
 8004ef0:	e017      	b.n	8004f22 <main+0x4da>
	  {
		  MovingAverage_ADC3_IN2.MA_ADC3_IN2_OutBfr[c]  -= Offset_6;  // Subtracts the stored offset
 8004ef2:	4a3f      	ldr	r2, [pc, #252]	; (8004ff0 <main+0x5a8>)
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	3308      	adds	r3, #8
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	4413      	add	r3, r2
 8004efc:	3304      	adds	r3, #4
 8004efe:	ed93 7a00 	vldr	s14, [r3]
 8004f02:	4b3c      	ldr	r3, [pc, #240]	; (8004ff4 <main+0x5ac>)
 8004f04:	edd3 7a00 	vldr	s15, [r3]
 8004f08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f0c:	4a38      	ldr	r2, [pc, #224]	; (8004ff0 <main+0x5a8>)
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	3308      	adds	r3, #8
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	4413      	add	r3, r2
 8004f16:	3304      	adds	r3, #4
 8004f18:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t c = 0; c < ADC_DMA_SIXTEENTHBUFFERSIZE; c++)
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	3301      	adds	r3, #1
 8004f20:	603b      	str	r3, [r7, #0]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	2bae      	cmp	r3, #174	; 0xae
 8004f26:	d9e4      	bls.n	8004ef2 <main+0x4aa>
      #ifdef MONITOR_CHANNEL_6_RIGHT
	  ADC3_IN2_DAC_Update(&DAC1_ADC3_IN2); // For monitoring the channel on an oscilloscope through the DAC
      #endif

	  /* FEATURE EXCTRACTION SECTION */
	  TKEO_6 = ADC3_IN2_TKEO(&TKEO_ADC3_IN2, SD_BL_6); // Performs the windowing through the TKEO operator and returns binary data to indicate presence or absence of muscle activation
 8004f28:	4b33      	ldr	r3, [pc, #204]	; (8004ff8 <main+0x5b0>)
 8004f2a:	edd3 7a00 	vldr	s15, [r3]
 8004f2e:	eeb0 0a67 	vmov.f32	s0, s15
 8004f32:	4832      	ldr	r0, [pc, #200]	; (8004ffc <main+0x5b4>)
 8004f34:	f7fe ffa8 	bl	8003e88 <ADC3_IN2_TKEO>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	4b30      	ldr	r3, [pc, #192]	; (8005000 <main+0x5b8>)
 8004f3e:	701a      	strb	r2, [r3, #0]

	  if(TKEO_6 == 1) // Only runs when there is muscle activation.
 8004f40:	4b2f      	ldr	r3, [pc, #188]	; (8005000 <main+0x5b8>)
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d11e      	bne.n	8004f86 <main+0x53e>
	  {
	  /* Slope sign change */
	  SSC_6 = ADC3_IN2_SSC(&SSC_ADC3_IN2, 0.5 * Offset_6); // Calculates slope sign changes for active segments
 8004f48:	4b2a      	ldr	r3, [pc, #168]	; (8004ff4 <main+0x5ac>)
 8004f4a:	edd3 7a00 	vldr	s15, [r3]
 8004f4e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004f52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f56:	eeb0 0a67 	vmov.f32	s0, s15
 8004f5a:	482a      	ldr	r0, [pc, #168]	; (8005004 <main+0x5bc>)
 8004f5c:	f7fd fe0d 	bl	8002b7a <ADC3_IN2_SSC>
 8004f60:	eef0 7a40 	vmov.f32	s15, s0
 8004f64:	4b28      	ldr	r3, [pc, #160]	; (8005008 <main+0x5c0>)
 8004f66:	edc3 7a00 	vstr	s15, [r3]
	  /* Computes the autocorrelation values and the autoregression coefficients and returns the latter */
	  ADC3_IN2_autocorr_calc();
 8004f6a:	f7fc fa89 	bl	8001480 <ADC3_IN2_autocorr_calc>
	  AR_6 = ADC3_IN2_autoreg_coeffs();
 8004f6e:	f7fc fabd 	bl	80014ec <ADC3_IN2_autoreg_coeffs>
 8004f72:	4603      	mov	r3, r0
 8004f74:	4a25      	ldr	r2, [pc, #148]	; (800500c <main+0x5c4>)
 8004f76:	6013      	str	r3, [r2, #0]
	  /* Computes the Short Time Fourier Transform from the moving average buffer */
	  STFT_6 = ADC3_IN2_STFT_Update(&STFT_par_ADC3_IN2, &STFT_ADC3_IN2);
 8004f78:	4925      	ldr	r1, [pc, #148]	; (8005010 <main+0x5c8>)
 8004f7a:	4826      	ldr	r0, [pc, #152]	; (8005014 <main+0x5cc>)
 8004f7c:	f7fe fad0 	bl	8003520 <ADC3_IN2_STFT_Update>
 8004f80:	4603      	mov	r3, r0
 8004f82:	4a25      	ldr	r2, [pc, #148]	; (8005018 <main+0x5d0>)
 8004f84:	6013      	str	r3, [r2, #0]
	  }

	  Buffer_ADC3_Ready = 0;
 8004f86:	4b0e      	ldr	r3, [pc, #56]	; (8004fc0 <main+0x578>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	701a      	strb	r2, [r3, #0]
	if (Buffer_ADC1_Ready == 1) // Checks if the flag for the channel buffer fills is set for ADC1
 8004f8c:	e5ab      	b.n	8004ae6 <main+0x9e>
 8004f8e:	bf00      	nop
 8004f90:	2000cc10 	.word	0x2000cc10
 8004f94:	2001b6a4 	.word	0x2001b6a4
 8004f98:	2001b6c4 	.word	0x2001b6c4
 8004f9c:	20013108 	.word	0x20013108
 8004fa0:	2001b6d3 	.word	0x2001b6d3
 8004fa4:	200152b0 	.word	0x200152b0
 8004fa8:	2001b6e4 	.word	0x2001b6e4
 8004fac:	2001b6fc 	.word	0x2001b6fc
 8004fb0:	20017458 	.word	0x20017458
 8004fb4:	20019de0 	.word	0x20019de0
 8004fb8:	2001b714 	.word	0x2001b714
 8004fbc:	2001b721 	.word	0x2001b721
 8004fc0:	2001b722 	.word	0x2001b722
 8004fc4:	2000d1ac 	.word	0x2000d1ac
 8004fc8:	2001b6a8 	.word	0x2001b6a8
 8004fcc:	2001b6c8 	.word	0x2001b6c8
 8004fd0:	200136a4 	.word	0x200136a4
 8004fd4:	2001b6d4 	.word	0x2001b6d4
 8004fd8:	2001584c 	.word	0x2001584c
 8004fdc:	2001b6e8 	.word	0x2001b6e8
 8004fe0:	2001b700 	.word	0x2001b700
 8004fe4:	200179f4 	.word	0x200179f4
 8004fe8:	2001a61c 	.word	0x2001a61c
 8004fec:	2001b718 	.word	0x2001b718
 8004ff0:	2000d748 	.word	0x2000d748
 8004ff4:	2001b6ac 	.word	0x2001b6ac
 8004ff8:	2001b6cc 	.word	0x2001b6cc
 8004ffc:	20013c40 	.word	0x20013c40
 8005000:	2001b6d5 	.word	0x2001b6d5
 8005004:	20015de8 	.word	0x20015de8
 8005008:	2001b6ec 	.word	0x2001b6ec
 800500c:	2001b704 	.word	0x2001b704
 8005010:	20017f90 	.word	0x20017f90
 8005014:	2001ae58 	.word	0x2001ae58
 8005018:	2001b71c 	.word	0x2001b71c

0800501c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b094      	sub	sp, #80	; 0x50
 8005020:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005022:	f107 0318 	add.w	r3, r7, #24
 8005026:	2238      	movs	r2, #56	; 0x38
 8005028:	2100      	movs	r1, #0
 800502a:	4618      	mov	r0, r3
 800502c:	f006 fcac 	bl	800b988 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005030:	1d3b      	adds	r3, r7, #4
 8005032:	2200      	movs	r2, #0
 8005034:	601a      	str	r2, [r3, #0]
 8005036:	605a      	str	r2, [r3, #4]
 8005038:	609a      	str	r2, [r3, #8]
 800503a:	60da      	str	r2, [r3, #12]
 800503c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800503e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005042:	f003 fd7f 	bl	8008b44 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005046:	2301      	movs	r3, #1
 8005048:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800504a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800504e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005050:	2302      	movs	r3, #2
 8005052:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005054:	2303      	movs	r3, #3
 8005056:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8005058:	2301      	movs	r3, #1
 800505a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 800505c:	2308      	movs	r3, #8
 800505e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005060:	2302      	movs	r3, #2
 8005062:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005064:	2302      	movs	r3, #2
 8005066:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005068:	2302      	movs	r3, #2
 800506a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800506c:	f107 0318 	add.w	r3, r7, #24
 8005070:	4618      	mov	r0, r3
 8005072:	f003 fe1b 	bl	8008cac <HAL_RCC_OscConfig>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d001      	beq.n	8005080 <SystemClock_Config+0x64>
  {
    Error_Handler();
 800507c:	f000 febe 	bl	8005dfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005080:	230f      	movs	r3, #15
 8005082:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005084:	2303      	movs	r3, #3
 8005086:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005088:	2300      	movs	r3, #0
 800508a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800508c:	2300      	movs	r3, #0
 800508e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005090:	2300      	movs	r3, #0
 8005092:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005094:	1d3b      	adds	r3, r7, #4
 8005096:	2102      	movs	r1, #2
 8005098:	4618      	mov	r0, r3
 800509a:	f004 f919 	bl	80092d0 <HAL_RCC_ClockConfig>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d001      	beq.n	80050a8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80050a4:	f000 feaa 	bl	8005dfc <Error_Handler>
  }
}
 80050a8:	bf00      	nop
 80050aa:	3750      	adds	r7, #80	; 0x50
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b08c      	sub	sp, #48	; 0x30
 80050b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80050b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050ba:	2200      	movs	r2, #0
 80050bc:	601a      	str	r2, [r3, #0]
 80050be:	605a      	str	r2, [r3, #4]
 80050c0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80050c2:	1d3b      	adds	r3, r7, #4
 80050c4:	2220      	movs	r2, #32
 80050c6:	2100      	movs	r1, #0
 80050c8:	4618      	mov	r0, r3
 80050ca:	f006 fc5d 	bl	800b988 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80050ce:	4b3a      	ldr	r3, [pc, #232]	; (80051b8 <MX_ADC1_Init+0x108>)
 80050d0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80050d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80050d6:	4b38      	ldr	r3, [pc, #224]	; (80051b8 <MX_ADC1_Init+0x108>)
 80050d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80050dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80050de:	4b36      	ldr	r3, [pc, #216]	; (80051b8 <MX_ADC1_Init+0x108>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80050e4:	4b34      	ldr	r3, [pc, #208]	; (80051b8 <MX_ADC1_Init+0x108>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80050ea:	4b33      	ldr	r3, [pc, #204]	; (80051b8 <MX_ADC1_Init+0x108>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80050f0:	4b31      	ldr	r3, [pc, #196]	; (80051b8 <MX_ADC1_Init+0x108>)
 80050f2:	2201      	movs	r2, #1
 80050f4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80050f6:	4b30      	ldr	r3, [pc, #192]	; (80051b8 <MX_ADC1_Init+0x108>)
 80050f8:	2204      	movs	r2, #4
 80050fa:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80050fc:	4b2e      	ldr	r3, [pc, #184]	; (80051b8 <MX_ADC1_Init+0x108>)
 80050fe:	2200      	movs	r2, #0
 8005100:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005102:	4b2d      	ldr	r3, [pc, #180]	; (80051b8 <MX_ADC1_Init+0x108>)
 8005104:	2200      	movs	r2, #0
 8005106:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8005108:	4b2b      	ldr	r3, [pc, #172]	; (80051b8 <MX_ADC1_Init+0x108>)
 800510a:	2202      	movs	r2, #2
 800510c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800510e:	4b2a      	ldr	r3, [pc, #168]	; (80051b8 <MX_ADC1_Init+0x108>)
 8005110:	2200      	movs	r2, #0
 8005112:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8005116:	4b28      	ldr	r3, [pc, #160]	; (80051b8 <MX_ADC1_Init+0x108>)
 8005118:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 800511c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800511e:	4b26      	ldr	r3, [pc, #152]	; (80051b8 <MX_ADC1_Init+0x108>)
 8005120:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005124:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8005126:	4b24      	ldr	r3, [pc, #144]	; (80051b8 <MX_ADC1_Init+0x108>)
 8005128:	2201      	movs	r2, #1
 800512a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800512e:	4b22      	ldr	r3, [pc, #136]	; (80051b8 <MX_ADC1_Init+0x108>)
 8005130:	2200      	movs	r2, #0
 8005132:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8005134:	4b20      	ldr	r3, [pc, #128]	; (80051b8 <MX_ADC1_Init+0x108>)
 8005136:	2200      	movs	r2, #0
 8005138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800513c:	481e      	ldr	r0, [pc, #120]	; (80051b8 <MX_ADC1_Init+0x108>)
 800513e:	f001 fc61 	bl	8006a04 <HAL_ADC_Init>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d001      	beq.n	800514c <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8005148:	f000 fe58 	bl	8005dfc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800514c:	2300      	movs	r3, #0
 800514e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8005150:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005154:	4619      	mov	r1, r3
 8005156:	4818      	ldr	r0, [pc, #96]	; (80051b8 <MX_ADC1_Init+0x108>)
 8005158:	f002 fc52 	bl	8007a00 <HAL_ADCEx_MultiModeConfigChannel>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d001      	beq.n	8005166 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8005162:	f000 fe4b 	bl	8005dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005166:	4b15      	ldr	r3, [pc, #84]	; (80051bc <MX_ADC1_Init+0x10c>)
 8005168:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800516a:	2306      	movs	r3, #6
 800516c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 800516e:	2305      	movs	r3, #5
 8005170:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005172:	237f      	movs	r3, #127	; 0x7f
 8005174:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005176:	2304      	movs	r3, #4
 8005178:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800517a:	2300      	movs	r3, #0
 800517c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800517e:	1d3b      	adds	r3, r7, #4
 8005180:	4619      	mov	r1, r3
 8005182:	480d      	ldr	r0, [pc, #52]	; (80051b8 <MX_ADC1_Init+0x108>)
 8005184:	f001 fec0 	bl	8006f08 <HAL_ADC_ConfigChannel>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d001      	beq.n	8005192 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800518e:	f000 fe35 	bl	8005dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8005192:	4b0b      	ldr	r3, [pc, #44]	; (80051c0 <MX_ADC1_Init+0x110>)
 8005194:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8005196:	230c      	movs	r3, #12
 8005198:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800519a:	1d3b      	adds	r3, r7, #4
 800519c:	4619      	mov	r1, r3
 800519e:	4806      	ldr	r0, [pc, #24]	; (80051b8 <MX_ADC1_Init+0x108>)
 80051a0:	f001 feb2 	bl	8006f08 <HAL_ADC_ConfigChannel>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d001      	beq.n	80051ae <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80051aa:	f000 fe27 	bl	8005dfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80051ae:	bf00      	nop
 80051b0:	3730      	adds	r7, #48	; 0x30
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	2000b6dc 	.word	0x2000b6dc
 80051bc:	04300002 	.word	0x04300002
 80051c0:	08600004 	.word	0x08600004

080051c4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b088      	sub	sp, #32
 80051c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80051ca:	463b      	mov	r3, r7
 80051cc:	2220      	movs	r2, #32
 80051ce:	2100      	movs	r1, #0
 80051d0:	4618      	mov	r0, r3
 80051d2:	f006 fbd9 	bl	800b988 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80051d6:	4b33      	ldr	r3, [pc, #204]	; (80052a4 <MX_ADC2_Init+0xe0>)
 80051d8:	4a33      	ldr	r2, [pc, #204]	; (80052a8 <MX_ADC2_Init+0xe4>)
 80051da:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80051dc:	4b31      	ldr	r3, [pc, #196]	; (80052a4 <MX_ADC2_Init+0xe0>)
 80051de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80051e2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80051e4:	4b2f      	ldr	r3, [pc, #188]	; (80052a4 <MX_ADC2_Init+0xe0>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80051ea:	4b2e      	ldr	r3, [pc, #184]	; (80052a4 <MX_ADC2_Init+0xe0>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80051f0:	4b2c      	ldr	r3, [pc, #176]	; (80052a4 <MX_ADC2_Init+0xe0>)
 80051f2:	2200      	movs	r2, #0
 80051f4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80051f6:	4b2b      	ldr	r3, [pc, #172]	; (80052a4 <MX_ADC2_Init+0xe0>)
 80051f8:	2201      	movs	r2, #1
 80051fa:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80051fc:	4b29      	ldr	r3, [pc, #164]	; (80052a4 <MX_ADC2_Init+0xe0>)
 80051fe:	2204      	movs	r2, #4
 8005200:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8005202:	4b28      	ldr	r3, [pc, #160]	; (80052a4 <MX_ADC2_Init+0xe0>)
 8005204:	2200      	movs	r2, #0
 8005206:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8005208:	4b26      	ldr	r3, [pc, #152]	; (80052a4 <MX_ADC2_Init+0xe0>)
 800520a:	2200      	movs	r2, #0
 800520c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 800520e:	4b25      	ldr	r3, [pc, #148]	; (80052a4 <MX_ADC2_Init+0xe0>)
 8005210:	2202      	movs	r2, #2
 8005212:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005214:	4b23      	ldr	r3, [pc, #140]	; (80052a4 <MX_ADC2_Init+0xe0>)
 8005216:	2200      	movs	r2, #0
 8005218:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T7_TRGO;
 800521c:	4b21      	ldr	r3, [pc, #132]	; (80052a4 <MX_ADC2_Init+0xe0>)
 800521e:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
 8005222:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8005224:	4b1f      	ldr	r3, [pc, #124]	; (80052a4 <MX_ADC2_Init+0xe0>)
 8005226:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800522a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800522c:	4b1d      	ldr	r3, [pc, #116]	; (80052a4 <MX_ADC2_Init+0xe0>)
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8005234:	4b1b      	ldr	r3, [pc, #108]	; (80052a4 <MX_ADC2_Init+0xe0>)
 8005236:	2200      	movs	r2, #0
 8005238:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800523a:	4b1a      	ldr	r3, [pc, #104]	; (80052a4 <MX_ADC2_Init+0xe0>)
 800523c:	2200      	movs	r2, #0
 800523e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005242:	4818      	ldr	r0, [pc, #96]	; (80052a4 <MX_ADC2_Init+0xe0>)
 8005244:	f001 fbde 	bl	8006a04 <HAL_ADC_Init>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d001      	beq.n	8005252 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800524e:	f000 fdd5 	bl	8005dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8005252:	4b16      	ldr	r3, [pc, #88]	; (80052ac <MX_ADC2_Init+0xe8>)
 8005254:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005256:	2306      	movs	r3, #6
 8005258:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 800525a:	2305      	movs	r3, #5
 800525c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800525e:	237f      	movs	r3, #127	; 0x7f
 8005260:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005262:	2304      	movs	r3, #4
 8005264:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8005266:	2300      	movs	r3, #0
 8005268:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800526a:	463b      	mov	r3, r7
 800526c:	4619      	mov	r1, r3
 800526e:	480d      	ldr	r0, [pc, #52]	; (80052a4 <MX_ADC2_Init+0xe0>)
 8005270:	f001 fe4a 	bl	8006f08 <HAL_ADC_ConfigChannel>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d001      	beq.n	800527e <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 800527a:	f000 fdbf 	bl	8005dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800527e:	4b0c      	ldr	r3, [pc, #48]	; (80052b0 <MX_ADC2_Init+0xec>)
 8005280:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8005282:	230c      	movs	r3, #12
 8005284:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005286:	463b      	mov	r3, r7
 8005288:	4619      	mov	r1, r3
 800528a:	4806      	ldr	r0, [pc, #24]	; (80052a4 <MX_ADC2_Init+0xe0>)
 800528c:	f001 fe3c 	bl	8006f08 <HAL_ADC_ConfigChannel>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d001      	beq.n	800529a <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 8005296:	f000 fdb1 	bl	8005dfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800529a:	bf00      	nop
 800529c:	3720      	adds	r7, #32
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	2000b748 	.word	0x2000b748
 80052a8:	50000100 	.word	0x50000100
 80052ac:	0c900008 	.word	0x0c900008
 80052b0:	10c00010 	.word	0x10c00010

080052b4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b088      	sub	sp, #32
 80052b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80052ba:	463b      	mov	r3, r7
 80052bc:	2220      	movs	r2, #32
 80052be:	2100      	movs	r1, #0
 80052c0:	4618      	mov	r0, r3
 80052c2:	f006 fb61 	bl	800b988 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80052c6:	4b33      	ldr	r3, [pc, #204]	; (8005394 <MX_ADC3_Init+0xe0>)
 80052c8:	4a33      	ldr	r2, [pc, #204]	; (8005398 <MX_ADC3_Init+0xe4>)
 80052ca:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80052cc:	4b31      	ldr	r3, [pc, #196]	; (8005394 <MX_ADC3_Init+0xe0>)
 80052ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80052d2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80052d4:	4b2f      	ldr	r3, [pc, #188]	; (8005394 <MX_ADC3_Init+0xe0>)
 80052d6:	2200      	movs	r2, #0
 80052d8:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80052da:	4b2e      	ldr	r3, [pc, #184]	; (8005394 <MX_ADC3_Init+0xe0>)
 80052dc:	2200      	movs	r2, #0
 80052de:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 80052e0:	4b2c      	ldr	r3, [pc, #176]	; (8005394 <MX_ADC3_Init+0xe0>)
 80052e2:	2200      	movs	r2, #0
 80052e4:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80052e6:	4b2b      	ldr	r3, [pc, #172]	; (8005394 <MX_ADC3_Init+0xe0>)
 80052e8:	2201      	movs	r2, #1
 80052ea:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80052ec:	4b29      	ldr	r3, [pc, #164]	; (8005394 <MX_ADC3_Init+0xe0>)
 80052ee:	2204      	movs	r2, #4
 80052f0:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80052f2:	4b28      	ldr	r3, [pc, #160]	; (8005394 <MX_ADC3_Init+0xe0>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80052f8:	4b26      	ldr	r3, [pc, #152]	; (8005394 <MX_ADC3_Init+0xe0>)
 80052fa:	2200      	movs	r2, #0
 80052fc:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 2;
 80052fe:	4b25      	ldr	r3, [pc, #148]	; (8005394 <MX_ADC3_Init+0xe0>)
 8005300:	2202      	movs	r2, #2
 8005302:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8005304:	4b23      	ldr	r3, [pc, #140]	; (8005394 <MX_ADC3_Init+0xe0>)
 8005306:	2200      	movs	r2, #0
 8005308:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T20_TRGO;
 800530c:	4b21      	ldr	r3, [pc, #132]	; (8005394 <MX_ADC3_Init+0xe0>)
 800530e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005312:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8005314:	4b1f      	ldr	r3, [pc, #124]	; (8005394 <MX_ADC3_Init+0xe0>)
 8005316:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800531a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800531c:	4b1d      	ldr	r3, [pc, #116]	; (8005394 <MX_ADC3_Init+0xe0>)
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8005324:	4b1b      	ldr	r3, [pc, #108]	; (8005394 <MX_ADC3_Init+0xe0>)
 8005326:	2200      	movs	r2, #0
 8005328:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 800532a:	4b1a      	ldr	r3, [pc, #104]	; (8005394 <MX_ADC3_Init+0xe0>)
 800532c:	2200      	movs	r2, #0
 800532e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8005332:	4818      	ldr	r0, [pc, #96]	; (8005394 <MX_ADC3_Init+0xe0>)
 8005334:	f001 fb66 	bl	8006a04 <HAL_ADC_Init>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d001      	beq.n	8005342 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 800533e:	f000 fd5d 	bl	8005dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005342:	4b16      	ldr	r3, [pc, #88]	; (800539c <MX_ADC3_Init+0xe8>)
 8005344:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005346:	2306      	movs	r3, #6
 8005348:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 800534a:	2305      	movs	r3, #5
 800534c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800534e:	237f      	movs	r3, #127	; 0x7f
 8005350:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005352:	2304      	movs	r3, #4
 8005354:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8005356:	2300      	movs	r3, #0
 8005358:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800535a:	463b      	mov	r3, r7
 800535c:	4619      	mov	r1, r3
 800535e:	480d      	ldr	r0, [pc, #52]	; (8005394 <MX_ADC3_Init+0xe0>)
 8005360:	f001 fdd2 	bl	8006f08 <HAL_ADC_ConfigChannel>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d001      	beq.n	800536e <MX_ADC3_Init+0xba>
  {
    Error_Handler();
 800536a:	f000 fd47 	bl	8005dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800536e:	4b0c      	ldr	r3, [pc, #48]	; (80053a0 <MX_ADC3_Init+0xec>)
 8005370:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8005372:	230c      	movs	r3, #12
 8005374:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8005376:	463b      	mov	r3, r7
 8005378:	4619      	mov	r1, r3
 800537a:	4806      	ldr	r0, [pc, #24]	; (8005394 <MX_ADC3_Init+0xe0>)
 800537c:	f001 fdc4 	bl	8006f08 <HAL_ADC_ConfigChannel>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d001      	beq.n	800538a <MX_ADC3_Init+0xd6>
  {
    Error_Handler();
 8005386:	f000 fd39 	bl	8005dfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800538a:	bf00      	nop
 800538c:	3720      	adds	r7, #32
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	2000b7b4 	.word	0x2000b7b4
 8005398:	50000400 	.word	0x50000400
 800539c:	04300002 	.word	0x04300002
 80053a0:	08600004 	.word	0x08600004

080053a4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b08c      	sub	sp, #48	; 0x30
 80053a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80053aa:	463b      	mov	r3, r7
 80053ac:	2230      	movs	r2, #48	; 0x30
 80053ae:	2100      	movs	r1, #0
 80053b0:	4618      	mov	r0, r3
 80053b2:	f006 fae9 	bl	800b988 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80053b6:	4b1c      	ldr	r3, [pc, #112]	; (8005428 <MX_DAC1_Init+0x84>)
 80053b8:	4a1c      	ldr	r2, [pc, #112]	; (800542c <MX_DAC1_Init+0x88>)
 80053ba:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80053bc:	481a      	ldr	r0, [pc, #104]	; (8005428 <MX_DAC1_Init+0x84>)
 80053be:	f002 fd16 	bl	8007dee <HAL_DAC_Init>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d001      	beq.n	80053cc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80053c8:	f000 fd18 	bl	8005dfc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80053cc:	2302      	movs	r3, #2
 80053ce:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80053d0:	2300      	movs	r3, #0
 80053d2:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80053d4:	2300      	movs	r3, #0
 80053d6:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80053d8:	2300      	movs	r3, #0
 80053da:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80053dc:	231e      	movs	r3, #30
 80053de:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80053e0:	2300      	movs	r3, #0
 80053e2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80053e4:	2300      	movs	r3, #0
 80053e6:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80053e8:	2301      	movs	r3, #1
 80053ea:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80053ec:	2300      	movs	r3, #0
 80053ee:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80053f0:	463b      	mov	r3, r7
 80053f2:	2200      	movs	r2, #0
 80053f4:	4619      	mov	r1, r3
 80053f6:	480c      	ldr	r0, [pc, #48]	; (8005428 <MX_DAC1_Init+0x84>)
 80053f8:	f002 fd1c 	bl	8007e34 <HAL_DAC_ConfigChannel>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d001      	beq.n	8005406 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8005402:	f000 fcfb 	bl	8005dfc <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 8005406:	230a      	movs	r3, #10
 8005408:	60fb      	str	r3, [r7, #12]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800540a:	463b      	mov	r3, r7
 800540c:	2210      	movs	r2, #16
 800540e:	4619      	mov	r1, r3
 8005410:	4805      	ldr	r0, [pc, #20]	; (8005428 <MX_DAC1_Init+0x84>)
 8005412:	f002 fd0f 	bl	8007e34 <HAL_DAC_ConfigChannel>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d001      	beq.n	8005420 <MX_DAC1_Init+0x7c>
  {
    Error_Handler();
 800541c:	f000 fcee 	bl	8005dfc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8005420:	bf00      	nop
 8005422:	3730      	adds	r7, #48	; 0x30
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	2000b940 	.word	0x2000b940
 800542c:	50000800 	.word	0x50000800

08005430 <MX_FMAC_Init>:
  * @brief FMAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMAC_Init(void)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8005434:	4b06      	ldr	r3, [pc, #24]	; (8005450 <MX_FMAC_Init+0x20>)
 8005436:	4a07      	ldr	r2, [pc, #28]	; (8005454 <MX_FMAC_Init+0x24>)
 8005438:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 800543a:	4805      	ldr	r0, [pc, #20]	; (8005450 <MX_FMAC_Init+0x20>)
 800543c:	f003 f924 	bl	8008688 <HAL_FMAC_Init>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d001      	beq.n	800544a <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 8005446:	f000 fcd9 	bl	8005dfc <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 800544a:	bf00      	nop
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	2000ba14 	.word	0x2000ba14
 8005454:	40021400 	.word	0x40021400

08005458 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800545e:	1d3b      	adds	r3, r7, #4
 8005460:	2200      	movs	r2, #0
 8005462:	601a      	str	r2, [r3, #0]
 8005464:	605a      	str	r2, [r3, #4]
 8005466:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005468:	4b14      	ldr	r3, [pc, #80]	; (80054bc <MX_TIM6_Init+0x64>)
 800546a:	4a15      	ldr	r2, [pc, #84]	; (80054c0 <MX_TIM6_Init+0x68>)
 800546c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8-1;
 800546e:	4b13      	ldr	r3, [pc, #76]	; (80054bc <MX_TIM6_Init+0x64>)
 8005470:	2207      	movs	r2, #7
 8005472:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005474:	4b11      	ldr	r3, [pc, #68]	; (80054bc <MX_TIM6_Init+0x64>)
 8005476:	2200      	movs	r2, #0
 8005478:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 7;
 800547a:	4b10      	ldr	r3, [pc, #64]	; (80054bc <MX_TIM6_Init+0x64>)
 800547c:	2207      	movs	r2, #7
 800547e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005480:	4b0e      	ldr	r3, [pc, #56]	; (80054bc <MX_TIM6_Init+0x64>)
 8005482:	2200      	movs	r2, #0
 8005484:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005486:	480d      	ldr	r0, [pc, #52]	; (80054bc <MX_TIM6_Init+0x64>)
 8005488:	f004 fb4a 	bl	8009b20 <HAL_TIM_Base_Init>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d001      	beq.n	8005496 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8005492:	f000 fcb3 	bl	8005dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005496:	2320      	movs	r3, #32
 8005498:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800549a:	2300      	movs	r3, #0
 800549c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800549e:	1d3b      	adds	r3, r7, #4
 80054a0:	4619      	mov	r1, r3
 80054a2:	4806      	ldr	r0, [pc, #24]	; (80054bc <MX_TIM6_Init+0x64>)
 80054a4:	f004 fdce 	bl	800a044 <HAL_TIMEx_MasterConfigSynchronization>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d001      	beq.n	80054b2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80054ae:	f000 fca5 	bl	8005dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80054b2:	bf00      	nop
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	2000ba4c 	.word	0x2000ba4c
 80054c0:	40001000 	.word	0x40001000

080054c4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80054ca:	1d3b      	adds	r3, r7, #4
 80054cc:	2200      	movs	r2, #0
 80054ce:	601a      	str	r2, [r3, #0]
 80054d0:	605a      	str	r2, [r3, #4]
 80054d2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80054d4:	4b14      	ldr	r3, [pc, #80]	; (8005528 <MX_TIM7_Init+0x64>)
 80054d6:	4a15      	ldr	r2, [pc, #84]	; (800552c <MX_TIM7_Init+0x68>)
 80054d8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8-1;
 80054da:	4b13      	ldr	r3, [pc, #76]	; (8005528 <MX_TIM7_Init+0x64>)
 80054dc:	2207      	movs	r2, #7
 80054de:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054e0:	4b11      	ldr	r3, [pc, #68]	; (8005528 <MX_TIM7_Init+0x64>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 7;
 80054e6:	4b10      	ldr	r3, [pc, #64]	; (8005528 <MX_TIM7_Init+0x64>)
 80054e8:	2207      	movs	r2, #7
 80054ea:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80054ec:	4b0e      	ldr	r3, [pc, #56]	; (8005528 <MX_TIM7_Init+0x64>)
 80054ee:	2200      	movs	r2, #0
 80054f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80054f2:	480d      	ldr	r0, [pc, #52]	; (8005528 <MX_TIM7_Init+0x64>)
 80054f4:	f004 fb14 	bl	8009b20 <HAL_TIM_Base_Init>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d001      	beq.n	8005502 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80054fe:	f000 fc7d 	bl	8005dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005502:	2320      	movs	r3, #32
 8005504:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005506:	2300      	movs	r3, #0
 8005508:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800550a:	1d3b      	adds	r3, r7, #4
 800550c:	4619      	mov	r1, r3
 800550e:	4806      	ldr	r0, [pc, #24]	; (8005528 <MX_TIM7_Init+0x64>)
 8005510:	f004 fd98 	bl	800a044 <HAL_TIMEx_MasterConfigSynchronization>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d001      	beq.n	800551e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800551a:	f000 fc6f 	bl	8005dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800551e:	bf00      	nop
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	2000ba98 	.word	0x2000ba98
 800552c:	40001400 	.word	0x40001400

08005530 <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b088      	sub	sp, #32
 8005534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8005536:	f107 030c 	add.w	r3, r7, #12
 800553a:	2200      	movs	r2, #0
 800553c:	601a      	str	r2, [r3, #0]
 800553e:	605a      	str	r2, [r3, #4]
 8005540:	609a      	str	r2, [r3, #8]
 8005542:	60da      	str	r2, [r3, #12]
 8005544:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005546:	463b      	mov	r3, r7
 8005548:	2200      	movs	r2, #0
 800554a:	601a      	str	r2, [r3, #0]
 800554c:	605a      	str	r2, [r3, #4]
 800554e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8005550:	4b1f      	ldr	r3, [pc, #124]	; (80055d0 <MX_TIM20_Init+0xa0>)
 8005552:	4a20      	ldr	r2, [pc, #128]	; (80055d4 <MX_TIM20_Init+0xa4>)
 8005554:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 8-1;
 8005556:	4b1e      	ldr	r3, [pc, #120]	; (80055d0 <MX_TIM20_Init+0xa0>)
 8005558:	2207      	movs	r2, #7
 800555a:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 800555c:	4b1c      	ldr	r3, [pc, #112]	; (80055d0 <MX_TIM20_Init+0xa0>)
 800555e:	2200      	movs	r2, #0
 8005560:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 7;
 8005562:	4b1b      	ldr	r3, [pc, #108]	; (80055d0 <MX_TIM20_Init+0xa0>)
 8005564:	2207      	movs	r2, #7
 8005566:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005568:	4b19      	ldr	r3, [pc, #100]	; (80055d0 <MX_TIM20_Init+0xa0>)
 800556a:	2200      	movs	r2, #0
 800556c:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 800556e:	4b18      	ldr	r3, [pc, #96]	; (80055d0 <MX_TIM20_Init+0xa0>)
 8005570:	2200      	movs	r2, #0
 8005572:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005574:	4b16      	ldr	r3, [pc, #88]	; (80055d0 <MX_TIM20_Init+0xa0>)
 8005576:	2200      	movs	r2, #0
 8005578:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 800557a:	4815      	ldr	r0, [pc, #84]	; (80055d0 <MX_TIM20_Init+0xa0>)
 800557c:	f004 fad0 	bl	8009b20 <HAL_TIM_Base_Init>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <MX_TIM20_Init+0x5a>
  {
    Error_Handler();
 8005586:	f000 fc39 	bl	8005dfc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800558a:	2300      	movs	r3, #0
 800558c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800558e:	2300      	movs	r3, #0
 8005590:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim20, &sSlaveConfig) != HAL_OK)
 8005592:	f107 030c 	add.w	r3, r7, #12
 8005596:	4619      	mov	r1, r3
 8005598:	480d      	ldr	r0, [pc, #52]	; (80055d0 <MX_TIM20_Init+0xa0>)
 800559a:	f004 fb18 	bl	8009bce <HAL_TIM_SlaveConfigSynchro>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d001      	beq.n	80055a8 <MX_TIM20_Init+0x78>
  {
    Error_Handler();
 80055a4:	f000 fc2a 	bl	8005dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80055a8:	2320      	movs	r3, #32
 80055aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80055ac:	2300      	movs	r3, #0
 80055ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80055b0:	2300      	movs	r3, #0
 80055b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 80055b4:	463b      	mov	r3, r7
 80055b6:	4619      	mov	r1, r3
 80055b8:	4805      	ldr	r0, [pc, #20]	; (80055d0 <MX_TIM20_Init+0xa0>)
 80055ba:	f004 fd43 	bl	800a044 <HAL_TIMEx_MasterConfigSynchronization>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d001      	beq.n	80055c8 <MX_TIM20_Init+0x98>
  {
    Error_Handler();
 80055c4:	f000 fc1a 	bl	8005dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */

}
 80055c8:	bf00      	nop
 80055ca:	3720      	adds	r7, #32
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	2000bae4 	.word	0x2000bae4
 80055d4:	40015000 	.word	0x40015000

080055d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80055de:	4b28      	ldr	r3, [pc, #160]	; (8005680 <MX_DMA_Init+0xa8>)
 80055e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055e2:	4a27      	ldr	r2, [pc, #156]	; (8005680 <MX_DMA_Init+0xa8>)
 80055e4:	f043 0304 	orr.w	r3, r3, #4
 80055e8:	6493      	str	r3, [r2, #72]	; 0x48
 80055ea:	4b25      	ldr	r3, [pc, #148]	; (8005680 <MX_DMA_Init+0xa8>)
 80055ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055ee:	f003 0304 	and.w	r3, r3, #4
 80055f2:	60fb      	str	r3, [r7, #12]
 80055f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80055f6:	4b22      	ldr	r3, [pc, #136]	; (8005680 <MX_DMA_Init+0xa8>)
 80055f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055fa:	4a21      	ldr	r2, [pc, #132]	; (8005680 <MX_DMA_Init+0xa8>)
 80055fc:	f043 0301 	orr.w	r3, r3, #1
 8005600:	6493      	str	r3, [r2, #72]	; 0x48
 8005602:	4b1f      	ldr	r3, [pc, #124]	; (8005680 <MX_DMA_Init+0xa8>)
 8005604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005606:	f003 0301 	and.w	r3, r3, #1
 800560a:	60bb      	str	r3, [r7, #8]
 800560c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800560e:	4b1c      	ldr	r3, [pc, #112]	; (8005680 <MX_DMA_Init+0xa8>)
 8005610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005612:	4a1b      	ldr	r2, [pc, #108]	; (8005680 <MX_DMA_Init+0xa8>)
 8005614:	f043 0302 	orr.w	r3, r3, #2
 8005618:	6493      	str	r3, [r2, #72]	; 0x48
 800561a:	4b19      	ldr	r3, [pc, #100]	; (8005680 <MX_DMA_Init+0xa8>)
 800561c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800561e:	f003 0302 	and.w	r3, r3, #2
 8005622:	607b      	str	r3, [r7, #4]
 8005624:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8005626:	2200      	movs	r2, #0
 8005628:	2100      	movs	r1, #0
 800562a:	200b      	movs	r0, #11
 800562c:	f002 fbab 	bl	8007d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8005630:	200b      	movs	r0, #11
 8005632:	f002 fbc2 	bl	8007dba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8005636:	2200      	movs	r2, #0
 8005638:	2100      	movs	r1, #0
 800563a:	200d      	movs	r0, #13
 800563c:	f002 fba3 	bl	8007d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8005640:	200d      	movs	r0, #13
 8005642:	f002 fbba 	bl	8007dba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8005646:	2200      	movs	r2, #0
 8005648:	2100      	movs	r1, #0
 800564a:	2010      	movs	r0, #16
 800564c:	f002 fb9b 	bl	8007d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8005650:	2010      	movs	r0, #16
 8005652:	f002 fbb2 	bl	8007dba <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8005656:	2200      	movs	r2, #0
 8005658:	2100      	movs	r1, #0
 800565a:	2038      	movs	r0, #56	; 0x38
 800565c:	f002 fb93 	bl	8007d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8005660:	2038      	movs	r0, #56	; 0x38
 8005662:	f002 fbaa 	bl	8007dba <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0, 0);
 8005666:	2200      	movs	r2, #0
 8005668:	2100      	movs	r1, #0
 800566a:	2061      	movs	r0, #97	; 0x61
 800566c:	f002 fb8b 	bl	8007d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 8005670:	2061      	movs	r0, #97	; 0x61
 8005672:	f002 fba2 	bl	8007dba <HAL_NVIC_EnableIRQ>

}
 8005676:	bf00      	nop
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	40021000 	.word	0x40021000

08005684 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b08a      	sub	sp, #40	; 0x28
 8005688:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800568a:	f107 0314 	add.w	r3, r7, #20
 800568e:	2200      	movs	r2, #0
 8005690:	601a      	str	r2, [r3, #0]
 8005692:	605a      	str	r2, [r3, #4]
 8005694:	609a      	str	r2, [r3, #8]
 8005696:	60da      	str	r2, [r3, #12]
 8005698:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800569a:	4b2a      	ldr	r3, [pc, #168]	; (8005744 <MX_GPIO_Init+0xc0>)
 800569c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800569e:	4a29      	ldr	r2, [pc, #164]	; (8005744 <MX_GPIO_Init+0xc0>)
 80056a0:	f043 0310 	orr.w	r3, r3, #16
 80056a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80056a6:	4b27      	ldr	r3, [pc, #156]	; (8005744 <MX_GPIO_Init+0xc0>)
 80056a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056aa:	f003 0310 	and.w	r3, r3, #16
 80056ae:	613b      	str	r3, [r7, #16]
 80056b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80056b2:	4b24      	ldr	r3, [pc, #144]	; (8005744 <MX_GPIO_Init+0xc0>)
 80056b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056b6:	4a23      	ldr	r2, [pc, #140]	; (8005744 <MX_GPIO_Init+0xc0>)
 80056b8:	f043 0320 	orr.w	r3, r3, #32
 80056bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80056be:	4b21      	ldr	r3, [pc, #132]	; (8005744 <MX_GPIO_Init+0xc0>)
 80056c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056c2:	f003 0320 	and.w	r3, r3, #32
 80056c6:	60fb      	str	r3, [r7, #12]
 80056c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80056ca:	4b1e      	ldr	r3, [pc, #120]	; (8005744 <MX_GPIO_Init+0xc0>)
 80056cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056ce:	4a1d      	ldr	r2, [pc, #116]	; (8005744 <MX_GPIO_Init+0xc0>)
 80056d0:	f043 0301 	orr.w	r3, r3, #1
 80056d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80056d6:	4b1b      	ldr	r3, [pc, #108]	; (8005744 <MX_GPIO_Init+0xc0>)
 80056d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	60bb      	str	r3, [r7, #8]
 80056e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80056e2:	4b18      	ldr	r3, [pc, #96]	; (8005744 <MX_GPIO_Init+0xc0>)
 80056e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056e6:	4a17      	ldr	r2, [pc, #92]	; (8005744 <MX_GPIO_Init+0xc0>)
 80056e8:	f043 0302 	orr.w	r3, r3, #2
 80056ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80056ee:	4b15      	ldr	r3, [pc, #84]	; (8005744 <MX_GPIO_Init+0xc0>)
 80056f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056f2:	f003 0302 	and.w	r3, r3, #2
 80056f6:	607b      	str	r3, [r7, #4]
 80056f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 80056fa:	2200      	movs	r2, #0
 80056fc:	2120      	movs	r1, #32
 80056fe:	4812      	ldr	r0, [pc, #72]	; (8005748 <MX_GPIO_Init+0xc4>)
 8005700:	f003 f9f0 	bl	8008ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_bgn_aqstn_Pin */
  GPIO_InitStruct.Pin = GPIO_bgn_aqstn_Pin;
 8005704:	2304      	movs	r3, #4
 8005706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005708:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800570c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800570e:	2302      	movs	r3, #2
 8005710:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_bgn_aqstn_GPIO_Port, &GPIO_InitStruct);
 8005712:	f107 0314 	add.w	r3, r7, #20
 8005716:	4619      	mov	r1, r3
 8005718:	480b      	ldr	r0, [pc, #44]	; (8005748 <MX_GPIO_Init+0xc4>)
 800571a:	f003 f861 	bl	80087e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800571e:	2320      	movs	r3, #32
 8005720:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005722:	2301      	movs	r3, #1
 8005724:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005726:	2300      	movs	r3, #0
 8005728:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800572a:	2300      	movs	r3, #0
 800572c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800572e:	f107 0314 	add.w	r3, r7, #20
 8005732:	4619      	mov	r1, r3
 8005734:	4804      	ldr	r0, [pc, #16]	; (8005748 <MX_GPIO_Init+0xc4>)
 8005736:	f003 f853 	bl	80087e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800573a:	bf00      	nop
 800573c:	3728      	adds	r7, #40	; 0x28
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	40021000 	.word	0x40021000
 8005748:	48001000 	.word	0x48001000

0800574c <EXT12_IRQHandler>:

/* USER CODE BEGIN 4 */
void EXT12_IRQHandler(void)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b08c      	sub	sp, #48	; 0x30
 8005750:	af00      	add	r7, sp, #0

	  /* ADC1 is started using timer 6 triggered conversions */
	  HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim6);
      ADC_status = HAL_ADC_Start_DMA(&hadc1, ADC1_DMA_sort_ptr->ADC1_DMA_bfr, ADC_DMA_BUFFERSIZE);
 8005752:	4bba      	ldr	r3, [pc, #744]	; (8005a3c <EXT12_IRQHandler+0x2f0>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800575a:	4619      	mov	r1, r3
 800575c:	48b8      	ldr	r0, [pc, #736]	; (8005a40 <EXT12_IRQHandler+0x2f4>)
 800575e:	f001 faff 	bl	8006d60 <HAL_ADC_Start_DMA>
 8005762:	4603      	mov	r3, r0
 8005764:	461a      	mov	r2, r3
 8005766:	4bb7      	ldr	r3, [pc, #732]	; (8005a44 <EXT12_IRQHandler+0x2f8>)
 8005768:	701a      	strb	r2, [r3, #0]
	  HAL_ADC_ConvHalfCpltCallback(&hadc1);
 800576a:	48b5      	ldr	r0, [pc, #724]	; (8005a40 <EXT12_IRQHandler+0x2f4>)
 800576c:	f000 fa16 	bl	8005b9c <HAL_ADC_ConvHalfCpltCallback>
	  HAL_ADC_ConvCpltCallback(&hadc1);
 8005770:	48b3      	ldr	r0, [pc, #716]	; (8005a40 <EXT12_IRQHandler+0x2f4>)
 8005772:	f000 faa1 	bl	8005cb8 <HAL_ADC_ConvCpltCallback>

	  HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim7);
	  ADC_status = HAL_ADC_Start_DMA(&hadc2, ADC2_DMA_sort_ptr->ADC2_DMA_bfr, ADC_DMA_BUFFERSIZE);
 8005776:	4bb4      	ldr	r3, [pc, #720]	; (8005a48 <EXT12_IRQHandler+0x2fc>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800577e:	4619      	mov	r1, r3
 8005780:	48b2      	ldr	r0, [pc, #712]	; (8005a4c <EXT12_IRQHandler+0x300>)
 8005782:	f001 faed 	bl	8006d60 <HAL_ADC_Start_DMA>
 8005786:	4603      	mov	r3, r0
 8005788:	461a      	mov	r2, r3
 800578a:	4bae      	ldr	r3, [pc, #696]	; (8005a44 <EXT12_IRQHandler+0x2f8>)
 800578c:	701a      	strb	r2, [r3, #0]
	  HAL_ADC_ConvHalfCpltCallback(&hadc2);
 800578e:	48af      	ldr	r0, [pc, #700]	; (8005a4c <EXT12_IRQHandler+0x300>)
 8005790:	f000 fa04 	bl	8005b9c <HAL_ADC_ConvHalfCpltCallback>
	  HAL_ADC_ConvCpltCallback(&hadc2);
 8005794:	48ad      	ldr	r0, [pc, #692]	; (8005a4c <EXT12_IRQHandler+0x300>)
 8005796:	f000 fa8f 	bl	8005cb8 <HAL_ADC_ConvCpltCallback>

	  HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim20);
	  ADC_status = HAL_ADC_Start_DMA(&hadc3, ADC3_DMA_sort_ptr->ADC3_DMA_bfr, ADC_DMA_BUFFERSIZE);
 800579a:	4bad      	ldr	r3, [pc, #692]	; (8005a50 <EXT12_IRQHandler+0x304>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80057a2:	4619      	mov	r1, r3
 80057a4:	48ab      	ldr	r0, [pc, #684]	; (8005a54 <EXT12_IRQHandler+0x308>)
 80057a6:	f001 fadb 	bl	8006d60 <HAL_ADC_Start_DMA>
 80057aa:	4603      	mov	r3, r0
 80057ac:	461a      	mov	r2, r3
 80057ae:	4ba5      	ldr	r3, [pc, #660]	; (8005a44 <EXT12_IRQHandler+0x2f8>)
 80057b0:	701a      	strb	r2, [r3, #0]
	  HAL_ADC_ConvHalfCpltCallback(&hadc3);
 80057b2:	48a8      	ldr	r0, [pc, #672]	; (8005a54 <EXT12_IRQHandler+0x308>)
 80057b4:	f000 f9f2 	bl	8005b9c <HAL_ADC_ConvHalfCpltCallback>
	  HAL_ADC_ConvCpltCallback(&hadc3);
 80057b8:	48a6      	ldr	r0, [pc, #664]	; (8005a54 <EXT12_IRQHandler+0x308>)
 80057ba:	f000 fa7d 	bl	8005cb8 <HAL_ADC_ConvCpltCallback>

	/* Calculating the offset value and standard deviation for the base line signal for all the channels */
	if(Offset_1_Calculated==0)
 80057be:	4ba6      	ldr	r3, [pc, #664]	; (8005a58 <EXT12_IRQHandler+0x30c>)
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d13e      	bne.n	8005844 <EXT12_IRQHandler+0xf8>
	{
	  float32_t OffsetSum_1 = 0.0f;
 80057c6:	f04f 0300 	mov.w	r3, #0
 80057ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++) // Calculates the mean and standard deviation for the baseline of the signal for the first n buffer fills where n= NOOFITERATIONS_BL
 80057cc:	2300      	movs	r3, #0
 80057ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057d2:	e01a      	b.n	800580a <EXT12_IRQHandler+0xbe>
		{
			/* Collects samples to fill the buffer */
			update_ADC1_IN1_FO_biquad_filter();  // Filters channel 1 data
 80057d4:	f7fc fb34 	bl	8001e40 <update_ADC1_IN1_FO_biquad_filter>
			MA_ADC1_IN1_Update(&MovingAverage_ADC1_IN1);  // Fill the buffer with ADC data
 80057d8:	48a0      	ldr	r0, [pc, #640]	; (8005a5c <EXT12_IRQHandler+0x310>)
 80057da:	f7fb ff59 	bl	8001690 <MA_ADC1_IN1_Update>

			/* Calculate the offset from the filled buffer */
			Offset_1 = ADC1_IN1_OffsetCalc(&OffsetCalc_ADC1_IN1);
 80057de:	48a0      	ldr	r0, [pc, #640]	; (8005a60 <EXT12_IRQHandler+0x314>)
 80057e0:	f7fc fcb8 	bl	8002154 <ADC1_IN1_OffsetCalc>
 80057e4:	eef0 7a40 	vmov.f32	s15, s0
 80057e8:	4b9e      	ldr	r3, [pc, #632]	; (8005a64 <EXT12_IRQHandler+0x318>)
 80057ea:	edc3 7a00 	vstr	s15, [r3]
			OffsetSum_1 += Offset_1;
 80057ee:	4b9d      	ldr	r3, [pc, #628]	; (8005a64 <EXT12_IRQHandler+0x318>)
 80057f0:	edd3 7a00 	vldr	s15, [r3]
 80057f4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80057f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057fc:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++) // Calculates the mean and standard deviation for the baseline of the signal for the first n buffer fills where n= NOOFITERATIONS_BL
 8005800:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005804:	3301      	adds	r3, #1
 8005806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800580a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800580e:	2b13      	cmp	r3, #19
 8005810:	d9e0      	bls.n	80057d4 <EXT12_IRQHandler+0x88>
		}

	  Offset_1 = OffsetSum_1 / NOOFITERATIONS_BL;
 8005812:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005816:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800581a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800581e:	4b91      	ldr	r3, [pc, #580]	; (8005a64 <EXT12_IRQHandler+0x318>)
 8005820:	edc3 7a00 	vstr	s15, [r3]
	  Offset_1_Calculated = 1; // Set the flag indicating offset has been calculated
 8005824:	4b8c      	ldr	r3, [pc, #560]	; (8005a58 <EXT12_IRQHandler+0x30c>)
 8005826:	2201      	movs	r2, #1
 8005828:	701a      	strb	r2, [r3, #0]

	  SD_BL_1 = ADC1_IN1_SD_BL(&SD_BL_ADC1_IN1, Offset_1); // Calculated the standard deviation for the last buffer fill
 800582a:	4b8e      	ldr	r3, [pc, #568]	; (8005a64 <EXT12_IRQHandler+0x318>)
 800582c:	edd3 7a00 	vldr	s15, [r3]
 8005830:	eeb0 0a67 	vmov.f32	s0, s15
 8005834:	488c      	ldr	r0, [pc, #560]	; (8005a68 <EXT12_IRQHandler+0x31c>)
 8005836:	f7fc fdad 	bl	8002394 <ADC1_IN1_SD_BL>
 800583a:	eef0 7a40 	vmov.f32	s15, s0
 800583e:	4b8b      	ldr	r3, [pc, #556]	; (8005a6c <EXT12_IRQHandler+0x320>)
 8005840:	edc3 7a00 	vstr	s15, [r3]
	}


	if(Offset_2_Calculated==0)
 8005844:	4b8a      	ldr	r3, [pc, #552]	; (8005a70 <EXT12_IRQHandler+0x324>)
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d13b      	bne.n	80058c4 <EXT12_IRQHandler+0x178>
	{
	  float32_t OffsetSum_2;
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 800584c:	2300      	movs	r3, #0
 800584e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005852:	e01a      	b.n	800588a <EXT12_IRQHandler+0x13e>
		{

			update_ADC1_IN2_FO_biquad_filter();
 8005854:	f7fc fb3e 	bl	8001ed4 <update_ADC1_IN2_FO_biquad_filter>
			MA_ADC1_IN2_Update(&MovingAverage_ADC1_IN2);
 8005858:	4886      	ldr	r0, [pc, #536]	; (8005a74 <EXT12_IRQHandler+0x328>)
 800585a:	f7fb ffbd 	bl	80017d8 <MA_ADC1_IN2_Update>


			Offset_2 = ADC1_IN2_OffsetCalc(&OffsetCalc_ADC1_IN2);
 800585e:	4886      	ldr	r0, [pc, #536]	; (8005a78 <EXT12_IRQHandler+0x32c>)
 8005860:	f7fc fca8 	bl	80021b4 <ADC1_IN2_OffsetCalc>
 8005864:	eef0 7a40 	vmov.f32	s15, s0
 8005868:	4b84      	ldr	r3, [pc, #528]	; (8005a7c <EXT12_IRQHandler+0x330>)
 800586a:	edc3 7a00 	vstr	s15, [r3]
			OffsetSum_2 += Offset_2;
 800586e:	4b83      	ldr	r3, [pc, #524]	; (8005a7c <EXT12_IRQHandler+0x330>)
 8005870:	edd3 7a00 	vldr	s15, [r3]
 8005874:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005878:	ee77 7a27 	vadd.f32	s15, s14, s15
 800587c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 8005880:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005884:	3301      	adds	r3, #1
 8005886:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800588a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800588e:	2b13      	cmp	r3, #19
 8005890:	d9e0      	bls.n	8005854 <EXT12_IRQHandler+0x108>
		}

	  Offset_2 = OffsetSum_2 / NOOFITERATIONS_BL;
 8005892:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005896:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800589a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800589e:	4b77      	ldr	r3, [pc, #476]	; (8005a7c <EXT12_IRQHandler+0x330>)
 80058a0:	edc3 7a00 	vstr	s15, [r3]
	  Offset_2_Calculated = 1;
 80058a4:	4b72      	ldr	r3, [pc, #456]	; (8005a70 <EXT12_IRQHandler+0x324>)
 80058a6:	2201      	movs	r2, #1
 80058a8:	701a      	strb	r2, [r3, #0]

	  SD_BL_2 = ADC1_IN2_SD_BL(&SD_BL_ADC1_IN2, Offset_2);
 80058aa:	4b74      	ldr	r3, [pc, #464]	; (8005a7c <EXT12_IRQHandler+0x330>)
 80058ac:	edd3 7a00 	vldr	s15, [r3]
 80058b0:	eeb0 0a67 	vmov.f32	s0, s15
 80058b4:	4872      	ldr	r0, [pc, #456]	; (8005a80 <EXT12_IRQHandler+0x334>)
 80058b6:	f7fc fdb9 	bl	800242c <ADC1_IN2_SD_BL>
 80058ba:	eef0 7a40 	vmov.f32	s15, s0
 80058be:	4b71      	ldr	r3, [pc, #452]	; (8005a84 <EXT12_IRQHandler+0x338>)
 80058c0:	edc3 7a00 	vstr	s15, [r3]
	}


	if(Offset_3_Calculated==0)
 80058c4:	4b70      	ldr	r3, [pc, #448]	; (8005a88 <EXT12_IRQHandler+0x33c>)
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d137      	bne.n	800593c <EXT12_IRQHandler+0x1f0>
	{
	  float32_t OffsetSum_3;
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 80058cc:	2300      	movs	r3, #0
 80058ce:	76fb      	strb	r3, [r7, #27]
 80058d0:	e018      	b.n	8005904 <EXT12_IRQHandler+0x1b8>
		{

			update_ADC2_IN3_FO_biquad_filter();
 80058d2:	f7fc fb49 	bl	8001f68 <update_ADC2_IN3_FO_biquad_filter>
			MA_ADC2_IN3_Update(&MovingAverage_ADC2_IN3);
 80058d6:	486d      	ldr	r0, [pc, #436]	; (8005a8c <EXT12_IRQHandler+0x340>)
 80058d8:	f7fc f822 	bl	8001920 <MA_ADC2_IN3_Update>


			Offset_3 = ADC2_IN3_OffsetCalc(&OffsetCalc_ADC2_IN3);
 80058dc:	486c      	ldr	r0, [pc, #432]	; (8005a90 <EXT12_IRQHandler+0x344>)
 80058de:	f7fc fc99 	bl	8002214 <ADC2_IN3_OffsetCalc>
 80058e2:	eef0 7a40 	vmov.f32	s15, s0
 80058e6:	4b6b      	ldr	r3, [pc, #428]	; (8005a94 <EXT12_IRQHandler+0x348>)
 80058e8:	edc3 7a00 	vstr	s15, [r3]
			OffsetSum_3 += Offset_3;
 80058ec:	4b69      	ldr	r3, [pc, #420]	; (8005a94 <EXT12_IRQHandler+0x348>)
 80058ee:	edd3 7a00 	vldr	s15, [r3]
 80058f2:	ed97 7a07 	vldr	s14, [r7, #28]
 80058f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058fa:	edc7 7a07 	vstr	s15, [r7, #28]
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 80058fe:	7efb      	ldrb	r3, [r7, #27]
 8005900:	3301      	adds	r3, #1
 8005902:	76fb      	strb	r3, [r7, #27]
 8005904:	7efb      	ldrb	r3, [r7, #27]
 8005906:	2b13      	cmp	r3, #19
 8005908:	d9e3      	bls.n	80058d2 <EXT12_IRQHandler+0x186>
		}

	  Offset_3 = OffsetSum_3 / NOOFITERATIONS_BL;
 800590a:	ed97 7a07 	vldr	s14, [r7, #28]
 800590e:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8005912:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005916:	4b5f      	ldr	r3, [pc, #380]	; (8005a94 <EXT12_IRQHandler+0x348>)
 8005918:	edc3 7a00 	vstr	s15, [r3]
	  Offset_3_Calculated = 1;
 800591c:	4b5a      	ldr	r3, [pc, #360]	; (8005a88 <EXT12_IRQHandler+0x33c>)
 800591e:	2201      	movs	r2, #1
 8005920:	701a      	strb	r2, [r3, #0]

	  SD_BL_3 = ADC2_IN3_SD_BL(&SD_BL_ADC2_IN3, Offset_3);
 8005922:	4b5c      	ldr	r3, [pc, #368]	; (8005a94 <EXT12_IRQHandler+0x348>)
 8005924:	edd3 7a00 	vldr	s15, [r3]
 8005928:	eeb0 0a67 	vmov.f32	s0, s15
 800592c:	485a      	ldr	r0, [pc, #360]	; (8005a98 <EXT12_IRQHandler+0x34c>)
 800592e:	f7fc fdc9 	bl	80024c4 <ADC2_IN3_SD_BL>
 8005932:	eef0 7a40 	vmov.f32	s15, s0
 8005936:	4b59      	ldr	r3, [pc, #356]	; (8005a9c <EXT12_IRQHandler+0x350>)
 8005938:	edc3 7a00 	vstr	s15, [r3]
	}


	if(Offset_4_Calculated==0)
 800593c:	4b58      	ldr	r3, [pc, #352]	; (8005aa0 <EXT12_IRQHandler+0x354>)
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d137      	bne.n	80059b4 <EXT12_IRQHandler+0x268>
	{
	  float32_t OffsetSum_4;
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 8005944:	2300      	movs	r3, #0
 8005946:	74fb      	strb	r3, [r7, #19]
 8005948:	e018      	b.n	800597c <EXT12_IRQHandler+0x230>
		{

			update_ADC2_IN4_FO_biquad_filter();
 800594a:	f7fc fb57 	bl	8001ffc <update_ADC2_IN4_FO_biquad_filter>
			MA_ADC2_IN4_Update(&MovingAverage_ADC2_IN4);
 800594e:	4855      	ldr	r0, [pc, #340]	; (8005aa4 <EXT12_IRQHandler+0x358>)
 8005950:	f7fc f88a 	bl	8001a68 <MA_ADC2_IN4_Update>


			Offset_4 = ADC2_IN4_OffsetCalc(&OffsetCalc_ADC2_IN4);
 8005954:	4854      	ldr	r0, [pc, #336]	; (8005aa8 <EXT12_IRQHandler+0x35c>)
 8005956:	f7fc fc8d 	bl	8002274 <ADC2_IN4_OffsetCalc>
 800595a:	eef0 7a40 	vmov.f32	s15, s0
 800595e:	4b53      	ldr	r3, [pc, #332]	; (8005aac <EXT12_IRQHandler+0x360>)
 8005960:	edc3 7a00 	vstr	s15, [r3]
			OffsetSum_4 += Offset_4;
 8005964:	4b51      	ldr	r3, [pc, #324]	; (8005aac <EXT12_IRQHandler+0x360>)
 8005966:	edd3 7a00 	vldr	s15, [r3]
 800596a:	ed97 7a05 	vldr	s14, [r7, #20]
 800596e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005972:	edc7 7a05 	vstr	s15, [r7, #20]
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 8005976:	7cfb      	ldrb	r3, [r7, #19]
 8005978:	3301      	adds	r3, #1
 800597a:	74fb      	strb	r3, [r7, #19]
 800597c:	7cfb      	ldrb	r3, [r7, #19]
 800597e:	2b13      	cmp	r3, #19
 8005980:	d9e3      	bls.n	800594a <EXT12_IRQHandler+0x1fe>
		}

	  Offset_4 = OffsetSum_4 / NOOFITERATIONS_BL;
 8005982:	ed97 7a05 	vldr	s14, [r7, #20]
 8005986:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800598a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800598e:	4b47      	ldr	r3, [pc, #284]	; (8005aac <EXT12_IRQHandler+0x360>)
 8005990:	edc3 7a00 	vstr	s15, [r3]
	  Offset_4_Calculated = 1;
 8005994:	4b42      	ldr	r3, [pc, #264]	; (8005aa0 <EXT12_IRQHandler+0x354>)
 8005996:	2201      	movs	r2, #1
 8005998:	701a      	strb	r2, [r3, #0]

	  SD_BL_4 = ADC2_IN4_SD_BL(&SD_BL_ADC2_IN4, Offset_4);
 800599a:	4b44      	ldr	r3, [pc, #272]	; (8005aac <EXT12_IRQHandler+0x360>)
 800599c:	edd3 7a00 	vldr	s15, [r3]
 80059a0:	eeb0 0a67 	vmov.f32	s0, s15
 80059a4:	4842      	ldr	r0, [pc, #264]	; (8005ab0 <EXT12_IRQHandler+0x364>)
 80059a6:	f7fc fdd9 	bl	800255c <ADC2_IN4_SD_BL>
 80059aa:	eef0 7a40 	vmov.f32	s15, s0
 80059ae:	4b41      	ldr	r3, [pc, #260]	; (8005ab4 <EXT12_IRQHandler+0x368>)
 80059b0:	edc3 7a00 	vstr	s15, [r3]
	}


	if(Offset_5_Calculated==0)
 80059b4:	4b40      	ldr	r3, [pc, #256]	; (8005ab8 <EXT12_IRQHandler+0x36c>)
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d137      	bne.n	8005a2c <EXT12_IRQHandler+0x2e0>
	{
	  float32_t OffsetSum_5;
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++) // Calculates the mean and standard deviation for the baseline of the signal for the first n buffer fills where n= NOOFITERATIONS_BL
 80059bc:	2300      	movs	r3, #0
 80059be:	72fb      	strb	r3, [r7, #11]
 80059c0:	e018      	b.n	80059f4 <EXT12_IRQHandler+0x2a8>
		{
			/* Collects samples to fill the buffer */
			update_ADC3_IN1_FO_biquad_filter();  // Notch filters channel 1 data
 80059c2:	f7fc fb65 	bl	8002090 <update_ADC3_IN1_FO_biquad_filter>
			MA_ADC3_IN1_Update(&MovingAverage_ADC3_IN1);  // Fill the buffer with ADC data
 80059c6:	483d      	ldr	r0, [pc, #244]	; (8005abc <EXT12_IRQHandler+0x370>)
 80059c8:	f7fc f8f2 	bl	8001bb0 <MA_ADC3_IN1_Update>

			/* Calculate the offset from the filled buffer */
			Offset_1 = ADC3_IN1_OffsetCalc(&OffsetCalc_ADC3_IN1);
 80059cc:	483c      	ldr	r0, [pc, #240]	; (8005ac0 <EXT12_IRQHandler+0x374>)
 80059ce:	f7fc fc81 	bl	80022d4 <ADC3_IN1_OffsetCalc>
 80059d2:	eef0 7a40 	vmov.f32	s15, s0
 80059d6:	4b23      	ldr	r3, [pc, #140]	; (8005a64 <EXT12_IRQHandler+0x318>)
 80059d8:	edc3 7a00 	vstr	s15, [r3]
			OffsetSum_5 += Offset_5;
 80059dc:	4b39      	ldr	r3, [pc, #228]	; (8005ac4 <EXT12_IRQHandler+0x378>)
 80059de:	edd3 7a00 	vldr	s15, [r3]
 80059e2:	ed97 7a03 	vldr	s14, [r7, #12]
 80059e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059ea:	edc7 7a03 	vstr	s15, [r7, #12]
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++) // Calculates the mean and standard deviation for the baseline of the signal for the first n buffer fills where n= NOOFITERATIONS_BL
 80059ee:	7afb      	ldrb	r3, [r7, #11]
 80059f0:	3301      	adds	r3, #1
 80059f2:	72fb      	strb	r3, [r7, #11]
 80059f4:	7afb      	ldrb	r3, [r7, #11]
 80059f6:	2b13      	cmp	r3, #19
 80059f8:	d9e3      	bls.n	80059c2 <EXT12_IRQHandler+0x276>
		}

	  Offset_5 = OffsetSum_5 / NOOFITERATIONS_BL;
 80059fa:	ed97 7a03 	vldr	s14, [r7, #12]
 80059fe:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8005a02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a06:	4b2f      	ldr	r3, [pc, #188]	; (8005ac4 <EXT12_IRQHandler+0x378>)
 8005a08:	edc3 7a00 	vstr	s15, [r3]
	  Offset_5_Calculated = 1; // Set the flag indicating offset has been calculated
 8005a0c:	4b2a      	ldr	r3, [pc, #168]	; (8005ab8 <EXT12_IRQHandler+0x36c>)
 8005a0e:	2201      	movs	r2, #1
 8005a10:	701a      	strb	r2, [r3, #0]

	  SD_BL_5 = ADC3_IN1_SD_BL(&SD_BL_ADC3_IN1, Offset_5);
 8005a12:	4b2c      	ldr	r3, [pc, #176]	; (8005ac4 <EXT12_IRQHandler+0x378>)
 8005a14:	edd3 7a00 	vldr	s15, [r3]
 8005a18:	eeb0 0a67 	vmov.f32	s0, s15
 8005a1c:	482a      	ldr	r0, [pc, #168]	; (8005ac8 <EXT12_IRQHandler+0x37c>)
 8005a1e:	f7fc fde9 	bl	80025f4 <ADC3_IN1_SD_BL>
 8005a22:	eef0 7a40 	vmov.f32	s15, s0
 8005a26:	4b29      	ldr	r3, [pc, #164]	; (8005acc <EXT12_IRQHandler+0x380>)
 8005a28:	edc3 7a00 	vstr	s15, [r3]
	}


	if(Offset_6_Calculated==0)
 8005a2c:	4b28      	ldr	r3, [pc, #160]	; (8005ad0 <EXT12_IRQHandler+0x384>)
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f040 8084 	bne.w	8005b3e <EXT12_IRQHandler+0x3f2>
	{
	  float32_t OffsetSum_6;
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 8005a36:	2300      	movs	r3, #0
 8005a38:	70fb      	strb	r3, [r7, #3]
 8005a3a:	e064      	b.n	8005b06 <EXT12_IRQHandler+0x3ba>
 8005a3c:	2000bb30 	.word	0x2000bb30
 8005a40:	2000b6dc 	.word	0x2000b6dc
 8005a44:	2001b694 	.word	0x2001b694
 8005a48:	2000bb34 	.word	0x2000bb34
 8005a4c:	2000b748 	.word	0x2000b748
 8005a50:	2000bb38 	.word	0x2000bb38
 8005a54:	2000b7b4 	.word	0x2000b7b4
 8005a58:	2001b6b0 	.word	0x2001b6b0
 8005a5c:	2000bb3c 	.word	0x2000bb3c
 8005a60:	2000dce4 	.word	0x2000dce4
 8005a64:	2001b698 	.word	0x2001b698
 8005a68:	2000fe8c 	.word	0x2000fe8c
 8005a6c:	2001b6b8 	.word	0x2001b6b8
 8005a70:	2001b6b1 	.word	0x2001b6b1
 8005a74:	2000c0d8 	.word	0x2000c0d8
 8005a78:	2000e280 	.word	0x2000e280
 8005a7c:	2001b69c 	.word	0x2001b69c
 8005a80:	20010428 	.word	0x20010428
 8005a84:	2001b6bc 	.word	0x2001b6bc
 8005a88:	2001b6b2 	.word	0x2001b6b2
 8005a8c:	2000c674 	.word	0x2000c674
 8005a90:	2000e81c 	.word	0x2000e81c
 8005a94:	2001b6a0 	.word	0x2001b6a0
 8005a98:	200109c4 	.word	0x200109c4
 8005a9c:	2001b6c0 	.word	0x2001b6c0
 8005aa0:	2001b6b3 	.word	0x2001b6b3
 8005aa4:	2000cc10 	.word	0x2000cc10
 8005aa8:	2000edb8 	.word	0x2000edb8
 8005aac:	2001b6a4 	.word	0x2001b6a4
 8005ab0:	20010f60 	.word	0x20010f60
 8005ab4:	2001b6c4 	.word	0x2001b6c4
 8005ab8:	2001b6b4 	.word	0x2001b6b4
 8005abc:	2000d1ac 	.word	0x2000d1ac
 8005ac0:	2000f354 	.word	0x2000f354
 8005ac4:	2001b6a8 	.word	0x2001b6a8
 8005ac8:	200114fc 	.word	0x200114fc
 8005acc:	2001b6c8 	.word	0x2001b6c8
 8005ad0:	2001b6b5 	.word	0x2001b6b5
		{

			update_ADC3_IN2_FO_biquad_filter();
 8005ad4:	f7fc fb26 	bl	8002124 <update_ADC3_IN2_FO_biquad_filter>
			MA_ADC3_IN2_Update(&MovingAverage_ADC3_IN2);
 8005ad8:	481c      	ldr	r0, [pc, #112]	; (8005b4c <EXT12_IRQHandler+0x400>)
 8005ada:	f7fc f90d 	bl	8001cf8 <MA_ADC3_IN2_Update>


			Offset_6 = ADC3_IN2_OffsetCalc(&OffsetCalc_ADC3_IN2);
 8005ade:	481c      	ldr	r0, [pc, #112]	; (8005b50 <EXT12_IRQHandler+0x404>)
 8005ae0:	f7fc fc28 	bl	8002334 <ADC3_IN2_OffsetCalc>
 8005ae4:	eef0 7a40 	vmov.f32	s15, s0
 8005ae8:	4b1a      	ldr	r3, [pc, #104]	; (8005b54 <EXT12_IRQHandler+0x408>)
 8005aea:	edc3 7a00 	vstr	s15, [r3]
			OffsetSum_6 += Offset_6;
 8005aee:	4b19      	ldr	r3, [pc, #100]	; (8005b54 <EXT12_IRQHandler+0x408>)
 8005af0:	edd3 7a00 	vldr	s15, [r3]
 8005af4:	ed97 7a01 	vldr	s14, [r7, #4]
 8005af8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005afc:	edc7 7a01 	vstr	s15, [r7, #4]
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 8005b00:	78fb      	ldrb	r3, [r7, #3]
 8005b02:	3301      	adds	r3, #1
 8005b04:	70fb      	strb	r3, [r7, #3]
 8005b06:	78fb      	ldrb	r3, [r7, #3]
 8005b08:	2b13      	cmp	r3, #19
 8005b0a:	d9e3      	bls.n	8005ad4 <EXT12_IRQHandler+0x388>
		}

	  Offset_6 = OffsetSum_6 / NOOFITERATIONS_BL;
 8005b0c:	ed97 7a01 	vldr	s14, [r7, #4]
 8005b10:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8005b14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b18:	4b0e      	ldr	r3, [pc, #56]	; (8005b54 <EXT12_IRQHandler+0x408>)
 8005b1a:	edc3 7a00 	vstr	s15, [r3]
	  Offset_6_Calculated = 1;
 8005b1e:	4b0e      	ldr	r3, [pc, #56]	; (8005b58 <EXT12_IRQHandler+0x40c>)
 8005b20:	2201      	movs	r2, #1
 8005b22:	701a      	strb	r2, [r3, #0]

	  SD_BL_6 = ADC3_IN2_SD_BL(&SD_BL_ADC3_IN2, Offset_6);
 8005b24:	4b0b      	ldr	r3, [pc, #44]	; (8005b54 <EXT12_IRQHandler+0x408>)
 8005b26:	edd3 7a00 	vldr	s15, [r3]
 8005b2a:	eeb0 0a67 	vmov.f32	s0, s15
 8005b2e:	480b      	ldr	r0, [pc, #44]	; (8005b5c <EXT12_IRQHandler+0x410>)
 8005b30:	f7fc fdac 	bl	800268c <ADC3_IN2_SD_BL>
 8005b34:	eef0 7a40 	vmov.f32	s15, s0
 8005b38:	4b09      	ldr	r3, [pc, #36]	; (8005b60 <EXT12_IRQHandler+0x414>)
 8005b3a:	edc3 7a00 	vstr	s15, [r3]
	}

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);  // Calls the HAL's callback function
 8005b3e:	2004      	movs	r0, #4
 8005b40:	f002 ffe8 	bl	8008b14 <HAL_GPIO_EXTI_IRQHandler>
}
 8005b44:	bf00      	nop
 8005b46:	3730      	adds	r7, #48	; 0x30
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	2000d748 	.word	0x2000d748
 8005b50:	2000f8f0 	.word	0x2000f8f0
 8005b54:	2001b6ac 	.word	0x2001b6ac
 8005b58:	2001b6b5 	.word	0x2001b6b5
 8005b5c:	20011a98 	.word	0x20011a98
 8005b60:	2001b6cc 	.word	0x2001b6cc

08005b64 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) // Callback function (Called by HAL_GPIO_EXTI_IRQHandler (above))
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_2)
 8005b6e:	88fb      	ldrh	r3, [r7, #6]
 8005b70:	2b04      	cmp	r3, #4
 8005b72:	d10d      	bne.n	8005b90 <HAL_GPIO_EXTI_Callback+0x2c>
	{
		// Turn the LED connected to PE5 on
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 8005b74:	2201      	movs	r2, #1
 8005b76:	2120      	movs	r1, #32
 8005b78:	4807      	ldr	r0, [pc, #28]	; (8005b98 <HAL_GPIO_EXTI_Callback+0x34>)
 8005b7a:	f002 ffb3 	bl	8008ae4 <HAL_GPIO_WritePin>

        // Delay for 2 seconds (2000 milliseconds)
        HAL_Delay(2000);
 8005b7e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005b82:	f000 fcff 	bl	8006584 <HAL_Delay>

        // Turn the LED off
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 8005b86:	2200      	movs	r2, #0
 8005b88:	2120      	movs	r1, #32
 8005b8a:	4803      	ldr	r0, [pc, #12]	; (8005b98 <HAL_GPIO_EXTI_Callback+0x34>)
 8005b8c:	f002 ffaa 	bl	8008ae4 <HAL_GPIO_WritePin>
	}
}
 8005b90:	bf00      	nop
 8005b92:	3708      	adds	r7, #8
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	48001000 	.word	0x48001000

08005b9c <HAL_ADC_ConvHalfCpltCallback>:

void                    HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)   // Fires when the upper half of the DMA buffer is filled
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
	 if (hadc->Instance == ADC1)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005bac:	d123      	bne.n	8005bf6 <HAL_ADC_ConvHalfCpltCallback+0x5a>
	   {
	        ADC1_DMA_sort_uhb(); // Handles the upper half of the DMA buffer
 8005bae:	f7fe fa2f 	bl	8004010 <ADC1_DMA_sort_uhb>

	        ADC1_DMA_sort_ptr->ADC1_DMA_mon=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[ADC_DMA_QUATERBUFFERSIZE];  // Monitors one of the DMA buffer registers in the upper half of the buffer
 8005bb2:	4b3c      	ldr	r3, [pc, #240]	; (8005ca4 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a3b      	ldr	r2, [pc, #236]	; (8005ca4 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8005bb8:	6812      	ldr	r2, [r2, #0]
 8005bba:	f8d3 39c4 	ldr.w	r3, [r3, #2500]	; 0x9c4
 8005bbe:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005bc2:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
	        ADC1_DMA_sort_ptr->ADC1_IN1_mon=ADC1_DMA_sort_ptr->ADC1_IN1_bfr[ADC_DMA_EIGHTHBUFFERSIZE];  // Monitors one of the IN1 data buffer registers in the upper half of the buffer
 8005bc6:	4b37      	ldr	r3, [pc, #220]	; (8005ca4 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a36      	ldr	r2, [pc, #216]	; (8005ca4 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8005bcc:	6812      	ldr	r2, [r2, #0]
 8005bce:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005bd2:	f8d3 3bf4 	ldr.w	r3, [r3, #3060]	; 0xbf4
 8005bd6:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8005bda:	f8c2 3e24 	str.w	r3, [r2, #3620]	; 0xe24
	        ADC1_DMA_sort_ptr->ADC1_IN2_mon=ADC1_DMA_sort_ptr->ADC1_IN2_bfr[ADC_DMA_EIGHTHBUFFERSIZE];  // Monitors one of the IN2 data buffer registers in the upper half of the buffer
 8005bde:	4b31      	ldr	r3, [pc, #196]	; (8005ca4 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a30      	ldr	r2, [pc, #192]	; (8005ca4 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8005be4:	6812      	ldr	r2, [r2, #0]
 8005be6:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8005bea:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 8005bee:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
 8005bf2:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538
	   }


	 if (hadc->Instance == ADC2)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a2b      	ldr	r2, [pc, #172]	; (8005ca8 <HAL_ADC_ConvHalfCpltCallback+0x10c>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d123      	bne.n	8005c48 <HAL_ADC_ConvHalfCpltCallback+0xac>

	   {
		    ADC2_DMA_sort_uhb(); 
 8005c00:	f7fe fbba 	bl	8004378 <ADC2_DMA_sort_uhb>

		    ADC2_DMA_sort_ptr->ADC2_DMA_mon=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[ADC_DMA_QUATERBUFFERSIZE];
 8005c04:	4b29      	ldr	r3, [pc, #164]	; (8005cac <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a28      	ldr	r2, [pc, #160]	; (8005cac <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8005c0a:	6812      	ldr	r2, [r2, #0]
 8005c0c:	f8d3 39c4 	ldr.w	r3, [r3, #2500]	; 0x9c4
 8005c10:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005c14:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
		    ADC2_DMA_sort_ptr->ADC2_IN3_mon=ADC2_DMA_sort_ptr->ADC2_IN3_bfr[ADC_DMA_EIGHTHBUFFERSIZE];
 8005c18:	4b24      	ldr	r3, [pc, #144]	; (8005cac <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a23      	ldr	r2, [pc, #140]	; (8005cac <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8005c1e:	6812      	ldr	r2, [r2, #0]
 8005c20:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005c24:	f8d3 3bf4 	ldr.w	r3, [r3, #3060]	; 0xbf4
 8005c28:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8005c2c:	f8c2 3e24 	str.w	r3, [r2, #3620]	; 0xe24
		    ADC2_DMA_sort_ptr->ADC2_IN4_mon=ADC2_DMA_sort_ptr->ADC2_IN4_bfr[ADC_DMA_EIGHTHBUFFERSIZE];
 8005c30:	4b1e      	ldr	r3, [pc, #120]	; (8005cac <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a1d      	ldr	r2, [pc, #116]	; (8005cac <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8005c36:	6812      	ldr	r2, [r2, #0]
 8005c38:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8005c3c:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 8005c40:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
 8005c44:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538
	   }

	 if (hadc->Instance == ADC3)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a18      	ldr	r2, [pc, #96]	; (8005cb0 <HAL_ADC_ConvHalfCpltCallback+0x114>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d123      	bne.n	8005c9a <HAL_ADC_ConvHalfCpltCallback+0xfe>

	   {
		    ADC3_DMA_sort_uhb(); 
 8005c52:	f7fe fd45 	bl	80046e0 <ADC3_DMA_sort_uhb>

		    ADC3_DMA_sort_ptr->ADC3_DMA_mon=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[ADC_DMA_QUATERBUFFERSIZE];
 8005c56:	4b17      	ldr	r3, [pc, #92]	; (8005cb4 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a16      	ldr	r2, [pc, #88]	; (8005cb4 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8005c5c:	6812      	ldr	r2, [r2, #0]
 8005c5e:	f8d3 39c4 	ldr.w	r3, [r3, #2500]	; 0x9c4
 8005c62:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005c66:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
		    ADC3_DMA_sort_ptr->ADC3_IN1_mon=ADC3_DMA_sort_ptr->ADC3_IN1_bfr[ADC_DMA_EIGHTHBUFFERSIZE];
 8005c6a:	4b12      	ldr	r3, [pc, #72]	; (8005cb4 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a11      	ldr	r2, [pc, #68]	; (8005cb4 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8005c70:	6812      	ldr	r2, [r2, #0]
 8005c72:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005c76:	f8d3 3bf4 	ldr.w	r3, [r3, #3060]	; 0xbf4
 8005c7a:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8005c7e:	f8c2 3e24 	str.w	r3, [r2, #3620]	; 0xe24
		    ADC3_DMA_sort_ptr->ADC3_IN2_mon=ADC3_DMA_sort_ptr->ADC3_IN2_bfr[ADC_DMA_EIGHTHBUFFERSIZE];
 8005c82:	4b0c      	ldr	r3, [pc, #48]	; (8005cb4 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a0b      	ldr	r2, [pc, #44]	; (8005cb4 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8005c88:	6812      	ldr	r2, [r2, #0]
 8005c8a:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8005c8e:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 8005c92:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
 8005c96:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538
	   }
};
 8005c9a:	bf00      	nop
 8005c9c:	3708      	adds	r7, #8
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	2000bb30 	.word	0x2000bb30
 8005ca8:	50000100 	.word	0x50000100
 8005cac:	2000bb34 	.word	0x2000bb34
 8005cb0:	50000400 	.word	0x50000400
 8005cb4:	2000bb38 	.word	0x2000bb38

08005cb8 <HAL_ADC_ConvCpltCallback>:

void                    HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)  // Fires when the lower half of the DMA buffer is filled
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
	  if (hadc->Instance == ADC1)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005cc8:	d128      	bne.n	8005d1c <HAL_ADC_ConvCpltCallback+0x64>
		{
			ADC1_DMA_sort_lhb(); // Handles the lower half of the DMA buffer
 8005cca:	f7fe fa75 	bl	80041b8 <ADC1_DMA_sort_lhb>

			ADC1_DMA_sort_ptr->ADC1_DMA_mon=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[ADC_DMA_HALFBUFFERSIZE + ADC_DMA_QUATERBUFFERSIZE]; // Monitors one of the DMA buffer registers in the lower half of the buffer
 8005cce:	4b43      	ldr	r3, [pc, #268]	; (8005ddc <HAL_ADC_ConvCpltCallback+0x124>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a42      	ldr	r2, [pc, #264]	; (8005ddc <HAL_ADC_ConvCpltCallback+0x124>)
 8005cd4:	6812      	ldr	r2, [r2, #0]
 8005cd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cda:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 8005cde:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005ce2:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
			ADC1_DMA_sort_ptr->ADC1_IN1_mon=ADC1_DMA_sort_ptr->ADC1_IN1_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];  // Monitors one of the IN1 data buffer registers in the lower half of the buffer
 8005ce6:	4b3d      	ldr	r3, [pc, #244]	; (8005ddc <HAL_ADC_ConvCpltCallback+0x124>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a3c      	ldr	r2, [pc, #240]	; (8005ddc <HAL_ADC_ConvCpltCallback+0x124>)
 8005cec:	6812      	ldr	r2, [r2, #0]
 8005cee:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8005cf2:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	; 0x5b8
 8005cf6:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8005cfa:	f8c2 3e24 	str.w	r3, [r2, #3620]	; 0xe24
			ADC1_DMA_sort_ptr->ADC1_IN2_mon=ADC1_DMA_sort_ptr->ADC1_IN2_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];  // Monitors one of the IN2 data buffer registers in the lower half of the buffer
 8005cfe:	4b37      	ldr	r3, [pc, #220]	; (8005ddc <HAL_ADC_ConvCpltCallback+0x124>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a36      	ldr	r2, [pc, #216]	; (8005ddc <HAL_ADC_ConvCpltCallback+0x124>)
 8005d04:	6812      	ldr	r2, [r2, #0]
 8005d06:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8005d0a:	f8d3 3ccc 	ldr.w	r3, [r3, #3276]	; 0xccc
 8005d0e:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
 8005d12:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538

			Buffer_ADC1_Ready = 1; // Sets a flag to zero after the channel specific buffers have been filled
 8005d16:	4b32      	ldr	r3, [pc, #200]	; (8005de0 <HAL_ADC_ConvCpltCallback+0x128>)
 8005d18:	2201      	movs	r2, #1
 8005d1a:	701a      	strb	r2, [r3, #0]
		}


	  if (hadc->Instance == ADC2)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a30      	ldr	r2, [pc, #192]	; (8005de4 <HAL_ADC_ConvCpltCallback+0x12c>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d128      	bne.n	8005d78 <HAL_ADC_ConvCpltCallback+0xc0>

		{
			 ADC2_DMA_sort_lhb();
 8005d26:	f7fe fbfb 	bl	8004520 <ADC2_DMA_sort_lhb>

			 ADC2_DMA_sort_ptr->ADC2_DMA_mon=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[ADC_DMA_HALFBUFFERSIZE + ADC_DMA_QUATERBUFFERSIZE];
 8005d2a:	4b2f      	ldr	r3, [pc, #188]	; (8005de8 <HAL_ADC_ConvCpltCallback+0x130>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a2e      	ldr	r2, [pc, #184]	; (8005de8 <HAL_ADC_ConvCpltCallback+0x130>)
 8005d30:	6812      	ldr	r2, [r2, #0]
 8005d32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d36:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 8005d3a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005d3e:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
			 ADC2_DMA_sort_ptr->ADC2_IN3_mon=ADC2_DMA_sort_ptr->ADC2_IN3_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];
 8005d42:	4b29      	ldr	r3, [pc, #164]	; (8005de8 <HAL_ADC_ConvCpltCallback+0x130>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a28      	ldr	r2, [pc, #160]	; (8005de8 <HAL_ADC_ConvCpltCallback+0x130>)
 8005d48:	6812      	ldr	r2, [r2, #0]
 8005d4a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8005d4e:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	; 0x5b8
 8005d52:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8005d56:	f8c2 3e24 	str.w	r3, [r2, #3620]	; 0xe24
			 ADC2_DMA_sort_ptr->ADC2_IN4_mon=ADC2_DMA_sort_ptr->ADC2_IN4_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];
 8005d5a:	4b23      	ldr	r3, [pc, #140]	; (8005de8 <HAL_ADC_ConvCpltCallback+0x130>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a22      	ldr	r2, [pc, #136]	; (8005de8 <HAL_ADC_ConvCpltCallback+0x130>)
 8005d60:	6812      	ldr	r2, [r2, #0]
 8005d62:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8005d66:	f8d3 3ccc 	ldr.w	r3, [r3, #3276]	; 0xccc
 8005d6a:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
 8005d6e:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538

			 Buffer_ADC2_Ready = 1;
 8005d72:	4b1e      	ldr	r3, [pc, #120]	; (8005dec <HAL_ADC_ConvCpltCallback+0x134>)
 8005d74:	2201      	movs	r2, #1
 8005d76:	701a      	strb	r2, [r3, #0]
		}

	   if (hadc->Instance == ADC3)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a1c      	ldr	r2, [pc, #112]	; (8005df0 <HAL_ADC_ConvCpltCallback+0x138>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d128      	bne.n	8005dd4 <HAL_ADC_ConvCpltCallback+0x11c>

		{
		     ADC3_DMA_sort_lhb();
 8005d82:	f7fe fd81 	bl	8004888 <ADC3_DMA_sort_lhb>

			 ADC3_DMA_sort_ptr->ADC3_DMA_mon=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[ADC_DMA_HALFBUFFERSIZE + ADC_DMA_QUATERBUFFERSIZE];
 8005d86:	4b1b      	ldr	r3, [pc, #108]	; (8005df4 <HAL_ADC_ConvCpltCallback+0x13c>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a1a      	ldr	r2, [pc, #104]	; (8005df4 <HAL_ADC_ConvCpltCallback+0x13c>)
 8005d8c:	6812      	ldr	r2, [r2, #0]
 8005d8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d92:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 8005d96:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005d9a:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
			 ADC3_DMA_sort_ptr->ADC3_IN1_mon=ADC3_DMA_sort_ptr->ADC3_IN1_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];
 8005d9e:	4b15      	ldr	r3, [pc, #84]	; (8005df4 <HAL_ADC_ConvCpltCallback+0x13c>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a14      	ldr	r2, [pc, #80]	; (8005df4 <HAL_ADC_ConvCpltCallback+0x13c>)
 8005da4:	6812      	ldr	r2, [r2, #0]
 8005da6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8005daa:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	; 0x5b8
 8005dae:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8005db2:	f8c2 3e24 	str.w	r3, [r2, #3620]	; 0xe24
			 ADC3_DMA_sort_ptr->ADC3_IN2_mon=ADC3_DMA_sort_ptr->ADC3_IN2_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];
 8005db6:	4b0f      	ldr	r3, [pc, #60]	; (8005df4 <HAL_ADC_ConvCpltCallback+0x13c>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a0e      	ldr	r2, [pc, #56]	; (8005df4 <HAL_ADC_ConvCpltCallback+0x13c>)
 8005dbc:	6812      	ldr	r2, [r2, #0]
 8005dbe:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8005dc2:	f8d3 3ccc 	ldr.w	r3, [r3, #3276]	; 0xccc
 8005dc6:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
 8005dca:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538

			 Buffer_ADC3_Ready = 1;
 8005dce:	4b0a      	ldr	r3, [pc, #40]	; (8005df8 <HAL_ADC_ConvCpltCallback+0x140>)
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	701a      	strb	r2, [r3, #0]
		}

};
 8005dd4:	bf00      	nop
 8005dd6:	3708      	adds	r7, #8
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	2000bb30 	.word	0x2000bb30
 8005de0:	2001b720 	.word	0x2001b720
 8005de4:	50000100 	.word	0x50000100
 8005de8:	2000bb34 	.word	0x2000bb34
 8005dec:	2001b721 	.word	0x2001b721
 8005df0:	50000400 	.word	0x50000400
 8005df4:	2000bb38 	.word	0x2000bb38
 8005df8:	2001b722 	.word	0x2001b722

08005dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005e00:	b672      	cpsid	i
}
 8005e02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005e04:	e7fe      	b.n	8005e04 <Error_Handler+0x8>
	...

08005e08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e0e:	4b0f      	ldr	r3, [pc, #60]	; (8005e4c <HAL_MspInit+0x44>)
 8005e10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e12:	4a0e      	ldr	r2, [pc, #56]	; (8005e4c <HAL_MspInit+0x44>)
 8005e14:	f043 0301 	orr.w	r3, r3, #1
 8005e18:	6613      	str	r3, [r2, #96]	; 0x60
 8005e1a:	4b0c      	ldr	r3, [pc, #48]	; (8005e4c <HAL_MspInit+0x44>)
 8005e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e1e:	f003 0301 	and.w	r3, r3, #1
 8005e22:	607b      	str	r3, [r7, #4]
 8005e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e26:	4b09      	ldr	r3, [pc, #36]	; (8005e4c <HAL_MspInit+0x44>)
 8005e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e2a:	4a08      	ldr	r2, [pc, #32]	; (8005e4c <HAL_MspInit+0x44>)
 8005e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e30:	6593      	str	r3, [r2, #88]	; 0x58
 8005e32:	4b06      	ldr	r3, [pc, #24]	; (8005e4c <HAL_MspInit+0x44>)
 8005e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e3a:	603b      	str	r3, [r7, #0]
 8005e3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8005e3e:	f002 ff25 	bl	8008c8c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005e42:	bf00      	nop
 8005e44:	3708      	adds	r7, #8
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	40021000 	.word	0x40021000

08005e50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b0a2      	sub	sp, #136	; 0x88
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e58:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	601a      	str	r2, [r3, #0]
 8005e60:	605a      	str	r2, [r3, #4]
 8005e62:	609a      	str	r2, [r3, #8]
 8005e64:	60da      	str	r2, [r3, #12]
 8005e66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005e68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e6c:	2250      	movs	r2, #80	; 0x50
 8005e6e:	2100      	movs	r1, #0
 8005e70:	4618      	mov	r0, r3
 8005e72:	f005 fd89 	bl	800b988 <memset>
  if(hadc->Instance==ADC1)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e7e:	d169      	bne.n	8005f54 <HAL_ADC_MspInit+0x104>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8005e80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e84:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8005e86:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005e8a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005e8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e90:	4618      	mov	r0, r3
 8005e92:	f003 fc09 	bl	80096a8 <HAL_RCCEx_PeriphCLKConfig>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d001      	beq.n	8005ea0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8005e9c:	f7ff ffae 	bl	8005dfc <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8005ea0:	4b64      	ldr	r3, [pc, #400]	; (8006034 <HAL_ADC_MspInit+0x1e4>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	4a63      	ldr	r2, [pc, #396]	; (8006034 <HAL_ADC_MspInit+0x1e4>)
 8005ea8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8005eaa:	4b62      	ldr	r3, [pc, #392]	; (8006034 <HAL_ADC_MspInit+0x1e4>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d10b      	bne.n	8005eca <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8005eb2:	4b61      	ldr	r3, [pc, #388]	; (8006038 <HAL_ADC_MspInit+0x1e8>)
 8005eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eb6:	4a60      	ldr	r2, [pc, #384]	; (8006038 <HAL_ADC_MspInit+0x1e8>)
 8005eb8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005ebc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005ebe:	4b5e      	ldr	r3, [pc, #376]	; (8006038 <HAL_ADC_MspInit+0x1e8>)
 8005ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ec2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ec6:	623b      	str	r3, [r7, #32]
 8005ec8:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005eca:	4b5b      	ldr	r3, [pc, #364]	; (8006038 <HAL_ADC_MspInit+0x1e8>)
 8005ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ece:	4a5a      	ldr	r2, [pc, #360]	; (8006038 <HAL_ADC_MspInit+0x1e8>)
 8005ed0:	f043 0301 	orr.w	r3, r3, #1
 8005ed4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005ed6:	4b58      	ldr	r3, [pc, #352]	; (8006038 <HAL_ADC_MspInit+0x1e8>)
 8005ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eda:	f003 0301 	and.w	r3, r3, #1
 8005ede:	61fb      	str	r3, [r7, #28]
 8005ee0:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005eea:	2300      	movs	r3, #0
 8005eec:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005eee:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ef8:	f002 fc72 	bl	80087e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8005efc:	4b4f      	ldr	r3, [pc, #316]	; (800603c <HAL_ADC_MspInit+0x1ec>)
 8005efe:	4a50      	ldr	r2, [pc, #320]	; (8006040 <HAL_ADC_MspInit+0x1f0>)
 8005f00:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8005f02:	4b4e      	ldr	r3, [pc, #312]	; (800603c <HAL_ADC_MspInit+0x1ec>)
 8005f04:	2205      	movs	r2, #5
 8005f06:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005f08:	4b4c      	ldr	r3, [pc, #304]	; (800603c <HAL_ADC_MspInit+0x1ec>)
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005f0e:	4b4b      	ldr	r3, [pc, #300]	; (800603c <HAL_ADC_MspInit+0x1ec>)
 8005f10:	2200      	movs	r2, #0
 8005f12:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005f14:	4b49      	ldr	r3, [pc, #292]	; (800603c <HAL_ADC_MspInit+0x1ec>)
 8005f16:	2280      	movs	r2, #128	; 0x80
 8005f18:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005f1a:	4b48      	ldr	r3, [pc, #288]	; (800603c <HAL_ADC_MspInit+0x1ec>)
 8005f1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f20:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005f22:	4b46      	ldr	r3, [pc, #280]	; (800603c <HAL_ADC_MspInit+0x1ec>)
 8005f24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f28:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005f2a:	4b44      	ldr	r3, [pc, #272]	; (800603c <HAL_ADC_MspInit+0x1ec>)
 8005f2c:	2220      	movs	r2, #32
 8005f2e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005f30:	4b42      	ldr	r3, [pc, #264]	; (800603c <HAL_ADC_MspInit+0x1ec>)
 8005f32:	2200      	movs	r2, #0
 8005f34:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005f36:	4841      	ldr	r0, [pc, #260]	; (800603c <HAL_ADC_MspInit+0x1ec>)
 8005f38:	f002 f934 	bl	80081a4 <HAL_DMA_Init>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d001      	beq.n	8005f46 <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8005f42:	f7ff ff5b 	bl	8005dfc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a3c      	ldr	r2, [pc, #240]	; (800603c <HAL_ADC_MspInit+0x1ec>)
 8005f4a:	655a      	str	r2, [r3, #84]	; 0x54
 8005f4c:	4a3b      	ldr	r2, [pc, #236]	; (800603c <HAL_ADC_MspInit+0x1ec>)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8005f52:	e0fa      	b.n	800614a <HAL_ADC_MspInit+0x2fa>
  else if(hadc->Instance==ADC2)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a3a      	ldr	r2, [pc, #232]	; (8006044 <HAL_ADC_MspInit+0x1f4>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d178      	bne.n	8006050 <HAL_ADC_MspInit+0x200>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8005f5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f62:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8005f64:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005f68:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005f6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f003 fb9a 	bl	80096a8 <HAL_RCCEx_PeriphCLKConfig>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d001      	beq.n	8005f7e <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 8005f7a:	f7ff ff3f 	bl	8005dfc <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8005f7e:	4b2d      	ldr	r3, [pc, #180]	; (8006034 <HAL_ADC_MspInit+0x1e4>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	3301      	adds	r3, #1
 8005f84:	4a2b      	ldr	r2, [pc, #172]	; (8006034 <HAL_ADC_MspInit+0x1e4>)
 8005f86:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8005f88:	4b2a      	ldr	r3, [pc, #168]	; (8006034 <HAL_ADC_MspInit+0x1e4>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d10b      	bne.n	8005fa8 <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8005f90:	4b29      	ldr	r3, [pc, #164]	; (8006038 <HAL_ADC_MspInit+0x1e8>)
 8005f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f94:	4a28      	ldr	r2, [pc, #160]	; (8006038 <HAL_ADC_MspInit+0x1e8>)
 8005f96:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005f9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f9c:	4b26      	ldr	r3, [pc, #152]	; (8006038 <HAL_ADC_MspInit+0x1e8>)
 8005f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fa0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fa4:	61bb      	str	r3, [r7, #24]
 8005fa6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fa8:	4b23      	ldr	r3, [pc, #140]	; (8006038 <HAL_ADC_MspInit+0x1e8>)
 8005faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fac:	4a22      	ldr	r2, [pc, #136]	; (8006038 <HAL_ADC_MspInit+0x1e8>)
 8005fae:	f043 0301 	orr.w	r3, r3, #1
 8005fb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005fb4:	4b20      	ldr	r3, [pc, #128]	; (8006038 <HAL_ADC_MspInit+0x1e8>)
 8005fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fb8:	f003 0301 	and.w	r3, r3, #1
 8005fbc:	617b      	str	r3, [r7, #20]
 8005fbe:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005fc0:	23c0      	movs	r3, #192	; 0xc0
 8005fc2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fcc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005fd6:	f002 fc03 	bl	80087e0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel6;
 8005fda:	4b1b      	ldr	r3, [pc, #108]	; (8006048 <HAL_ADC_MspInit+0x1f8>)
 8005fdc:	4a1b      	ldr	r2, [pc, #108]	; (800604c <HAL_ADC_MspInit+0x1fc>)
 8005fde:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8005fe0:	4b19      	ldr	r3, [pc, #100]	; (8006048 <HAL_ADC_MspInit+0x1f8>)
 8005fe2:	2224      	movs	r2, #36	; 0x24
 8005fe4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005fe6:	4b18      	ldr	r3, [pc, #96]	; (8006048 <HAL_ADC_MspInit+0x1f8>)
 8005fe8:	2200      	movs	r2, #0
 8005fea:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005fec:	4b16      	ldr	r3, [pc, #88]	; (8006048 <HAL_ADC_MspInit+0x1f8>)
 8005fee:	2200      	movs	r2, #0
 8005ff0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8005ff2:	4b15      	ldr	r3, [pc, #84]	; (8006048 <HAL_ADC_MspInit+0x1f8>)
 8005ff4:	2280      	movs	r2, #128	; 0x80
 8005ff6:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005ff8:	4b13      	ldr	r3, [pc, #76]	; (8006048 <HAL_ADC_MspInit+0x1f8>)
 8005ffa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ffe:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006000:	4b11      	ldr	r3, [pc, #68]	; (8006048 <HAL_ADC_MspInit+0x1f8>)
 8006002:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006006:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8006008:	4b0f      	ldr	r3, [pc, #60]	; (8006048 <HAL_ADC_MspInit+0x1f8>)
 800600a:	2220      	movs	r2, #32
 800600c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800600e:	4b0e      	ldr	r3, [pc, #56]	; (8006048 <HAL_ADC_MspInit+0x1f8>)
 8006010:	2200      	movs	r2, #0
 8006012:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006014:	480c      	ldr	r0, [pc, #48]	; (8006048 <HAL_ADC_MspInit+0x1f8>)
 8006016:	f002 f8c5 	bl	80081a4 <HAL_DMA_Init>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d001      	beq.n	8006024 <HAL_ADC_MspInit+0x1d4>
      Error_Handler();
 8006020:	f7ff feec 	bl	8005dfc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a08      	ldr	r2, [pc, #32]	; (8006048 <HAL_ADC_MspInit+0x1f8>)
 8006028:	655a      	str	r2, [r3, #84]	; 0x54
 800602a:	4a07      	ldr	r2, [pc, #28]	; (8006048 <HAL_ADC_MspInit+0x1f8>)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6293      	str	r3, [r2, #40]	; 0x28
}
 8006030:	e08b      	b.n	800614a <HAL_ADC_MspInit+0x2fa>
 8006032:	bf00      	nop
 8006034:	2001b724 	.word	0x2001b724
 8006038:	40021000 	.word	0x40021000
 800603c:	2000b820 	.word	0x2000b820
 8006040:	40020008 	.word	0x40020008
 8006044:	50000100 	.word	0x50000100
 8006048:	2000b880 	.word	0x2000b880
 800604c:	4002006c 	.word	0x4002006c
  else if(hadc->Instance==ADC3)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a3f      	ldr	r2, [pc, #252]	; (8006154 <HAL_ADC_MspInit+0x304>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d177      	bne.n	800614a <HAL_ADC_MspInit+0x2fa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800605a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800605e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8006060:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006064:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006066:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800606a:	4618      	mov	r0, r3
 800606c:	f003 fb1c 	bl	80096a8 <HAL_RCCEx_PeriphCLKConfig>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d001      	beq.n	800607a <HAL_ADC_MspInit+0x22a>
      Error_Handler();
 8006076:	f7ff fec1 	bl	8005dfc <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 800607a:	4b37      	ldr	r3, [pc, #220]	; (8006158 <HAL_ADC_MspInit+0x308>)
 800607c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800607e:	4a36      	ldr	r2, [pc, #216]	; (8006158 <HAL_ADC_MspInit+0x308>)
 8006080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006084:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006086:	4b34      	ldr	r3, [pc, #208]	; (8006158 <HAL_ADC_MspInit+0x308>)
 8006088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800608a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800608e:	613b      	str	r3, [r7, #16]
 8006090:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006092:	4b31      	ldr	r3, [pc, #196]	; (8006158 <HAL_ADC_MspInit+0x308>)
 8006094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006096:	4a30      	ldr	r2, [pc, #192]	; (8006158 <HAL_ADC_MspInit+0x308>)
 8006098:	f043 0302 	orr.w	r3, r3, #2
 800609c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800609e:	4b2e      	ldr	r3, [pc, #184]	; (8006158 <HAL_ADC_MspInit+0x308>)
 80060a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060a2:	f003 0302 	and.w	r3, r3, #2
 80060a6:	60fb      	str	r3, [r7, #12]
 80060a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80060aa:	4b2b      	ldr	r3, [pc, #172]	; (8006158 <HAL_ADC_MspInit+0x308>)
 80060ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060ae:	4a2a      	ldr	r2, [pc, #168]	; (8006158 <HAL_ADC_MspInit+0x308>)
 80060b0:	f043 0310 	orr.w	r3, r3, #16
 80060b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80060b6:	4b28      	ldr	r3, [pc, #160]	; (8006158 <HAL_ADC_MspInit+0x308>)
 80060b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060ba:	f003 0310 	and.w	r3, r3, #16
 80060be:	60bb      	str	r3, [r7, #8]
 80060c0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80060c2:	2302      	movs	r3, #2
 80060c4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80060c6:	2303      	movs	r3, #3
 80060c8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060ca:	2300      	movs	r3, #0
 80060cc:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060ce:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80060d2:	4619      	mov	r1, r3
 80060d4:	4821      	ldr	r0, [pc, #132]	; (800615c <HAL_ADC_MspInit+0x30c>)
 80060d6:	f002 fb83 	bl	80087e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80060da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060de:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80060e0:	2303      	movs	r3, #3
 80060e2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060e4:	2300      	movs	r3, #0
 80060e6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80060e8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80060ec:	4619      	mov	r1, r3
 80060ee:	481c      	ldr	r0, [pc, #112]	; (8006160 <HAL_ADC_MspInit+0x310>)
 80060f0:	f002 fb76 	bl	80087e0 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Channel1;
 80060f4:	4b1b      	ldr	r3, [pc, #108]	; (8006164 <HAL_ADC_MspInit+0x314>)
 80060f6:	4a1c      	ldr	r2, [pc, #112]	; (8006168 <HAL_ADC_MspInit+0x318>)
 80060f8:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80060fa:	4b1a      	ldr	r3, [pc, #104]	; (8006164 <HAL_ADC_MspInit+0x314>)
 80060fc:	2225      	movs	r2, #37	; 0x25
 80060fe:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006100:	4b18      	ldr	r3, [pc, #96]	; (8006164 <HAL_ADC_MspInit+0x314>)
 8006102:	2200      	movs	r2, #0
 8006104:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8006106:	4b17      	ldr	r3, [pc, #92]	; (8006164 <HAL_ADC_MspInit+0x314>)
 8006108:	2200      	movs	r2, #0
 800610a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800610c:	4b15      	ldr	r3, [pc, #84]	; (8006164 <HAL_ADC_MspInit+0x314>)
 800610e:	2280      	movs	r2, #128	; 0x80
 8006110:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006112:	4b14      	ldr	r3, [pc, #80]	; (8006164 <HAL_ADC_MspInit+0x314>)
 8006114:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006118:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800611a:	4b12      	ldr	r3, [pc, #72]	; (8006164 <HAL_ADC_MspInit+0x314>)
 800611c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006120:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8006122:	4b10      	ldr	r3, [pc, #64]	; (8006164 <HAL_ADC_MspInit+0x314>)
 8006124:	2220      	movs	r2, #32
 8006126:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8006128:	4b0e      	ldr	r3, [pc, #56]	; (8006164 <HAL_ADC_MspInit+0x314>)
 800612a:	2200      	movs	r2, #0
 800612c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800612e:	480d      	ldr	r0, [pc, #52]	; (8006164 <HAL_ADC_MspInit+0x314>)
 8006130:	f002 f838 	bl	80081a4 <HAL_DMA_Init>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d001      	beq.n	800613e <HAL_ADC_MspInit+0x2ee>
      Error_Handler();
 800613a:	f7ff fe5f 	bl	8005dfc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a08      	ldr	r2, [pc, #32]	; (8006164 <HAL_ADC_MspInit+0x314>)
 8006142:	655a      	str	r2, [r3, #84]	; 0x54
 8006144:	4a07      	ldr	r2, [pc, #28]	; (8006164 <HAL_ADC_MspInit+0x314>)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6293      	str	r3, [r2, #40]	; 0x28
}
 800614a:	bf00      	nop
 800614c:	3788      	adds	r7, #136	; 0x88
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	50000400 	.word	0x50000400
 8006158:	40021000 	.word	0x40021000
 800615c:	48000400 	.word	0x48000400
 8006160:	48001000 	.word	0x48001000
 8006164:	2000b8e0 	.word	0x2000b8e0
 8006168:	40020408 	.word	0x40020408

0800616c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b08a      	sub	sp, #40	; 0x28
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006174:	f107 0314 	add.w	r3, r7, #20
 8006178:	2200      	movs	r2, #0
 800617a:	601a      	str	r2, [r3, #0]
 800617c:	605a      	str	r2, [r3, #4]
 800617e:	609a      	str	r2, [r3, #8]
 8006180:	60da      	str	r2, [r3, #12]
 8006182:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a40      	ldr	r2, [pc, #256]	; (800628c <HAL_DAC_MspInit+0x120>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d17a      	bne.n	8006284 <HAL_DAC_MspInit+0x118>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800618e:	4b40      	ldr	r3, [pc, #256]	; (8006290 <HAL_DAC_MspInit+0x124>)
 8006190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006192:	4a3f      	ldr	r2, [pc, #252]	; (8006290 <HAL_DAC_MspInit+0x124>)
 8006194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006198:	64d3      	str	r3, [r2, #76]	; 0x4c
 800619a:	4b3d      	ldr	r3, [pc, #244]	; (8006290 <HAL_DAC_MspInit+0x124>)
 800619c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800619e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061a2:	613b      	str	r3, [r7, #16]
 80061a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061a6:	4b3a      	ldr	r3, [pc, #232]	; (8006290 <HAL_DAC_MspInit+0x124>)
 80061a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061aa:	4a39      	ldr	r2, [pc, #228]	; (8006290 <HAL_DAC_MspInit+0x124>)
 80061ac:	f043 0301 	orr.w	r3, r3, #1
 80061b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80061b2:	4b37      	ldr	r3, [pc, #220]	; (8006290 <HAL_DAC_MspInit+0x124>)
 80061b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061b6:	f003 0301 	and.w	r3, r3, #1
 80061ba:	60fb      	str	r3, [r7, #12]
 80061bc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80061be:	2330      	movs	r3, #48	; 0x30
 80061c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80061c2:	2303      	movs	r3, #3
 80061c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061c6:	2300      	movs	r3, #0
 80061c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061ca:	f107 0314 	add.w	r3, r7, #20
 80061ce:	4619      	mov	r1, r3
 80061d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80061d4:	f002 fb04 	bl	80087e0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 80061d8:	4b2e      	ldr	r3, [pc, #184]	; (8006294 <HAL_DAC_MspInit+0x128>)
 80061da:	4a2f      	ldr	r2, [pc, #188]	; (8006298 <HAL_DAC_MspInit+0x12c>)
 80061dc:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 80061de:	4b2d      	ldr	r3, [pc, #180]	; (8006294 <HAL_DAC_MspInit+0x128>)
 80061e0:	2206      	movs	r2, #6
 80061e2:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80061e4:	4b2b      	ldr	r3, [pc, #172]	; (8006294 <HAL_DAC_MspInit+0x128>)
 80061e6:	2210      	movs	r2, #16
 80061e8:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80061ea:	4b2a      	ldr	r3, [pc, #168]	; (8006294 <HAL_DAC_MspInit+0x128>)
 80061ec:	2200      	movs	r2, #0
 80061ee:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80061f0:	4b28      	ldr	r3, [pc, #160]	; (8006294 <HAL_DAC_MspInit+0x128>)
 80061f2:	2280      	movs	r2, #128	; 0x80
 80061f4:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80061f6:	4b27      	ldr	r3, [pc, #156]	; (8006294 <HAL_DAC_MspInit+0x128>)
 80061f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061fc:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80061fe:	4b25      	ldr	r3, [pc, #148]	; (8006294 <HAL_DAC_MspInit+0x128>)
 8006200:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006204:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8006206:	4b23      	ldr	r3, [pc, #140]	; (8006294 <HAL_DAC_MspInit+0x128>)
 8006208:	2220      	movs	r2, #32
 800620a:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800620c:	4b21      	ldr	r3, [pc, #132]	; (8006294 <HAL_DAC_MspInit+0x128>)
 800620e:	2200      	movs	r2, #0
 8006210:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8006212:	4820      	ldr	r0, [pc, #128]	; (8006294 <HAL_DAC_MspInit+0x128>)
 8006214:	f001 ffc6 	bl	80081a4 <HAL_DMA_Init>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d001      	beq.n	8006222 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800621e:	f7ff fded 	bl	8005dfc <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a1b      	ldr	r2, [pc, #108]	; (8006294 <HAL_DAC_MspInit+0x128>)
 8006226:	609a      	str	r2, [r3, #8]
 8006228:	4a1a      	ldr	r2, [pc, #104]	; (8006294 <HAL_DAC_MspInit+0x128>)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA2_Channel6;
 800622e:	4b1b      	ldr	r3, [pc, #108]	; (800629c <HAL_DAC_MspInit+0x130>)
 8006230:	4a1b      	ldr	r2, [pc, #108]	; (80062a0 <HAL_DAC_MspInit+0x134>)
 8006232:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC1_CHANNEL2;
 8006234:	4b19      	ldr	r3, [pc, #100]	; (800629c <HAL_DAC_MspInit+0x130>)
 8006236:	2207      	movs	r2, #7
 8006238:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800623a:	4b18      	ldr	r3, [pc, #96]	; (800629c <HAL_DAC_MspInit+0x130>)
 800623c:	2210      	movs	r2, #16
 800623e:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006240:	4b16      	ldr	r3, [pc, #88]	; (800629c <HAL_DAC_MspInit+0x130>)
 8006242:	2200      	movs	r2, #0
 8006244:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8006246:	4b15      	ldr	r3, [pc, #84]	; (800629c <HAL_DAC_MspInit+0x130>)
 8006248:	2280      	movs	r2, #128	; 0x80
 800624a:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800624c:	4b13      	ldr	r3, [pc, #76]	; (800629c <HAL_DAC_MspInit+0x130>)
 800624e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006252:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006254:	4b11      	ldr	r3, [pc, #68]	; (800629c <HAL_DAC_MspInit+0x130>)
 8006256:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800625a:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 800625c:	4b0f      	ldr	r3, [pc, #60]	; (800629c <HAL_DAC_MspInit+0x130>)
 800625e:	2220      	movs	r2, #32
 8006260:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8006262:	4b0e      	ldr	r3, [pc, #56]	; (800629c <HAL_DAC_MspInit+0x130>)
 8006264:	2200      	movs	r2, #0
 8006266:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8006268:	480c      	ldr	r0, [pc, #48]	; (800629c <HAL_DAC_MspInit+0x130>)
 800626a:	f001 ff9b 	bl	80081a4 <HAL_DMA_Init>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d001      	beq.n	8006278 <HAL_DAC_MspInit+0x10c>
    {
      Error_Handler();
 8006274:	f7ff fdc2 	bl	8005dfc <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a08      	ldr	r2, [pc, #32]	; (800629c <HAL_DAC_MspInit+0x130>)
 800627c:	60da      	str	r2, [r3, #12]
 800627e:	4a07      	ldr	r2, [pc, #28]	; (800629c <HAL_DAC_MspInit+0x130>)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8006284:	bf00      	nop
 8006286:	3728      	adds	r7, #40	; 0x28
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}
 800628c:	50000800 	.word	0x50000800
 8006290:	40021000 	.word	0x40021000
 8006294:	2000b954 	.word	0x2000b954
 8006298:	40020030 	.word	0x40020030
 800629c:	2000b9b4 	.word	0x2000b9b4
 80062a0:	4002046c 	.word	0x4002046c

080062a4 <HAL_FMAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmac: FMAC handle pointer
* @retval None
*/
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b085      	sub	sp, #20
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a0a      	ldr	r2, [pc, #40]	; (80062dc <HAL_FMAC_MspInit+0x38>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d10b      	bne.n	80062ce <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 80062b6:	4b0a      	ldr	r3, [pc, #40]	; (80062e0 <HAL_FMAC_MspInit+0x3c>)
 80062b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062ba:	4a09      	ldr	r2, [pc, #36]	; (80062e0 <HAL_FMAC_MspInit+0x3c>)
 80062bc:	f043 0310 	orr.w	r3, r3, #16
 80062c0:	6493      	str	r3, [r2, #72]	; 0x48
 80062c2:	4b07      	ldr	r3, [pc, #28]	; (80062e0 <HAL_FMAC_MspInit+0x3c>)
 80062c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062c6:	f003 0310 	and.w	r3, r3, #16
 80062ca:	60fb      	str	r3, [r7, #12]
 80062cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }

}
 80062ce:	bf00      	nop
 80062d0:	3714      	adds	r7, #20
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop
 80062dc:	40021400 	.word	0x40021400
 80062e0:	40021000 	.word	0x40021000

080062e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b087      	sub	sp, #28
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a1c      	ldr	r2, [pc, #112]	; (8006364 <HAL_TIM_Base_MspInit+0x80>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d10c      	bne.n	8006310 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80062f6:	4b1c      	ldr	r3, [pc, #112]	; (8006368 <HAL_TIM_Base_MspInit+0x84>)
 80062f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062fa:	4a1b      	ldr	r2, [pc, #108]	; (8006368 <HAL_TIM_Base_MspInit+0x84>)
 80062fc:	f043 0310 	orr.w	r3, r3, #16
 8006300:	6593      	str	r3, [r2, #88]	; 0x58
 8006302:	4b19      	ldr	r3, [pc, #100]	; (8006368 <HAL_TIM_Base_MspInit+0x84>)
 8006304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006306:	f003 0310 	and.w	r3, r3, #16
 800630a:	617b      	str	r3, [r7, #20]
 800630c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 800630e:	e022      	b.n	8006356 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM7)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a15      	ldr	r2, [pc, #84]	; (800636c <HAL_TIM_Base_MspInit+0x88>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d10c      	bne.n	8006334 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800631a:	4b13      	ldr	r3, [pc, #76]	; (8006368 <HAL_TIM_Base_MspInit+0x84>)
 800631c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800631e:	4a12      	ldr	r2, [pc, #72]	; (8006368 <HAL_TIM_Base_MspInit+0x84>)
 8006320:	f043 0320 	orr.w	r3, r3, #32
 8006324:	6593      	str	r3, [r2, #88]	; 0x58
 8006326:	4b10      	ldr	r3, [pc, #64]	; (8006368 <HAL_TIM_Base_MspInit+0x84>)
 8006328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800632a:	f003 0320 	and.w	r3, r3, #32
 800632e:	613b      	str	r3, [r7, #16]
 8006330:	693b      	ldr	r3, [r7, #16]
}
 8006332:	e010      	b.n	8006356 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM20)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a0d      	ldr	r2, [pc, #52]	; (8006370 <HAL_TIM_Base_MspInit+0x8c>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d10b      	bne.n	8006356 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM20_CLK_ENABLE();
 800633e:	4b0a      	ldr	r3, [pc, #40]	; (8006368 <HAL_TIM_Base_MspInit+0x84>)
 8006340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006342:	4a09      	ldr	r2, [pc, #36]	; (8006368 <HAL_TIM_Base_MspInit+0x84>)
 8006344:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006348:	6613      	str	r3, [r2, #96]	; 0x60
 800634a:	4b07      	ldr	r3, [pc, #28]	; (8006368 <HAL_TIM_Base_MspInit+0x84>)
 800634c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800634e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006352:	60fb      	str	r3, [r7, #12]
 8006354:	68fb      	ldr	r3, [r7, #12]
}
 8006356:	bf00      	nop
 8006358:	371c      	adds	r7, #28
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	40001000 	.word	0x40001000
 8006368:	40021000 	.word	0x40021000
 800636c:	40001400 	.word	0x40001400
 8006370:	40015000 	.word	0x40015000

08006374 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006374:	b480      	push	{r7}
 8006376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006378:	e7fe      	b.n	8006378 <NMI_Handler+0x4>

0800637a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800637a:	b480      	push	{r7}
 800637c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800637e:	e7fe      	b.n	800637e <HardFault_Handler+0x4>

08006380 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006380:	b480      	push	{r7}
 8006382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006384:	e7fe      	b.n	8006384 <MemManage_Handler+0x4>

08006386 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006386:	b480      	push	{r7}
 8006388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800638a:	e7fe      	b.n	800638a <BusFault_Handler+0x4>

0800638c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800638c:	b480      	push	{r7}
 800638e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006390:	e7fe      	b.n	8006390 <UsageFault_Handler+0x4>

08006392 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006392:	b480      	push	{r7}
 8006394:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006396:	bf00      	nop
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80063a0:	b480      	push	{r7}
 80063a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80063a4:	bf00      	nop
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr

080063ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80063ae:	b480      	push	{r7}
 80063b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80063b2:	bf00      	nop
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80063c0:	f000 f8c2 	bl	8006548 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80063c4:	bf00      	nop
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80063cc:	4802      	ldr	r0, [pc, #8]	; (80063d8 <DMA1_Channel1_IRQHandler+0x10>)
 80063ce:	f002 f80c 	bl	80083ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80063d2:	bf00      	nop
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	2000b820 	.word	0x2000b820

080063dc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80063e0:	4802      	ldr	r0, [pc, #8]	; (80063ec <DMA1_Channel3_IRQHandler+0x10>)
 80063e2:	f002 f802 	bl	80083ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80063e6:	bf00      	nop
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	2000b954 	.word	0x2000b954

080063f0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80063f4:	4802      	ldr	r0, [pc, #8]	; (8006400 <DMA1_Channel6_IRQHandler+0x10>)
 80063f6:	f001 fff8 	bl	80083ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80063fa:	bf00      	nop
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop
 8006400:	2000b880 	.word	0x2000b880

08006404 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8006408:	4802      	ldr	r0, [pc, #8]	; (8006414 <DMA2_Channel1_IRQHandler+0x10>)
 800640a:	f001 ffee 	bl	80083ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 800640e:	bf00      	nop
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	2000b8e0 	.word	0x2000b8e0

08006418 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 800641c:	4802      	ldr	r0, [pc, #8]	; (8006428 <DMA2_Channel6_IRQHandler+0x10>)
 800641e:	f001 ffe4 	bl	80083ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 8006422:	bf00      	nop
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	2000b9b4 	.word	0x2000b9b4

0800642c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800642c:	b480      	push	{r7}
 800642e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006430:	4b06      	ldr	r3, [pc, #24]	; (800644c <SystemInit+0x20>)
 8006432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006436:	4a05      	ldr	r2, [pc, #20]	; (800644c <SystemInit+0x20>)
 8006438:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800643c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006440:	bf00      	nop
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	e000ed00 	.word	0xe000ed00

08006450 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006450:	480d      	ldr	r0, [pc, #52]	; (8006488 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006452:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006454:	f7ff ffea 	bl	800642c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006458:	480c      	ldr	r0, [pc, #48]	; (800648c <LoopForever+0x6>)
  ldr r1, =_edata
 800645a:	490d      	ldr	r1, [pc, #52]	; (8006490 <LoopForever+0xa>)
  ldr r2, =_sidata
 800645c:	4a0d      	ldr	r2, [pc, #52]	; (8006494 <LoopForever+0xe>)
  movs r3, #0
 800645e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8006460:	e002      	b.n	8006468 <LoopCopyDataInit>

08006462 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006462:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006464:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006466:	3304      	adds	r3, #4

08006468 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006468:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800646a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800646c:	d3f9      	bcc.n	8006462 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800646e:	4a0a      	ldr	r2, [pc, #40]	; (8006498 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006470:	4c0a      	ldr	r4, [pc, #40]	; (800649c <LoopForever+0x16>)
  movs r3, #0
 8006472:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006474:	e001      	b.n	800647a <LoopFillZerobss>

08006476 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006476:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006478:	3204      	adds	r2, #4

0800647a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800647a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800647c:	d3fb      	bcc.n	8006476 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800647e:	f005 fa91 	bl	800b9a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006482:	f7fe fae1 	bl	8004a48 <main>

08006486 <LoopForever>:

LoopForever:
    b LoopForever
 8006486:	e7fe      	b.n	8006486 <LoopForever>
  ldr   r0, =_estack
 8006488:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 800648c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006490:	200078d8 	.word	0x200078d8
  ldr r2, =_sidata
 8006494:	0801fd10 	.word	0x0801fd10
  ldr r2, =_sbss
 8006498:	200078d8 	.word	0x200078d8
  ldr r4, =_ebss
 800649c:	2001b864 	.word	0x2001b864

080064a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80064a0:	e7fe      	b.n	80064a0 <ADC1_2_IRQHandler>

080064a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b082      	sub	sp, #8
 80064a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80064a8:	2300      	movs	r3, #0
 80064aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80064ac:	2003      	movs	r0, #3
 80064ae:	f001 fc5f 	bl	8007d70 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80064b2:	200f      	movs	r0, #15
 80064b4:	f000 f80e 	bl	80064d4 <HAL_InitTick>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d002      	beq.n	80064c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	71fb      	strb	r3, [r7, #7]
 80064c2:	e001      	b.n	80064c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80064c4:	f7ff fca0 	bl	8005e08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80064c8:	79fb      	ldrb	r3, [r7, #7]

}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3708      	adds	r7, #8
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
	...

080064d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80064dc:	2300      	movs	r3, #0
 80064de:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80064e0:	4b16      	ldr	r3, [pc, #88]	; (800653c <HAL_InitTick+0x68>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d022      	beq.n	800652e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80064e8:	4b15      	ldr	r3, [pc, #84]	; (8006540 <HAL_InitTick+0x6c>)
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	4b13      	ldr	r3, [pc, #76]	; (800653c <HAL_InitTick+0x68>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80064f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80064f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064fc:	4618      	mov	r0, r3
 80064fe:	f001 fc6a 	bl	8007dd6 <HAL_SYSTICK_Config>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d10f      	bne.n	8006528 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2b0f      	cmp	r3, #15
 800650c:	d809      	bhi.n	8006522 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800650e:	2200      	movs	r2, #0
 8006510:	6879      	ldr	r1, [r7, #4]
 8006512:	f04f 30ff 	mov.w	r0, #4294967295
 8006516:	f001 fc36 	bl	8007d86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800651a:	4a0a      	ldr	r2, [pc, #40]	; (8006544 <HAL_InitTick+0x70>)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6013      	str	r3, [r2, #0]
 8006520:	e007      	b.n	8006532 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	73fb      	strb	r3, [r7, #15]
 8006526:	e004      	b.n	8006532 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	73fb      	strb	r3, [r7, #15]
 800652c:	e001      	b.n	8006532 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006532:	7bfb      	ldrb	r3, [r7, #15]
}
 8006534:	4618      	mov	r0, r3
 8006536:	3710      	adds	r7, #16
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}
 800653c:	20007874 	.word	0x20007874
 8006540:	2000786c 	.word	0x2000786c
 8006544:	20007870 	.word	0x20007870

08006548 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006548:	b480      	push	{r7}
 800654a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800654c:	4b05      	ldr	r3, [pc, #20]	; (8006564 <HAL_IncTick+0x1c>)
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	4b05      	ldr	r3, [pc, #20]	; (8006568 <HAL_IncTick+0x20>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4413      	add	r3, r2
 8006556:	4a03      	ldr	r2, [pc, #12]	; (8006564 <HAL_IncTick+0x1c>)
 8006558:	6013      	str	r3, [r2, #0]
}
 800655a:	bf00      	nop
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr
 8006564:	2001b728 	.word	0x2001b728
 8006568:	20007874 	.word	0x20007874

0800656c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800656c:	b480      	push	{r7}
 800656e:	af00      	add	r7, sp, #0
  return uwTick;
 8006570:	4b03      	ldr	r3, [pc, #12]	; (8006580 <HAL_GetTick+0x14>)
 8006572:	681b      	ldr	r3, [r3, #0]
}
 8006574:	4618      	mov	r0, r3
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	2001b728 	.word	0x2001b728

08006584 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800658c:	f7ff ffee 	bl	800656c <HAL_GetTick>
 8006590:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800659c:	d004      	beq.n	80065a8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800659e:	4b09      	ldr	r3, [pc, #36]	; (80065c4 <HAL_Delay+0x40>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	4413      	add	r3, r2
 80065a6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80065a8:	bf00      	nop
 80065aa:	f7ff ffdf 	bl	800656c <HAL_GetTick>
 80065ae:	4602      	mov	r2, r0
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	1ad3      	subs	r3, r2, r3
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d8f7      	bhi.n	80065aa <HAL_Delay+0x26>
  {
  }
}
 80065ba:	bf00      	nop
 80065bc:	bf00      	nop
 80065be:	3710      	adds	r7, #16
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}
 80065c4:	20007874 	.word	0x20007874

080065c8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	431a      	orrs	r2, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	609a      	str	r2, [r3, #8]
}
 80065e2:	bf00      	nop
 80065e4:	370c      	adds	r7, #12
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr

080065ee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80065ee:	b480      	push	{r7}
 80065f0:	b083      	sub	sp, #12
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
 80065f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	431a      	orrs	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	609a      	str	r2, [r3, #8]
}
 8006608:	bf00      	nop
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006624:	4618      	mov	r0, r3
 8006626:	370c      	adds	r7, #12
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006630:	b480      	push	{r7}
 8006632:	b087      	sub	sp, #28
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	607a      	str	r2, [r7, #4]
 800663c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	3360      	adds	r3, #96	; 0x60
 8006642:	461a      	mov	r2, r3
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	4413      	add	r3, r2
 800664a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	4b08      	ldr	r3, [pc, #32]	; (8006674 <LL_ADC_SetOffset+0x44>)
 8006652:	4013      	ands	r3, r2
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800665a:	683a      	ldr	r2, [r7, #0]
 800665c:	430a      	orrs	r2, r1
 800665e:	4313      	orrs	r3, r2
 8006660:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006668:	bf00      	nop
 800666a:	371c      	adds	r7, #28
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr
 8006674:	03fff000 	.word	0x03fff000

08006678 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	3360      	adds	r3, #96	; 0x60
 8006686:	461a      	mov	r2, r3
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	4413      	add	r3, r2
 800668e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006698:	4618      	mov	r0, r3
 800669a:	3714      	adds	r7, #20
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b087      	sub	sp, #28
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	3360      	adds	r3, #96	; 0x60
 80066b4:	461a      	mov	r2, r3
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	4413      	add	r3, r2
 80066bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	431a      	orrs	r2, r3
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80066ce:	bf00      	nop
 80066d0:	371c      	adds	r7, #28
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr

080066da <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80066da:	b480      	push	{r7}
 80066dc:	b087      	sub	sp, #28
 80066de:	af00      	add	r7, sp, #0
 80066e0:	60f8      	str	r0, [r7, #12]
 80066e2:	60b9      	str	r1, [r7, #8]
 80066e4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	3360      	adds	r3, #96	; 0x60
 80066ea:	461a      	mov	r2, r3
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	4413      	add	r3, r2
 80066f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	431a      	orrs	r2, r3
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8006704:	bf00      	nop
 8006706:	371c      	adds	r7, #28
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8006710:	b480      	push	{r7}
 8006712:	b087      	sub	sp, #28
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	3360      	adds	r3, #96	; 0x60
 8006720:	461a      	mov	r2, r3
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4413      	add	r3, r2
 8006728:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	431a      	orrs	r2, r3
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800673a:	bf00      	nop
 800673c:	371c      	adds	r7, #28
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr

08006746 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8006746:	b480      	push	{r7}
 8006748:	b083      	sub	sp, #12
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
 800674e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	695b      	ldr	r3, [r3, #20]
 8006754:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	431a      	orrs	r2, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	615a      	str	r2, [r3, #20]
}
 8006760:	bf00      	nop
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800677c:	2b00      	cmp	r3, #0
 800677e:	d101      	bne.n	8006784 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006780:	2301      	movs	r3, #1
 8006782:	e000      	b.n	8006786 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	370c      	adds	r7, #12
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr

08006792 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006792:	b480      	push	{r7}
 8006794:	b087      	sub	sp, #28
 8006796:	af00      	add	r7, sp, #0
 8006798:	60f8      	str	r0, [r7, #12]
 800679a:	60b9      	str	r1, [r7, #8]
 800679c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	3330      	adds	r3, #48	; 0x30
 80067a2:	461a      	mov	r2, r3
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	0a1b      	lsrs	r3, r3, #8
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	f003 030c 	and.w	r3, r3, #12
 80067ae:	4413      	add	r3, r2
 80067b0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	f003 031f 	and.w	r3, r3, #31
 80067bc:	211f      	movs	r1, #31
 80067be:	fa01 f303 	lsl.w	r3, r1, r3
 80067c2:	43db      	mvns	r3, r3
 80067c4:	401a      	ands	r2, r3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	0e9b      	lsrs	r3, r3, #26
 80067ca:	f003 011f 	and.w	r1, r3, #31
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	f003 031f 	and.w	r3, r3, #31
 80067d4:	fa01 f303 	lsl.w	r3, r1, r3
 80067d8:	431a      	orrs	r2, r3
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80067de:	bf00      	nop
 80067e0:	371c      	adds	r7, #28
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr

080067ea <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80067ea:	b480      	push	{r7}
 80067ec:	b087      	sub	sp, #28
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	60f8      	str	r0, [r7, #12]
 80067f2:	60b9      	str	r1, [r7, #8]
 80067f4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	3314      	adds	r3, #20
 80067fa:	461a      	mov	r2, r3
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	0e5b      	lsrs	r3, r3, #25
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	f003 0304 	and.w	r3, r3, #4
 8006806:	4413      	add	r3, r2
 8006808:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	0d1b      	lsrs	r3, r3, #20
 8006812:	f003 031f 	and.w	r3, r3, #31
 8006816:	2107      	movs	r1, #7
 8006818:	fa01 f303 	lsl.w	r3, r1, r3
 800681c:	43db      	mvns	r3, r3
 800681e:	401a      	ands	r2, r3
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	0d1b      	lsrs	r3, r3, #20
 8006824:	f003 031f 	and.w	r3, r3, #31
 8006828:	6879      	ldr	r1, [r7, #4]
 800682a:	fa01 f303 	lsl.w	r3, r1, r3
 800682e:	431a      	orrs	r2, r3
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006834:	bf00      	nop
 8006836:	371c      	adds	r7, #28
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006858:	43db      	mvns	r3, r3
 800685a:	401a      	ands	r2, r3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f003 0318 	and.w	r3, r3, #24
 8006862:	4908      	ldr	r1, [pc, #32]	; (8006884 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006864:	40d9      	lsrs	r1, r3
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	400b      	ands	r3, r1
 800686a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800686e:	431a      	orrs	r2, r3
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006876:	bf00      	nop
 8006878:	3714      	adds	r7, #20
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop
 8006884:	0007ffff 	.word	0x0007ffff

08006888 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	f003 031f 	and.w	r3, r3, #31
}
 8006898:	4618      	mov	r0, r3
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80068b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	6093      	str	r3, [r2, #8]
}
 80068bc:	bf00      	nop
 80068be:	370c      	adds	r7, #12
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068dc:	d101      	bne.n	80068e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80068de:	2301      	movs	r3, #1
 80068e0:	e000      	b.n	80068e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006900:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006904:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800690c:	bf00      	nop
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006928:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800692c:	d101      	bne.n	8006932 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800692e:	2301      	movs	r3, #1
 8006930:	e000      	b.n	8006934 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006932:	2300      	movs	r3, #0
}
 8006934:	4618      	mov	r0, r3
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006950:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006954:	f043 0201 	orr.w	r2, r3, #1
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800695c:	bf00      	nop
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	f003 0301 	and.w	r3, r3, #1
 8006978:	2b01      	cmp	r3, #1
 800697a:	d101      	bne.n	8006980 <LL_ADC_IsEnabled+0x18>
 800697c:	2301      	movs	r3, #1
 800697e:	e000      	b.n	8006982 <LL_ADC_IsEnabled+0x1a>
 8006980:	2300      	movs	r3, #0
}
 8006982:	4618      	mov	r0, r3
 8006984:	370c      	adds	r7, #12
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr

0800698e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800698e:	b480      	push	{r7}
 8006990:	b083      	sub	sp, #12
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800699e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80069a2:	f043 0204 	orr.w	r2, r3, #4
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80069aa:	bf00      	nop
 80069ac:	370c      	adds	r7, #12
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr

080069b6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80069b6:	b480      	push	{r7}
 80069b8:	b083      	sub	sp, #12
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	f003 0304 	and.w	r3, r3, #4
 80069c6:	2b04      	cmp	r3, #4
 80069c8:	d101      	bne.n	80069ce <LL_ADC_REG_IsConversionOngoing+0x18>
 80069ca:	2301      	movs	r3, #1
 80069cc:	e000      	b.n	80069d0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	f003 0308 	and.w	r3, r3, #8
 80069ec:	2b08      	cmp	r3, #8
 80069ee:	d101      	bne.n	80069f4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80069f0:	2301      	movs	r3, #1
 80069f2:	e000      	b.n	80069f6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	370c      	adds	r7, #12
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
	...

08006a04 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006a04:	b590      	push	{r4, r7, lr}
 8006a06:	b089      	sub	sp, #36	; 0x24
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8006a10:	2300      	movs	r3, #0
 8006a12:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d101      	bne.n	8006a1e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e19b      	b.n	8006d56 <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	695b      	ldr	r3, [r3, #20]
 8006a22:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d109      	bne.n	8006a40 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f7ff fa0f 	bl	8005e50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7ff ff3f 	bl	80068c8 <LL_ADC_IsDeepPowerDownEnabled>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d004      	beq.n	8006a5a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4618      	mov	r0, r3
 8006a56:	f7ff ff25 	bl	80068a4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f7ff ff5a 	bl	8006918 <LL_ADC_IsInternalRegulatorEnabled>
 8006a64:	4603      	mov	r3, r0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d115      	bne.n	8006a96 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f7ff ff3e 	bl	80068f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006a74:	4b97      	ldr	r3, [pc, #604]	; (8006cd4 <HAL_ADC_Init+0x2d0>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	099b      	lsrs	r3, r3, #6
 8006a7a:	4a97      	ldr	r2, [pc, #604]	; (8006cd8 <HAL_ADC_Init+0x2d4>)
 8006a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a80:	099b      	lsrs	r3, r3, #6
 8006a82:	3301      	adds	r3, #1
 8006a84:	005b      	lsls	r3, r3, #1
 8006a86:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006a88:	e002      	b.n	8006a90 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	3b01      	subs	r3, #1
 8006a8e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d1f9      	bne.n	8006a8a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7ff ff3c 	bl	8006918 <LL_ADC_IsInternalRegulatorEnabled>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d10d      	bne.n	8006ac2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aaa:	f043 0210 	orr.w	r2, r3, #16
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ab6:	f043 0201 	orr.w	r2, r3, #1
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f7ff ff75 	bl	80069b6 <LL_ADC_REG_IsConversionOngoing>
 8006acc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ad2:	f003 0310 	and.w	r3, r3, #16
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	f040 8134 	bne.w	8006d44 <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	f040 8130 	bne.w	8006d44 <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ae8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006aec:	f043 0202 	orr.w	r2, r3, #2
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7ff ff35 	bl	8006968 <LL_ADC_IsEnabled>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d137      	bne.n	8006b74 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b0c:	d004      	beq.n	8006b18 <HAL_ADC_Init+0x114>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a72      	ldr	r2, [pc, #456]	; (8006cdc <HAL_ADC_Init+0x2d8>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d10f      	bne.n	8006b38 <HAL_ADC_Init+0x134>
 8006b18:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006b1c:	f7ff ff24 	bl	8006968 <LL_ADC_IsEnabled>
 8006b20:	4604      	mov	r4, r0
 8006b22:	486e      	ldr	r0, [pc, #440]	; (8006cdc <HAL_ADC_Init+0x2d8>)
 8006b24:	f7ff ff20 	bl	8006968 <LL_ADC_IsEnabled>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	4323      	orrs	r3, r4
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	bf0c      	ite	eq
 8006b30:	2301      	moveq	r3, #1
 8006b32:	2300      	movne	r3, #0
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	e008      	b.n	8006b4a <HAL_ADC_Init+0x146>
 8006b38:	4869      	ldr	r0, [pc, #420]	; (8006ce0 <HAL_ADC_Init+0x2dc>)
 8006b3a:	f7ff ff15 	bl	8006968 <LL_ADC_IsEnabled>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	bf0c      	ite	eq
 8006b44:	2301      	moveq	r3, #1
 8006b46:	2300      	movne	r3, #0
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d012      	beq.n	8006b74 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b56:	d004      	beq.n	8006b62 <HAL_ADC_Init+0x15e>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a5f      	ldr	r2, [pc, #380]	; (8006cdc <HAL_ADC_Init+0x2d8>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d101      	bne.n	8006b66 <HAL_ADC_Init+0x162>
 8006b62:	4a60      	ldr	r2, [pc, #384]	; (8006ce4 <HAL_ADC_Init+0x2e0>)
 8006b64:	e000      	b.n	8006b68 <HAL_ADC_Init+0x164>
 8006b66:	4a60      	ldr	r2, [pc, #384]	; (8006ce8 <HAL_ADC_Init+0x2e4>)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	4610      	mov	r0, r2
 8006b70:	f7ff fd2a 	bl	80065c8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	7f5b      	ldrb	r3, [r3, #29]
 8006b78:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006b7e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8006b84:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8006b8a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006b92:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006b94:	4313      	orrs	r3, r2
 8006b96:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d106      	bne.n	8006bb0 <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba6:	3b01      	subs	r3, #1
 8006ba8:	045b      	lsls	r3, r3, #17
 8006baa:	69ba      	ldr	r2, [r7, #24]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d009      	beq.n	8006bcc <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bbc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006bc6:	69ba      	ldr	r2, [r7, #24]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	68da      	ldr	r2, [r3, #12]
 8006bd2:	4b46      	ldr	r3, [pc, #280]	; (8006cec <HAL_ADC_Init+0x2e8>)
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	6812      	ldr	r2, [r2, #0]
 8006bda:	69b9      	ldr	r1, [r7, #24]
 8006bdc:	430b      	orrs	r3, r1
 8006bde:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	430a      	orrs	r2, r1
 8006bf4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7ff feee 	bl	80069dc <LL_ADC_INJ_IsConversionOngoing>
 8006c00:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d17b      	bne.n	8006d00 <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d178      	bne.n	8006d00 <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006c12:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006c1a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c2a:	f023 0302 	bic.w	r3, r3, #2
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	6812      	ldr	r2, [r2, #0]
 8006c32:	69b9      	ldr	r1, [r7, #24]
 8006c34:	430b      	orrs	r3, r1
 8006c36:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	691b      	ldr	r3, [r3, #16]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d017      	beq.n	8006c70 <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	691a      	ldr	r2, [r3, #16]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006c4e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006c58:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006c5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	6911      	ldr	r1, [r2, #16]
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	6812      	ldr	r2, [r2, #0]
 8006c68:	430b      	orrs	r3, r1
 8006c6a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8006c6e:	e013      	b.n	8006c98 <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	691a      	ldr	r2, [r3, #16]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006c7e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	6812      	ldr	r2, [r2, #0]
 8006c8c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006c90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006c94:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d126      	bne.n	8006cf0 <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	691b      	ldr	r3, [r3, #16]
 8006ca8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006cac:	f023 0304 	bic.w	r3, r3, #4
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006cb8:	4311      	orrs	r1, r2
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006cbe:	4311      	orrs	r1, r2
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006cc4:	430a      	orrs	r2, r1
 8006cc6:	431a      	orrs	r2, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f042 0201 	orr.w	r2, r2, #1
 8006cd0:	611a      	str	r2, [r3, #16]
 8006cd2:	e015      	b.n	8006d00 <HAL_ADC_Init+0x2fc>
 8006cd4:	2000786c 	.word	0x2000786c
 8006cd8:	053e2d63 	.word	0x053e2d63
 8006cdc:	50000100 	.word	0x50000100
 8006ce0:	50000400 	.word	0x50000400
 8006ce4:	50000300 	.word	0x50000300
 8006ce8:	50000700 	.word	0x50000700
 8006cec:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	691a      	ldr	r2, [r3, #16]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f022 0201 	bic.w	r2, r2, #1
 8006cfe:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	695b      	ldr	r3, [r3, #20]
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d10c      	bne.n	8006d22 <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d0e:	f023 010f 	bic.w	r1, r3, #15
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a1b      	ldr	r3, [r3, #32]
 8006d16:	1e5a      	subs	r2, r3, #1
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	430a      	orrs	r2, r1
 8006d1e:	631a      	str	r2, [r3, #48]	; 0x30
 8006d20:	e007      	b.n	8006d32 <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f022 020f 	bic.w	r2, r2, #15
 8006d30:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d36:	f023 0303 	bic.w	r3, r3, #3
 8006d3a:	f043 0201 	orr.w	r2, r3, #1
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	65da      	str	r2, [r3, #92]	; 0x5c
 8006d42:	e007      	b.n	8006d54 <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d48:	f043 0210 	orr.w	r2, r3, #16
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006d54:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3724      	adds	r7, #36	; 0x24
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd90      	pop	{r4, r7, pc}
 8006d5e:	bf00      	nop

08006d60 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b086      	sub	sp, #24
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d74:	d004      	beq.n	8006d80 <HAL_ADC_Start_DMA+0x20>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a57      	ldr	r2, [pc, #348]	; (8006ed8 <HAL_ADC_Start_DMA+0x178>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d101      	bne.n	8006d84 <HAL_ADC_Start_DMA+0x24>
 8006d80:	4b56      	ldr	r3, [pc, #344]	; (8006edc <HAL_ADC_Start_DMA+0x17c>)
 8006d82:	e000      	b.n	8006d86 <HAL_ADC_Start_DMA+0x26>
 8006d84:	4b56      	ldr	r3, [pc, #344]	; (8006ee0 <HAL_ADC_Start_DMA+0x180>)
 8006d86:	4618      	mov	r0, r3
 8006d88:	f7ff fd7e 	bl	8006888 <LL_ADC_GetMultimode>
 8006d8c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4618      	mov	r0, r3
 8006d94:	f7ff fe0f 	bl	80069b6 <LL_ADC_REG_IsConversionOngoing>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	f040 8094 	bne.w	8006ec8 <HAL_ADC_Start_DMA+0x168>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d101      	bne.n	8006dae <HAL_ADC_Start_DMA+0x4e>
 8006daa:	2302      	movs	r3, #2
 8006dac:	e08f      	b.n	8006ece <HAL_ADC_Start_DMA+0x16e>
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2201      	movs	r2, #1
 8006db2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a4a      	ldr	r2, [pc, #296]	; (8006ee4 <HAL_ADC_Start_DMA+0x184>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d008      	beq.n	8006dd2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d005      	beq.n	8006dd2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	2b05      	cmp	r3, #5
 8006dca:	d002      	beq.n	8006dd2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	2b09      	cmp	r3, #9
 8006dd0:	d173      	bne.n	8006eba <HAL_ADC_Start_DMA+0x15a>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8006dd2:	68f8      	ldr	r0, [r7, #12]
 8006dd4:	f000 fcc4 	bl	8007760 <ADC_Enable>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8006ddc:	7dfb      	ldrb	r3, [r7, #23]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d166      	bne.n	8006eb0 <HAL_ADC_Start_DMA+0x150>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006de6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006dea:	f023 0301 	bic.w	r3, r3, #1
 8006dee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a37      	ldr	r2, [pc, #220]	; (8006ed8 <HAL_ADC_Start_DMA+0x178>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d002      	beq.n	8006e06 <HAL_ADC_Start_DMA+0xa6>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	e001      	b.n	8006e0a <HAL_ADC_Start_DMA+0xaa>
 8006e06:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	6812      	ldr	r2, [r2, #0]
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d002      	beq.n	8006e18 <HAL_ADC_Start_DMA+0xb8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d105      	bne.n	8006e24 <HAL_ADC_Start_DMA+0xc4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e1c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d006      	beq.n	8006e3e <HAL_ADC_Start_DMA+0xde>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e34:	f023 0206 	bic.w	r2, r3, #6
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	661a      	str	r2, [r3, #96]	; 0x60
 8006e3c:	e002      	b.n	8006e44 <HAL_ADC_Start_DMA+0xe4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2200      	movs	r2, #0
 8006e42:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e48:	4a27      	ldr	r2, [pc, #156]	; (8006ee8 <HAL_ADC_Start_DMA+0x188>)
 8006e4a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e50:	4a26      	ldr	r2, [pc, #152]	; (8006eec <HAL_ADC_Start_DMA+0x18c>)
 8006e52:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e58:	4a25      	ldr	r2, [pc, #148]	; (8006ef0 <HAL_ADC_Start_DMA+0x190>)
 8006e5a:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	221c      	movs	r2, #28
 8006e62:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	685a      	ldr	r2, [r3, #4]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f042 0210 	orr.w	r2, r2, #16
 8006e7a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68da      	ldr	r2, [r3, #12]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f042 0201 	orr.w	r2, r2, #1
 8006e8a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	3340      	adds	r3, #64	; 0x40
 8006e96:	4619      	mov	r1, r3
 8006e98:	68ba      	ldr	r2, [r7, #8]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f001 fa2a 	bl	80082f4 <HAL_DMA_Start_IT>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7ff fd70 	bl	800698e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8006eae:	e00d      	b.n	8006ecc <HAL_ADC_Start_DMA+0x16c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8006eb8:	e008      	b.n	8006ecc <HAL_ADC_Start_DMA+0x16c>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8006ec6:	e001      	b.n	8006ecc <HAL_ADC_Start_DMA+0x16c>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006ec8:	2302      	movs	r3, #2
 8006eca:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006ecc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3718      	adds	r7, #24
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	50000100 	.word	0x50000100
 8006edc:	50000300 	.word	0x50000300
 8006ee0:	50000700 	.word	0x50000700
 8006ee4:	50000400 	.word	0x50000400
 8006ee8:	0800788d 	.word	0x0800788d
 8006eec:	08007965 	.word	0x08007965
 8006ef0:	08007981 	.word	0x08007981

08006ef4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006efc:	bf00      	nop
 8006efe:	370c      	adds	r7, #12
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b0b6      	sub	sp, #216	; 0xd8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006f12:	2300      	movs	r3, #0
 8006f14:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d102      	bne.n	8006f2c <HAL_ADC_ConfigChannel+0x24>
 8006f26:	2302      	movs	r3, #2
 8006f28:	f000 bc04 	b.w	8007734 <HAL_ADC_ConfigChannel+0x82c>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f7ff fd3c 	bl	80069b6 <LL_ADC_REG_IsConversionOngoing>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	f040 83e8 	bne.w	8007716 <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6818      	ldr	r0, [r3, #0]
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	6859      	ldr	r1, [r3, #4]
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	461a      	mov	r2, r3
 8006f54:	f7ff fc1d 	bl	8006792 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f7ff fd2a 	bl	80069b6 <LL_ADC_REG_IsConversionOngoing>
 8006f62:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7ff fd36 	bl	80069dc <LL_ADC_INJ_IsConversionOngoing>
 8006f70:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006f74:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	f040 81d9 	bne.w	8007330 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006f7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	f040 81d4 	bne.w	8007330 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f90:	d10f      	bne.n	8006fb2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6818      	ldr	r0, [r3, #0]
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	f7ff fc24 	bl	80067ea <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006faa:	4618      	mov	r0, r3
 8006fac:	f7ff fbcb 	bl	8006746 <LL_ADC_SetSamplingTimeCommonConfig>
 8006fb0:	e00e      	b.n	8006fd0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6818      	ldr	r0, [r3, #0]
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	6819      	ldr	r1, [r3, #0]
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	f7ff fc13 	bl	80067ea <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	2100      	movs	r1, #0
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7ff fbbb 	bl	8006746 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	695a      	ldr	r2, [r3, #20]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	08db      	lsrs	r3, r3, #3
 8006fdc:	f003 0303 	and.w	r3, r3, #3
 8006fe0:	005b      	lsls	r3, r3, #1
 8006fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	2b04      	cmp	r3, #4
 8006ff0:	d022      	beq.n	8007038 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6818      	ldr	r0, [r3, #0]
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	6919      	ldr	r1, [r3, #16]
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007002:	f7ff fb15 	bl	8006630 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6818      	ldr	r0, [r3, #0]
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	6919      	ldr	r1, [r3, #16]
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	699b      	ldr	r3, [r3, #24]
 8007012:	461a      	mov	r2, r3
 8007014:	f7ff fb61 	bl	80066da <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6818      	ldr	r0, [r3, #0]
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8007024:	2b01      	cmp	r3, #1
 8007026:	d102      	bne.n	800702e <HAL_ADC_ConfigChannel+0x126>
 8007028:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800702c:	e000      	b.n	8007030 <HAL_ADC_ConfigChannel+0x128>
 800702e:	2300      	movs	r3, #0
 8007030:	461a      	mov	r2, r3
 8007032:	f7ff fb6d 	bl	8006710 <LL_ADC_SetOffsetSaturation>
 8007036:	e17b      	b.n	8007330 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	2100      	movs	r1, #0
 800703e:	4618      	mov	r0, r3
 8007040:	f7ff fb1a 	bl	8006678 <LL_ADC_GetOffsetChannel>
 8007044:	4603      	mov	r3, r0
 8007046:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800704a:	2b00      	cmp	r3, #0
 800704c:	d10a      	bne.n	8007064 <HAL_ADC_ConfigChannel+0x15c>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	2100      	movs	r1, #0
 8007054:	4618      	mov	r0, r3
 8007056:	f7ff fb0f 	bl	8006678 <LL_ADC_GetOffsetChannel>
 800705a:	4603      	mov	r3, r0
 800705c:	0e9b      	lsrs	r3, r3, #26
 800705e:	f003 021f 	and.w	r2, r3, #31
 8007062:	e01e      	b.n	80070a2 <HAL_ADC_ConfigChannel+0x19a>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2100      	movs	r1, #0
 800706a:	4618      	mov	r0, r3
 800706c:	f7ff fb04 	bl	8006678 <LL_ADC_GetOffsetChannel>
 8007070:	4603      	mov	r3, r0
 8007072:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007076:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800707a:	fa93 f3a3 	rbit	r3, r3
 800707e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007082:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007086:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800708a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d101      	bne.n	8007096 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8007092:	2320      	movs	r3, #32
 8007094:	e004      	b.n	80070a0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8007096:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800709a:	fab3 f383 	clz	r3, r3
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d105      	bne.n	80070ba <HAL_ADC_ConfigChannel+0x1b2>
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	0e9b      	lsrs	r3, r3, #26
 80070b4:	f003 031f 	and.w	r3, r3, #31
 80070b8:	e018      	b.n	80070ec <HAL_ADC_ConfigChannel+0x1e4>
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80070c6:	fa93 f3a3 	rbit	r3, r3
 80070ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80070ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80070d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80070d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d101      	bne.n	80070e2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80070de:	2320      	movs	r3, #32
 80070e0:	e004      	b.n	80070ec <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80070e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80070e6:	fab3 f383 	clz	r3, r3
 80070ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d106      	bne.n	80070fe <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2200      	movs	r2, #0
 80070f6:	2100      	movs	r1, #0
 80070f8:	4618      	mov	r0, r3
 80070fa:	f7ff fad3 	bl	80066a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2101      	movs	r1, #1
 8007104:	4618      	mov	r0, r3
 8007106:	f7ff fab7 	bl	8006678 <LL_ADC_GetOffsetChannel>
 800710a:	4603      	mov	r3, r0
 800710c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007110:	2b00      	cmp	r3, #0
 8007112:	d10a      	bne.n	800712a <HAL_ADC_ConfigChannel+0x222>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2101      	movs	r1, #1
 800711a:	4618      	mov	r0, r3
 800711c:	f7ff faac 	bl	8006678 <LL_ADC_GetOffsetChannel>
 8007120:	4603      	mov	r3, r0
 8007122:	0e9b      	lsrs	r3, r3, #26
 8007124:	f003 021f 	and.w	r2, r3, #31
 8007128:	e01e      	b.n	8007168 <HAL_ADC_ConfigChannel+0x260>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	2101      	movs	r1, #1
 8007130:	4618      	mov	r0, r3
 8007132:	f7ff faa1 	bl	8006678 <LL_ADC_GetOffsetChannel>
 8007136:	4603      	mov	r3, r0
 8007138:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800713c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007140:	fa93 f3a3 	rbit	r3, r3
 8007144:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8007148:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800714c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8007150:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007154:	2b00      	cmp	r3, #0
 8007156:	d101      	bne.n	800715c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8007158:	2320      	movs	r3, #32
 800715a:	e004      	b.n	8007166 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800715c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007160:	fab3 f383 	clz	r3, r3
 8007164:	b2db      	uxtb	r3, r3
 8007166:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007170:	2b00      	cmp	r3, #0
 8007172:	d105      	bne.n	8007180 <HAL_ADC_ConfigChannel+0x278>
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	0e9b      	lsrs	r3, r3, #26
 800717a:	f003 031f 	and.w	r3, r3, #31
 800717e:	e018      	b.n	80071b2 <HAL_ADC_ConfigChannel+0x2aa>
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007188:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800718c:	fa93 f3a3 	rbit	r3, r3
 8007190:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8007194:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007198:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800719c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d101      	bne.n	80071a8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80071a4:	2320      	movs	r3, #32
 80071a6:	e004      	b.n	80071b2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80071a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071ac:	fab3 f383 	clz	r3, r3
 80071b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d106      	bne.n	80071c4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2200      	movs	r2, #0
 80071bc:	2101      	movs	r1, #1
 80071be:	4618      	mov	r0, r3
 80071c0:	f7ff fa70 	bl	80066a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	2102      	movs	r1, #2
 80071ca:	4618      	mov	r0, r3
 80071cc:	f7ff fa54 	bl	8006678 <LL_ADC_GetOffsetChannel>
 80071d0:	4603      	mov	r3, r0
 80071d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d10a      	bne.n	80071f0 <HAL_ADC_ConfigChannel+0x2e8>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	2102      	movs	r1, #2
 80071e0:	4618      	mov	r0, r3
 80071e2:	f7ff fa49 	bl	8006678 <LL_ADC_GetOffsetChannel>
 80071e6:	4603      	mov	r3, r0
 80071e8:	0e9b      	lsrs	r3, r3, #26
 80071ea:	f003 021f 	and.w	r2, r3, #31
 80071ee:	e01e      	b.n	800722e <HAL_ADC_ConfigChannel+0x326>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2102      	movs	r1, #2
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7ff fa3e 	bl	8006678 <LL_ADC_GetOffsetChannel>
 80071fc:	4603      	mov	r3, r0
 80071fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007202:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007206:	fa93 f3a3 	rbit	r3, r3
 800720a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800720e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007212:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8007216:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800721a:	2b00      	cmp	r3, #0
 800721c:	d101      	bne.n	8007222 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800721e:	2320      	movs	r3, #32
 8007220:	e004      	b.n	800722c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8007222:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007226:	fab3 f383 	clz	r3, r3
 800722a:	b2db      	uxtb	r3, r3
 800722c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007236:	2b00      	cmp	r3, #0
 8007238:	d105      	bne.n	8007246 <HAL_ADC_ConfigChannel+0x33e>
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	0e9b      	lsrs	r3, r3, #26
 8007240:	f003 031f 	and.w	r3, r3, #31
 8007244:	e016      	b.n	8007274 <HAL_ADC_ConfigChannel+0x36c>
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800724e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007252:	fa93 f3a3 	rbit	r3, r3
 8007256:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8007258:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800725a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800725e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007262:	2b00      	cmp	r3, #0
 8007264:	d101      	bne.n	800726a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8007266:	2320      	movs	r3, #32
 8007268:	e004      	b.n	8007274 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800726a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800726e:	fab3 f383 	clz	r3, r3
 8007272:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007274:	429a      	cmp	r2, r3
 8007276:	d106      	bne.n	8007286 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2200      	movs	r2, #0
 800727e:	2102      	movs	r1, #2
 8007280:	4618      	mov	r0, r3
 8007282:	f7ff fa0f 	bl	80066a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2103      	movs	r1, #3
 800728c:	4618      	mov	r0, r3
 800728e:	f7ff f9f3 	bl	8006678 <LL_ADC_GetOffsetChannel>
 8007292:	4603      	mov	r3, r0
 8007294:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007298:	2b00      	cmp	r3, #0
 800729a:	d10a      	bne.n	80072b2 <HAL_ADC_ConfigChannel+0x3aa>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2103      	movs	r1, #3
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7ff f9e8 	bl	8006678 <LL_ADC_GetOffsetChannel>
 80072a8:	4603      	mov	r3, r0
 80072aa:	0e9b      	lsrs	r3, r3, #26
 80072ac:	f003 021f 	and.w	r2, r3, #31
 80072b0:	e017      	b.n	80072e2 <HAL_ADC_ConfigChannel+0x3da>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2103      	movs	r1, #3
 80072b8:	4618      	mov	r0, r3
 80072ba:	f7ff f9dd 	bl	8006678 <LL_ADC_GetOffsetChannel>
 80072be:	4603      	mov	r3, r0
 80072c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072c4:	fa93 f3a3 	rbit	r3, r3
 80072c8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80072ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072cc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80072ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d101      	bne.n	80072d8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80072d4:	2320      	movs	r3, #32
 80072d6:	e003      	b.n	80072e0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80072d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072da:	fab3 f383 	clz	r3, r3
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d105      	bne.n	80072fa <HAL_ADC_ConfigChannel+0x3f2>
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	0e9b      	lsrs	r3, r3, #26
 80072f4:	f003 031f 	and.w	r3, r3, #31
 80072f8:	e011      	b.n	800731e <HAL_ADC_ConfigChannel+0x416>
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007300:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007302:	fa93 f3a3 	rbit	r3, r3
 8007306:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8007308:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800730a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800730c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800730e:	2b00      	cmp	r3, #0
 8007310:	d101      	bne.n	8007316 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8007312:	2320      	movs	r3, #32
 8007314:	e003      	b.n	800731e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8007316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007318:	fab3 f383 	clz	r3, r3
 800731c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800731e:	429a      	cmp	r2, r3
 8007320:	d106      	bne.n	8007330 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2200      	movs	r2, #0
 8007328:	2103      	movs	r1, #3
 800732a:	4618      	mov	r0, r3
 800732c:	f7ff f9ba 	bl	80066a4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4618      	mov	r0, r3
 8007336:	f7ff fb17 	bl	8006968 <LL_ADC_IsEnabled>
 800733a:	4603      	mov	r3, r0
 800733c:	2b00      	cmp	r3, #0
 800733e:	f040 813d 	bne.w	80075bc <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6818      	ldr	r0, [r3, #0]
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	6819      	ldr	r1, [r3, #0]
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	461a      	mov	r2, r3
 8007350:	f7ff fa76 	bl	8006840 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	4aa2      	ldr	r2, [pc, #648]	; (80075e4 <HAL_ADC_ConfigChannel+0x6dc>)
 800735a:	4293      	cmp	r3, r2
 800735c:	f040 812e 	bne.w	80075bc <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800736c:	2b00      	cmp	r3, #0
 800736e:	d10b      	bne.n	8007388 <HAL_ADC_ConfigChannel+0x480>
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	0e9b      	lsrs	r3, r3, #26
 8007376:	3301      	adds	r3, #1
 8007378:	f003 031f 	and.w	r3, r3, #31
 800737c:	2b09      	cmp	r3, #9
 800737e:	bf94      	ite	ls
 8007380:	2301      	movls	r3, #1
 8007382:	2300      	movhi	r3, #0
 8007384:	b2db      	uxtb	r3, r3
 8007386:	e019      	b.n	80073bc <HAL_ADC_ConfigChannel+0x4b4>
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800738e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007390:	fa93 f3a3 	rbit	r3, r3
 8007394:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8007396:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007398:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800739a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800739c:	2b00      	cmp	r3, #0
 800739e:	d101      	bne.n	80073a4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80073a0:	2320      	movs	r3, #32
 80073a2:	e003      	b.n	80073ac <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80073a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073a6:	fab3 f383 	clz	r3, r3
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	3301      	adds	r3, #1
 80073ae:	f003 031f 	and.w	r3, r3, #31
 80073b2:	2b09      	cmp	r3, #9
 80073b4:	bf94      	ite	ls
 80073b6:	2301      	movls	r3, #1
 80073b8:	2300      	movhi	r3, #0
 80073ba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d079      	beq.n	80074b4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d107      	bne.n	80073dc <HAL_ADC_ConfigChannel+0x4d4>
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	0e9b      	lsrs	r3, r3, #26
 80073d2:	3301      	adds	r3, #1
 80073d4:	069b      	lsls	r3, r3, #26
 80073d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80073da:	e015      	b.n	8007408 <HAL_ADC_ConfigChannel+0x500>
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073e4:	fa93 f3a3 	rbit	r3, r3
 80073e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80073ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073ec:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80073ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d101      	bne.n	80073f8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80073f4:	2320      	movs	r3, #32
 80073f6:	e003      	b.n	8007400 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80073f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073fa:	fab3 f383 	clz	r3, r3
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	3301      	adds	r3, #1
 8007402:	069b      	lsls	r3, r3, #26
 8007404:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007410:	2b00      	cmp	r3, #0
 8007412:	d109      	bne.n	8007428 <HAL_ADC_ConfigChannel+0x520>
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	0e9b      	lsrs	r3, r3, #26
 800741a:	3301      	adds	r3, #1
 800741c:	f003 031f 	and.w	r3, r3, #31
 8007420:	2101      	movs	r1, #1
 8007422:	fa01 f303 	lsl.w	r3, r1, r3
 8007426:	e017      	b.n	8007458 <HAL_ADC_ConfigChannel+0x550>
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800742e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007430:	fa93 f3a3 	rbit	r3, r3
 8007434:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8007436:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007438:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800743a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800743c:	2b00      	cmp	r3, #0
 800743e:	d101      	bne.n	8007444 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8007440:	2320      	movs	r3, #32
 8007442:	e003      	b.n	800744c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8007444:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007446:	fab3 f383 	clz	r3, r3
 800744a:	b2db      	uxtb	r3, r3
 800744c:	3301      	adds	r3, #1
 800744e:	f003 031f 	and.w	r3, r3, #31
 8007452:	2101      	movs	r1, #1
 8007454:	fa01 f303 	lsl.w	r3, r1, r3
 8007458:	ea42 0103 	orr.w	r1, r2, r3
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007464:	2b00      	cmp	r3, #0
 8007466:	d10a      	bne.n	800747e <HAL_ADC_ConfigChannel+0x576>
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	0e9b      	lsrs	r3, r3, #26
 800746e:	3301      	adds	r3, #1
 8007470:	f003 021f 	and.w	r2, r3, #31
 8007474:	4613      	mov	r3, r2
 8007476:	005b      	lsls	r3, r3, #1
 8007478:	4413      	add	r3, r2
 800747a:	051b      	lsls	r3, r3, #20
 800747c:	e018      	b.n	80074b0 <HAL_ADC_ConfigChannel+0x5a8>
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007486:	fa93 f3a3 	rbit	r3, r3
 800748a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800748c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800748e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8007490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007492:	2b00      	cmp	r3, #0
 8007494:	d101      	bne.n	800749a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8007496:	2320      	movs	r3, #32
 8007498:	e003      	b.n	80074a2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800749a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800749c:	fab3 f383 	clz	r3, r3
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	3301      	adds	r3, #1
 80074a4:	f003 021f 	and.w	r2, r3, #31
 80074a8:	4613      	mov	r3, r2
 80074aa:	005b      	lsls	r3, r3, #1
 80074ac:	4413      	add	r3, r2
 80074ae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80074b0:	430b      	orrs	r3, r1
 80074b2:	e07e      	b.n	80075b2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d107      	bne.n	80074d0 <HAL_ADC_ConfigChannel+0x5c8>
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	0e9b      	lsrs	r3, r3, #26
 80074c6:	3301      	adds	r3, #1
 80074c8:	069b      	lsls	r3, r3, #26
 80074ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80074ce:	e015      	b.n	80074fc <HAL_ADC_ConfigChannel+0x5f4>
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d8:	fa93 f3a3 	rbit	r3, r3
 80074dc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80074de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80074e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d101      	bne.n	80074ec <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80074e8:	2320      	movs	r3, #32
 80074ea:	e003      	b.n	80074f4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80074ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ee:	fab3 f383 	clz	r3, r3
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	3301      	adds	r3, #1
 80074f6:	069b      	lsls	r3, r3, #26
 80074f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007504:	2b00      	cmp	r3, #0
 8007506:	d109      	bne.n	800751c <HAL_ADC_ConfigChannel+0x614>
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	0e9b      	lsrs	r3, r3, #26
 800750e:	3301      	adds	r3, #1
 8007510:	f003 031f 	and.w	r3, r3, #31
 8007514:	2101      	movs	r1, #1
 8007516:	fa01 f303 	lsl.w	r3, r1, r3
 800751a:	e017      	b.n	800754c <HAL_ADC_ConfigChannel+0x644>
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007522:	6a3b      	ldr	r3, [r7, #32]
 8007524:	fa93 f3a3 	rbit	r3, r3
 8007528:	61fb      	str	r3, [r7, #28]
  return result;
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800752e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007530:	2b00      	cmp	r3, #0
 8007532:	d101      	bne.n	8007538 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8007534:	2320      	movs	r3, #32
 8007536:	e003      	b.n	8007540 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8007538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753a:	fab3 f383 	clz	r3, r3
 800753e:	b2db      	uxtb	r3, r3
 8007540:	3301      	adds	r3, #1
 8007542:	f003 031f 	and.w	r3, r3, #31
 8007546:	2101      	movs	r1, #1
 8007548:	fa01 f303 	lsl.w	r3, r1, r3
 800754c:	ea42 0103 	orr.w	r1, r2, r3
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007558:	2b00      	cmp	r3, #0
 800755a:	d10d      	bne.n	8007578 <HAL_ADC_ConfigChannel+0x670>
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	0e9b      	lsrs	r3, r3, #26
 8007562:	3301      	adds	r3, #1
 8007564:	f003 021f 	and.w	r2, r3, #31
 8007568:	4613      	mov	r3, r2
 800756a:	005b      	lsls	r3, r3, #1
 800756c:	4413      	add	r3, r2
 800756e:	3b1e      	subs	r3, #30
 8007570:	051b      	lsls	r3, r3, #20
 8007572:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007576:	e01b      	b.n	80075b0 <HAL_ADC_ConfigChannel+0x6a8>
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	fa93 f3a3 	rbit	r3, r3
 8007584:	613b      	str	r3, [r7, #16]
  return result;
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d101      	bne.n	8007594 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8007590:	2320      	movs	r3, #32
 8007592:	e003      	b.n	800759c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	fab3 f383 	clz	r3, r3
 800759a:	b2db      	uxtb	r3, r3
 800759c:	3301      	adds	r3, #1
 800759e:	f003 021f 	and.w	r2, r3, #31
 80075a2:	4613      	mov	r3, r2
 80075a4:	005b      	lsls	r3, r3, #1
 80075a6:	4413      	add	r3, r2
 80075a8:	3b1e      	subs	r3, #30
 80075aa:	051b      	lsls	r3, r3, #20
 80075ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80075b0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80075b2:	683a      	ldr	r2, [r7, #0]
 80075b4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80075b6:	4619      	mov	r1, r3
 80075b8:	f7ff f917 	bl	80067ea <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	4b09      	ldr	r3, [pc, #36]	; (80075e8 <HAL_ADC_ConfigChannel+0x6e0>)
 80075c2:	4013      	ands	r3, r2
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	f000 80af 	beq.w	8007728 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075d2:	d004      	beq.n	80075de <HAL_ADC_ConfigChannel+0x6d6>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a04      	ldr	r2, [pc, #16]	; (80075ec <HAL_ADC_ConfigChannel+0x6e4>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d10a      	bne.n	80075f4 <HAL_ADC_ConfigChannel+0x6ec>
 80075de:	4b04      	ldr	r3, [pc, #16]	; (80075f0 <HAL_ADC_ConfigChannel+0x6e8>)
 80075e0:	e009      	b.n	80075f6 <HAL_ADC_ConfigChannel+0x6ee>
 80075e2:	bf00      	nop
 80075e4:	407f0000 	.word	0x407f0000
 80075e8:	80080000 	.word	0x80080000
 80075ec:	50000100 	.word	0x50000100
 80075f0:	50000300 	.word	0x50000300
 80075f4:	4b51      	ldr	r3, [pc, #324]	; (800773c <HAL_ADC_ConfigChannel+0x834>)
 80075f6:	4618      	mov	r0, r3
 80075f8:	f7ff f80c 	bl	8006614 <LL_ADC_GetCommonPathInternalCh>
 80075fc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a4e      	ldr	r2, [pc, #312]	; (8007740 <HAL_ADC_ConfigChannel+0x838>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d004      	beq.n	8007614 <HAL_ADC_ConfigChannel+0x70c>
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a4d      	ldr	r2, [pc, #308]	; (8007744 <HAL_ADC_ConfigChannel+0x83c>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d134      	bne.n	800767e <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007614:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007618:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800761c:	2b00      	cmp	r3, #0
 800761e:	d12e      	bne.n	800767e <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007628:	d17e      	bne.n	8007728 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007632:	d004      	beq.n	800763e <HAL_ADC_ConfigChannel+0x736>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a43      	ldr	r2, [pc, #268]	; (8007748 <HAL_ADC_ConfigChannel+0x840>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d101      	bne.n	8007642 <HAL_ADC_ConfigChannel+0x73a>
 800763e:	4a43      	ldr	r2, [pc, #268]	; (800774c <HAL_ADC_ConfigChannel+0x844>)
 8007640:	e000      	b.n	8007644 <HAL_ADC_ConfigChannel+0x73c>
 8007642:	4a3e      	ldr	r2, [pc, #248]	; (800773c <HAL_ADC_ConfigChannel+0x834>)
 8007644:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007648:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800764c:	4619      	mov	r1, r3
 800764e:	4610      	mov	r0, r2
 8007650:	f7fe ffcd 	bl	80065ee <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007654:	4b3e      	ldr	r3, [pc, #248]	; (8007750 <HAL_ADC_ConfigChannel+0x848>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	099b      	lsrs	r3, r3, #6
 800765a:	4a3e      	ldr	r2, [pc, #248]	; (8007754 <HAL_ADC_ConfigChannel+0x84c>)
 800765c:	fba2 2303 	umull	r2, r3, r2, r3
 8007660:	099b      	lsrs	r3, r3, #6
 8007662:	1c5a      	adds	r2, r3, #1
 8007664:	4613      	mov	r3, r2
 8007666:	005b      	lsls	r3, r3, #1
 8007668:	4413      	add	r3, r2
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800766e:	e002      	b.n	8007676 <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	3b01      	subs	r3, #1
 8007674:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d1f9      	bne.n	8007670 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800767c:	e054      	b.n	8007728 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a35      	ldr	r2, [pc, #212]	; (8007758 <HAL_ADC_ConfigChannel+0x850>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d120      	bne.n	80076ca <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007688:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800768c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007690:	2b00      	cmp	r3, #0
 8007692:	d11a      	bne.n	80076ca <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800769c:	d144      	bne.n	8007728 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80076a6:	d004      	beq.n	80076b2 <HAL_ADC_ConfigChannel+0x7aa>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a26      	ldr	r2, [pc, #152]	; (8007748 <HAL_ADC_ConfigChannel+0x840>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d101      	bne.n	80076b6 <HAL_ADC_ConfigChannel+0x7ae>
 80076b2:	4a26      	ldr	r2, [pc, #152]	; (800774c <HAL_ADC_ConfigChannel+0x844>)
 80076b4:	e000      	b.n	80076b8 <HAL_ADC_ConfigChannel+0x7b0>
 80076b6:	4a21      	ldr	r2, [pc, #132]	; (800773c <HAL_ADC_ConfigChannel+0x834>)
 80076b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80076bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076c0:	4619      	mov	r1, r3
 80076c2:	4610      	mov	r0, r2
 80076c4:	f7fe ff93 	bl	80065ee <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80076c8:	e02e      	b.n	8007728 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a23      	ldr	r2, [pc, #140]	; (800775c <HAL_ADC_ConfigChannel+0x854>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d129      	bne.n	8007728 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80076d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80076d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d123      	bne.n	8007728 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a18      	ldr	r2, [pc, #96]	; (8007748 <HAL_ADC_ConfigChannel+0x840>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d01e      	beq.n	8007728 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80076f2:	d004      	beq.n	80076fe <HAL_ADC_ConfigChannel+0x7f6>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a13      	ldr	r2, [pc, #76]	; (8007748 <HAL_ADC_ConfigChannel+0x840>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d101      	bne.n	8007702 <HAL_ADC_ConfigChannel+0x7fa>
 80076fe:	4a13      	ldr	r2, [pc, #76]	; (800774c <HAL_ADC_ConfigChannel+0x844>)
 8007700:	e000      	b.n	8007704 <HAL_ADC_ConfigChannel+0x7fc>
 8007702:	4a0e      	ldr	r2, [pc, #56]	; (800773c <HAL_ADC_ConfigChannel+0x834>)
 8007704:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007708:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800770c:	4619      	mov	r1, r3
 800770e:	4610      	mov	r0, r2
 8007710:	f7fe ff6d 	bl	80065ee <LL_ADC_SetCommonPathInternalCh>
 8007714:	e008      	b.n	8007728 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800771a:	f043 0220 	orr.w	r2, r3, #32
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007730:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8007734:	4618      	mov	r0, r3
 8007736:	37d8      	adds	r7, #216	; 0xd8
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}
 800773c:	50000700 	.word	0x50000700
 8007740:	c3210000 	.word	0xc3210000
 8007744:	90c00010 	.word	0x90c00010
 8007748:	50000100 	.word	0x50000100
 800774c:	50000300 	.word	0x50000300
 8007750:	2000786c 	.word	0x2000786c
 8007754:	053e2d63 	.word	0x053e2d63
 8007758:	c7520000 	.word	0xc7520000
 800775c:	cb840000 	.word	0xcb840000

08007760 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8007768:	2300      	movs	r3, #0
 800776a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4618      	mov	r0, r3
 8007772:	f7ff f8f9 	bl	8006968 <LL_ADC_IsEnabled>
 8007776:	4603      	mov	r3, r0
 8007778:	2b00      	cmp	r3, #0
 800777a:	d176      	bne.n	800786a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	689a      	ldr	r2, [r3, #8]
 8007782:	4b3c      	ldr	r3, [pc, #240]	; (8007874 <ADC_Enable+0x114>)
 8007784:	4013      	ands	r3, r2
 8007786:	2b00      	cmp	r3, #0
 8007788:	d00d      	beq.n	80077a6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800778e:	f043 0210 	orr.w	r2, r3, #16
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800779a:	f043 0201 	orr.w	r2, r3, #1
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	e062      	b.n	800786c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4618      	mov	r0, r3
 80077ac:	f7ff f8c8 	bl	8006940 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80077b8:	d004      	beq.n	80077c4 <ADC_Enable+0x64>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a2e      	ldr	r2, [pc, #184]	; (8007878 <ADC_Enable+0x118>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d101      	bne.n	80077c8 <ADC_Enable+0x68>
 80077c4:	4b2d      	ldr	r3, [pc, #180]	; (800787c <ADC_Enable+0x11c>)
 80077c6:	e000      	b.n	80077ca <ADC_Enable+0x6a>
 80077c8:	4b2d      	ldr	r3, [pc, #180]	; (8007880 <ADC_Enable+0x120>)
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7fe ff22 	bl	8006614 <LL_ADC_GetCommonPathInternalCh>
 80077d0:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80077d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d013      	beq.n	8007802 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80077da:	4b2a      	ldr	r3, [pc, #168]	; (8007884 <ADC_Enable+0x124>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	099b      	lsrs	r3, r3, #6
 80077e0:	4a29      	ldr	r2, [pc, #164]	; (8007888 <ADC_Enable+0x128>)
 80077e2:	fba2 2303 	umull	r2, r3, r2, r3
 80077e6:	099b      	lsrs	r3, r3, #6
 80077e8:	1c5a      	adds	r2, r3, #1
 80077ea:	4613      	mov	r3, r2
 80077ec:	005b      	lsls	r3, r3, #1
 80077ee:	4413      	add	r3, r2
 80077f0:	009b      	lsls	r3, r3, #2
 80077f2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80077f4:	e002      	b.n	80077fc <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	3b01      	subs	r3, #1
 80077fa:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d1f9      	bne.n	80077f6 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007802:	f7fe feb3 	bl	800656c <HAL_GetTick>
 8007806:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007808:	e028      	b.n	800785c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4618      	mov	r0, r3
 8007810:	f7ff f8aa 	bl	8006968 <LL_ADC_IsEnabled>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d104      	bne.n	8007824 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4618      	mov	r0, r3
 8007820:	f7ff f88e 	bl	8006940 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007824:	f7fe fea2 	bl	800656c <HAL_GetTick>
 8007828:	4602      	mov	r2, r0
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	1ad3      	subs	r3, r2, r3
 800782e:	2b02      	cmp	r3, #2
 8007830:	d914      	bls.n	800785c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f003 0301 	and.w	r3, r3, #1
 800783c:	2b01      	cmp	r3, #1
 800783e:	d00d      	beq.n	800785c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007844:	f043 0210 	orr.w	r2, r3, #16
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007850:	f043 0201 	orr.w	r2, r3, #1
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	e007      	b.n	800786c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f003 0301 	and.w	r3, r3, #1
 8007866:	2b01      	cmp	r3, #1
 8007868:	d1cf      	bne.n	800780a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800786a:	2300      	movs	r3, #0
}
 800786c:	4618      	mov	r0, r3
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}
 8007874:	8000003f 	.word	0x8000003f
 8007878:	50000100 	.word	0x50000100
 800787c:	50000300 	.word	0x50000300
 8007880:	50000700 	.word	0x50000700
 8007884:	2000786c 	.word	0x2000786c
 8007888:	053e2d63 	.word	0x053e2d63

0800788c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007898:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800789e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d14b      	bne.n	800793e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078aa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f003 0308 	and.w	r3, r3, #8
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d021      	beq.n	8007904 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4618      	mov	r0, r3
 80078c6:	f7fe ff51 	bl	800676c <LL_ADC_REG_IsTriggerSourceSWStart>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d032      	beq.n	8007936 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d12b      	bne.n	8007936 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d11f      	bne.n	8007936 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078fa:	f043 0201 	orr.w	r2, r3, #1
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	65da      	str	r2, [r3, #92]	; 0x5c
 8007902:	e018      	b.n	8007936 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	f003 0302 	and.w	r3, r3, #2
 800790e:	2b00      	cmp	r3, #0
 8007910:	d111      	bne.n	8007936 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007916:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007922:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007926:	2b00      	cmp	r3, #0
 8007928:	d105      	bne.n	8007936 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800792e:	f043 0201 	orr.w	r2, r3, #1
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007936:	68f8      	ldr	r0, [r7, #12]
 8007938:	f7fe f9be 	bl	8005cb8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800793c:	e00e      	b.n	800795c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007942:	f003 0310 	and.w	r3, r3, #16
 8007946:	2b00      	cmp	r3, #0
 8007948:	d003      	beq.n	8007952 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800794a:	68f8      	ldr	r0, [r7, #12]
 800794c:	f7ff fad2 	bl	8006ef4 <HAL_ADC_ErrorCallback>
}
 8007950:	e004      	b.n	800795c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	4798      	blx	r3
}
 800795c:	bf00      	nop
 800795e:	3710      	adds	r7, #16
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007970:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007972:	68f8      	ldr	r0, [r7, #12]
 8007974:	f7fe f912 	bl	8005b9c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007978:	bf00      	nop
 800797a:	3710      	adds	r7, #16
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800798c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007992:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800799e:	f043 0204 	orr.w	r2, r3, #4
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80079a6:	68f8      	ldr	r0, [r7, #12]
 80079a8:	f7ff faa4 	bl	8006ef4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80079ac:	bf00      	nop
 80079ae:	3710      	adds	r7, #16
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <LL_ADC_IsEnabled>:
{
 80079b4:	b480      	push	{r7}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	f003 0301 	and.w	r3, r3, #1
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d101      	bne.n	80079cc <LL_ADC_IsEnabled+0x18>
 80079c8:	2301      	movs	r3, #1
 80079ca:	e000      	b.n	80079ce <LL_ADC_IsEnabled+0x1a>
 80079cc:	2300      	movs	r3, #0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	370c      	adds	r7, #12
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr

080079da <LL_ADC_REG_IsConversionOngoing>:
{
 80079da:	b480      	push	{r7}
 80079dc:	b083      	sub	sp, #12
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	f003 0304 	and.w	r3, r3, #4
 80079ea:	2b04      	cmp	r3, #4
 80079ec:	d101      	bne.n	80079f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80079ee:	2301      	movs	r3, #1
 80079f0:	e000      	b.n	80079f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80079f2:	2300      	movs	r3, #0
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	370c      	adds	r7, #12
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8007a00:	b590      	push	{r4, r7, lr}
 8007a02:	b0a1      	sub	sp, #132	; 0x84
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d101      	bne.n	8007a1e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8007a1a:	2302      	movs	r3, #2
 8007a1c:	e0cb      	b.n	8007bb6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2201      	movs	r2, #1
 8007a22:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8007a26:	2300      	movs	r3, #0
 8007a28:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a36:	d102      	bne.n	8007a3e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007a38:	4b61      	ldr	r3, [pc, #388]	; (8007bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8007a3a:	60bb      	str	r3, [r7, #8]
 8007a3c:	e001      	b.n	8007a42 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8007a3e:	2300      	movs	r3, #0
 8007a40:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d10b      	bne.n	8007a60 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a4c:	f043 0220 	orr.w	r2, r3, #32
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e0aa      	b.n	8007bb6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	4618      	mov	r0, r3
 8007a64:	f7ff ffb9 	bl	80079da <LL_ADC_REG_IsConversionOngoing>
 8007a68:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7ff ffb3 	bl	80079da <LL_ADC_REG_IsConversionOngoing>
 8007a74:	4603      	mov	r3, r0
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	f040 808c 	bne.w	8007b94 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8007a7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	f040 8088 	bne.w	8007b94 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a8c:	d004      	beq.n	8007a98 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a4b      	ldr	r2, [pc, #300]	; (8007bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d101      	bne.n	8007a9c <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8007a98:	4b4a      	ldr	r3, [pc, #296]	; (8007bc4 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 8007a9a:	e000      	b.n	8007a9e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8007a9c:	4b4a      	ldr	r3, [pc, #296]	; (8007bc8 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8007a9e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d041      	beq.n	8007b2c <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8007aa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	6859      	ldr	r1, [r3, #4]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007aba:	035b      	lsls	r3, r3, #13
 8007abc:	430b      	orrs	r3, r1
 8007abe:	431a      	orrs	r2, r3
 8007ac0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ac2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007acc:	d004      	beq.n	8007ad8 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a3b      	ldr	r2, [pc, #236]	; (8007bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d10f      	bne.n	8007af8 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8007ad8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007adc:	f7ff ff6a 	bl	80079b4 <LL_ADC_IsEnabled>
 8007ae0:	4604      	mov	r4, r0
 8007ae2:	4837      	ldr	r0, [pc, #220]	; (8007bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8007ae4:	f7ff ff66 	bl	80079b4 <LL_ADC_IsEnabled>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	4323      	orrs	r3, r4
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	bf0c      	ite	eq
 8007af0:	2301      	moveq	r3, #1
 8007af2:	2300      	movne	r3, #0
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	e008      	b.n	8007b0a <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8007af8:	4834      	ldr	r0, [pc, #208]	; (8007bcc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8007afa:	f7ff ff5b 	bl	80079b4 <LL_ADC_IsEnabled>
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	bf0c      	ite	eq
 8007b04:	2301      	moveq	r3, #1
 8007b06:	2300      	movne	r3, #0
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d04c      	beq.n	8007ba8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007b0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8007b16:	f023 030f 	bic.w	r3, r3, #15
 8007b1a:	683a      	ldr	r2, [r7, #0]
 8007b1c:	6811      	ldr	r1, [r2, #0]
 8007b1e:	683a      	ldr	r2, [r7, #0]
 8007b20:	6892      	ldr	r2, [r2, #8]
 8007b22:	430a      	orrs	r2, r1
 8007b24:	431a      	orrs	r2, r3
 8007b26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b28:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007b2a:	e03d      	b.n	8007ba8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8007b2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007b34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b36:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007b40:	d004      	beq.n	8007b4c <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a1e      	ldr	r2, [pc, #120]	; (8007bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d10f      	bne.n	8007b6c <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8007b4c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007b50:	f7ff ff30 	bl	80079b4 <LL_ADC_IsEnabled>
 8007b54:	4604      	mov	r4, r0
 8007b56:	481a      	ldr	r0, [pc, #104]	; (8007bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8007b58:	f7ff ff2c 	bl	80079b4 <LL_ADC_IsEnabled>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	4323      	orrs	r3, r4
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	bf0c      	ite	eq
 8007b64:	2301      	moveq	r3, #1
 8007b66:	2300      	movne	r3, #0
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	e008      	b.n	8007b7e <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 8007b6c:	4817      	ldr	r0, [pc, #92]	; (8007bcc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8007b6e:	f7ff ff21 	bl	80079b4 <LL_ADC_IsEnabled>
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	bf0c      	ite	eq
 8007b78:	2301      	moveq	r3, #1
 8007b7a:	2300      	movne	r3, #0
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d012      	beq.n	8007ba8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007b82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8007b8a:	f023 030f 	bic.w	r3, r3, #15
 8007b8e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007b90:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007b92:	e009      	b.n	8007ba8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b98:	f043 0220 	orr.w	r2, r3, #32
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8007ba6:	e000      	b.n	8007baa <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007ba8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007bb2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3784      	adds	r7, #132	; 0x84
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd90      	pop	{r4, r7, pc}
 8007bbe:	bf00      	nop
 8007bc0:	50000100 	.word	0x50000100
 8007bc4:	50000300 	.word	0x50000300
 8007bc8:	50000700 	.word	0x50000700
 8007bcc:	50000400 	.word	0x50000400

08007bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b085      	sub	sp, #20
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f003 0307 	and.w	r3, r3, #7
 8007bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007be0:	4b0c      	ldr	r3, [pc, #48]	; (8007c14 <__NVIC_SetPriorityGrouping+0x44>)
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007be6:	68ba      	ldr	r2, [r7, #8]
 8007be8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007bec:	4013      	ands	r3, r2
 8007bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007bf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007c02:	4a04      	ldr	r2, [pc, #16]	; (8007c14 <__NVIC_SetPriorityGrouping+0x44>)
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	60d3      	str	r3, [r2, #12]
}
 8007c08:	bf00      	nop
 8007c0a:	3714      	adds	r7, #20
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr
 8007c14:	e000ed00 	.word	0xe000ed00

08007c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007c1c:	4b04      	ldr	r3, [pc, #16]	; (8007c30 <__NVIC_GetPriorityGrouping+0x18>)
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	0a1b      	lsrs	r3, r3, #8
 8007c22:	f003 0307 	and.w	r3, r3, #7
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr
 8007c30:	e000ed00 	.word	0xe000ed00

08007c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	db0b      	blt.n	8007c5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007c46:	79fb      	ldrb	r3, [r7, #7]
 8007c48:	f003 021f 	and.w	r2, r3, #31
 8007c4c:	4907      	ldr	r1, [pc, #28]	; (8007c6c <__NVIC_EnableIRQ+0x38>)
 8007c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c52:	095b      	lsrs	r3, r3, #5
 8007c54:	2001      	movs	r0, #1
 8007c56:	fa00 f202 	lsl.w	r2, r0, r2
 8007c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007c5e:	bf00      	nop
 8007c60:	370c      	adds	r7, #12
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr
 8007c6a:	bf00      	nop
 8007c6c:	e000e100 	.word	0xe000e100

08007c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b083      	sub	sp, #12
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	4603      	mov	r3, r0
 8007c78:	6039      	str	r1, [r7, #0]
 8007c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	db0a      	blt.n	8007c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	b2da      	uxtb	r2, r3
 8007c88:	490c      	ldr	r1, [pc, #48]	; (8007cbc <__NVIC_SetPriority+0x4c>)
 8007c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c8e:	0112      	lsls	r2, r2, #4
 8007c90:	b2d2      	uxtb	r2, r2
 8007c92:	440b      	add	r3, r1
 8007c94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007c98:	e00a      	b.n	8007cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	b2da      	uxtb	r2, r3
 8007c9e:	4908      	ldr	r1, [pc, #32]	; (8007cc0 <__NVIC_SetPriority+0x50>)
 8007ca0:	79fb      	ldrb	r3, [r7, #7]
 8007ca2:	f003 030f 	and.w	r3, r3, #15
 8007ca6:	3b04      	subs	r3, #4
 8007ca8:	0112      	lsls	r2, r2, #4
 8007caa:	b2d2      	uxtb	r2, r2
 8007cac:	440b      	add	r3, r1
 8007cae:	761a      	strb	r2, [r3, #24]
}
 8007cb0:	bf00      	nop
 8007cb2:	370c      	adds	r7, #12
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr
 8007cbc:	e000e100 	.word	0xe000e100
 8007cc0:	e000ed00 	.word	0xe000ed00

08007cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b089      	sub	sp, #36	; 0x24
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f003 0307 	and.w	r3, r3, #7
 8007cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007cd8:	69fb      	ldr	r3, [r7, #28]
 8007cda:	f1c3 0307 	rsb	r3, r3, #7
 8007cde:	2b04      	cmp	r3, #4
 8007ce0:	bf28      	it	cs
 8007ce2:	2304      	movcs	r3, #4
 8007ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007ce6:	69fb      	ldr	r3, [r7, #28]
 8007ce8:	3304      	adds	r3, #4
 8007cea:	2b06      	cmp	r3, #6
 8007cec:	d902      	bls.n	8007cf4 <NVIC_EncodePriority+0x30>
 8007cee:	69fb      	ldr	r3, [r7, #28]
 8007cf0:	3b03      	subs	r3, #3
 8007cf2:	e000      	b.n	8007cf6 <NVIC_EncodePriority+0x32>
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8007d02:	43da      	mvns	r2, r3
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	401a      	ands	r2, r3
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	fa01 f303 	lsl.w	r3, r1, r3
 8007d16:	43d9      	mvns	r1, r3
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d1c:	4313      	orrs	r3, r2
         );
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3724      	adds	r7, #36	; 0x24
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr
	...

08007d2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	3b01      	subs	r3, #1
 8007d38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007d3c:	d301      	bcc.n	8007d42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007d3e:	2301      	movs	r3, #1
 8007d40:	e00f      	b.n	8007d62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007d42:	4a0a      	ldr	r2, [pc, #40]	; (8007d6c <SysTick_Config+0x40>)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	3b01      	subs	r3, #1
 8007d48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007d4a:	210f      	movs	r1, #15
 8007d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d50:	f7ff ff8e 	bl	8007c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007d54:	4b05      	ldr	r3, [pc, #20]	; (8007d6c <SysTick_Config+0x40>)
 8007d56:	2200      	movs	r2, #0
 8007d58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007d5a:	4b04      	ldr	r3, [pc, #16]	; (8007d6c <SysTick_Config+0x40>)
 8007d5c:	2207      	movs	r2, #7
 8007d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3708      	adds	r7, #8
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop
 8007d6c:	e000e010 	.word	0xe000e010

08007d70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f7ff ff29 	bl	8007bd0 <__NVIC_SetPriorityGrouping>
}
 8007d7e:	bf00      	nop
 8007d80:	3708      	adds	r7, #8
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}

08007d86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007d86:	b580      	push	{r7, lr}
 8007d88:	b086      	sub	sp, #24
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	60b9      	str	r1, [r7, #8]
 8007d90:	607a      	str	r2, [r7, #4]
 8007d92:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007d94:	f7ff ff40 	bl	8007c18 <__NVIC_GetPriorityGrouping>
 8007d98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	68b9      	ldr	r1, [r7, #8]
 8007d9e:	6978      	ldr	r0, [r7, #20]
 8007da0:	f7ff ff90 	bl	8007cc4 <NVIC_EncodePriority>
 8007da4:	4602      	mov	r2, r0
 8007da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007daa:	4611      	mov	r1, r2
 8007dac:	4618      	mov	r0, r3
 8007dae:	f7ff ff5f 	bl	8007c70 <__NVIC_SetPriority>
}
 8007db2:	bf00      	nop
 8007db4:	3718      	adds	r7, #24
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}

08007dba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007dba:	b580      	push	{r7, lr}
 8007dbc:	b082      	sub	sp, #8
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f7ff ff33 	bl	8007c34 <__NVIC_EnableIRQ>
}
 8007dce:	bf00      	nop
 8007dd0:	3708      	adds	r7, #8
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b082      	sub	sp, #8
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f7ff ffa4 	bl	8007d2c <SysTick_Config>
 8007de4:	4603      	mov	r3, r0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3708      	adds	r7, #8
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}

08007dee <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8007dee:	b580      	push	{r7, lr}
 8007df0:	b082      	sub	sp, #8
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d101      	bne.n	8007e00 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	e014      	b.n	8007e2a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	791b      	ldrb	r3, [r3, #4]
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d105      	bne.n	8007e16 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f7fe f9ab 	bl	800616c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2202      	movs	r2, #2
 8007e1a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2201      	movs	r2, #1
 8007e26:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007e28:	2300      	movs	r3, #0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3708      	adds	r7, #8
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
	...

08007e34 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b08a      	sub	sp, #40	; 0x28
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	60b9      	str	r1, [r7, #8]
 8007e3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e40:	2300      	movs	r3, #0
 8007e42:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d002      	beq.n	8007e50 <HAL_DAC_ConfigChannel+0x1c>
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d101      	bne.n	8007e54 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8007e50:	2301      	movs	r3, #1
 8007e52:	e19e      	b.n	8008192 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	795b      	ldrb	r3, [r3, #5]
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d101      	bne.n	8007e60 <HAL_DAC_ConfigChannel+0x2c>
 8007e5c:	2302      	movs	r3, #2
 8007e5e:	e198      	b.n	8008192 <HAL_DAC_ConfigChannel+0x35e>
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2201      	movs	r2, #1
 8007e64:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2202      	movs	r2, #2
 8007e6a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	2b04      	cmp	r3, #4
 8007e72:	d17a      	bne.n	8007f6a <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8007e74:	f7fe fb7a 	bl	800656c <HAL_GetTick>
 8007e78:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d13d      	bne.n	8007efc <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007e80:	e018      	b.n	8007eb4 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007e82:	f7fe fb73 	bl	800656c <HAL_GetTick>
 8007e86:	4602      	mov	r2, r0
 8007e88:	69bb      	ldr	r3, [r7, #24]
 8007e8a:	1ad3      	subs	r3, r2, r3
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d911      	bls.n	8007eb4 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d00a      	beq.n	8007eb4 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	691b      	ldr	r3, [r3, #16]
 8007ea2:	f043 0208 	orr.w	r2, r3, #8
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2203      	movs	r2, #3
 8007eae:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8007eb0:	2303      	movs	r3, #3
 8007eb2:	e16e      	b.n	8008192 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d1df      	bne.n	8007e82 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	68ba      	ldr	r2, [r7, #8]
 8007ec8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007eca:	641a      	str	r2, [r3, #64]	; 0x40
 8007ecc:	e020      	b.n	8007f10 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007ece:	f7fe fb4d 	bl	800656c <HAL_GetTick>
 8007ed2:	4602      	mov	r2, r0
 8007ed4:	69bb      	ldr	r3, [r7, #24]
 8007ed6:	1ad3      	subs	r3, r2, r3
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d90f      	bls.n	8007efc <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	da0a      	bge.n	8007efc <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	691b      	ldr	r3, [r3, #16]
 8007eea:	f043 0208 	orr.w	r2, r3, #8
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2203      	movs	r2, #3
 8007ef6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8007ef8:	2303      	movs	r3, #3
 8007efa:	e14a      	b.n	8008192 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	dbe3      	blt.n	8007ece <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	68ba      	ldr	r2, [r7, #8]
 8007f0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007f0e:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f003 0310 	and.w	r3, r3, #16
 8007f1c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8007f20:	fa01 f303 	lsl.w	r3, r1, r3
 8007f24:	43db      	mvns	r3, r3
 8007f26:	ea02 0103 	and.w	r1, r2, r3
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f003 0310 	and.w	r3, r3, #16
 8007f34:	409a      	lsls	r2, r3
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	430a      	orrs	r2, r1
 8007f3c:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f003 0310 	and.w	r3, r3, #16
 8007f4a:	21ff      	movs	r1, #255	; 0xff
 8007f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8007f50:	43db      	mvns	r3, r3
 8007f52:	ea02 0103 	and.w	r1, r2, r3
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f003 0310 	and.w	r3, r3, #16
 8007f60:	409a      	lsls	r2, r3
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	430a      	orrs	r2, r1
 8007f68:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	69db      	ldr	r3, [r3, #28]
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d11d      	bne.n	8007fae <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f78:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f003 0310 	and.w	r3, r3, #16
 8007f80:	221f      	movs	r2, #31
 8007f82:	fa02 f303 	lsl.w	r3, r2, r3
 8007f86:	43db      	mvns	r3, r3
 8007f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f8a:	4013      	ands	r3, r2
 8007f8c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	6a1b      	ldr	r3, [r3, #32]
 8007f92:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f003 0310 	and.w	r3, r3, #16
 8007f9a:	697a      	ldr	r2, [r7, #20]
 8007f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fac:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fb4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f003 0310 	and.w	r3, r3, #16
 8007fbc:	2207      	movs	r2, #7
 8007fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8007fc2:	43db      	mvns	r3, r3
 8007fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fc6:	4013      	ands	r3, r2
 8007fc8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	699b      	ldr	r3, [r3, #24]
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d102      	bne.n	8007fd8 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	623b      	str	r3, [r7, #32]
 8007fd6:	e00f      	b.n	8007ff8 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	699b      	ldr	r3, [r3, #24]
 8007fdc:	2b02      	cmp	r3, #2
 8007fde:	d102      	bne.n	8007fe6 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	623b      	str	r3, [r7, #32]
 8007fe4:	e008      	b.n	8007ff8 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	695b      	ldr	r3, [r3, #20]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d102      	bne.n	8007ff4 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	623b      	str	r3, [r7, #32]
 8007ff2:	e001      	b.n	8007ff8 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	689a      	ldr	r2, [r3, #8]
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	695b      	ldr	r3, [r3, #20]
 8008000:	4313      	orrs	r3, r2
 8008002:	6a3a      	ldr	r2, [r7, #32]
 8008004:	4313      	orrs	r3, r2
 8008006:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f003 0310 	and.w	r3, r3, #16
 800800e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008012:	fa02 f303 	lsl.w	r3, r2, r3
 8008016:	43db      	mvns	r3, r3
 8008018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800801a:	4013      	ands	r3, r2
 800801c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	791b      	ldrb	r3, [r3, #4]
 8008022:	2b01      	cmp	r3, #1
 8008024:	d102      	bne.n	800802c <HAL_DAC_ConfigChannel+0x1f8>
 8008026:	f44f 7380 	mov.w	r3, #256	; 0x100
 800802a:	e000      	b.n	800802e <HAL_DAC_ConfigChannel+0x1fa>
 800802c:	2300      	movs	r3, #0
 800802e:	697a      	ldr	r2, [r7, #20]
 8008030:	4313      	orrs	r3, r2
 8008032:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f003 0310 	and.w	r3, r3, #16
 800803a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800803e:	fa02 f303 	lsl.w	r3, r2, r3
 8008042:	43db      	mvns	r3, r3
 8008044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008046:	4013      	ands	r3, r2
 8008048:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	795b      	ldrb	r3, [r3, #5]
 800804e:	2b01      	cmp	r3, #1
 8008050:	d102      	bne.n	8008058 <HAL_DAC_ConfigChannel+0x224>
 8008052:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008056:	e000      	b.n	800805a <HAL_DAC_ConfigChannel+0x226>
 8008058:	2300      	movs	r3, #0
 800805a:	697a      	ldr	r2, [r7, #20]
 800805c:	4313      	orrs	r3, r2
 800805e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8008060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008062:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008066:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	2b02      	cmp	r3, #2
 800806e:	d114      	bne.n	800809a <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8008070:	f001 faca 	bl	8009608 <HAL_RCC_GetHCLKFreq>
 8008074:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	4a48      	ldr	r2, [pc, #288]	; (800819c <HAL_DAC_ConfigChannel+0x368>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d904      	bls.n	8008088 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800807e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008080:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008084:	627b      	str	r3, [r7, #36]	; 0x24
 8008086:	e00f      	b.n	80080a8 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	4a45      	ldr	r2, [pc, #276]	; (80081a0 <HAL_DAC_ConfigChannel+0x36c>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d90a      	bls.n	80080a6 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8008090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008092:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008096:	627b      	str	r3, [r7, #36]	; 0x24
 8008098:	e006      	b.n	80080a8 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080a0:	4313      	orrs	r3, r2
 80080a2:	627b      	str	r3, [r7, #36]	; 0x24
 80080a4:	e000      	b.n	80080a8 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80080a6:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f003 0310 	and.w	r3, r3, #16
 80080ae:	697a      	ldr	r2, [r7, #20]
 80080b0:	fa02 f303 	lsl.w	r3, r2, r3
 80080b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080b6:	4313      	orrs	r3, r2
 80080b8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	6819      	ldr	r1, [r3, #0]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f003 0310 	and.w	r3, r3, #16
 80080ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80080d2:	fa02 f303 	lsl.w	r3, r2, r3
 80080d6:	43da      	mvns	r2, r3
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	400a      	ands	r2, r1
 80080de:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f003 0310 	and.w	r3, r3, #16
 80080ee:	f640 72fe 	movw	r2, #4094	; 0xffe
 80080f2:	fa02 f303 	lsl.w	r3, r2, r3
 80080f6:	43db      	mvns	r3, r3
 80080f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080fa:	4013      	ands	r3, r2
 80080fc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	68db      	ldr	r3, [r3, #12]
 8008102:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f003 0310 	and.w	r3, r3, #16
 800810a:	697a      	ldr	r2, [r7, #20]
 800810c:	fa02 f303 	lsl.w	r3, r2, r3
 8008110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008112:	4313      	orrs	r3, r2
 8008114:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800811c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	6819      	ldr	r1, [r3, #0]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f003 0310 	and.w	r3, r3, #16
 800812a:	22c0      	movs	r2, #192	; 0xc0
 800812c:	fa02 f303 	lsl.w	r3, r2, r3
 8008130:	43da      	mvns	r2, r3
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	400a      	ands	r2, r1
 8008138:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	68db      	ldr	r3, [r3, #12]
 800813e:	089b      	lsrs	r3, r3, #2
 8008140:	f003 030f 	and.w	r3, r3, #15
 8008144:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	089b      	lsrs	r3, r3, #2
 800814c:	021b      	lsls	r3, r3, #8
 800814e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008152:	697a      	ldr	r2, [r7, #20]
 8008154:	4313      	orrs	r3, r2
 8008156:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f003 0310 	and.w	r3, r3, #16
 8008164:	f640 710f 	movw	r1, #3855	; 0xf0f
 8008168:	fa01 f303 	lsl.w	r3, r1, r3
 800816c:	43db      	mvns	r3, r3
 800816e:	ea02 0103 	and.w	r1, r2, r3
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f003 0310 	and.w	r3, r3, #16
 8008178:	697a      	ldr	r2, [r7, #20]
 800817a:	409a      	lsls	r2, r3
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	430a      	orrs	r2, r1
 8008182:	661a      	str	r2, [r3, #96]	; 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2201      	movs	r2, #1
 8008188:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2200      	movs	r2, #0
 800818e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8008190:	7ffb      	ldrb	r3, [r7, #31]
}
 8008192:	4618      	mov	r0, r3
 8008194:	3728      	adds	r7, #40	; 0x28
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	09896800 	.word	0x09896800
 80081a0:	04c4b400 	.word	0x04c4b400

080081a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d101      	bne.n	80081b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80081b2:	2301      	movs	r3, #1
 80081b4:	e08d      	b.n	80082d2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	461a      	mov	r2, r3
 80081bc:	4b47      	ldr	r3, [pc, #284]	; (80082dc <HAL_DMA_Init+0x138>)
 80081be:	429a      	cmp	r2, r3
 80081c0:	d80f      	bhi.n	80081e2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	461a      	mov	r2, r3
 80081c8:	4b45      	ldr	r3, [pc, #276]	; (80082e0 <HAL_DMA_Init+0x13c>)
 80081ca:	4413      	add	r3, r2
 80081cc:	4a45      	ldr	r2, [pc, #276]	; (80082e4 <HAL_DMA_Init+0x140>)
 80081ce:	fba2 2303 	umull	r2, r3, r2, r3
 80081d2:	091b      	lsrs	r3, r3, #4
 80081d4:	009a      	lsls	r2, r3, #2
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4a42      	ldr	r2, [pc, #264]	; (80082e8 <HAL_DMA_Init+0x144>)
 80081de:	641a      	str	r2, [r3, #64]	; 0x40
 80081e0:	e00e      	b.n	8008200 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	461a      	mov	r2, r3
 80081e8:	4b40      	ldr	r3, [pc, #256]	; (80082ec <HAL_DMA_Init+0x148>)
 80081ea:	4413      	add	r3, r2
 80081ec:	4a3d      	ldr	r2, [pc, #244]	; (80082e4 <HAL_DMA_Init+0x140>)
 80081ee:	fba2 2303 	umull	r2, r3, r2, r3
 80081f2:	091b      	lsrs	r3, r3, #4
 80081f4:	009a      	lsls	r2, r3, #2
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	4a3c      	ldr	r2, [pc, #240]	; (80082f0 <HAL_DMA_Init+0x14c>)
 80081fe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2202      	movs	r2, #2
 8008204:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800821a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8008224:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	691b      	ldr	r3, [r3, #16]
 800822a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008230:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	699b      	ldr	r3, [r3, #24]
 8008236:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800823c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6a1b      	ldr	r3, [r3, #32]
 8008242:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008244:	68fa      	ldr	r2, [r7, #12]
 8008246:	4313      	orrs	r3, r2
 8008248:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	68fa      	ldr	r2, [r7, #12]
 8008250:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 f9b6 	bl	80085c4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008260:	d102      	bne.n	8008268 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2200      	movs	r2, #0
 8008266:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	685a      	ldr	r2, [r3, #4]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008270:	b2d2      	uxtb	r2, r2
 8008272:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800827c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d010      	beq.n	80082a8 <HAL_DMA_Init+0x104>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	2b04      	cmp	r3, #4
 800828c:	d80c      	bhi.n	80082a8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 f9d6 	bl	8008640 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008298:	2200      	movs	r2, #0
 800829a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082a0:	687a      	ldr	r2, [r7, #4]
 80082a2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80082a4:	605a      	str	r2, [r3, #4]
 80082a6:	e008      	b.n	80082ba <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2200      	movs	r2, #0
 80082b2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3710      	adds	r7, #16
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	bf00      	nop
 80082dc:	40020407 	.word	0x40020407
 80082e0:	bffdfff8 	.word	0xbffdfff8
 80082e4:	cccccccd 	.word	0xcccccccd
 80082e8:	40020000 	.word	0x40020000
 80082ec:	bffdfbf8 	.word	0xbffdfbf8
 80082f0:	40020400 	.word	0x40020400

080082f4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b086      	sub	sp, #24
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	60b9      	str	r1, [r7, #8]
 80082fe:	607a      	str	r2, [r7, #4]
 8008300:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008302:	2300      	movs	r3, #0
 8008304:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800830c:	2b01      	cmp	r3, #1
 800830e:	d101      	bne.n	8008314 <HAL_DMA_Start_IT+0x20>
 8008310:	2302      	movs	r3, #2
 8008312:	e066      	b.n	80083e2 <HAL_DMA_Start_IT+0xee>
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008322:	b2db      	uxtb	r3, r3
 8008324:	2b01      	cmp	r3, #1
 8008326:	d155      	bne.n	80083d4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2202      	movs	r2, #2
 800832c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2200      	movs	r2, #0
 8008334:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f022 0201 	bic.w	r2, r2, #1
 8008344:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	68b9      	ldr	r1, [r7, #8]
 800834c:	68f8      	ldr	r0, [r7, #12]
 800834e:	f000 f8fb 	bl	8008548 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008356:	2b00      	cmp	r3, #0
 8008358:	d008      	beq.n	800836c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f042 020e 	orr.w	r2, r2, #14
 8008368:	601a      	str	r2, [r3, #0]
 800836a:	e00f      	b.n	800838c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f022 0204 	bic.w	r2, r2, #4
 800837a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f042 020a 	orr.w	r2, r2, #10
 800838a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008396:	2b00      	cmp	r3, #0
 8008398:	d007      	beq.n	80083aa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083a8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d007      	beq.n	80083c2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083c0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f042 0201 	orr.w	r2, r2, #1
 80083d0:	601a      	str	r2, [r3, #0]
 80083d2:	e005      	b.n	80083e0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2200      	movs	r2, #0
 80083d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80083dc:	2302      	movs	r3, #2
 80083de:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80083e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3718      	adds	r7, #24
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}

080083ea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80083ea:	b580      	push	{r7, lr}
 80083ec:	b084      	sub	sp, #16
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008406:	f003 031f 	and.w	r3, r3, #31
 800840a:	2204      	movs	r2, #4
 800840c:	409a      	lsls	r2, r3
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	4013      	ands	r3, r2
 8008412:	2b00      	cmp	r3, #0
 8008414:	d026      	beq.n	8008464 <HAL_DMA_IRQHandler+0x7a>
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	f003 0304 	and.w	r3, r3, #4
 800841c:	2b00      	cmp	r3, #0
 800841e:	d021      	beq.n	8008464 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f003 0320 	and.w	r3, r3, #32
 800842a:	2b00      	cmp	r3, #0
 800842c:	d107      	bne.n	800843e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f022 0204 	bic.w	r2, r2, #4
 800843c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008442:	f003 021f 	and.w	r2, r3, #31
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800844a:	2104      	movs	r1, #4
 800844c:	fa01 f202 	lsl.w	r2, r1, r2
 8008450:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008456:	2b00      	cmp	r3, #0
 8008458:	d071      	beq.n	800853e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8008462:	e06c      	b.n	800853e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008468:	f003 031f 	and.w	r3, r3, #31
 800846c:	2202      	movs	r2, #2
 800846e:	409a      	lsls	r2, r3
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	4013      	ands	r3, r2
 8008474:	2b00      	cmp	r3, #0
 8008476:	d02e      	beq.n	80084d6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	f003 0302 	and.w	r3, r3, #2
 800847e:	2b00      	cmp	r3, #0
 8008480:	d029      	beq.n	80084d6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f003 0320 	and.w	r3, r3, #32
 800848c:	2b00      	cmp	r3, #0
 800848e:	d10b      	bne.n	80084a8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f022 020a 	bic.w	r2, r2, #10
 800849e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2201      	movs	r2, #1
 80084a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084ac:	f003 021f 	and.w	r2, r3, #31
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b4:	2102      	movs	r1, #2
 80084b6:	fa01 f202 	lsl.w	r2, r1, r2
 80084ba:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d038      	beq.n	800853e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80084d4:	e033      	b.n	800853e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084da:	f003 031f 	and.w	r3, r3, #31
 80084de:	2208      	movs	r2, #8
 80084e0:	409a      	lsls	r2, r3
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	4013      	ands	r3, r2
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d02a      	beq.n	8008540 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	f003 0308 	and.w	r3, r3, #8
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d025      	beq.n	8008540 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f022 020e 	bic.w	r2, r2, #14
 8008502:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008508:	f003 021f 	and.w	r2, r3, #31
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008510:	2101      	movs	r1, #1
 8008512:	fa01 f202 	lsl.w	r2, r1, r2
 8008516:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2201      	movs	r2, #1
 8008522:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008532:	2b00      	cmp	r3, #0
 8008534:	d004      	beq.n	8008540 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800853e:	bf00      	nop
 8008540:	bf00      	nop
}
 8008542:	3710      	adds	r7, #16
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008548:	b480      	push	{r7}
 800854a:	b085      	sub	sp, #20
 800854c:	af00      	add	r7, sp, #0
 800854e:	60f8      	str	r0, [r7, #12]
 8008550:	60b9      	str	r1, [r7, #8]
 8008552:	607a      	str	r2, [r7, #4]
 8008554:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800855a:	68fa      	ldr	r2, [r7, #12]
 800855c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800855e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008564:	2b00      	cmp	r3, #0
 8008566:	d004      	beq.n	8008572 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800856c:	68fa      	ldr	r2, [r7, #12]
 800856e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008570:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008576:	f003 021f 	and.w	r2, r3, #31
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800857e:	2101      	movs	r1, #1
 8008580:	fa01 f202 	lsl.w	r2, r1, r2
 8008584:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	683a      	ldr	r2, [r7, #0]
 800858c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	2b10      	cmp	r3, #16
 8008594:	d108      	bne.n	80085a8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	68ba      	ldr	r2, [r7, #8]
 80085a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80085a6:	e007      	b.n	80085b8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	68ba      	ldr	r2, [r7, #8]
 80085ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	60da      	str	r2, [r3, #12]
}
 80085b8:	bf00      	nop
 80085ba:	3714      	adds	r7, #20
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr

080085c4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b087      	sub	sp, #28
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	461a      	mov	r2, r3
 80085d2:	4b16      	ldr	r3, [pc, #88]	; (800862c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d802      	bhi.n	80085de <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80085d8:	4b15      	ldr	r3, [pc, #84]	; (8008630 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80085da:	617b      	str	r3, [r7, #20]
 80085dc:	e001      	b.n	80085e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80085de:	4b15      	ldr	r3, [pc, #84]	; (8008634 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80085e0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	b2db      	uxtb	r3, r3
 80085ec:	3b08      	subs	r3, #8
 80085ee:	4a12      	ldr	r2, [pc, #72]	; (8008638 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80085f0:	fba2 2303 	umull	r2, r3, r2, r3
 80085f4:	091b      	lsrs	r3, r3, #4
 80085f6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085fc:	089b      	lsrs	r3, r3, #2
 80085fe:	009a      	lsls	r2, r3, #2
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	4413      	add	r3, r2
 8008604:	461a      	mov	r2, r3
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	4a0b      	ldr	r2, [pc, #44]	; (800863c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800860e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f003 031f 	and.w	r3, r3, #31
 8008616:	2201      	movs	r2, #1
 8008618:	409a      	lsls	r2, r3
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800861e:	bf00      	nop
 8008620:	371c      	adds	r7, #28
 8008622:	46bd      	mov	sp, r7
 8008624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008628:	4770      	bx	lr
 800862a:	bf00      	nop
 800862c:	40020407 	.word	0x40020407
 8008630:	40020800 	.word	0x40020800
 8008634:	40020820 	.word	0x40020820
 8008638:	cccccccd 	.word	0xcccccccd
 800863c:	40020880 	.word	0x40020880

08008640 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008640:	b480      	push	{r7}
 8008642:	b085      	sub	sp, #20
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	b2db      	uxtb	r3, r3
 800864e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008650:	68fa      	ldr	r2, [r7, #12]
 8008652:	4b0b      	ldr	r3, [pc, #44]	; (8008680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8008654:	4413      	add	r3, r2
 8008656:	009b      	lsls	r3, r3, #2
 8008658:	461a      	mov	r2, r3
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	4a08      	ldr	r2, [pc, #32]	; (8008684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8008662:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	3b01      	subs	r3, #1
 8008668:	f003 031f 	and.w	r3, r3, #31
 800866c:	2201      	movs	r2, #1
 800866e:	409a      	lsls	r2, r3
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8008674:	bf00      	nop
 8008676:	3714      	adds	r7, #20
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr
 8008680:	1000823f 	.word	0x1000823f
 8008684:	40020940 	.word	0x40020940

08008688 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d101      	bne.n	800869a <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 8008696:	2301      	movs	r3, #1
 8008698:	e033      	b.n	8008702 <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d106      	bne.n	80086b4 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f7fd fdf8 	bl	80062a4 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2200      	movs	r2, #0
 80086b8:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 f854 	bl	8008768 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 f822 	bl	800870a <FMAC_Reset>
 80086c6:	4603      	mov	r3, r0
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	d10c      	bne.n	80086e6 <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086d0:	f043 0210 	orr.w	r2, r3, #16
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	22a0      	movs	r2, #160	; 0xa0
 80086dc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 80086e0:	2301      	movs	r3, #1
 80086e2:	73fb      	strb	r3, [r7, #15]
 80086e4:	e008      	b.n	80086f8 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2200      	movs	r2, #0
 80086ea:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2220      	movs	r2, #32
 80086f0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 80086f4:	2300      	movs	r3, #0
 80086f6:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8008700:	7bfb      	ldrb	r3, [r7, #15]
}
 8008702:	4618      	mov	r0, r3
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 800870a:	b580      	push	{r7, lr}
 800870c:	b084      	sub	sp, #16
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008712:	f7fd ff2b 	bl	800656c <HAL_GetTick>
 8008716:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	691a      	ldr	r2, [r3, #16]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008726:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8008728:	e00f      	b.n	800874a <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 800872a:	f7fd ff1f 	bl	800656c <HAL_GetTick>
 800872e:	4602      	mov	r2, r0
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	1ad3      	subs	r3, r2, r3
 8008734:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008738:	d907      	bls.n	800874a <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800873e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	e00a      	b.n	8008760 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	691b      	ldr	r3, [r3, #16]
 8008750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008754:	2b00      	cmp	r3, #0
 8008756:	d1e8      	bne.n	800872a <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2200      	movs	r2, #0
 800875c:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 800875e:	2300      	movs	r3, #0
}
 8008760:	4618      	mov	r0, r3
 8008762:	3710      	adds	r7, #16
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 f807 	bl	8008784 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 f81b 	bl	80087b2 <FMAC_ResetOutputStateAndDataPointers>
}
 800877c:	bf00      	nop
 800877e:	3708      	adds	r7, #8
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8008784:	b480      	push	{r7}
 8008786:	b083      	sub	sp, #12
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2200      	movs	r2, #0
 8008790:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2200      	movs	r2, #0
 8008796:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2200      	movs	r2, #0
 800879c:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2220      	movs	r2, #32
 80087a2:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 80087a6:	bf00      	nop
 80087a8:	370c      	adds	r7, #12
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr

080087b2 <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80087b2:	b480      	push	{r7}
 80087b4:	b083      	sub	sp, #12
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2200      	movs	r2, #0
 80087ca:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2220      	movs	r2, #32
 80087d0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 80087d4:	bf00      	nop
 80087d6:	370c      	adds	r7, #12
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b087      	sub	sp, #28
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80087ea:	2300      	movs	r3, #0
 80087ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80087ee:	e15a      	b.n	8008aa6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	681a      	ldr	r2, [r3, #0]
 80087f4:	2101      	movs	r1, #1
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	fa01 f303 	lsl.w	r3, r1, r3
 80087fc:	4013      	ands	r3, r2
 80087fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2b00      	cmp	r3, #0
 8008804:	f000 814c 	beq.w	8008aa0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	f003 0303 	and.w	r3, r3, #3
 8008810:	2b01      	cmp	r3, #1
 8008812:	d005      	beq.n	8008820 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800881c:	2b02      	cmp	r3, #2
 800881e:	d130      	bne.n	8008882 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	005b      	lsls	r3, r3, #1
 800882a:	2203      	movs	r2, #3
 800882c:	fa02 f303 	lsl.w	r3, r2, r3
 8008830:	43db      	mvns	r3, r3
 8008832:	693a      	ldr	r2, [r7, #16]
 8008834:	4013      	ands	r3, r2
 8008836:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	68da      	ldr	r2, [r3, #12]
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	005b      	lsls	r3, r3, #1
 8008840:	fa02 f303 	lsl.w	r3, r2, r3
 8008844:	693a      	ldr	r2, [r7, #16]
 8008846:	4313      	orrs	r3, r2
 8008848:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	693a      	ldr	r2, [r7, #16]
 800884e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008856:	2201      	movs	r2, #1
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	fa02 f303 	lsl.w	r3, r2, r3
 800885e:	43db      	mvns	r3, r3
 8008860:	693a      	ldr	r2, [r7, #16]
 8008862:	4013      	ands	r3, r2
 8008864:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	091b      	lsrs	r3, r3, #4
 800886c:	f003 0201 	and.w	r2, r3, #1
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	fa02 f303 	lsl.w	r3, r2, r3
 8008876:	693a      	ldr	r2, [r7, #16]
 8008878:	4313      	orrs	r3, r2
 800887a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	693a      	ldr	r2, [r7, #16]
 8008880:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	f003 0303 	and.w	r3, r3, #3
 800888a:	2b03      	cmp	r3, #3
 800888c:	d017      	beq.n	80088be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	68db      	ldr	r3, [r3, #12]
 8008892:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	005b      	lsls	r3, r3, #1
 8008898:	2203      	movs	r2, #3
 800889a:	fa02 f303 	lsl.w	r3, r2, r3
 800889e:	43db      	mvns	r3, r3
 80088a0:	693a      	ldr	r2, [r7, #16]
 80088a2:	4013      	ands	r3, r2
 80088a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	689a      	ldr	r2, [r3, #8]
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	005b      	lsls	r3, r3, #1
 80088ae:	fa02 f303 	lsl.w	r3, r2, r3
 80088b2:	693a      	ldr	r2, [r7, #16]
 80088b4:	4313      	orrs	r3, r2
 80088b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	693a      	ldr	r2, [r7, #16]
 80088bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	f003 0303 	and.w	r3, r3, #3
 80088c6:	2b02      	cmp	r3, #2
 80088c8:	d123      	bne.n	8008912 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	08da      	lsrs	r2, r3, #3
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	3208      	adds	r2, #8
 80088d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	f003 0307 	and.w	r3, r3, #7
 80088de:	009b      	lsls	r3, r3, #2
 80088e0:	220f      	movs	r2, #15
 80088e2:	fa02 f303 	lsl.w	r3, r2, r3
 80088e6:	43db      	mvns	r3, r3
 80088e8:	693a      	ldr	r2, [r7, #16]
 80088ea:	4013      	ands	r3, r2
 80088ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	691a      	ldr	r2, [r3, #16]
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	f003 0307 	and.w	r3, r3, #7
 80088f8:	009b      	lsls	r3, r3, #2
 80088fa:	fa02 f303 	lsl.w	r3, r2, r3
 80088fe:	693a      	ldr	r2, [r7, #16]
 8008900:	4313      	orrs	r3, r2
 8008902:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	08da      	lsrs	r2, r3, #3
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	3208      	adds	r2, #8
 800890c:	6939      	ldr	r1, [r7, #16]
 800890e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	005b      	lsls	r3, r3, #1
 800891c:	2203      	movs	r2, #3
 800891e:	fa02 f303 	lsl.w	r3, r2, r3
 8008922:	43db      	mvns	r3, r3
 8008924:	693a      	ldr	r2, [r7, #16]
 8008926:	4013      	ands	r3, r2
 8008928:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	f003 0203 	and.w	r2, r3, #3
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	005b      	lsls	r3, r3, #1
 8008936:	fa02 f303 	lsl.w	r3, r2, r3
 800893a:	693a      	ldr	r2, [r7, #16]
 800893c:	4313      	orrs	r3, r2
 800893e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	693a      	ldr	r2, [r7, #16]
 8008944:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800894e:	2b00      	cmp	r3, #0
 8008950:	f000 80a6 	beq.w	8008aa0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008954:	4b5b      	ldr	r3, [pc, #364]	; (8008ac4 <HAL_GPIO_Init+0x2e4>)
 8008956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008958:	4a5a      	ldr	r2, [pc, #360]	; (8008ac4 <HAL_GPIO_Init+0x2e4>)
 800895a:	f043 0301 	orr.w	r3, r3, #1
 800895e:	6613      	str	r3, [r2, #96]	; 0x60
 8008960:	4b58      	ldr	r3, [pc, #352]	; (8008ac4 <HAL_GPIO_Init+0x2e4>)
 8008962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008964:	f003 0301 	and.w	r3, r3, #1
 8008968:	60bb      	str	r3, [r7, #8]
 800896a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800896c:	4a56      	ldr	r2, [pc, #344]	; (8008ac8 <HAL_GPIO_Init+0x2e8>)
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	089b      	lsrs	r3, r3, #2
 8008972:	3302      	adds	r3, #2
 8008974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008978:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	f003 0303 	and.w	r3, r3, #3
 8008980:	009b      	lsls	r3, r3, #2
 8008982:	220f      	movs	r2, #15
 8008984:	fa02 f303 	lsl.w	r3, r2, r3
 8008988:	43db      	mvns	r3, r3
 800898a:	693a      	ldr	r2, [r7, #16]
 800898c:	4013      	ands	r3, r2
 800898e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008996:	d01f      	beq.n	80089d8 <HAL_GPIO_Init+0x1f8>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	4a4c      	ldr	r2, [pc, #304]	; (8008acc <HAL_GPIO_Init+0x2ec>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d019      	beq.n	80089d4 <HAL_GPIO_Init+0x1f4>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	4a4b      	ldr	r2, [pc, #300]	; (8008ad0 <HAL_GPIO_Init+0x2f0>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d013      	beq.n	80089d0 <HAL_GPIO_Init+0x1f0>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	4a4a      	ldr	r2, [pc, #296]	; (8008ad4 <HAL_GPIO_Init+0x2f4>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d00d      	beq.n	80089cc <HAL_GPIO_Init+0x1ec>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	4a49      	ldr	r2, [pc, #292]	; (8008ad8 <HAL_GPIO_Init+0x2f8>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d007      	beq.n	80089c8 <HAL_GPIO_Init+0x1e8>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	4a48      	ldr	r2, [pc, #288]	; (8008adc <HAL_GPIO_Init+0x2fc>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d101      	bne.n	80089c4 <HAL_GPIO_Init+0x1e4>
 80089c0:	2305      	movs	r3, #5
 80089c2:	e00a      	b.n	80089da <HAL_GPIO_Init+0x1fa>
 80089c4:	2306      	movs	r3, #6
 80089c6:	e008      	b.n	80089da <HAL_GPIO_Init+0x1fa>
 80089c8:	2304      	movs	r3, #4
 80089ca:	e006      	b.n	80089da <HAL_GPIO_Init+0x1fa>
 80089cc:	2303      	movs	r3, #3
 80089ce:	e004      	b.n	80089da <HAL_GPIO_Init+0x1fa>
 80089d0:	2302      	movs	r3, #2
 80089d2:	e002      	b.n	80089da <HAL_GPIO_Init+0x1fa>
 80089d4:	2301      	movs	r3, #1
 80089d6:	e000      	b.n	80089da <HAL_GPIO_Init+0x1fa>
 80089d8:	2300      	movs	r3, #0
 80089da:	697a      	ldr	r2, [r7, #20]
 80089dc:	f002 0203 	and.w	r2, r2, #3
 80089e0:	0092      	lsls	r2, r2, #2
 80089e2:	4093      	lsls	r3, r2
 80089e4:	693a      	ldr	r2, [r7, #16]
 80089e6:	4313      	orrs	r3, r2
 80089e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80089ea:	4937      	ldr	r1, [pc, #220]	; (8008ac8 <HAL_GPIO_Init+0x2e8>)
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	089b      	lsrs	r3, r3, #2
 80089f0:	3302      	adds	r3, #2
 80089f2:	693a      	ldr	r2, [r7, #16]
 80089f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80089f8:	4b39      	ldr	r3, [pc, #228]	; (8008ae0 <HAL_GPIO_Init+0x300>)
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	43db      	mvns	r3, r3
 8008a02:	693a      	ldr	r2, [r7, #16]
 8008a04:	4013      	ands	r3, r2
 8008a06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d003      	beq.n	8008a1c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8008a14:	693a      	ldr	r2, [r7, #16]
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008a1c:	4a30      	ldr	r2, [pc, #192]	; (8008ae0 <HAL_GPIO_Init+0x300>)
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008a22:	4b2f      	ldr	r3, [pc, #188]	; (8008ae0 <HAL_GPIO_Init+0x300>)
 8008a24:	68db      	ldr	r3, [r3, #12]
 8008a26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	43db      	mvns	r3, r3
 8008a2c:	693a      	ldr	r2, [r7, #16]
 8008a2e:	4013      	ands	r3, r2
 8008a30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d003      	beq.n	8008a46 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8008a3e:	693a      	ldr	r2, [r7, #16]
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	4313      	orrs	r3, r2
 8008a44:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008a46:	4a26      	ldr	r2, [pc, #152]	; (8008ae0 <HAL_GPIO_Init+0x300>)
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8008a4c:	4b24      	ldr	r3, [pc, #144]	; (8008ae0 <HAL_GPIO_Init+0x300>)
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	43db      	mvns	r3, r3
 8008a56:	693a      	ldr	r2, [r7, #16]
 8008a58:	4013      	ands	r3, r2
 8008a5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d003      	beq.n	8008a70 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8008a68:	693a      	ldr	r2, [r7, #16]
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008a70:	4a1b      	ldr	r2, [pc, #108]	; (8008ae0 <HAL_GPIO_Init+0x300>)
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008a76:	4b1a      	ldr	r3, [pc, #104]	; (8008ae0 <HAL_GPIO_Init+0x300>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	43db      	mvns	r3, r3
 8008a80:	693a      	ldr	r2, [r7, #16]
 8008a82:	4013      	ands	r3, r2
 8008a84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d003      	beq.n	8008a9a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8008a92:	693a      	ldr	r2, [r7, #16]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	4313      	orrs	r3, r2
 8008a98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008a9a:	4a11      	ldr	r2, [pc, #68]	; (8008ae0 <HAL_GPIO_Init+0x300>)
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	fa22 f303 	lsr.w	r3, r2, r3
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	f47f ae9d 	bne.w	80087f0 <HAL_GPIO_Init+0x10>
  }
}
 8008ab6:	bf00      	nop
 8008ab8:	bf00      	nop
 8008aba:	371c      	adds	r7, #28
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr
 8008ac4:	40021000 	.word	0x40021000
 8008ac8:	40010000 	.word	0x40010000
 8008acc:	48000400 	.word	0x48000400
 8008ad0:	48000800 	.word	0x48000800
 8008ad4:	48000c00 	.word	0x48000c00
 8008ad8:	48001000 	.word	0x48001000
 8008adc:	48001400 	.word	0x48001400
 8008ae0:	40010400 	.word	0x40010400

08008ae4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	460b      	mov	r3, r1
 8008aee:	807b      	strh	r3, [r7, #2]
 8008af0:	4613      	mov	r3, r2
 8008af2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008af4:	787b      	ldrb	r3, [r7, #1]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d003      	beq.n	8008b02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008afa:	887a      	ldrh	r2, [r7, #2]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008b00:	e002      	b.n	8008b08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008b02:	887a      	ldrh	r2, [r7, #2]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008b08:	bf00      	nop
 8008b0a:	370c      	adds	r7, #12
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr

08008b14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008b1e:	4b08      	ldr	r3, [pc, #32]	; (8008b40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008b20:	695a      	ldr	r2, [r3, #20]
 8008b22:	88fb      	ldrh	r3, [r7, #6]
 8008b24:	4013      	ands	r3, r2
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d006      	beq.n	8008b38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008b2a:	4a05      	ldr	r2, [pc, #20]	; (8008b40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008b2c:	88fb      	ldrh	r3, [r7, #6]
 8008b2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008b30:	88fb      	ldrh	r3, [r7, #6]
 8008b32:	4618      	mov	r0, r3
 8008b34:	f7fd f816 	bl	8005b64 <HAL_GPIO_EXTI_Callback>
  }
}
 8008b38:	bf00      	nop
 8008b3a:	3708      	adds	r7, #8
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	40010400 	.word	0x40010400

08008b44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b085      	sub	sp, #20
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d141      	bne.n	8008bd6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008b52:	4b4b      	ldr	r3, [pc, #300]	; (8008c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008b5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b5e:	d131      	bne.n	8008bc4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008b60:	4b47      	ldr	r3, [pc, #284]	; (8008c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b66:	4a46      	ldr	r2, [pc, #280]	; (8008c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008b70:	4b43      	ldr	r3, [pc, #268]	; (8008c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008b78:	4a41      	ldr	r2, [pc, #260]	; (8008c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008b7e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008b80:	4b40      	ldr	r3, [pc, #256]	; (8008c84 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	2232      	movs	r2, #50	; 0x32
 8008b86:	fb02 f303 	mul.w	r3, r2, r3
 8008b8a:	4a3f      	ldr	r2, [pc, #252]	; (8008c88 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8008b90:	0c9b      	lsrs	r3, r3, #18
 8008b92:	3301      	adds	r3, #1
 8008b94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008b96:	e002      	b.n	8008b9e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	3b01      	subs	r3, #1
 8008b9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008b9e:	4b38      	ldr	r3, [pc, #224]	; (8008c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ba0:	695b      	ldr	r3, [r3, #20]
 8008ba2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ba6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008baa:	d102      	bne.n	8008bb2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d1f2      	bne.n	8008b98 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008bb2:	4b33      	ldr	r3, [pc, #204]	; (8008c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008bb4:	695b      	ldr	r3, [r3, #20]
 8008bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bbe:	d158      	bne.n	8008c72 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008bc0:	2303      	movs	r3, #3
 8008bc2:	e057      	b.n	8008c74 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008bc4:	4b2e      	ldr	r3, [pc, #184]	; (8008c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008bc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008bca:	4a2d      	ldr	r2, [pc, #180]	; (8008c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008bcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008bd0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008bd4:	e04d      	b.n	8008c72 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bdc:	d141      	bne.n	8008c62 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008bde:	4b28      	ldr	r3, [pc, #160]	; (8008c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008be6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bea:	d131      	bne.n	8008c50 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008bec:	4b24      	ldr	r3, [pc, #144]	; (8008c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008bee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008bf2:	4a23      	ldr	r2, [pc, #140]	; (8008c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008bf8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008bfc:	4b20      	ldr	r3, [pc, #128]	; (8008c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008c04:	4a1e      	ldr	r2, [pc, #120]	; (8008c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008c0a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008c0c:	4b1d      	ldr	r3, [pc, #116]	; (8008c84 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2232      	movs	r2, #50	; 0x32
 8008c12:	fb02 f303 	mul.w	r3, r2, r3
 8008c16:	4a1c      	ldr	r2, [pc, #112]	; (8008c88 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008c18:	fba2 2303 	umull	r2, r3, r2, r3
 8008c1c:	0c9b      	lsrs	r3, r3, #18
 8008c1e:	3301      	adds	r3, #1
 8008c20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008c22:	e002      	b.n	8008c2a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	3b01      	subs	r3, #1
 8008c28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008c2a:	4b15      	ldr	r3, [pc, #84]	; (8008c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c2c:	695b      	ldr	r3, [r3, #20]
 8008c2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c36:	d102      	bne.n	8008c3e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d1f2      	bne.n	8008c24 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008c3e:	4b10      	ldr	r3, [pc, #64]	; (8008c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c40:	695b      	ldr	r3, [r3, #20]
 8008c42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c4a:	d112      	bne.n	8008c72 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008c4c:	2303      	movs	r3, #3
 8008c4e:	e011      	b.n	8008c74 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008c50:	4b0b      	ldr	r3, [pc, #44]	; (8008c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c56:	4a0a      	ldr	r2, [pc, #40]	; (8008c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008c60:	e007      	b.n	8008c72 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008c62:	4b07      	ldr	r3, [pc, #28]	; (8008c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008c6a:	4a05      	ldr	r2, [pc, #20]	; (8008c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008c70:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008c72:	2300      	movs	r3, #0
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3714      	adds	r7, #20
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr
 8008c80:	40007000 	.word	0x40007000
 8008c84:	2000786c 	.word	0x2000786c
 8008c88:	431bde83 	.word	0x431bde83

08008c8c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008c90:	4b05      	ldr	r3, [pc, #20]	; (8008ca8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	4a04      	ldr	r2, [pc, #16]	; (8008ca8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008c96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008c9a:	6093      	str	r3, [r2, #8]
}
 8008c9c:	bf00      	nop
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr
 8008ca6:	bf00      	nop
 8008ca8:	40007000 	.word	0x40007000

08008cac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b088      	sub	sp, #32
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d101      	bne.n	8008cbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	e2fe      	b.n	80092bc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f003 0301 	and.w	r3, r3, #1
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d075      	beq.n	8008db6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008cca:	4b97      	ldr	r3, [pc, #604]	; (8008f28 <HAL_RCC_OscConfig+0x27c>)
 8008ccc:	689b      	ldr	r3, [r3, #8]
 8008cce:	f003 030c 	and.w	r3, r3, #12
 8008cd2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008cd4:	4b94      	ldr	r3, [pc, #592]	; (8008f28 <HAL_RCC_OscConfig+0x27c>)
 8008cd6:	68db      	ldr	r3, [r3, #12]
 8008cd8:	f003 0303 	and.w	r3, r3, #3
 8008cdc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008cde:	69bb      	ldr	r3, [r7, #24]
 8008ce0:	2b0c      	cmp	r3, #12
 8008ce2:	d102      	bne.n	8008cea <HAL_RCC_OscConfig+0x3e>
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	2b03      	cmp	r3, #3
 8008ce8:	d002      	beq.n	8008cf0 <HAL_RCC_OscConfig+0x44>
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	2b08      	cmp	r3, #8
 8008cee:	d10b      	bne.n	8008d08 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008cf0:	4b8d      	ldr	r3, [pc, #564]	; (8008f28 <HAL_RCC_OscConfig+0x27c>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d05b      	beq.n	8008db4 <HAL_RCC_OscConfig+0x108>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d157      	bne.n	8008db4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008d04:	2301      	movs	r3, #1
 8008d06:	e2d9      	b.n	80092bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d10:	d106      	bne.n	8008d20 <HAL_RCC_OscConfig+0x74>
 8008d12:	4b85      	ldr	r3, [pc, #532]	; (8008f28 <HAL_RCC_OscConfig+0x27c>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a84      	ldr	r2, [pc, #528]	; (8008f28 <HAL_RCC_OscConfig+0x27c>)
 8008d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d1c:	6013      	str	r3, [r2, #0]
 8008d1e:	e01d      	b.n	8008d5c <HAL_RCC_OscConfig+0xb0>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d28:	d10c      	bne.n	8008d44 <HAL_RCC_OscConfig+0x98>
 8008d2a:	4b7f      	ldr	r3, [pc, #508]	; (8008f28 <HAL_RCC_OscConfig+0x27c>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a7e      	ldr	r2, [pc, #504]	; (8008f28 <HAL_RCC_OscConfig+0x27c>)
 8008d30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008d34:	6013      	str	r3, [r2, #0]
 8008d36:	4b7c      	ldr	r3, [pc, #496]	; (8008f28 <HAL_RCC_OscConfig+0x27c>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a7b      	ldr	r2, [pc, #492]	; (8008f28 <HAL_RCC_OscConfig+0x27c>)
 8008d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d40:	6013      	str	r3, [r2, #0]
 8008d42:	e00b      	b.n	8008d5c <HAL_RCC_OscConfig+0xb0>
 8008d44:	4b78      	ldr	r3, [pc, #480]	; (8008f28 <HAL_RCC_OscConfig+0x27c>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a77      	ldr	r2, [pc, #476]	; (8008f28 <HAL_RCC_OscConfig+0x27c>)
 8008d4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d4e:	6013      	str	r3, [r2, #0]
 8008d50:	4b75      	ldr	r3, [pc, #468]	; (8008f28 <HAL_RCC_OscConfig+0x27c>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a74      	ldr	r2, [pc, #464]	; (8008f28 <HAL_RCC_OscConfig+0x27c>)
 8008d56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d013      	beq.n	8008d8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d64:	f7fd fc02 	bl	800656c <HAL_GetTick>
 8008d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008d6a:	e008      	b.n	8008d7e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008d6c:	f7fd fbfe 	bl	800656c <HAL_GetTick>
 8008d70:	4602      	mov	r2, r0
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	1ad3      	subs	r3, r2, r3
 8008d76:	2b64      	cmp	r3, #100	; 0x64
 8008d78:	d901      	bls.n	8008d7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	e29e      	b.n	80092bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008d7e:	4b6a      	ldr	r3, [pc, #424]	; (8008f28 <HAL_RCC_OscConfig+0x27c>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d0f0      	beq.n	8008d6c <HAL_RCC_OscConfig+0xc0>
 8008d8a:	e014      	b.n	8008db6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d8c:	f7fd fbee 	bl	800656c <HAL_GetTick>
 8008d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008d92:	e008      	b.n	8008da6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008d94:	f7fd fbea 	bl	800656c <HAL_GetTick>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	1ad3      	subs	r3, r2, r3
 8008d9e:	2b64      	cmp	r3, #100	; 0x64
 8008da0:	d901      	bls.n	8008da6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008da2:	2303      	movs	r3, #3
 8008da4:	e28a      	b.n	80092bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008da6:	4b60      	ldr	r3, [pc, #384]	; (8008f28 <HAL_RCC_OscConfig+0x27c>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d1f0      	bne.n	8008d94 <HAL_RCC_OscConfig+0xe8>
 8008db2:	e000      	b.n	8008db6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008db4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f003 0302 	and.w	r3, r3, #2
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d075      	beq.n	8008eae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008dc2:	4b59      	ldr	r3, [pc, #356]	; (8008f28 <HAL_RCC_OscConfig+0x27c>)
 8008dc4:	689b      	ldr	r3, [r3, #8]
 8008dc6:	f003 030c 	and.w	r3, r3, #12
 8008dca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008dcc:	4b56      	ldr	r3, [pc, #344]	; (8008f28 <HAL_RCC_OscConfig+0x27c>)
 8008dce:	68db      	ldr	r3, [r3, #12]
 8008dd0:	f003 0303 	and.w	r3, r3, #3
 8008dd4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008dd6:	69bb      	ldr	r3, [r7, #24]
 8008dd8:	2b0c      	cmp	r3, #12
 8008dda:	d102      	bne.n	8008de2 <HAL_RCC_OscConfig+0x136>
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	2b02      	cmp	r3, #2
 8008de0:	d002      	beq.n	8008de8 <HAL_RCC_OscConfig+0x13c>
 8008de2:	69bb      	ldr	r3, [r7, #24]
 8008de4:	2b04      	cmp	r3, #4
 8008de6:	d11f      	bne.n	8008e28 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008de8:	4b4f      	ldr	r3, [pc, #316]	; (8008f28 <HAL_RCC_OscConfig+0x27c>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d005      	beq.n	8008e00 <HAL_RCC_OscConfig+0x154>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	68db      	ldr	r3, [r3, #12]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d101      	bne.n	8008e00 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	e25d      	b.n	80092bc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e00:	4b49      	ldr	r3, [pc, #292]	; (8008f28 <HAL_RCC_OscConfig+0x27c>)
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	691b      	ldr	r3, [r3, #16]
 8008e0c:	061b      	lsls	r3, r3, #24
 8008e0e:	4946      	ldr	r1, [pc, #280]	; (8008f28 <HAL_RCC_OscConfig+0x27c>)
 8008e10:	4313      	orrs	r3, r2
 8008e12:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008e14:	4b45      	ldr	r3, [pc, #276]	; (8008f2c <HAL_RCC_OscConfig+0x280>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f7fd fb5b 	bl	80064d4 <HAL_InitTick>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d043      	beq.n	8008eac <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008e24:	2301      	movs	r3, #1
 8008e26:	e249      	b.n	80092bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d023      	beq.n	8008e78 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008e30:	4b3d      	ldr	r3, [pc, #244]	; (8008f28 <HAL_RCC_OscConfig+0x27c>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4a3c      	ldr	r2, [pc, #240]	; (8008f28 <HAL_RCC_OscConfig+0x27c>)
 8008e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e3c:	f7fd fb96 	bl	800656c <HAL_GetTick>
 8008e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008e42:	e008      	b.n	8008e56 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e44:	f7fd fb92 	bl	800656c <HAL_GetTick>
 8008e48:	4602      	mov	r2, r0
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	1ad3      	subs	r3, r2, r3
 8008e4e:	2b02      	cmp	r3, #2
 8008e50:	d901      	bls.n	8008e56 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008e52:	2303      	movs	r3, #3
 8008e54:	e232      	b.n	80092bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008e56:	4b34      	ldr	r3, [pc, #208]	; (8008f28 <HAL_RCC_OscConfig+0x27c>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d0f0      	beq.n	8008e44 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e62:	4b31      	ldr	r3, [pc, #196]	; (8008f28 <HAL_RCC_OscConfig+0x27c>)
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	691b      	ldr	r3, [r3, #16]
 8008e6e:	061b      	lsls	r3, r3, #24
 8008e70:	492d      	ldr	r1, [pc, #180]	; (8008f28 <HAL_RCC_OscConfig+0x27c>)
 8008e72:	4313      	orrs	r3, r2
 8008e74:	604b      	str	r3, [r1, #4]
 8008e76:	e01a      	b.n	8008eae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008e78:	4b2b      	ldr	r3, [pc, #172]	; (8008f28 <HAL_RCC_OscConfig+0x27c>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a2a      	ldr	r2, [pc, #168]	; (8008f28 <HAL_RCC_OscConfig+0x27c>)
 8008e7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e84:	f7fd fb72 	bl	800656c <HAL_GetTick>
 8008e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008e8a:	e008      	b.n	8008e9e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e8c:	f7fd fb6e 	bl	800656c <HAL_GetTick>
 8008e90:	4602      	mov	r2, r0
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	1ad3      	subs	r3, r2, r3
 8008e96:	2b02      	cmp	r3, #2
 8008e98:	d901      	bls.n	8008e9e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008e9a:	2303      	movs	r3, #3
 8008e9c:	e20e      	b.n	80092bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008e9e:	4b22      	ldr	r3, [pc, #136]	; (8008f28 <HAL_RCC_OscConfig+0x27c>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d1f0      	bne.n	8008e8c <HAL_RCC_OscConfig+0x1e0>
 8008eaa:	e000      	b.n	8008eae <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008eac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f003 0308 	and.w	r3, r3, #8
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d041      	beq.n	8008f3e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	695b      	ldr	r3, [r3, #20]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d01c      	beq.n	8008efc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008ec2:	4b19      	ldr	r3, [pc, #100]	; (8008f28 <HAL_RCC_OscConfig+0x27c>)
 8008ec4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ec8:	4a17      	ldr	r2, [pc, #92]	; (8008f28 <HAL_RCC_OscConfig+0x27c>)
 8008eca:	f043 0301 	orr.w	r3, r3, #1
 8008ece:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ed2:	f7fd fb4b 	bl	800656c <HAL_GetTick>
 8008ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008ed8:	e008      	b.n	8008eec <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008eda:	f7fd fb47 	bl	800656c <HAL_GetTick>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	1ad3      	subs	r3, r2, r3
 8008ee4:	2b02      	cmp	r3, #2
 8008ee6:	d901      	bls.n	8008eec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008ee8:	2303      	movs	r3, #3
 8008eea:	e1e7      	b.n	80092bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008eec:	4b0e      	ldr	r3, [pc, #56]	; (8008f28 <HAL_RCC_OscConfig+0x27c>)
 8008eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ef2:	f003 0302 	and.w	r3, r3, #2
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d0ef      	beq.n	8008eda <HAL_RCC_OscConfig+0x22e>
 8008efa:	e020      	b.n	8008f3e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008efc:	4b0a      	ldr	r3, [pc, #40]	; (8008f28 <HAL_RCC_OscConfig+0x27c>)
 8008efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f02:	4a09      	ldr	r2, [pc, #36]	; (8008f28 <HAL_RCC_OscConfig+0x27c>)
 8008f04:	f023 0301 	bic.w	r3, r3, #1
 8008f08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f0c:	f7fd fb2e 	bl	800656c <HAL_GetTick>
 8008f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008f12:	e00d      	b.n	8008f30 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008f14:	f7fd fb2a 	bl	800656c <HAL_GetTick>
 8008f18:	4602      	mov	r2, r0
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	1ad3      	subs	r3, r2, r3
 8008f1e:	2b02      	cmp	r3, #2
 8008f20:	d906      	bls.n	8008f30 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008f22:	2303      	movs	r3, #3
 8008f24:	e1ca      	b.n	80092bc <HAL_RCC_OscConfig+0x610>
 8008f26:	bf00      	nop
 8008f28:	40021000 	.word	0x40021000
 8008f2c:	20007870 	.word	0x20007870
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008f30:	4b8c      	ldr	r3, [pc, #560]	; (8009164 <HAL_RCC_OscConfig+0x4b8>)
 8008f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f36:	f003 0302 	and.w	r3, r3, #2
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d1ea      	bne.n	8008f14 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f003 0304 	and.w	r3, r3, #4
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	f000 80a6 	beq.w	8009098 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008f50:	4b84      	ldr	r3, [pc, #528]	; (8009164 <HAL_RCC_OscConfig+0x4b8>)
 8008f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d101      	bne.n	8008f60 <HAL_RCC_OscConfig+0x2b4>
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	e000      	b.n	8008f62 <HAL_RCC_OscConfig+0x2b6>
 8008f60:	2300      	movs	r3, #0
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d00d      	beq.n	8008f82 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008f66:	4b7f      	ldr	r3, [pc, #508]	; (8009164 <HAL_RCC_OscConfig+0x4b8>)
 8008f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f6a:	4a7e      	ldr	r2, [pc, #504]	; (8009164 <HAL_RCC_OscConfig+0x4b8>)
 8008f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f70:	6593      	str	r3, [r2, #88]	; 0x58
 8008f72:	4b7c      	ldr	r3, [pc, #496]	; (8009164 <HAL_RCC_OscConfig+0x4b8>)
 8008f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f7a:	60fb      	str	r3, [r7, #12]
 8008f7c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008f82:	4b79      	ldr	r3, [pc, #484]	; (8009168 <HAL_RCC_OscConfig+0x4bc>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d118      	bne.n	8008fc0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008f8e:	4b76      	ldr	r3, [pc, #472]	; (8009168 <HAL_RCC_OscConfig+0x4bc>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4a75      	ldr	r2, [pc, #468]	; (8009168 <HAL_RCC_OscConfig+0x4bc>)
 8008f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008f9a:	f7fd fae7 	bl	800656c <HAL_GetTick>
 8008f9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008fa0:	e008      	b.n	8008fb4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008fa2:	f7fd fae3 	bl	800656c <HAL_GetTick>
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	1ad3      	subs	r3, r2, r3
 8008fac:	2b02      	cmp	r3, #2
 8008fae:	d901      	bls.n	8008fb4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008fb0:	2303      	movs	r3, #3
 8008fb2:	e183      	b.n	80092bc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008fb4:	4b6c      	ldr	r3, [pc, #432]	; (8009168 <HAL_RCC_OscConfig+0x4bc>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d0f0      	beq.n	8008fa2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	689b      	ldr	r3, [r3, #8]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d108      	bne.n	8008fda <HAL_RCC_OscConfig+0x32e>
 8008fc8:	4b66      	ldr	r3, [pc, #408]	; (8009164 <HAL_RCC_OscConfig+0x4b8>)
 8008fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fce:	4a65      	ldr	r2, [pc, #404]	; (8009164 <HAL_RCC_OscConfig+0x4b8>)
 8008fd0:	f043 0301 	orr.w	r3, r3, #1
 8008fd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008fd8:	e024      	b.n	8009024 <HAL_RCC_OscConfig+0x378>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	2b05      	cmp	r3, #5
 8008fe0:	d110      	bne.n	8009004 <HAL_RCC_OscConfig+0x358>
 8008fe2:	4b60      	ldr	r3, [pc, #384]	; (8009164 <HAL_RCC_OscConfig+0x4b8>)
 8008fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fe8:	4a5e      	ldr	r2, [pc, #376]	; (8009164 <HAL_RCC_OscConfig+0x4b8>)
 8008fea:	f043 0304 	orr.w	r3, r3, #4
 8008fee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008ff2:	4b5c      	ldr	r3, [pc, #368]	; (8009164 <HAL_RCC_OscConfig+0x4b8>)
 8008ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ff8:	4a5a      	ldr	r2, [pc, #360]	; (8009164 <HAL_RCC_OscConfig+0x4b8>)
 8008ffa:	f043 0301 	orr.w	r3, r3, #1
 8008ffe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009002:	e00f      	b.n	8009024 <HAL_RCC_OscConfig+0x378>
 8009004:	4b57      	ldr	r3, [pc, #348]	; (8009164 <HAL_RCC_OscConfig+0x4b8>)
 8009006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800900a:	4a56      	ldr	r2, [pc, #344]	; (8009164 <HAL_RCC_OscConfig+0x4b8>)
 800900c:	f023 0301 	bic.w	r3, r3, #1
 8009010:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009014:	4b53      	ldr	r3, [pc, #332]	; (8009164 <HAL_RCC_OscConfig+0x4b8>)
 8009016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800901a:	4a52      	ldr	r2, [pc, #328]	; (8009164 <HAL_RCC_OscConfig+0x4b8>)
 800901c:	f023 0304 	bic.w	r3, r3, #4
 8009020:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d016      	beq.n	800905a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800902c:	f7fd fa9e 	bl	800656c <HAL_GetTick>
 8009030:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009032:	e00a      	b.n	800904a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009034:	f7fd fa9a 	bl	800656c <HAL_GetTick>
 8009038:	4602      	mov	r2, r0
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	1ad3      	subs	r3, r2, r3
 800903e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009042:	4293      	cmp	r3, r2
 8009044:	d901      	bls.n	800904a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8009046:	2303      	movs	r3, #3
 8009048:	e138      	b.n	80092bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800904a:	4b46      	ldr	r3, [pc, #280]	; (8009164 <HAL_RCC_OscConfig+0x4b8>)
 800904c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009050:	f003 0302 	and.w	r3, r3, #2
 8009054:	2b00      	cmp	r3, #0
 8009056:	d0ed      	beq.n	8009034 <HAL_RCC_OscConfig+0x388>
 8009058:	e015      	b.n	8009086 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800905a:	f7fd fa87 	bl	800656c <HAL_GetTick>
 800905e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009060:	e00a      	b.n	8009078 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009062:	f7fd fa83 	bl	800656c <HAL_GetTick>
 8009066:	4602      	mov	r2, r0
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	1ad3      	subs	r3, r2, r3
 800906c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009070:	4293      	cmp	r3, r2
 8009072:	d901      	bls.n	8009078 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8009074:	2303      	movs	r3, #3
 8009076:	e121      	b.n	80092bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009078:	4b3a      	ldr	r3, [pc, #232]	; (8009164 <HAL_RCC_OscConfig+0x4b8>)
 800907a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800907e:	f003 0302 	and.w	r3, r3, #2
 8009082:	2b00      	cmp	r3, #0
 8009084:	d1ed      	bne.n	8009062 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009086:	7ffb      	ldrb	r3, [r7, #31]
 8009088:	2b01      	cmp	r3, #1
 800908a:	d105      	bne.n	8009098 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800908c:	4b35      	ldr	r3, [pc, #212]	; (8009164 <HAL_RCC_OscConfig+0x4b8>)
 800908e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009090:	4a34      	ldr	r2, [pc, #208]	; (8009164 <HAL_RCC_OscConfig+0x4b8>)
 8009092:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009096:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f003 0320 	and.w	r3, r3, #32
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d03c      	beq.n	800911e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	699b      	ldr	r3, [r3, #24]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d01c      	beq.n	80090e6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80090ac:	4b2d      	ldr	r3, [pc, #180]	; (8009164 <HAL_RCC_OscConfig+0x4b8>)
 80090ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80090b2:	4a2c      	ldr	r2, [pc, #176]	; (8009164 <HAL_RCC_OscConfig+0x4b8>)
 80090b4:	f043 0301 	orr.w	r3, r3, #1
 80090b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090bc:	f7fd fa56 	bl	800656c <HAL_GetTick>
 80090c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80090c2:	e008      	b.n	80090d6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80090c4:	f7fd fa52 	bl	800656c <HAL_GetTick>
 80090c8:	4602      	mov	r2, r0
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	1ad3      	subs	r3, r2, r3
 80090ce:	2b02      	cmp	r3, #2
 80090d0:	d901      	bls.n	80090d6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80090d2:	2303      	movs	r3, #3
 80090d4:	e0f2      	b.n	80092bc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80090d6:	4b23      	ldr	r3, [pc, #140]	; (8009164 <HAL_RCC_OscConfig+0x4b8>)
 80090d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80090dc:	f003 0302 	and.w	r3, r3, #2
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d0ef      	beq.n	80090c4 <HAL_RCC_OscConfig+0x418>
 80090e4:	e01b      	b.n	800911e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80090e6:	4b1f      	ldr	r3, [pc, #124]	; (8009164 <HAL_RCC_OscConfig+0x4b8>)
 80090e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80090ec:	4a1d      	ldr	r2, [pc, #116]	; (8009164 <HAL_RCC_OscConfig+0x4b8>)
 80090ee:	f023 0301 	bic.w	r3, r3, #1
 80090f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090f6:	f7fd fa39 	bl	800656c <HAL_GetTick>
 80090fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80090fc:	e008      	b.n	8009110 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80090fe:	f7fd fa35 	bl	800656c <HAL_GetTick>
 8009102:	4602      	mov	r2, r0
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	1ad3      	subs	r3, r2, r3
 8009108:	2b02      	cmp	r3, #2
 800910a:	d901      	bls.n	8009110 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800910c:	2303      	movs	r3, #3
 800910e:	e0d5      	b.n	80092bc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009110:	4b14      	ldr	r3, [pc, #80]	; (8009164 <HAL_RCC_OscConfig+0x4b8>)
 8009112:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009116:	f003 0302 	and.w	r3, r3, #2
 800911a:	2b00      	cmp	r3, #0
 800911c:	d1ef      	bne.n	80090fe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	69db      	ldr	r3, [r3, #28]
 8009122:	2b00      	cmp	r3, #0
 8009124:	f000 80c9 	beq.w	80092ba <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009128:	4b0e      	ldr	r3, [pc, #56]	; (8009164 <HAL_RCC_OscConfig+0x4b8>)
 800912a:	689b      	ldr	r3, [r3, #8]
 800912c:	f003 030c 	and.w	r3, r3, #12
 8009130:	2b0c      	cmp	r3, #12
 8009132:	f000 8083 	beq.w	800923c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	69db      	ldr	r3, [r3, #28]
 800913a:	2b02      	cmp	r3, #2
 800913c:	d15e      	bne.n	80091fc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800913e:	4b09      	ldr	r3, [pc, #36]	; (8009164 <HAL_RCC_OscConfig+0x4b8>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4a08      	ldr	r2, [pc, #32]	; (8009164 <HAL_RCC_OscConfig+0x4b8>)
 8009144:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009148:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800914a:	f7fd fa0f 	bl	800656c <HAL_GetTick>
 800914e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009150:	e00c      	b.n	800916c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009152:	f7fd fa0b 	bl	800656c <HAL_GetTick>
 8009156:	4602      	mov	r2, r0
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	1ad3      	subs	r3, r2, r3
 800915c:	2b02      	cmp	r3, #2
 800915e:	d905      	bls.n	800916c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8009160:	2303      	movs	r3, #3
 8009162:	e0ab      	b.n	80092bc <HAL_RCC_OscConfig+0x610>
 8009164:	40021000 	.word	0x40021000
 8009168:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800916c:	4b55      	ldr	r3, [pc, #340]	; (80092c4 <HAL_RCC_OscConfig+0x618>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009174:	2b00      	cmp	r3, #0
 8009176:	d1ec      	bne.n	8009152 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009178:	4b52      	ldr	r3, [pc, #328]	; (80092c4 <HAL_RCC_OscConfig+0x618>)
 800917a:	68da      	ldr	r2, [r3, #12]
 800917c:	4b52      	ldr	r3, [pc, #328]	; (80092c8 <HAL_RCC_OscConfig+0x61c>)
 800917e:	4013      	ands	r3, r2
 8009180:	687a      	ldr	r2, [r7, #4]
 8009182:	6a11      	ldr	r1, [r2, #32]
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009188:	3a01      	subs	r2, #1
 800918a:	0112      	lsls	r2, r2, #4
 800918c:	4311      	orrs	r1, r2
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009192:	0212      	lsls	r2, r2, #8
 8009194:	4311      	orrs	r1, r2
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800919a:	0852      	lsrs	r2, r2, #1
 800919c:	3a01      	subs	r2, #1
 800919e:	0552      	lsls	r2, r2, #21
 80091a0:	4311      	orrs	r1, r2
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80091a6:	0852      	lsrs	r2, r2, #1
 80091a8:	3a01      	subs	r2, #1
 80091aa:	0652      	lsls	r2, r2, #25
 80091ac:	4311      	orrs	r1, r2
 80091ae:	687a      	ldr	r2, [r7, #4]
 80091b0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80091b2:	06d2      	lsls	r2, r2, #27
 80091b4:	430a      	orrs	r2, r1
 80091b6:	4943      	ldr	r1, [pc, #268]	; (80092c4 <HAL_RCC_OscConfig+0x618>)
 80091b8:	4313      	orrs	r3, r2
 80091ba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80091bc:	4b41      	ldr	r3, [pc, #260]	; (80092c4 <HAL_RCC_OscConfig+0x618>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a40      	ldr	r2, [pc, #256]	; (80092c4 <HAL_RCC_OscConfig+0x618>)
 80091c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80091c6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80091c8:	4b3e      	ldr	r3, [pc, #248]	; (80092c4 <HAL_RCC_OscConfig+0x618>)
 80091ca:	68db      	ldr	r3, [r3, #12]
 80091cc:	4a3d      	ldr	r2, [pc, #244]	; (80092c4 <HAL_RCC_OscConfig+0x618>)
 80091ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80091d2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091d4:	f7fd f9ca 	bl	800656c <HAL_GetTick>
 80091d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80091da:	e008      	b.n	80091ee <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80091dc:	f7fd f9c6 	bl	800656c <HAL_GetTick>
 80091e0:	4602      	mov	r2, r0
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	1ad3      	subs	r3, r2, r3
 80091e6:	2b02      	cmp	r3, #2
 80091e8:	d901      	bls.n	80091ee <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80091ea:	2303      	movs	r3, #3
 80091ec:	e066      	b.n	80092bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80091ee:	4b35      	ldr	r3, [pc, #212]	; (80092c4 <HAL_RCC_OscConfig+0x618>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d0f0      	beq.n	80091dc <HAL_RCC_OscConfig+0x530>
 80091fa:	e05e      	b.n	80092ba <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80091fc:	4b31      	ldr	r3, [pc, #196]	; (80092c4 <HAL_RCC_OscConfig+0x618>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a30      	ldr	r2, [pc, #192]	; (80092c4 <HAL_RCC_OscConfig+0x618>)
 8009202:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009206:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009208:	f7fd f9b0 	bl	800656c <HAL_GetTick>
 800920c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800920e:	e008      	b.n	8009222 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009210:	f7fd f9ac 	bl	800656c <HAL_GetTick>
 8009214:	4602      	mov	r2, r0
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	1ad3      	subs	r3, r2, r3
 800921a:	2b02      	cmp	r3, #2
 800921c:	d901      	bls.n	8009222 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800921e:	2303      	movs	r3, #3
 8009220:	e04c      	b.n	80092bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009222:	4b28      	ldr	r3, [pc, #160]	; (80092c4 <HAL_RCC_OscConfig+0x618>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800922a:	2b00      	cmp	r3, #0
 800922c:	d1f0      	bne.n	8009210 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800922e:	4b25      	ldr	r3, [pc, #148]	; (80092c4 <HAL_RCC_OscConfig+0x618>)
 8009230:	68da      	ldr	r2, [r3, #12]
 8009232:	4924      	ldr	r1, [pc, #144]	; (80092c4 <HAL_RCC_OscConfig+0x618>)
 8009234:	4b25      	ldr	r3, [pc, #148]	; (80092cc <HAL_RCC_OscConfig+0x620>)
 8009236:	4013      	ands	r3, r2
 8009238:	60cb      	str	r3, [r1, #12]
 800923a:	e03e      	b.n	80092ba <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	69db      	ldr	r3, [r3, #28]
 8009240:	2b01      	cmp	r3, #1
 8009242:	d101      	bne.n	8009248 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8009244:	2301      	movs	r3, #1
 8009246:	e039      	b.n	80092bc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8009248:	4b1e      	ldr	r3, [pc, #120]	; (80092c4 <HAL_RCC_OscConfig+0x618>)
 800924a:	68db      	ldr	r3, [r3, #12]
 800924c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	f003 0203 	and.w	r2, r3, #3
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6a1b      	ldr	r3, [r3, #32]
 8009258:	429a      	cmp	r2, r3
 800925a:	d12c      	bne.n	80092b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009266:	3b01      	subs	r3, #1
 8009268:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800926a:	429a      	cmp	r2, r3
 800926c:	d123      	bne.n	80092b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009278:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800927a:	429a      	cmp	r2, r3
 800927c:	d11b      	bne.n	80092b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009288:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800928a:	429a      	cmp	r2, r3
 800928c:	d113      	bne.n	80092b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009298:	085b      	lsrs	r3, r3, #1
 800929a:	3b01      	subs	r3, #1
 800929c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800929e:	429a      	cmp	r2, r3
 80092a0:	d109      	bne.n	80092b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ac:	085b      	lsrs	r3, r3, #1
 80092ae:	3b01      	subs	r3, #1
 80092b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80092b2:	429a      	cmp	r2, r3
 80092b4:	d001      	beq.n	80092ba <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80092b6:	2301      	movs	r3, #1
 80092b8:	e000      	b.n	80092bc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80092ba:	2300      	movs	r3, #0
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3720      	adds	r7, #32
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}
 80092c4:	40021000 	.word	0x40021000
 80092c8:	019f800c 	.word	0x019f800c
 80092cc:	feeefffc 	.word	0xfeeefffc

080092d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b086      	sub	sp, #24
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80092da:	2300      	movs	r3, #0
 80092dc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d101      	bne.n	80092e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80092e4:	2301      	movs	r3, #1
 80092e6:	e11e      	b.n	8009526 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80092e8:	4b91      	ldr	r3, [pc, #580]	; (8009530 <HAL_RCC_ClockConfig+0x260>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f003 030f 	and.w	r3, r3, #15
 80092f0:	683a      	ldr	r2, [r7, #0]
 80092f2:	429a      	cmp	r2, r3
 80092f4:	d910      	bls.n	8009318 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80092f6:	4b8e      	ldr	r3, [pc, #568]	; (8009530 <HAL_RCC_ClockConfig+0x260>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f023 020f 	bic.w	r2, r3, #15
 80092fe:	498c      	ldr	r1, [pc, #560]	; (8009530 <HAL_RCC_ClockConfig+0x260>)
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	4313      	orrs	r3, r2
 8009304:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009306:	4b8a      	ldr	r3, [pc, #552]	; (8009530 <HAL_RCC_ClockConfig+0x260>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f003 030f 	and.w	r3, r3, #15
 800930e:	683a      	ldr	r2, [r7, #0]
 8009310:	429a      	cmp	r2, r3
 8009312:	d001      	beq.n	8009318 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009314:	2301      	movs	r3, #1
 8009316:	e106      	b.n	8009526 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f003 0301 	and.w	r3, r3, #1
 8009320:	2b00      	cmp	r3, #0
 8009322:	d073      	beq.n	800940c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	2b03      	cmp	r3, #3
 800932a:	d129      	bne.n	8009380 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800932c:	4b81      	ldr	r3, [pc, #516]	; (8009534 <HAL_RCC_ClockConfig+0x264>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009334:	2b00      	cmp	r3, #0
 8009336:	d101      	bne.n	800933c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8009338:	2301      	movs	r3, #1
 800933a:	e0f4      	b.n	8009526 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800933c:	f000 f970 	bl	8009620 <RCC_GetSysClockFreqFromPLLSource>
 8009340:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	4a7c      	ldr	r2, [pc, #496]	; (8009538 <HAL_RCC_ClockConfig+0x268>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d93f      	bls.n	80093ca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800934a:	4b7a      	ldr	r3, [pc, #488]	; (8009534 <HAL_RCC_ClockConfig+0x264>)
 800934c:	689b      	ldr	r3, [r3, #8]
 800934e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009352:	2b00      	cmp	r3, #0
 8009354:	d009      	beq.n	800936a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800935e:	2b00      	cmp	r3, #0
 8009360:	d033      	beq.n	80093ca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009366:	2b00      	cmp	r3, #0
 8009368:	d12f      	bne.n	80093ca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800936a:	4b72      	ldr	r3, [pc, #456]	; (8009534 <HAL_RCC_ClockConfig+0x264>)
 800936c:	689b      	ldr	r3, [r3, #8]
 800936e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009372:	4a70      	ldr	r2, [pc, #448]	; (8009534 <HAL_RCC_ClockConfig+0x264>)
 8009374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009378:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800937a:	2380      	movs	r3, #128	; 0x80
 800937c:	617b      	str	r3, [r7, #20]
 800937e:	e024      	b.n	80093ca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	2b02      	cmp	r3, #2
 8009386:	d107      	bne.n	8009398 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009388:	4b6a      	ldr	r3, [pc, #424]	; (8009534 <HAL_RCC_ClockConfig+0x264>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009390:	2b00      	cmp	r3, #0
 8009392:	d109      	bne.n	80093a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009394:	2301      	movs	r3, #1
 8009396:	e0c6      	b.n	8009526 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009398:	4b66      	ldr	r3, [pc, #408]	; (8009534 <HAL_RCC_ClockConfig+0x264>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d101      	bne.n	80093a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80093a4:	2301      	movs	r3, #1
 80093a6:	e0be      	b.n	8009526 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80093a8:	f000 f8ce 	bl	8009548 <HAL_RCC_GetSysClockFreq>
 80093ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	4a61      	ldr	r2, [pc, #388]	; (8009538 <HAL_RCC_ClockConfig+0x268>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d909      	bls.n	80093ca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80093b6:	4b5f      	ldr	r3, [pc, #380]	; (8009534 <HAL_RCC_ClockConfig+0x264>)
 80093b8:	689b      	ldr	r3, [r3, #8]
 80093ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80093be:	4a5d      	ldr	r2, [pc, #372]	; (8009534 <HAL_RCC_ClockConfig+0x264>)
 80093c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093c4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80093c6:	2380      	movs	r3, #128	; 0x80
 80093c8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80093ca:	4b5a      	ldr	r3, [pc, #360]	; (8009534 <HAL_RCC_ClockConfig+0x264>)
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	f023 0203 	bic.w	r2, r3, #3
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	4957      	ldr	r1, [pc, #348]	; (8009534 <HAL_RCC_ClockConfig+0x264>)
 80093d8:	4313      	orrs	r3, r2
 80093da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093dc:	f7fd f8c6 	bl	800656c <HAL_GetTick>
 80093e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80093e2:	e00a      	b.n	80093fa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80093e4:	f7fd f8c2 	bl	800656c <HAL_GetTick>
 80093e8:	4602      	mov	r2, r0
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	1ad3      	subs	r3, r2, r3
 80093ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d901      	bls.n	80093fa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80093f6:	2303      	movs	r3, #3
 80093f8:	e095      	b.n	8009526 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80093fa:	4b4e      	ldr	r3, [pc, #312]	; (8009534 <HAL_RCC_ClockConfig+0x264>)
 80093fc:	689b      	ldr	r3, [r3, #8]
 80093fe:	f003 020c 	and.w	r2, r3, #12
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	009b      	lsls	r3, r3, #2
 8009408:	429a      	cmp	r2, r3
 800940a:	d1eb      	bne.n	80093e4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f003 0302 	and.w	r3, r3, #2
 8009414:	2b00      	cmp	r3, #0
 8009416:	d023      	beq.n	8009460 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f003 0304 	and.w	r3, r3, #4
 8009420:	2b00      	cmp	r3, #0
 8009422:	d005      	beq.n	8009430 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009424:	4b43      	ldr	r3, [pc, #268]	; (8009534 <HAL_RCC_ClockConfig+0x264>)
 8009426:	689b      	ldr	r3, [r3, #8]
 8009428:	4a42      	ldr	r2, [pc, #264]	; (8009534 <HAL_RCC_ClockConfig+0x264>)
 800942a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800942e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f003 0308 	and.w	r3, r3, #8
 8009438:	2b00      	cmp	r3, #0
 800943a:	d007      	beq.n	800944c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800943c:	4b3d      	ldr	r3, [pc, #244]	; (8009534 <HAL_RCC_ClockConfig+0x264>)
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009444:	4a3b      	ldr	r2, [pc, #236]	; (8009534 <HAL_RCC_ClockConfig+0x264>)
 8009446:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800944a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800944c:	4b39      	ldr	r3, [pc, #228]	; (8009534 <HAL_RCC_ClockConfig+0x264>)
 800944e:	689b      	ldr	r3, [r3, #8]
 8009450:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	689b      	ldr	r3, [r3, #8]
 8009458:	4936      	ldr	r1, [pc, #216]	; (8009534 <HAL_RCC_ClockConfig+0x264>)
 800945a:	4313      	orrs	r3, r2
 800945c:	608b      	str	r3, [r1, #8]
 800945e:	e008      	b.n	8009472 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	2b80      	cmp	r3, #128	; 0x80
 8009464:	d105      	bne.n	8009472 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009466:	4b33      	ldr	r3, [pc, #204]	; (8009534 <HAL_RCC_ClockConfig+0x264>)
 8009468:	689b      	ldr	r3, [r3, #8]
 800946a:	4a32      	ldr	r2, [pc, #200]	; (8009534 <HAL_RCC_ClockConfig+0x264>)
 800946c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009470:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009472:	4b2f      	ldr	r3, [pc, #188]	; (8009530 <HAL_RCC_ClockConfig+0x260>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f003 030f 	and.w	r3, r3, #15
 800947a:	683a      	ldr	r2, [r7, #0]
 800947c:	429a      	cmp	r2, r3
 800947e:	d21d      	bcs.n	80094bc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009480:	4b2b      	ldr	r3, [pc, #172]	; (8009530 <HAL_RCC_ClockConfig+0x260>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f023 020f 	bic.w	r2, r3, #15
 8009488:	4929      	ldr	r1, [pc, #164]	; (8009530 <HAL_RCC_ClockConfig+0x260>)
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	4313      	orrs	r3, r2
 800948e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009490:	f7fd f86c 	bl	800656c <HAL_GetTick>
 8009494:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009496:	e00a      	b.n	80094ae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009498:	f7fd f868 	bl	800656c <HAL_GetTick>
 800949c:	4602      	mov	r2, r0
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	1ad3      	subs	r3, r2, r3
 80094a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d901      	bls.n	80094ae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80094aa:	2303      	movs	r3, #3
 80094ac:	e03b      	b.n	8009526 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80094ae:	4b20      	ldr	r3, [pc, #128]	; (8009530 <HAL_RCC_ClockConfig+0x260>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f003 030f 	and.w	r3, r3, #15
 80094b6:	683a      	ldr	r2, [r7, #0]
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d1ed      	bne.n	8009498 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f003 0304 	and.w	r3, r3, #4
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d008      	beq.n	80094da <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80094c8:	4b1a      	ldr	r3, [pc, #104]	; (8009534 <HAL_RCC_ClockConfig+0x264>)
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	68db      	ldr	r3, [r3, #12]
 80094d4:	4917      	ldr	r1, [pc, #92]	; (8009534 <HAL_RCC_ClockConfig+0x264>)
 80094d6:	4313      	orrs	r3, r2
 80094d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f003 0308 	and.w	r3, r3, #8
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d009      	beq.n	80094fa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80094e6:	4b13      	ldr	r3, [pc, #76]	; (8009534 <HAL_RCC_ClockConfig+0x264>)
 80094e8:	689b      	ldr	r3, [r3, #8]
 80094ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	691b      	ldr	r3, [r3, #16]
 80094f2:	00db      	lsls	r3, r3, #3
 80094f4:	490f      	ldr	r1, [pc, #60]	; (8009534 <HAL_RCC_ClockConfig+0x264>)
 80094f6:	4313      	orrs	r3, r2
 80094f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80094fa:	f000 f825 	bl	8009548 <HAL_RCC_GetSysClockFreq>
 80094fe:	4602      	mov	r2, r0
 8009500:	4b0c      	ldr	r3, [pc, #48]	; (8009534 <HAL_RCC_ClockConfig+0x264>)
 8009502:	689b      	ldr	r3, [r3, #8]
 8009504:	091b      	lsrs	r3, r3, #4
 8009506:	f003 030f 	and.w	r3, r3, #15
 800950a:	490c      	ldr	r1, [pc, #48]	; (800953c <HAL_RCC_ClockConfig+0x26c>)
 800950c:	5ccb      	ldrb	r3, [r1, r3]
 800950e:	f003 031f 	and.w	r3, r3, #31
 8009512:	fa22 f303 	lsr.w	r3, r2, r3
 8009516:	4a0a      	ldr	r2, [pc, #40]	; (8009540 <HAL_RCC_ClockConfig+0x270>)
 8009518:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800951a:	4b0a      	ldr	r3, [pc, #40]	; (8009544 <HAL_RCC_ClockConfig+0x274>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4618      	mov	r0, r3
 8009520:	f7fc ffd8 	bl	80064d4 <HAL_InitTick>
 8009524:	4603      	mov	r3, r0
}
 8009526:	4618      	mov	r0, r3
 8009528:	3718      	adds	r7, #24
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	40022000 	.word	0x40022000
 8009534:	40021000 	.word	0x40021000
 8009538:	04c4b400 	.word	0x04c4b400
 800953c:	0800ccb0 	.word	0x0800ccb0
 8009540:	2000786c 	.word	0x2000786c
 8009544:	20007870 	.word	0x20007870

08009548 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009548:	b480      	push	{r7}
 800954a:	b087      	sub	sp, #28
 800954c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800954e:	4b2c      	ldr	r3, [pc, #176]	; (8009600 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009550:	689b      	ldr	r3, [r3, #8]
 8009552:	f003 030c 	and.w	r3, r3, #12
 8009556:	2b04      	cmp	r3, #4
 8009558:	d102      	bne.n	8009560 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800955a:	4b2a      	ldr	r3, [pc, #168]	; (8009604 <HAL_RCC_GetSysClockFreq+0xbc>)
 800955c:	613b      	str	r3, [r7, #16]
 800955e:	e047      	b.n	80095f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009560:	4b27      	ldr	r3, [pc, #156]	; (8009600 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009562:	689b      	ldr	r3, [r3, #8]
 8009564:	f003 030c 	and.w	r3, r3, #12
 8009568:	2b08      	cmp	r3, #8
 800956a:	d102      	bne.n	8009572 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800956c:	4b25      	ldr	r3, [pc, #148]	; (8009604 <HAL_RCC_GetSysClockFreq+0xbc>)
 800956e:	613b      	str	r3, [r7, #16]
 8009570:	e03e      	b.n	80095f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8009572:	4b23      	ldr	r3, [pc, #140]	; (8009600 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009574:	689b      	ldr	r3, [r3, #8]
 8009576:	f003 030c 	and.w	r3, r3, #12
 800957a:	2b0c      	cmp	r3, #12
 800957c:	d136      	bne.n	80095ec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800957e:	4b20      	ldr	r3, [pc, #128]	; (8009600 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	f003 0303 	and.w	r3, r3, #3
 8009586:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009588:	4b1d      	ldr	r3, [pc, #116]	; (8009600 <HAL_RCC_GetSysClockFreq+0xb8>)
 800958a:	68db      	ldr	r3, [r3, #12]
 800958c:	091b      	lsrs	r3, r3, #4
 800958e:	f003 030f 	and.w	r3, r3, #15
 8009592:	3301      	adds	r3, #1
 8009594:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2b03      	cmp	r3, #3
 800959a:	d10c      	bne.n	80095b6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800959c:	4a19      	ldr	r2, [pc, #100]	; (8009604 <HAL_RCC_GetSysClockFreq+0xbc>)
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80095a4:	4a16      	ldr	r2, [pc, #88]	; (8009600 <HAL_RCC_GetSysClockFreq+0xb8>)
 80095a6:	68d2      	ldr	r2, [r2, #12]
 80095a8:	0a12      	lsrs	r2, r2, #8
 80095aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80095ae:	fb02 f303 	mul.w	r3, r2, r3
 80095b2:	617b      	str	r3, [r7, #20]
      break;
 80095b4:	e00c      	b.n	80095d0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80095b6:	4a13      	ldr	r2, [pc, #76]	; (8009604 <HAL_RCC_GetSysClockFreq+0xbc>)
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80095be:	4a10      	ldr	r2, [pc, #64]	; (8009600 <HAL_RCC_GetSysClockFreq+0xb8>)
 80095c0:	68d2      	ldr	r2, [r2, #12]
 80095c2:	0a12      	lsrs	r2, r2, #8
 80095c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80095c8:	fb02 f303 	mul.w	r3, r2, r3
 80095cc:	617b      	str	r3, [r7, #20]
      break;
 80095ce:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80095d0:	4b0b      	ldr	r3, [pc, #44]	; (8009600 <HAL_RCC_GetSysClockFreq+0xb8>)
 80095d2:	68db      	ldr	r3, [r3, #12]
 80095d4:	0e5b      	lsrs	r3, r3, #25
 80095d6:	f003 0303 	and.w	r3, r3, #3
 80095da:	3301      	adds	r3, #1
 80095dc:	005b      	lsls	r3, r3, #1
 80095de:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80095e0:	697a      	ldr	r2, [r7, #20]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80095e8:	613b      	str	r3, [r7, #16]
 80095ea:	e001      	b.n	80095f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80095ec:	2300      	movs	r3, #0
 80095ee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80095f0:	693b      	ldr	r3, [r7, #16]
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	371c      	adds	r7, #28
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr
 80095fe:	bf00      	nop
 8009600:	40021000 	.word	0x40021000
 8009604:	00f42400 	.word	0x00f42400

08009608 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009608:	b480      	push	{r7}
 800960a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800960c:	4b03      	ldr	r3, [pc, #12]	; (800961c <HAL_RCC_GetHCLKFreq+0x14>)
 800960e:	681b      	ldr	r3, [r3, #0]
}
 8009610:	4618      	mov	r0, r3
 8009612:	46bd      	mov	sp, r7
 8009614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009618:	4770      	bx	lr
 800961a:	bf00      	nop
 800961c:	2000786c 	.word	0x2000786c

08009620 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009620:	b480      	push	{r7}
 8009622:	b087      	sub	sp, #28
 8009624:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009626:	4b1e      	ldr	r3, [pc, #120]	; (80096a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009628:	68db      	ldr	r3, [r3, #12]
 800962a:	f003 0303 	and.w	r3, r3, #3
 800962e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009630:	4b1b      	ldr	r3, [pc, #108]	; (80096a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009632:	68db      	ldr	r3, [r3, #12]
 8009634:	091b      	lsrs	r3, r3, #4
 8009636:	f003 030f 	and.w	r3, r3, #15
 800963a:	3301      	adds	r3, #1
 800963c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	2b03      	cmp	r3, #3
 8009642:	d10c      	bne.n	800965e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009644:	4a17      	ldr	r2, [pc, #92]	; (80096a4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	fbb2 f3f3 	udiv	r3, r2, r3
 800964c:	4a14      	ldr	r2, [pc, #80]	; (80096a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800964e:	68d2      	ldr	r2, [r2, #12]
 8009650:	0a12      	lsrs	r2, r2, #8
 8009652:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009656:	fb02 f303 	mul.w	r3, r2, r3
 800965a:	617b      	str	r3, [r7, #20]
    break;
 800965c:	e00c      	b.n	8009678 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800965e:	4a11      	ldr	r2, [pc, #68]	; (80096a4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	fbb2 f3f3 	udiv	r3, r2, r3
 8009666:	4a0e      	ldr	r2, [pc, #56]	; (80096a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009668:	68d2      	ldr	r2, [r2, #12]
 800966a:	0a12      	lsrs	r2, r2, #8
 800966c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009670:	fb02 f303 	mul.w	r3, r2, r3
 8009674:	617b      	str	r3, [r7, #20]
    break;
 8009676:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009678:	4b09      	ldr	r3, [pc, #36]	; (80096a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800967a:	68db      	ldr	r3, [r3, #12]
 800967c:	0e5b      	lsrs	r3, r3, #25
 800967e:	f003 0303 	and.w	r3, r3, #3
 8009682:	3301      	adds	r3, #1
 8009684:	005b      	lsls	r3, r3, #1
 8009686:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009688:	697a      	ldr	r2, [r7, #20]
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009690:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8009692:	687b      	ldr	r3, [r7, #4]
}
 8009694:	4618      	mov	r0, r3
 8009696:	371c      	adds	r7, #28
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr
 80096a0:	40021000 	.word	0x40021000
 80096a4:	00f42400 	.word	0x00f42400

080096a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b086      	sub	sp, #24
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80096b0:	2300      	movs	r3, #0
 80096b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80096b4:	2300      	movs	r3, #0
 80096b6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	f000 8098 	beq.w	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80096c6:	2300      	movs	r3, #0
 80096c8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80096ca:	4b43      	ldr	r3, [pc, #268]	; (80097d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80096cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d10d      	bne.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80096d6:	4b40      	ldr	r3, [pc, #256]	; (80097d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80096d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096da:	4a3f      	ldr	r2, [pc, #252]	; (80097d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80096dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096e0:	6593      	str	r3, [r2, #88]	; 0x58
 80096e2:	4b3d      	ldr	r3, [pc, #244]	; (80097d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80096e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80096ea:	60bb      	str	r3, [r7, #8]
 80096ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80096ee:	2301      	movs	r3, #1
 80096f0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80096f2:	4b3a      	ldr	r3, [pc, #232]	; (80097dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4a39      	ldr	r2, [pc, #228]	; (80097dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80096f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80096fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80096fe:	f7fc ff35 	bl	800656c <HAL_GetTick>
 8009702:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009704:	e009      	b.n	800971a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009706:	f7fc ff31 	bl	800656c <HAL_GetTick>
 800970a:	4602      	mov	r2, r0
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	1ad3      	subs	r3, r2, r3
 8009710:	2b02      	cmp	r3, #2
 8009712:	d902      	bls.n	800971a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009714:	2303      	movs	r3, #3
 8009716:	74fb      	strb	r3, [r7, #19]
        break;
 8009718:	e005      	b.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800971a:	4b30      	ldr	r3, [pc, #192]	; (80097dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009722:	2b00      	cmp	r3, #0
 8009724:	d0ef      	beq.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8009726:	7cfb      	ldrb	r3, [r7, #19]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d159      	bne.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800972c:	4b2a      	ldr	r3, [pc, #168]	; (80097d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800972e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009736:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d01e      	beq.n	800977c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009742:	697a      	ldr	r2, [r7, #20]
 8009744:	429a      	cmp	r2, r3
 8009746:	d019      	beq.n	800977c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009748:	4b23      	ldr	r3, [pc, #140]	; (80097d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800974a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800974e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009752:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009754:	4b20      	ldr	r3, [pc, #128]	; (80097d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800975a:	4a1f      	ldr	r2, [pc, #124]	; (80097d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800975c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009760:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009764:	4b1c      	ldr	r3, [pc, #112]	; (80097d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800976a:	4a1b      	ldr	r2, [pc, #108]	; (80097d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800976c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009770:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009774:	4a18      	ldr	r2, [pc, #96]	; (80097d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	f003 0301 	and.w	r3, r3, #1
 8009782:	2b00      	cmp	r3, #0
 8009784:	d016      	beq.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009786:	f7fc fef1 	bl	800656c <HAL_GetTick>
 800978a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800978c:	e00b      	b.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800978e:	f7fc feed 	bl	800656c <HAL_GetTick>
 8009792:	4602      	mov	r2, r0
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	1ad3      	subs	r3, r2, r3
 8009798:	f241 3288 	movw	r2, #5000	; 0x1388
 800979c:	4293      	cmp	r3, r2
 800979e:	d902      	bls.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80097a0:	2303      	movs	r3, #3
 80097a2:	74fb      	strb	r3, [r7, #19]
            break;
 80097a4:	e006      	b.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80097a6:	4b0c      	ldr	r3, [pc, #48]	; (80097d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80097a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097ac:	f003 0302 	and.w	r3, r3, #2
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d0ec      	beq.n	800978e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80097b4:	7cfb      	ldrb	r3, [r7, #19]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d10b      	bne.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80097ba:	4b07      	ldr	r3, [pc, #28]	; (80097d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80097bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097c8:	4903      	ldr	r1, [pc, #12]	; (80097d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80097ca:	4313      	orrs	r3, r2
 80097cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80097d0:	e008      	b.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80097d2:	7cfb      	ldrb	r3, [r7, #19]
 80097d4:	74bb      	strb	r3, [r7, #18]
 80097d6:	e005      	b.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80097d8:	40021000 	.word	0x40021000
 80097dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097e0:	7cfb      	ldrb	r3, [r7, #19]
 80097e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80097e4:	7c7b      	ldrb	r3, [r7, #17]
 80097e6:	2b01      	cmp	r3, #1
 80097e8:	d105      	bne.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80097ea:	4ba7      	ldr	r3, [pc, #668]	; (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097ee:	4aa6      	ldr	r2, [pc, #664]	; (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80097f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f003 0301 	and.w	r3, r3, #1
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d00a      	beq.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009802:	4ba1      	ldr	r3, [pc, #644]	; (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009808:	f023 0203 	bic.w	r2, r3, #3
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	499d      	ldr	r1, [pc, #628]	; (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009812:	4313      	orrs	r3, r2
 8009814:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f003 0302 	and.w	r3, r3, #2
 8009820:	2b00      	cmp	r3, #0
 8009822:	d00a      	beq.n	800983a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009824:	4b98      	ldr	r3, [pc, #608]	; (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800982a:	f023 020c 	bic.w	r2, r3, #12
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	689b      	ldr	r3, [r3, #8]
 8009832:	4995      	ldr	r1, [pc, #596]	; (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009834:	4313      	orrs	r3, r2
 8009836:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f003 0304 	and.w	r3, r3, #4
 8009842:	2b00      	cmp	r3, #0
 8009844:	d00a      	beq.n	800985c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009846:	4b90      	ldr	r3, [pc, #576]	; (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800984c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	68db      	ldr	r3, [r3, #12]
 8009854:	498c      	ldr	r1, [pc, #560]	; (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009856:	4313      	orrs	r3, r2
 8009858:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f003 0308 	and.w	r3, r3, #8
 8009864:	2b00      	cmp	r3, #0
 8009866:	d00a      	beq.n	800987e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009868:	4b87      	ldr	r3, [pc, #540]	; (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800986a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800986e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	691b      	ldr	r3, [r3, #16]
 8009876:	4984      	ldr	r1, [pc, #528]	; (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009878:	4313      	orrs	r3, r2
 800987a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f003 0310 	and.w	r3, r3, #16
 8009886:	2b00      	cmp	r3, #0
 8009888:	d00a      	beq.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800988a:	4b7f      	ldr	r3, [pc, #508]	; (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800988c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009890:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	695b      	ldr	r3, [r3, #20]
 8009898:	497b      	ldr	r1, [pc, #492]	; (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800989a:	4313      	orrs	r3, r2
 800989c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f003 0320 	and.w	r3, r3, #32
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d00a      	beq.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80098ac:	4b76      	ldr	r3, [pc, #472]	; (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	699b      	ldr	r3, [r3, #24]
 80098ba:	4973      	ldr	r1, [pc, #460]	; (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098bc:	4313      	orrs	r3, r2
 80098be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d00a      	beq.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80098ce:	4b6e      	ldr	r3, [pc, #440]	; (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	69db      	ldr	r3, [r3, #28]
 80098dc:	496a      	ldr	r1, [pc, #424]	; (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098de:	4313      	orrs	r3, r2
 80098e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d00a      	beq.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80098f0:	4b65      	ldr	r3, [pc, #404]	; (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098f6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6a1b      	ldr	r3, [r3, #32]
 80098fe:	4962      	ldr	r1, [pc, #392]	; (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009900:	4313      	orrs	r3, r2
 8009902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800990e:	2b00      	cmp	r3, #0
 8009910:	d00a      	beq.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009912:	4b5d      	ldr	r3, [pc, #372]	; (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009918:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009920:	4959      	ldr	r1, [pc, #356]	; (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009922:	4313      	orrs	r3, r2
 8009924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009930:	2b00      	cmp	r3, #0
 8009932:	d00a      	beq.n	800994a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009934:	4b54      	ldr	r3, [pc, #336]	; (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800993a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009942:	4951      	ldr	r1, [pc, #324]	; (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009944:	4313      	orrs	r3, r2
 8009946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009952:	2b00      	cmp	r3, #0
 8009954:	d015      	beq.n	8009982 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009956:	4b4c      	ldr	r3, [pc, #304]	; (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800995c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009964:	4948      	ldr	r1, [pc, #288]	; (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009966:	4313      	orrs	r3, r2
 8009968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009970:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009974:	d105      	bne.n	8009982 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009976:	4b44      	ldr	r3, [pc, #272]	; (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009978:	68db      	ldr	r3, [r3, #12]
 800997a:	4a43      	ldr	r2, [pc, #268]	; (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800997c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009980:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800998a:	2b00      	cmp	r3, #0
 800998c:	d015      	beq.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800998e:	4b3e      	ldr	r3, [pc, #248]	; (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009994:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800999c:	493a      	ldr	r1, [pc, #232]	; (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800999e:	4313      	orrs	r3, r2
 80099a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80099ac:	d105      	bne.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80099ae:	4b36      	ldr	r3, [pc, #216]	; (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099b0:	68db      	ldr	r3, [r3, #12]
 80099b2:	4a35      	ldr	r2, [pc, #212]	; (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80099b8:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d015      	beq.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80099c6:	4b30      	ldr	r3, [pc, #192]	; (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099cc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099d4:	492c      	ldr	r1, [pc, #176]	; (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099d6:	4313      	orrs	r3, r2
 80099d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80099e4:	d105      	bne.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80099e6:	4b28      	ldr	r3, [pc, #160]	; (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099e8:	68db      	ldr	r3, [r3, #12]
 80099ea:	4a27      	ldr	r2, [pc, #156]	; (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80099f0:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d015      	beq.n	8009a2a <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80099fe:	4b22      	ldr	r3, [pc, #136]	; (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a04:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a0c:	491e      	ldr	r1, [pc, #120]	; (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009a1c:	d105      	bne.n	8009a2a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009a1e:	4b1a      	ldr	r3, [pc, #104]	; (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a20:	68db      	ldr	r3, [r3, #12]
 8009a22:	4a19      	ldr	r2, [pc, #100]	; (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a28:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d015      	beq.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009a36:	4b14      	ldr	r3, [pc, #80]	; (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a3c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a44:	4910      	ldr	r1, [pc, #64]	; (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a46:	4313      	orrs	r3, r2
 8009a48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009a54:	d105      	bne.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009a56:	4b0c      	ldr	r3, [pc, #48]	; (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a58:	68db      	ldr	r3, [r3, #12]
 8009a5a:	4a0b      	ldr	r2, [pc, #44]	; (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a60:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d018      	beq.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009a6e:	4b06      	ldr	r3, [pc, #24]	; (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a74:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a7c:	4902      	ldr	r1, [pc, #8]	; (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	e001      	b.n	8009a8c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009a88:	40021000 	.word	0x40021000
 8009a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a92:	d105      	bne.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009a94:	4b21      	ldr	r3, [pc, #132]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009a96:	68db      	ldr	r3, [r3, #12]
 8009a98:	4a20      	ldr	r2, [pc, #128]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009a9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a9e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d015      	beq.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8009aac:	4b1b      	ldr	r3, [pc, #108]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ab2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009aba:	4918      	ldr	r1, [pc, #96]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009abc:	4313      	orrs	r3, r2
 8009abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009aca:	d105      	bne.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009acc:	4b13      	ldr	r3, [pc, #76]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009ace:	68db      	ldr	r3, [r3, #12]
 8009ad0:	4a12      	ldr	r2, [pc, #72]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009ad2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ad6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d015      	beq.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009ae4:	4b0d      	ldr	r3, [pc, #52]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009ae6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009aea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009af2:	490a      	ldr	r1, [pc, #40]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009af4:	4313      	orrs	r3, r2
 8009af6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009afe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b02:	d105      	bne.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009b04:	4b05      	ldr	r3, [pc, #20]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009b06:	68db      	ldr	r3, [r3, #12]
 8009b08:	4a04      	ldr	r2, [pc, #16]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009b0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b0e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009b10:	7cbb      	ldrb	r3, [r7, #18]
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3718      	adds	r7, #24
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
 8009b1a:	bf00      	nop
 8009b1c:	40021000 	.word	0x40021000

08009b20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b082      	sub	sp, #8
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d101      	bne.n	8009b32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009b2e:	2301      	movs	r3, #1
 8009b30:	e049      	b.n	8009bc6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b38:	b2db      	uxtb	r3, r3
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d106      	bne.n	8009b4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2200      	movs	r2, #0
 8009b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f7fc fbcc 	bl	80062e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2202      	movs	r2, #2
 8009b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681a      	ldr	r2, [r3, #0]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	3304      	adds	r3, #4
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	4610      	mov	r0, r2
 8009b60:	f000 f878 	bl	8009c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2201      	movs	r2, #1
 8009b68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2201      	movs	r2, #1
 8009b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2201      	movs	r2, #1
 8009b78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2201      	movs	r2, #1
 8009b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2201      	movs	r2, #1
 8009b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2201      	movs	r2, #1
 8009b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2201      	movs	r2, #1
 8009b98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2201      	movs	r2, #1
 8009bb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009bc4:	2300      	movs	r3, #0
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3708      	adds	r7, #8
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}

08009bce <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009bce:	b580      	push	{r7, lr}
 8009bd0:	b082      	sub	sp, #8
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	6078      	str	r0, [r7, #4]
 8009bd6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	d101      	bne.n	8009be6 <HAL_TIM_SlaveConfigSynchro+0x18>
 8009be2:	2302      	movs	r3, #2
 8009be4:	e031      	b.n	8009c4a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2201      	movs	r2, #1
 8009bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2202      	movs	r2, #2
 8009bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009bf6:	6839      	ldr	r1, [r7, #0]
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f000 f8d5 	bl	8009da8 <TIM_SlaveTimer_SetConfig>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d009      	beq.n	8009c18 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2201      	movs	r2, #1
 8009c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8009c14:	2301      	movs	r3, #1
 8009c16:	e018      	b.n	8009c4a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	68da      	ldr	r2, [r3, #12]
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c26:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	68da      	ldr	r2, [r3, #12]
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009c36:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2200      	movs	r2, #0
 8009c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c48:	2300      	movs	r3, #0
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3708      	adds	r7, #8
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
	...

08009c54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b085      	sub	sp, #20
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	4a48      	ldr	r2, [pc, #288]	; (8009d88 <TIM_Base_SetConfig+0x134>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d013      	beq.n	8009c94 <TIM_Base_SetConfig+0x40>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c72:	d00f      	beq.n	8009c94 <TIM_Base_SetConfig+0x40>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	4a45      	ldr	r2, [pc, #276]	; (8009d8c <TIM_Base_SetConfig+0x138>)
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	d00b      	beq.n	8009c94 <TIM_Base_SetConfig+0x40>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	4a44      	ldr	r2, [pc, #272]	; (8009d90 <TIM_Base_SetConfig+0x13c>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d007      	beq.n	8009c94 <TIM_Base_SetConfig+0x40>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	4a43      	ldr	r2, [pc, #268]	; (8009d94 <TIM_Base_SetConfig+0x140>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d003      	beq.n	8009c94 <TIM_Base_SetConfig+0x40>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	4a42      	ldr	r2, [pc, #264]	; (8009d98 <TIM_Base_SetConfig+0x144>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d108      	bne.n	8009ca6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	68fa      	ldr	r2, [r7, #12]
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	4a37      	ldr	r2, [pc, #220]	; (8009d88 <TIM_Base_SetConfig+0x134>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d01f      	beq.n	8009cee <TIM_Base_SetConfig+0x9a>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cb4:	d01b      	beq.n	8009cee <TIM_Base_SetConfig+0x9a>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	4a34      	ldr	r2, [pc, #208]	; (8009d8c <TIM_Base_SetConfig+0x138>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d017      	beq.n	8009cee <TIM_Base_SetConfig+0x9a>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	4a33      	ldr	r2, [pc, #204]	; (8009d90 <TIM_Base_SetConfig+0x13c>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d013      	beq.n	8009cee <TIM_Base_SetConfig+0x9a>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	4a32      	ldr	r2, [pc, #200]	; (8009d94 <TIM_Base_SetConfig+0x140>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d00f      	beq.n	8009cee <TIM_Base_SetConfig+0x9a>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	4a32      	ldr	r2, [pc, #200]	; (8009d9c <TIM_Base_SetConfig+0x148>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d00b      	beq.n	8009cee <TIM_Base_SetConfig+0x9a>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	4a31      	ldr	r2, [pc, #196]	; (8009da0 <TIM_Base_SetConfig+0x14c>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d007      	beq.n	8009cee <TIM_Base_SetConfig+0x9a>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	4a30      	ldr	r2, [pc, #192]	; (8009da4 <TIM_Base_SetConfig+0x150>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d003      	beq.n	8009cee <TIM_Base_SetConfig+0x9a>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	4a2b      	ldr	r2, [pc, #172]	; (8009d98 <TIM_Base_SetConfig+0x144>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d108      	bne.n	8009d00 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009cf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	68db      	ldr	r3, [r3, #12]
 8009cfa:	68fa      	ldr	r2, [r7, #12]
 8009cfc:	4313      	orrs	r3, r2
 8009cfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	695b      	ldr	r3, [r3, #20]
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	68fa      	ldr	r2, [r7, #12]
 8009d12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	689a      	ldr	r2, [r3, #8]
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	681a      	ldr	r2, [r3, #0]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	4a18      	ldr	r2, [pc, #96]	; (8009d88 <TIM_Base_SetConfig+0x134>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d013      	beq.n	8009d54 <TIM_Base_SetConfig+0x100>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	4a19      	ldr	r2, [pc, #100]	; (8009d94 <TIM_Base_SetConfig+0x140>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d00f      	beq.n	8009d54 <TIM_Base_SetConfig+0x100>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	4a19      	ldr	r2, [pc, #100]	; (8009d9c <TIM_Base_SetConfig+0x148>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d00b      	beq.n	8009d54 <TIM_Base_SetConfig+0x100>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	4a18      	ldr	r2, [pc, #96]	; (8009da0 <TIM_Base_SetConfig+0x14c>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d007      	beq.n	8009d54 <TIM_Base_SetConfig+0x100>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	4a17      	ldr	r2, [pc, #92]	; (8009da4 <TIM_Base_SetConfig+0x150>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d003      	beq.n	8009d54 <TIM_Base_SetConfig+0x100>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	4a12      	ldr	r2, [pc, #72]	; (8009d98 <TIM_Base_SetConfig+0x144>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d103      	bne.n	8009d5c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	691a      	ldr	r2, [r3, #16]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2201      	movs	r2, #1
 8009d60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	691b      	ldr	r3, [r3, #16]
 8009d66:	f003 0301 	and.w	r3, r3, #1
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	d105      	bne.n	8009d7a <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	691b      	ldr	r3, [r3, #16]
 8009d72:	f023 0201 	bic.w	r2, r3, #1
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	611a      	str	r2, [r3, #16]
  }
}
 8009d7a:	bf00      	nop
 8009d7c:	3714      	adds	r7, #20
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d84:	4770      	bx	lr
 8009d86:	bf00      	nop
 8009d88:	40012c00 	.word	0x40012c00
 8009d8c:	40000400 	.word	0x40000400
 8009d90:	40000800 	.word	0x40000800
 8009d94:	40013400 	.word	0x40013400
 8009d98:	40015000 	.word	0x40015000
 8009d9c:	40014000 	.word	0x40014000
 8009da0:	40014400 	.word	0x40014400
 8009da4:	40014800 	.word	0x40014800

08009da8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b086      	sub	sp, #24
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
 8009db0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009db2:	2300      	movs	r3, #0
 8009db4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	689b      	ldr	r3, [r3, #8]
 8009dbc:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009dc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dc8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	693a      	ldr	r2, [r7, #16]
 8009dd0:	4313      	orrs	r3, r2
 8009dd2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009dda:	f023 0307 	bic.w	r3, r3, #7
 8009dde:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	693a      	ldr	r2, [r7, #16]
 8009de6:	4313      	orrs	r3, r2
 8009de8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	693a      	ldr	r2, [r7, #16]
 8009df0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	685b      	ldr	r3, [r3, #4]
 8009df6:	4a4e      	ldr	r2, [pc, #312]	; (8009f30 <TIM_SlaveTimer_SetConfig+0x188>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	f000 8092 	beq.w	8009f22 <TIM_SlaveTimer_SetConfig+0x17a>
 8009dfe:	4a4c      	ldr	r2, [pc, #304]	; (8009f30 <TIM_SlaveTimer_SetConfig+0x188>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	f200 808b 	bhi.w	8009f1c <TIM_SlaveTimer_SetConfig+0x174>
 8009e06:	4a4b      	ldr	r2, [pc, #300]	; (8009f34 <TIM_SlaveTimer_SetConfig+0x18c>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	f000 808a 	beq.w	8009f22 <TIM_SlaveTimer_SetConfig+0x17a>
 8009e0e:	4a49      	ldr	r2, [pc, #292]	; (8009f34 <TIM_SlaveTimer_SetConfig+0x18c>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	f200 8083 	bhi.w	8009f1c <TIM_SlaveTimer_SetConfig+0x174>
 8009e16:	4a48      	ldr	r2, [pc, #288]	; (8009f38 <TIM_SlaveTimer_SetConfig+0x190>)
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	f000 8082 	beq.w	8009f22 <TIM_SlaveTimer_SetConfig+0x17a>
 8009e1e:	4a46      	ldr	r2, [pc, #280]	; (8009f38 <TIM_SlaveTimer_SetConfig+0x190>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d87b      	bhi.n	8009f1c <TIM_SlaveTimer_SetConfig+0x174>
 8009e24:	4a45      	ldr	r2, [pc, #276]	; (8009f3c <TIM_SlaveTimer_SetConfig+0x194>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d07b      	beq.n	8009f22 <TIM_SlaveTimer_SetConfig+0x17a>
 8009e2a:	4a44      	ldr	r2, [pc, #272]	; (8009f3c <TIM_SlaveTimer_SetConfig+0x194>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d875      	bhi.n	8009f1c <TIM_SlaveTimer_SetConfig+0x174>
 8009e30:	4a43      	ldr	r2, [pc, #268]	; (8009f40 <TIM_SlaveTimer_SetConfig+0x198>)
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d075      	beq.n	8009f22 <TIM_SlaveTimer_SetConfig+0x17a>
 8009e36:	4a42      	ldr	r2, [pc, #264]	; (8009f40 <TIM_SlaveTimer_SetConfig+0x198>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d86f      	bhi.n	8009f1c <TIM_SlaveTimer_SetConfig+0x174>
 8009e3c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009e40:	d06f      	beq.n	8009f22 <TIM_SlaveTimer_SetConfig+0x17a>
 8009e42:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009e46:	d869      	bhi.n	8009f1c <TIM_SlaveTimer_SetConfig+0x174>
 8009e48:	2b70      	cmp	r3, #112	; 0x70
 8009e4a:	d01a      	beq.n	8009e82 <TIM_SlaveTimer_SetConfig+0xda>
 8009e4c:	2b70      	cmp	r3, #112	; 0x70
 8009e4e:	d865      	bhi.n	8009f1c <TIM_SlaveTimer_SetConfig+0x174>
 8009e50:	2b60      	cmp	r3, #96	; 0x60
 8009e52:	d059      	beq.n	8009f08 <TIM_SlaveTimer_SetConfig+0x160>
 8009e54:	2b60      	cmp	r3, #96	; 0x60
 8009e56:	d861      	bhi.n	8009f1c <TIM_SlaveTimer_SetConfig+0x174>
 8009e58:	2b50      	cmp	r3, #80	; 0x50
 8009e5a:	d04b      	beq.n	8009ef4 <TIM_SlaveTimer_SetConfig+0x14c>
 8009e5c:	2b50      	cmp	r3, #80	; 0x50
 8009e5e:	d85d      	bhi.n	8009f1c <TIM_SlaveTimer_SetConfig+0x174>
 8009e60:	2b40      	cmp	r3, #64	; 0x40
 8009e62:	d019      	beq.n	8009e98 <TIM_SlaveTimer_SetConfig+0xf0>
 8009e64:	2b40      	cmp	r3, #64	; 0x40
 8009e66:	d859      	bhi.n	8009f1c <TIM_SlaveTimer_SetConfig+0x174>
 8009e68:	2b30      	cmp	r3, #48	; 0x30
 8009e6a:	d05a      	beq.n	8009f22 <TIM_SlaveTimer_SetConfig+0x17a>
 8009e6c:	2b30      	cmp	r3, #48	; 0x30
 8009e6e:	d855      	bhi.n	8009f1c <TIM_SlaveTimer_SetConfig+0x174>
 8009e70:	2b20      	cmp	r3, #32
 8009e72:	d056      	beq.n	8009f22 <TIM_SlaveTimer_SetConfig+0x17a>
 8009e74:	2b20      	cmp	r3, #32
 8009e76:	d851      	bhi.n	8009f1c <TIM_SlaveTimer_SetConfig+0x174>
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d052      	beq.n	8009f22 <TIM_SlaveTimer_SetConfig+0x17a>
 8009e7c:	2b10      	cmp	r3, #16
 8009e7e:	d050      	beq.n	8009f22 <TIM_SlaveTimer_SetConfig+0x17a>
 8009e80:	e04c      	b.n	8009f1c <TIM_SlaveTimer_SetConfig+0x174>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8009e92:	f000 f8b6 	bl	800a002 <TIM_ETR_SetConfig>
      break;
 8009e96:	e045      	b.n	8009f24 <TIM_SlaveTimer_SetConfig+0x17c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	2b05      	cmp	r3, #5
 8009e9e:	d004      	beq.n	8009eaa <TIM_SlaveTimer_SetConfig+0x102>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8009ea4:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8009ea8:	d101      	bne.n	8009eae <TIM_SlaveTimer_SetConfig+0x106>
      {
        return HAL_ERROR;
 8009eaa:	2301      	movs	r3, #1
 8009eac:	e03b      	b.n	8009f26 <TIM_SlaveTimer_SetConfig+0x17e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	6a1b      	ldr	r3, [r3, #32]
 8009eb4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	6a1a      	ldr	r2, [r3, #32]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f022 0201 	bic.w	r2, r2, #1
 8009ec4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	699b      	ldr	r3, [r3, #24]
 8009ecc:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ed4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	691b      	ldr	r3, [r3, #16]
 8009eda:	011b      	lsls	r3, r3, #4
 8009edc:	68ba      	ldr	r2, [r7, #8]
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	68ba      	ldr	r2, [r7, #8]
 8009ee8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	68fa      	ldr	r2, [r7, #12]
 8009ef0:	621a      	str	r2, [r3, #32]
      break;
 8009ef2:	e017      	b.n	8009f24 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f00:	461a      	mov	r2, r3
 8009f02:	f000 f81f 	bl	8009f44 <TIM_TI1_ConfigInputStage>
      break;
 8009f06:	e00d      	b.n	8009f24 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009f14:	461a      	mov	r2, r3
 8009f16:	f000 f844 	bl	8009fa2 <TIM_TI2_ConfigInputStage>
      break;
 8009f1a:	e003      	b.n	8009f24 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	75fb      	strb	r3, [r7, #23]
      break;
 8009f20:	e000      	b.n	8009f24 <TIM_SlaveTimer_SetConfig+0x17c>
      break;
 8009f22:	bf00      	nop
  }

  return status;
 8009f24:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3718      	adds	r7, #24
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	bf00      	nop
 8009f30:	00100070 	.word	0x00100070
 8009f34:	00100050 	.word	0x00100050
 8009f38:	00100040 	.word	0x00100040
 8009f3c:	00100030 	.word	0x00100030
 8009f40:	00100020 	.word	0x00100020

08009f44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b087      	sub	sp, #28
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	60f8      	str	r0, [r7, #12]
 8009f4c:	60b9      	str	r1, [r7, #8]
 8009f4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	6a1b      	ldr	r3, [r3, #32]
 8009f54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	6a1b      	ldr	r3, [r3, #32]
 8009f5a:	f023 0201 	bic.w	r2, r3, #1
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	699b      	ldr	r3, [r3, #24]
 8009f66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009f6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	011b      	lsls	r3, r3, #4
 8009f74:	693a      	ldr	r2, [r7, #16]
 8009f76:	4313      	orrs	r3, r2
 8009f78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	f023 030a 	bic.w	r3, r3, #10
 8009f80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009f82:	697a      	ldr	r2, [r7, #20]
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	4313      	orrs	r3, r2
 8009f88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	693a      	ldr	r2, [r7, #16]
 8009f8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	697a      	ldr	r2, [r7, #20]
 8009f94:	621a      	str	r2, [r3, #32]
}
 8009f96:	bf00      	nop
 8009f98:	371c      	adds	r7, #28
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa0:	4770      	bx	lr

08009fa2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009fa2:	b480      	push	{r7}
 8009fa4:	b087      	sub	sp, #28
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	60f8      	str	r0, [r7, #12]
 8009faa:	60b9      	str	r1, [r7, #8]
 8009fac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	6a1b      	ldr	r3, [r3, #32]
 8009fb2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	6a1b      	ldr	r3, [r3, #32]
 8009fb8:	f023 0210 	bic.w	r2, r3, #16
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	699b      	ldr	r3, [r3, #24]
 8009fc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009fc6:	693b      	ldr	r3, [r7, #16]
 8009fc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009fcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	031b      	lsls	r3, r3, #12
 8009fd2:	693a      	ldr	r2, [r7, #16]
 8009fd4:	4313      	orrs	r3, r2
 8009fd6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009fde:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	011b      	lsls	r3, r3, #4
 8009fe4:	697a      	ldr	r2, [r7, #20]
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	693a      	ldr	r2, [r7, #16]
 8009fee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	697a      	ldr	r2, [r7, #20]
 8009ff4:	621a      	str	r2, [r3, #32]
}
 8009ff6:	bf00      	nop
 8009ff8:	371c      	adds	r7, #28
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a000:	4770      	bx	lr

0800a002 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a002:	b480      	push	{r7}
 800a004:	b087      	sub	sp, #28
 800a006:	af00      	add	r7, sp, #0
 800a008:	60f8      	str	r0, [r7, #12]
 800a00a:	60b9      	str	r1, [r7, #8]
 800a00c:	607a      	str	r2, [r7, #4]
 800a00e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	689b      	ldr	r3, [r3, #8]
 800a014:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a01c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	021a      	lsls	r2, r3, #8
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	431a      	orrs	r2, r3
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	4313      	orrs	r3, r2
 800a02a:	697a      	ldr	r2, [r7, #20]
 800a02c:	4313      	orrs	r3, r2
 800a02e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	697a      	ldr	r2, [r7, #20]
 800a034:	609a      	str	r2, [r3, #8]
}
 800a036:	bf00      	nop
 800a038:	371c      	adds	r7, #28
 800a03a:	46bd      	mov	sp, r7
 800a03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a040:	4770      	bx	lr
	...

0800a044 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a044:	b480      	push	{r7}
 800a046:	b085      	sub	sp, #20
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
 800a04c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a054:	2b01      	cmp	r3, #1
 800a056:	d101      	bne.n	800a05c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a058:	2302      	movs	r3, #2
 800a05a:	e06f      	b.n	800a13c <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2201      	movs	r2, #1
 800a060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2202      	movs	r2, #2
 800a068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	689b      	ldr	r3, [r3, #8]
 800a07a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4a31      	ldr	r2, [pc, #196]	; (800a148 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d009      	beq.n	800a09a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4a30      	ldr	r2, [pc, #192]	; (800a14c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d004      	beq.n	800a09a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4a2e      	ldr	r2, [pc, #184]	; (800a150 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d108      	bne.n	800a0ac <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a0a0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	685b      	ldr	r3, [r3, #4]
 800a0a6:	68fa      	ldr	r2, [r7, #12]
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a0b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	68fa      	ldr	r2, [r7, #12]
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	68fa      	ldr	r2, [r7, #12]
 800a0c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	4a1e      	ldr	r2, [pc, #120]	; (800a148 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d01d      	beq.n	800a110 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0dc:	d018      	beq.n	800a110 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	4a1c      	ldr	r2, [pc, #112]	; (800a154 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d013      	beq.n	800a110 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	4a1a      	ldr	r2, [pc, #104]	; (800a158 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d00e      	beq.n	800a110 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	4a15      	ldr	r2, [pc, #84]	; (800a14c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d009      	beq.n	800a110 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4a16      	ldr	r2, [pc, #88]	; (800a15c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a102:	4293      	cmp	r3, r2
 800a104:	d004      	beq.n	800a110 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	4a11      	ldr	r2, [pc, #68]	; (800a150 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d10c      	bne.n	800a12a <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a116:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	689b      	ldr	r3, [r3, #8]
 800a11c:	68ba      	ldr	r2, [r7, #8]
 800a11e:	4313      	orrs	r3, r2
 800a120:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	68ba      	ldr	r2, [r7, #8]
 800a128:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2201      	movs	r2, #1
 800a12e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2200      	movs	r2, #0
 800a136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a13a:	2300      	movs	r3, #0
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3714      	adds	r7, #20
 800a140:	46bd      	mov	sp, r7
 800a142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a146:	4770      	bx	lr
 800a148:	40012c00 	.word	0x40012c00
 800a14c:	40013400 	.word	0x40013400
 800a150:	40015000 	.word	0x40015000
 800a154:	40000400 	.word	0x40000400
 800a158:	40000800 	.word	0x40000800
 800a15c:	40014000 	.word	0x40014000

0800a160 <arm_rfft_32_fast_init_f32>:
 800a160:	b178      	cbz	r0, 800a182 <arm_rfft_32_fast_init_f32+0x22>
 800a162:	b430      	push	{r4, r5}
 800a164:	4908      	ldr	r1, [pc, #32]	; (800a188 <arm_rfft_32_fast_init_f32+0x28>)
 800a166:	4a09      	ldr	r2, [pc, #36]	; (800a18c <arm_rfft_32_fast_init_f32+0x2c>)
 800a168:	2310      	movs	r3, #16
 800a16a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800a16e:	8003      	strh	r3, [r0, #0]
 800a170:	2520      	movs	r5, #32
 800a172:	2414      	movs	r4, #20
 800a174:	4b06      	ldr	r3, [pc, #24]	; (800a190 <arm_rfft_32_fast_init_f32+0x30>)
 800a176:	8205      	strh	r5, [r0, #16]
 800a178:	8184      	strh	r4, [r0, #12]
 800a17a:	6143      	str	r3, [r0, #20]
 800a17c:	bc30      	pop	{r4, r5}
 800a17e:	2000      	movs	r0, #0
 800a180:	4770      	bx	lr
 800a182:	f04f 30ff 	mov.w	r0, #4294967295
 800a186:	4770      	bx	lr
 800a188:	0800dc70 	.word	0x0800dc70
 800a18c:	080125a8 	.word	0x080125a8
 800a190:	0801b328 	.word	0x0801b328

0800a194 <arm_rfft_64_fast_init_f32>:
 800a194:	b178      	cbz	r0, 800a1b6 <arm_rfft_64_fast_init_f32+0x22>
 800a196:	b430      	push	{r4, r5}
 800a198:	4908      	ldr	r1, [pc, #32]	; (800a1bc <arm_rfft_64_fast_init_f32+0x28>)
 800a19a:	4a09      	ldr	r2, [pc, #36]	; (800a1c0 <arm_rfft_64_fast_init_f32+0x2c>)
 800a19c:	2320      	movs	r3, #32
 800a19e:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800a1a2:	8003      	strh	r3, [r0, #0]
 800a1a4:	2540      	movs	r5, #64	; 0x40
 800a1a6:	2430      	movs	r4, #48	; 0x30
 800a1a8:	4b06      	ldr	r3, [pc, #24]	; (800a1c4 <arm_rfft_64_fast_init_f32+0x30>)
 800a1aa:	8205      	strh	r5, [r0, #16]
 800a1ac:	8184      	strh	r4, [r0, #12]
 800a1ae:	6143      	str	r3, [r0, #20]
 800a1b0:	bc30      	pop	{r4, r5}
 800a1b2:	2000      	movs	r0, #0
 800a1b4:	4770      	bx	lr
 800a1b6:	f04f 30ff 	mov.w	r0, #4294967295
 800a1ba:	4770      	bx	lr
 800a1bc:	0800fdc8 	.word	0x0800fdc8
 800a1c0:	08016e28 	.word	0x08016e28
 800a1c4:	0801fba8 	.word	0x0801fba8

0800a1c8 <arm_rfft_256_fast_init_f32>:
 800a1c8:	b180      	cbz	r0, 800a1ec <arm_rfft_256_fast_init_f32+0x24>
 800a1ca:	b430      	push	{r4, r5}
 800a1cc:	4909      	ldr	r1, [pc, #36]	; (800a1f4 <arm_rfft_256_fast_init_f32+0x2c>)
 800a1ce:	4a0a      	ldr	r2, [pc, #40]	; (800a1f8 <arm_rfft_256_fast_init_f32+0x30>)
 800a1d0:	2380      	movs	r3, #128	; 0x80
 800a1d2:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800a1d6:	8003      	strh	r3, [r0, #0]
 800a1d8:	f44f 7580 	mov.w	r5, #256	; 0x100
 800a1dc:	24d0      	movs	r4, #208	; 0xd0
 800a1de:	4b07      	ldr	r3, [pc, #28]	; (800a1fc <arm_rfft_256_fast_init_f32+0x34>)
 800a1e0:	8205      	strh	r5, [r0, #16]
 800a1e2:	8184      	strh	r4, [r0, #12]
 800a1e4:	6143      	str	r3, [r0, #20]
 800a1e6:	bc30      	pop	{r4, r5}
 800a1e8:	2000      	movs	r0, #0
 800a1ea:	4770      	bx	lr
 800a1ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a1f0:	4770      	bx	lr
 800a1f2:	bf00      	nop
 800a1f4:	0800dad0 	.word	0x0800dad0
 800a1f8:	080121a8 	.word	0x080121a8
 800a1fc:	0801af28 	.word	0x0801af28

0800a200 <arm_rfft_512_fast_init_f32>:
 800a200:	b190      	cbz	r0, 800a228 <arm_rfft_512_fast_init_f32+0x28>
 800a202:	b430      	push	{r4, r5}
 800a204:	490a      	ldr	r1, [pc, #40]	; (800a230 <arm_rfft_512_fast_init_f32+0x30>)
 800a206:	4a0b      	ldr	r2, [pc, #44]	; (800a234 <arm_rfft_512_fast_init_f32+0x34>)
 800a208:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a20c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800a210:	8003      	strh	r3, [r0, #0]
 800a212:	f44f 7500 	mov.w	r5, #512	; 0x200
 800a216:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 800a21a:	4b07      	ldr	r3, [pc, #28]	; (800a238 <arm_rfft_512_fast_init_f32+0x38>)
 800a21c:	8205      	strh	r5, [r0, #16]
 800a21e:	8184      	strh	r4, [r0, #12]
 800a220:	6143      	str	r3, [r0, #20]
 800a222:	bc30      	pop	{r4, r5}
 800a224:	2000      	movs	r0, #0
 800a226:	4770      	bx	lr
 800a228:	f04f 30ff 	mov.w	r0, #4294967295
 800a22c:	4770      	bx	lr
 800a22e:	bf00      	nop
 800a230:	0800fa58 	.word	0x0800fa58
 800a234:	08016628 	.word	0x08016628
 800a238:	0801f3a8 	.word	0x0801f3a8

0800a23c <arm_rfft_1024_fast_init_f32>:
 800a23c:	b190      	cbz	r0, 800a264 <arm_rfft_1024_fast_init_f32+0x28>
 800a23e:	b430      	push	{r4, r5}
 800a240:	490a      	ldr	r1, [pc, #40]	; (800a26c <arm_rfft_1024_fast_init_f32+0x30>)
 800a242:	4a0b      	ldr	r2, [pc, #44]	; (800a270 <arm_rfft_1024_fast_init_f32+0x34>)
 800a244:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a248:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800a24c:	8003      	strh	r3, [r0, #0]
 800a24e:	f44f 6580 	mov.w	r5, #1024	; 0x400
 800a252:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 800a256:	4b07      	ldr	r3, [pc, #28]	; (800a274 <arm_rfft_1024_fast_init_f32+0x38>)
 800a258:	8205      	strh	r5, [r0, #16]
 800a25a:	8184      	strh	r4, [r0, #12]
 800a25c:	6143      	str	r3, [r0, #20]
 800a25e:	bc30      	pop	{r4, r5}
 800a260:	2000      	movs	r0, #0
 800a262:	4770      	bx	lr
 800a264:	f04f 30ff 	mov.w	r0, #4294967295
 800a268:	4770      	bx	lr
 800a26a:	bf00      	nop
 800a26c:	0800fe28 	.word	0x0800fe28
 800a270:	08016f28 	.word	0x08016f28
 800a274:	08017f28 	.word	0x08017f28

0800a278 <arm_rfft_2048_fast_init_f32>:
 800a278:	b190      	cbz	r0, 800a2a0 <arm_rfft_2048_fast_init_f32+0x28>
 800a27a:	b430      	push	{r4, r5}
 800a27c:	490a      	ldr	r1, [pc, #40]	; (800a2a8 <arm_rfft_2048_fast_init_f32+0x30>)
 800a27e:	4a0b      	ldr	r2, [pc, #44]	; (800a2ac <arm_rfft_2048_fast_init_f32+0x34>)
 800a280:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a284:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800a288:	8003      	strh	r3, [r0, #0]
 800a28a:	f44f 6500 	mov.w	r5, #2048	; 0x800
 800a28e:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 800a292:	4b07      	ldr	r3, [pc, #28]	; (800a2b0 <arm_rfft_2048_fast_init_f32+0x38>)
 800a294:	8205      	strh	r5, [r0, #16]
 800a296:	8184      	strh	r4, [r0, #12]
 800a298:	6143      	str	r3, [r0, #20]
 800a29a:	bc30      	pop	{r4, r5}
 800a29c:	2000      	movs	r0, #0
 800a29e:	4770      	bx	lr
 800a2a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a2a4:	4770      	bx	lr
 800a2a6:	bf00      	nop
 800a2a8:	0800ccc0 	.word	0x0800ccc0
 800a2ac:	080101a8 	.word	0x080101a8
 800a2b0:	08018f28 	.word	0x08018f28

0800a2b4 <arm_rfft_4096_fast_init_f32>:
 800a2b4:	b190      	cbz	r0, 800a2dc <arm_rfft_4096_fast_init_f32+0x28>
 800a2b6:	b430      	push	{r4, r5}
 800a2b8:	490a      	ldr	r1, [pc, #40]	; (800a2e4 <arm_rfft_4096_fast_init_f32+0x30>)
 800a2ba:	4a0b      	ldr	r2, [pc, #44]	; (800a2e8 <arm_rfft_4096_fast_init_f32+0x34>)
 800a2bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a2c0:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800a2c4:	8003      	strh	r3, [r0, #0]
 800a2c6:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 800a2ca:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 800a2ce:	4b07      	ldr	r3, [pc, #28]	; (800a2ec <arm_rfft_4096_fast_init_f32+0x38>)
 800a2d0:	8205      	strh	r5, [r0, #16]
 800a2d2:	8184      	strh	r4, [r0, #12]
 800a2d4:	6143      	str	r3, [r0, #20]
 800a2d6:	bc30      	pop	{r4, r5}
 800a2d8:	2000      	movs	r0, #0
 800a2da:	4770      	bx	lr
 800a2dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a2e0:	4770      	bx	lr
 800a2e2:	bf00      	nop
 800a2e4:	0800dc98 	.word	0x0800dc98
 800a2e8:	08012628 	.word	0x08012628
 800a2ec:	0801b3a8 	.word	0x0801b3a8

0800a2f0 <arm_rfft_fast_init_f32>:
 800a2f0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a2f4:	d01f      	beq.n	800a336 <arm_rfft_fast_init_f32+0x46>
 800a2f6:	d90b      	bls.n	800a310 <arm_rfft_fast_init_f32+0x20>
 800a2f8:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800a2fc:	d019      	beq.n	800a332 <arm_rfft_fast_init_f32+0x42>
 800a2fe:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800a302:	d012      	beq.n	800a32a <arm_rfft_fast_init_f32+0x3a>
 800a304:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a308:	d00d      	beq.n	800a326 <arm_rfft_fast_init_f32+0x36>
 800a30a:	f04f 30ff 	mov.w	r0, #4294967295
 800a30e:	4770      	bx	lr
 800a310:	2940      	cmp	r1, #64	; 0x40
 800a312:	d00c      	beq.n	800a32e <arm_rfft_fast_init_f32+0x3e>
 800a314:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800a318:	d003      	beq.n	800a322 <arm_rfft_fast_init_f32+0x32>
 800a31a:	2920      	cmp	r1, #32
 800a31c:	d1f5      	bne.n	800a30a <arm_rfft_fast_init_f32+0x1a>
 800a31e:	4b07      	ldr	r3, [pc, #28]	; (800a33c <arm_rfft_fast_init_f32+0x4c>)
 800a320:	4718      	bx	r3
 800a322:	4b07      	ldr	r3, [pc, #28]	; (800a340 <arm_rfft_fast_init_f32+0x50>)
 800a324:	4718      	bx	r3
 800a326:	4b07      	ldr	r3, [pc, #28]	; (800a344 <arm_rfft_fast_init_f32+0x54>)
 800a328:	4718      	bx	r3
 800a32a:	4b07      	ldr	r3, [pc, #28]	; (800a348 <arm_rfft_fast_init_f32+0x58>)
 800a32c:	4718      	bx	r3
 800a32e:	4b07      	ldr	r3, [pc, #28]	; (800a34c <arm_rfft_fast_init_f32+0x5c>)
 800a330:	e7f6      	b.n	800a320 <arm_rfft_fast_init_f32+0x30>
 800a332:	4b07      	ldr	r3, [pc, #28]	; (800a350 <arm_rfft_fast_init_f32+0x60>)
 800a334:	e7f4      	b.n	800a320 <arm_rfft_fast_init_f32+0x30>
 800a336:	4b07      	ldr	r3, [pc, #28]	; (800a354 <arm_rfft_fast_init_f32+0x64>)
 800a338:	e7f2      	b.n	800a320 <arm_rfft_fast_init_f32+0x30>
 800a33a:	bf00      	nop
 800a33c:	0800a161 	.word	0x0800a161
 800a340:	0800a1c9 	.word	0x0800a1c9
 800a344:	0800a23d 	.word	0x0800a23d
 800a348:	0800a2b5 	.word	0x0800a2b5
 800a34c:	0800a195 	.word	0x0800a195
 800a350:	0800a279 	.word	0x0800a279
 800a354:	0800a201 	.word	0x0800a201

0800a358 <stage_rfft_f32>:
 800a358:	b410      	push	{r4}
 800a35a:	edd1 7a00 	vldr	s15, [r1]
 800a35e:	ed91 7a01 	vldr	s14, [r1, #4]
 800a362:	8804      	ldrh	r4, [r0, #0]
 800a364:	6940      	ldr	r0, [r0, #20]
 800a366:	ee37 7a07 	vadd.f32	s14, s14, s14
 800a36a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a36e:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800a372:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a376:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a37a:	3c01      	subs	r4, #1
 800a37c:	ee26 7a84 	vmul.f32	s14, s13, s8
 800a380:	ee67 7a84 	vmul.f32	s15, s15, s8
 800a384:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 800a388:	ed82 7a00 	vstr	s14, [r2]
 800a38c:	edc2 7a01 	vstr	s15, [r2, #4]
 800a390:	3010      	adds	r0, #16
 800a392:	3210      	adds	r2, #16
 800a394:	3b08      	subs	r3, #8
 800a396:	3110      	adds	r1, #16
 800a398:	ed11 5a02 	vldr	s10, [r1, #-8]
 800a39c:	ed93 7a02 	vldr	s14, [r3, #8]
 800a3a0:	ed50 6a02 	vldr	s13, [r0, #-8]
 800a3a4:	edd3 4a03 	vldr	s9, [r3, #12]
 800a3a8:	ed51 7a01 	vldr	s15, [r1, #-4]
 800a3ac:	ed10 6a01 	vldr	s12, [r0, #-4]
 800a3b0:	ee77 5a45 	vsub.f32	s11, s14, s10
 800a3b4:	ee37 7a05 	vadd.f32	s14, s14, s10
 800a3b8:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800a3bc:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800a3c0:	ee66 5a25 	vmul.f32	s11, s12, s11
 800a3c4:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800a3c8:	ee37 7a23 	vadd.f32	s14, s14, s7
 800a3cc:	ee66 6a85 	vmul.f32	s13, s13, s10
 800a3d0:	ee26 6a05 	vmul.f32	s12, s12, s10
 800a3d4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800a3d8:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a3dc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a3e0:	ee27 7a04 	vmul.f32	s14, s14, s8
 800a3e4:	ee67 7a84 	vmul.f32	s15, s15, s8
 800a3e8:	3c01      	subs	r4, #1
 800a3ea:	ed02 7a02 	vstr	s14, [r2, #-8]
 800a3ee:	ed42 7a01 	vstr	s15, [r2, #-4]
 800a3f2:	f1a3 0308 	sub.w	r3, r3, #8
 800a3f6:	f101 0108 	add.w	r1, r1, #8
 800a3fa:	f100 0008 	add.w	r0, r0, #8
 800a3fe:	f102 0208 	add.w	r2, r2, #8
 800a402:	d1c9      	bne.n	800a398 <stage_rfft_f32+0x40>
 800a404:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a408:	4770      	bx	lr
 800a40a:	bf00      	nop

0800a40c <merge_rfft_f32>:
 800a40c:	b410      	push	{r4}
 800a40e:	edd1 7a00 	vldr	s15, [r1]
 800a412:	edd1 6a01 	vldr	s13, [r1, #4]
 800a416:	8804      	ldrh	r4, [r0, #0]
 800a418:	6940      	ldr	r0, [r0, #20]
 800a41a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a41e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a422:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800a426:	ee27 7a04 	vmul.f32	s14, s14, s8
 800a42a:	ee67 7a84 	vmul.f32	s15, s15, s8
 800a42e:	3c01      	subs	r4, #1
 800a430:	ed82 7a00 	vstr	s14, [r2]
 800a434:	edc2 7a01 	vstr	s15, [r2, #4]
 800a438:	b3dc      	cbz	r4, 800a4b2 <merge_rfft_f32+0xa6>
 800a43a:	00e3      	lsls	r3, r4, #3
 800a43c:	3b08      	subs	r3, #8
 800a43e:	440b      	add	r3, r1
 800a440:	3010      	adds	r0, #16
 800a442:	3210      	adds	r2, #16
 800a444:	3110      	adds	r1, #16
 800a446:	ed11 5a02 	vldr	s10, [r1, #-8]
 800a44a:	ed93 7a02 	vldr	s14, [r3, #8]
 800a44e:	ed50 6a02 	vldr	s13, [r0, #-8]
 800a452:	edd3 4a03 	vldr	s9, [r3, #12]
 800a456:	ed51 7a01 	vldr	s15, [r1, #-4]
 800a45a:	ed10 6a01 	vldr	s12, [r0, #-4]
 800a45e:	ee75 5a47 	vsub.f32	s11, s10, s14
 800a462:	ee37 7a05 	vadd.f32	s14, s14, s10
 800a466:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800a46a:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800a46e:	ee66 5a25 	vmul.f32	s11, s12, s11
 800a472:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800a476:	ee37 7a63 	vsub.f32	s14, s14, s7
 800a47a:	ee66 6a85 	vmul.f32	s13, s13, s10
 800a47e:	ee26 6a05 	vmul.f32	s12, s12, s10
 800a482:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800a486:	ee37 7a46 	vsub.f32	s14, s14, s12
 800a48a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a48e:	ee27 7a04 	vmul.f32	s14, s14, s8
 800a492:	ee67 7a84 	vmul.f32	s15, s15, s8
 800a496:	3c01      	subs	r4, #1
 800a498:	ed02 7a02 	vstr	s14, [r2, #-8]
 800a49c:	ed42 7a01 	vstr	s15, [r2, #-4]
 800a4a0:	f1a3 0308 	sub.w	r3, r3, #8
 800a4a4:	f101 0108 	add.w	r1, r1, #8
 800a4a8:	f100 0008 	add.w	r0, r0, #8
 800a4ac:	f102 0208 	add.w	r2, r2, #8
 800a4b0:	d1c9      	bne.n	800a446 <merge_rfft_f32+0x3a>
 800a4b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4b6:	4770      	bx	lr

0800a4b8 <arm_rfft_fast_f32>:
 800a4b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4bc:	8a05      	ldrh	r5, [r0, #16]
 800a4be:	086d      	lsrs	r5, r5, #1
 800a4c0:	8005      	strh	r5, [r0, #0]
 800a4c2:	4604      	mov	r4, r0
 800a4c4:	4616      	mov	r6, r2
 800a4c6:	461d      	mov	r5, r3
 800a4c8:	b14b      	cbz	r3, 800a4de <arm_rfft_fast_f32+0x26>
 800a4ca:	f7ff ff9f 	bl	800a40c <merge_rfft_f32>
 800a4ce:	462a      	mov	r2, r5
 800a4d0:	4631      	mov	r1, r6
 800a4d2:	4620      	mov	r0, r4
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4da:	f000 bb33 	b.w	800ab44 <arm_cfft_f32>
 800a4de:	460f      	mov	r7, r1
 800a4e0:	461a      	mov	r2, r3
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	f000 fb2e 	bl	800ab44 <arm_cfft_f32>
 800a4e8:	4632      	mov	r2, r6
 800a4ea:	4639      	mov	r1, r7
 800a4ec:	4620      	mov	r0, r4
 800a4ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4f2:	f7ff bf31 	b.w	800a358 <stage_rfft_f32>
 800a4f6:	bf00      	nop

0800a4f8 <arm_cfft_radix8by2_f32>:
 800a4f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4fc:	ed2d 8b08 	vpush	{d8-d11}
 800a500:	4607      	mov	r7, r0
 800a502:	4608      	mov	r0, r1
 800a504:	f8b7 c000 	ldrh.w	ip, [r7]
 800a508:	687a      	ldr	r2, [r7, #4]
 800a50a:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800a50e:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800a512:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800a516:	f000 80b0 	beq.w	800a67a <arm_cfft_radix8by2_f32+0x182>
 800a51a:	008c      	lsls	r4, r1, #2
 800a51c:	3410      	adds	r4, #16
 800a51e:	f100 0310 	add.w	r3, r0, #16
 800a522:	1906      	adds	r6, r0, r4
 800a524:	3210      	adds	r2, #16
 800a526:	4444      	add	r4, r8
 800a528:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800a52c:	f108 0510 	add.w	r5, r8, #16
 800a530:	ed15 2a04 	vldr	s4, [r5, #-16]
 800a534:	ed55 2a03 	vldr	s5, [r5, #-12]
 800a538:	ed54 4a04 	vldr	s9, [r4, #-16]
 800a53c:	ed14 4a03 	vldr	s8, [r4, #-12]
 800a540:	ed14 6a02 	vldr	s12, [r4, #-8]
 800a544:	ed54 5a01 	vldr	s11, [r4, #-4]
 800a548:	ed53 3a04 	vldr	s7, [r3, #-16]
 800a54c:	ed15 0a02 	vldr	s0, [r5, #-8]
 800a550:	ed55 0a01 	vldr	s1, [r5, #-4]
 800a554:	ed56 6a04 	vldr	s13, [r6, #-16]
 800a558:	ed16 3a03 	vldr	s6, [r6, #-12]
 800a55c:	ed13 7a03 	vldr	s14, [r3, #-12]
 800a560:	ed13 5a02 	vldr	s10, [r3, #-8]
 800a564:	ed53 7a01 	vldr	s15, [r3, #-4]
 800a568:	ed16 1a02 	vldr	s2, [r6, #-8]
 800a56c:	ed56 1a01 	vldr	s3, [r6, #-4]
 800a570:	ee73 ba82 	vadd.f32	s23, s7, s4
 800a574:	ee37 ba22 	vadd.f32	s22, s14, s5
 800a578:	ee76 9aa4 	vadd.f32	s19, s13, s9
 800a57c:	ee33 9a04 	vadd.f32	s18, s6, s8
 800a580:	ee31 8aa5 	vadd.f32	s16, s3, s11
 800a584:	ee75 aa00 	vadd.f32	s21, s10, s0
 800a588:	ee37 aaa0 	vadd.f32	s20, s15, s1
 800a58c:	ee71 8a06 	vadd.f32	s17, s2, s12
 800a590:	ed43 ba04 	vstr	s23, [r3, #-16]
 800a594:	ed03 ba03 	vstr	s22, [r3, #-12]
 800a598:	ed43 aa02 	vstr	s21, [r3, #-8]
 800a59c:	ed03 aa01 	vstr	s20, [r3, #-4]
 800a5a0:	ed06 8a01 	vstr	s16, [r6, #-4]
 800a5a4:	ed46 9a04 	vstr	s19, [r6, #-16]
 800a5a8:	ed06 9a03 	vstr	s18, [r6, #-12]
 800a5ac:	ed46 8a02 	vstr	s17, [r6, #-8]
 800a5b0:	ee37 7a62 	vsub.f32	s14, s14, s5
 800a5b4:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800a5b8:	ee34 4a43 	vsub.f32	s8, s8, s6
 800a5bc:	ed52 6a03 	vldr	s13, [r2, #-12]
 800a5c0:	ed12 3a04 	vldr	s6, [r2, #-16]
 800a5c4:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800a5c8:	ee27 8a26 	vmul.f32	s16, s14, s13
 800a5cc:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800a5d0:	ee23 2a83 	vmul.f32	s4, s7, s6
 800a5d4:	ee64 4a83 	vmul.f32	s9, s9, s6
 800a5d8:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800a5dc:	ee27 7a03 	vmul.f32	s14, s14, s6
 800a5e0:	ee64 6a26 	vmul.f32	s13, s8, s13
 800a5e4:	ee24 4a03 	vmul.f32	s8, s8, s6
 800a5e8:	ee37 7a63 	vsub.f32	s14, s14, s7
 800a5ec:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800a5f0:	ee32 4ac4 	vsub.f32	s8, s5, s8
 800a5f4:	ee32 3a08 	vadd.f32	s6, s4, s16
 800a5f8:	ed05 7a03 	vstr	s14, [r5, #-12]
 800a5fc:	ed05 3a04 	vstr	s6, [r5, #-16]
 800a600:	ed04 4a04 	vstr	s8, [r4, #-16]
 800a604:	ed44 6a03 	vstr	s13, [r4, #-12]
 800a608:	ed12 7a01 	vldr	s14, [r2, #-4]
 800a60c:	ee76 6a41 	vsub.f32	s13, s12, s2
 800a610:	ee35 5a40 	vsub.f32	s10, s10, s0
 800a614:	ee35 6ae1 	vsub.f32	s12, s11, s3
 800a618:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800a61c:	ed52 5a02 	vldr	s11, [r2, #-8]
 800a620:	ee67 3a87 	vmul.f32	s7, s15, s14
 800a624:	ee66 4a87 	vmul.f32	s9, s13, s14
 800a628:	ee25 4a25 	vmul.f32	s8, s10, s11
 800a62c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a630:	ee25 5a07 	vmul.f32	s10, s10, s14
 800a634:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800a638:	ee26 7a07 	vmul.f32	s14, s12, s14
 800a63c:	ee26 6a25 	vmul.f32	s12, s12, s11
 800a640:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800a644:	ee74 5a23 	vadd.f32	s11, s8, s7
 800a648:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800a64c:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a650:	3310      	adds	r3, #16
 800a652:	4563      	cmp	r3, ip
 800a654:	ed45 5a02 	vstr	s11, [r5, #-8]
 800a658:	f106 0610 	add.w	r6, r6, #16
 800a65c:	ed45 7a01 	vstr	s15, [r5, #-4]
 800a660:	f102 0210 	add.w	r2, r2, #16
 800a664:	ed04 6a02 	vstr	s12, [r4, #-8]
 800a668:	ed04 7a01 	vstr	s14, [r4, #-4]
 800a66c:	f105 0510 	add.w	r5, r5, #16
 800a670:	f104 0410 	add.w	r4, r4, #16
 800a674:	f47f af5c 	bne.w	800a530 <arm_cfft_radix8by2_f32+0x38>
 800a678:	687a      	ldr	r2, [r7, #4]
 800a67a:	b28c      	uxth	r4, r1
 800a67c:	4621      	mov	r1, r4
 800a67e:	2302      	movs	r3, #2
 800a680:	f000 fec2 	bl	800b408 <arm_radix8_butterfly_f32>
 800a684:	ecbd 8b08 	vpop	{d8-d11}
 800a688:	4621      	mov	r1, r4
 800a68a:	687a      	ldr	r2, [r7, #4]
 800a68c:	4640      	mov	r0, r8
 800a68e:	2302      	movs	r3, #2
 800a690:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a694:	f000 beb8 	b.w	800b408 <arm_radix8_butterfly_f32>

0800a698 <arm_cfft_radix8by4_f32>:
 800a698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a69c:	ed2d 8b0a 	vpush	{d8-d12}
 800a6a0:	b08d      	sub	sp, #52	; 0x34
 800a6a2:	460d      	mov	r5, r1
 800a6a4:	910b      	str	r1, [sp, #44]	; 0x2c
 800a6a6:	8801      	ldrh	r1, [r0, #0]
 800a6a8:	6842      	ldr	r2, [r0, #4]
 800a6aa:	900a      	str	r0, [sp, #40]	; 0x28
 800a6ac:	0849      	lsrs	r1, r1, #1
 800a6ae:	008b      	lsls	r3, r1, #2
 800a6b0:	18ee      	adds	r6, r5, r3
 800a6b2:	18f0      	adds	r0, r6, r3
 800a6b4:	edd0 5a00 	vldr	s11, [r0]
 800a6b8:	edd5 7a00 	vldr	s15, [r5]
 800a6bc:	ed96 7a00 	vldr	s14, [r6]
 800a6c0:	edd0 3a01 	vldr	s7, [r0, #4]
 800a6c4:	ed96 4a01 	vldr	s8, [r6, #4]
 800a6c8:	ed95 5a01 	vldr	s10, [r5, #4]
 800a6cc:	9008      	str	r0, [sp, #32]
 800a6ce:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800a6d2:	18c7      	adds	r7, r0, r3
 800a6d4:	edd7 4a00 	vldr	s9, [r7]
 800a6d8:	ed97 3a01 	vldr	s6, [r7, #4]
 800a6dc:	9701      	str	r7, [sp, #4]
 800a6de:	ee77 6a06 	vadd.f32	s13, s14, s12
 800a6e2:	462c      	mov	r4, r5
 800a6e4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800a6e8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800a6ec:	ee16 ca90 	vmov	ip, s13
 800a6f0:	f844 cb08 	str.w	ip, [r4], #8
 800a6f4:	ee75 6a23 	vadd.f32	s13, s10, s7
 800a6f8:	edd6 5a01 	vldr	s11, [r6, #4]
 800a6fc:	edd7 2a01 	vldr	s5, [r7, #4]
 800a700:	9404      	str	r4, [sp, #16]
 800a702:	ee35 5a63 	vsub.f32	s10, s10, s7
 800a706:	ee74 3a27 	vadd.f32	s7, s8, s15
 800a70a:	ee36 6a47 	vsub.f32	s12, s12, s14
 800a70e:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800a712:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800a716:	0849      	lsrs	r1, r1, #1
 800a718:	f102 0e08 	add.w	lr, r2, #8
 800a71c:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800a720:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800a724:	9109      	str	r1, [sp, #36]	; 0x24
 800a726:	ee35 4a47 	vsub.f32	s8, s10, s14
 800a72a:	f1a1 0902 	sub.w	r9, r1, #2
 800a72e:	f8cd e00c 	str.w	lr, [sp, #12]
 800a732:	4631      	mov	r1, r6
 800a734:	ee13 ea90 	vmov	lr, s7
 800a738:	ee36 6a64 	vsub.f32	s12, s12, s9
 800a73c:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800a740:	4604      	mov	r4, r0
 800a742:	edc5 5a01 	vstr	s11, [r5, #4]
 800a746:	ee37 7a05 	vadd.f32	s14, s14, s10
 800a74a:	f841 eb08 	str.w	lr, [r1], #8
 800a74e:	ee34 5a24 	vadd.f32	s10, s8, s9
 800a752:	ee16 ea10 	vmov	lr, s12
 800a756:	ed86 5a01 	vstr	s10, [r6, #4]
 800a75a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800a75e:	f844 eb08 	str.w	lr, [r4], #8
 800a762:	ee77 7a83 	vadd.f32	s15, s15, s6
 800a766:	edc0 6a01 	vstr	s13, [r0, #4]
 800a76a:	9405      	str	r4, [sp, #20]
 800a76c:	4604      	mov	r4, r0
 800a76e:	ee17 0a90 	vmov	r0, s15
 800a772:	9106      	str	r1, [sp, #24]
 800a774:	ee37 7a64 	vsub.f32	s14, s14, s9
 800a778:	f102 0110 	add.w	r1, r2, #16
 800a77c:	46bc      	mov	ip, r7
 800a77e:	9100      	str	r1, [sp, #0]
 800a780:	f847 0b08 	str.w	r0, [r7], #8
 800a784:	f102 0118 	add.w	r1, r2, #24
 800a788:	ea5f 0059 	movs.w	r0, r9, lsr #1
 800a78c:	9102      	str	r1, [sp, #8]
 800a78e:	ed8c 7a01 	vstr	s14, [ip, #4]
 800a792:	9007      	str	r0, [sp, #28]
 800a794:	f000 8134 	beq.w	800aa00 <arm_cfft_radix8by4_f32+0x368>
 800a798:	f102 0920 	add.w	r9, r2, #32
 800a79c:	f102 0830 	add.w	r8, r2, #48	; 0x30
 800a7a0:	9a01      	ldr	r2, [sp, #4]
 800a7a2:	f8dd a000 	ldr.w	sl, [sp]
 800a7a6:	3b0c      	subs	r3, #12
 800a7a8:	4683      	mov	fp, r0
 800a7aa:	4463      	add	r3, ip
 800a7ac:	f105 0e10 	add.w	lr, r5, #16
 800a7b0:	f1a4 010c 	sub.w	r1, r4, #12
 800a7b4:	f104 0510 	add.w	r5, r4, #16
 800a7b8:	f1a6 0c0c 	sub.w	ip, r6, #12
 800a7bc:	f1a2 040c 	sub.w	r4, r2, #12
 800a7c0:	f106 0010 	add.w	r0, r6, #16
 800a7c4:	3210      	adds	r2, #16
 800a7c6:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800a7ca:	ed55 5a02 	vldr	s11, [r5, #-8]
 800a7ce:	ed50 7a02 	vldr	s15, [r0, #-8]
 800a7d2:	ed52 1a02 	vldr	s3, [r2, #-8]
 800a7d6:	ed55 6a01 	vldr	s13, [r5, #-4]
 800a7da:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800a7de:	ed12 1a01 	vldr	s2, [r2, #-4]
 800a7e2:	ed10 8a01 	vldr	s16, [r0, #-4]
 800a7e6:	ee35 4a25 	vadd.f32	s8, s10, s11
 800a7ea:	ee30 6a26 	vadd.f32	s12, s0, s13
 800a7ee:	ee37 7a84 	vadd.f32	s14, s15, s8
 800a7f2:	ee30 0a66 	vsub.f32	s0, s0, s13
 800a7f6:	ee37 7a21 	vadd.f32	s14, s14, s3
 800a7fa:	ee75 5a65 	vsub.f32	s11, s10, s11
 800a7fe:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800a802:	ed10 7a01 	vldr	s14, [r0, #-4]
 800a806:	ed52 6a01 	vldr	s13, [r2, #-4]
 800a80a:	ee36 7a07 	vadd.f32	s14, s12, s14
 800a80e:	ee78 aa25 	vadd.f32	s21, s16, s11
 800a812:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a816:	ee70 3a67 	vsub.f32	s7, s0, s15
 800a81a:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800a81e:	ed94 7a02 	vldr	s14, [r4, #8]
 800a822:	ed9c 2a02 	vldr	s4, [ip, #8]
 800a826:	ed91 ba02 	vldr	s22, [r1, #8]
 800a82a:	edd3 9a02 	vldr	s19, [r3, #8]
 800a82e:	edd4 2a01 	vldr	s5, [r4, #4]
 800a832:	ed9c 9a01 	vldr	s18, [ip, #4]
 800a836:	ed93 5a01 	vldr	s10, [r3, #4]
 800a83a:	edd1 0a01 	vldr	s1, [r1, #4]
 800a83e:	ee72 6a07 	vadd.f32	s13, s4, s14
 800a842:	ee32 2a47 	vsub.f32	s4, s4, s14
 800a846:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800a84a:	ee79 4a22 	vadd.f32	s9, s18, s5
 800a84e:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800a852:	ee79 2a62 	vsub.f32	s5, s18, s5
 800a856:	ed8c 7a02 	vstr	s14, [ip, #8]
 800a85a:	ed91 7a01 	vldr	s14, [r1, #4]
 800a85e:	edd3 8a01 	vldr	s17, [r3, #4]
 800a862:	ee34 7a87 	vadd.f32	s14, s9, s14
 800a866:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800a86a:	ee37 7a28 	vadd.f32	s14, s14, s17
 800a86e:	ee32 9a60 	vsub.f32	s18, s4, s1
 800a872:	ed8c 7a01 	vstr	s14, [ip, #4]
 800a876:	ed1a 7a01 	vldr	s14, [sl, #-4]
 800a87a:	ed1a aa02 	vldr	s20, [sl, #-8]
 800a87e:	ee73 8a22 	vadd.f32	s17, s6, s5
 800a882:	ee39 9a05 	vadd.f32	s18, s18, s10
 800a886:	ee7a aac1 	vsub.f32	s21, s21, s2
 800a88a:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800a88e:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800a892:	ee69 ba07 	vmul.f32	s23, s18, s14
 800a896:	ee6a aa87 	vmul.f32	s21, s21, s14
 800a89a:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800a89e:	ee63 ca87 	vmul.f32	s25, s7, s14
 800a8a2:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800a8a6:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800a8aa:	ee68 8a87 	vmul.f32	s17, s17, s14
 800a8ae:	ee73 3aea 	vsub.f32	s7, s7, s21
 800a8b2:	ee78 8a89 	vadd.f32	s17, s17, s18
 800a8b6:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800a8ba:	ee3b aaca 	vsub.f32	s20, s23, s20
 800a8be:	ee34 4a67 	vsub.f32	s8, s8, s15
 800a8c2:	ee76 6acb 	vsub.f32	s13, s13, s22
 800a8c6:	ee36 6a48 	vsub.f32	s12, s12, s16
 800a8ca:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800a8ce:	ed00 7a02 	vstr	s14, [r0, #-8]
 800a8d2:	ed40 3a01 	vstr	s7, [r0, #-4]
 800a8d6:	edc1 8a01 	vstr	s17, [r1, #4]
 800a8da:	ed81 aa02 	vstr	s20, [r1, #8]
 800a8de:	ed59 3a04 	vldr	s7, [r9, #-16]
 800a8e2:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800a8e6:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800a8ea:	ed59 6a03 	vldr	s13, [r9, #-12]
 800a8ee:	ee34 4a61 	vsub.f32	s8, s8, s3
 800a8f2:	ee36 6a41 	vsub.f32	s12, s12, s2
 800a8f6:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800a8fa:	ee66 9a26 	vmul.f32	s19, s12, s13
 800a8fe:	ee24 9a23 	vmul.f32	s18, s8, s7
 800a902:	ee26 6a23 	vmul.f32	s12, s12, s7
 800a906:	ee24 4a26 	vmul.f32	s8, s8, s13
 800a90a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a90e:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800a912:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800a916:	ee36 6a44 	vsub.f32	s12, s12, s8
 800a91a:	ee37 7a64 	vsub.f32	s14, s14, s9
 800a91e:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800a922:	ee79 3a29 	vadd.f32	s7, s18, s19
 800a926:	ee75 6a60 	vsub.f32	s13, s10, s1
 800a92a:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800a92e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a932:	ed45 3a02 	vstr	s7, [r5, #-8]
 800a936:	ed05 6a01 	vstr	s12, [r5, #-4]
 800a93a:	ed84 7a01 	vstr	s14, [r4, #4]
 800a93e:	ed84 4a02 	vstr	s8, [r4, #8]
 800a942:	ee35 6a81 	vadd.f32	s12, s11, s2
 800a946:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800a94a:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 800a94e:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 800a952:	ee33 3a62 	vsub.f32	s6, s6, s5
 800a956:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800a95a:	ee67 2a26 	vmul.f32	s5, s14, s13
 800a95e:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800a962:	ee26 5a25 	vmul.f32	s10, s12, s11
 800a966:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a96a:	ee26 6a26 	vmul.f32	s12, s12, s13
 800a96e:	ee27 7a25 	vmul.f32	s14, s14, s11
 800a972:	ee63 6a26 	vmul.f32	s13, s6, s13
 800a976:	ee23 3a25 	vmul.f32	s6, s6, s11
 800a97a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800a97e:	ee75 5a24 	vadd.f32	s11, s10, s9
 800a982:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800a986:	ee36 7a87 	vadd.f32	s14, s13, s14
 800a98a:	f1bb 0b01 	subs.w	fp, fp, #1
 800a98e:	ed42 5a02 	vstr	s11, [r2, #-8]
 800a992:	ed42 7a01 	vstr	s15, [r2, #-4]
 800a996:	f10e 0e08 	add.w	lr, lr, #8
 800a99a:	ed83 3a02 	vstr	s6, [r3, #8]
 800a99e:	ed83 7a01 	vstr	s14, [r3, #4]
 800a9a2:	f1ac 0c08 	sub.w	ip, ip, #8
 800a9a6:	f10a 0a08 	add.w	sl, sl, #8
 800a9aa:	f100 0008 	add.w	r0, r0, #8
 800a9ae:	f1a1 0108 	sub.w	r1, r1, #8
 800a9b2:	f109 0910 	add.w	r9, r9, #16
 800a9b6:	f105 0508 	add.w	r5, r5, #8
 800a9ba:	f1a4 0408 	sub.w	r4, r4, #8
 800a9be:	f108 0818 	add.w	r8, r8, #24
 800a9c2:	f102 0208 	add.w	r2, r2, #8
 800a9c6:	f1a3 0308 	sub.w	r3, r3, #8
 800a9ca:	f47f aefc 	bne.w	800a7c6 <arm_cfft_radix8by4_f32+0x12e>
 800a9ce:	9907      	ldr	r1, [sp, #28]
 800a9d0:	9800      	ldr	r0, [sp, #0]
 800a9d2:	00cb      	lsls	r3, r1, #3
 800a9d4:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800a9d8:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800a9dc:	9100      	str	r1, [sp, #0]
 800a9de:	9904      	ldr	r1, [sp, #16]
 800a9e0:	4419      	add	r1, r3
 800a9e2:	9104      	str	r1, [sp, #16]
 800a9e4:	9903      	ldr	r1, [sp, #12]
 800a9e6:	4419      	add	r1, r3
 800a9e8:	9103      	str	r1, [sp, #12]
 800a9ea:	9906      	ldr	r1, [sp, #24]
 800a9ec:	4419      	add	r1, r3
 800a9ee:	9106      	str	r1, [sp, #24]
 800a9f0:	9905      	ldr	r1, [sp, #20]
 800a9f2:	441f      	add	r7, r3
 800a9f4:	4419      	add	r1, r3
 800a9f6:	9b02      	ldr	r3, [sp, #8]
 800a9f8:	9105      	str	r1, [sp, #20]
 800a9fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a9fe:	9302      	str	r3, [sp, #8]
 800aa00:	9904      	ldr	r1, [sp, #16]
 800aa02:	9805      	ldr	r0, [sp, #20]
 800aa04:	ed91 4a00 	vldr	s8, [r1]
 800aa08:	edd0 6a00 	vldr	s13, [r0]
 800aa0c:	9b06      	ldr	r3, [sp, #24]
 800aa0e:	ed97 3a00 	vldr	s6, [r7]
 800aa12:	edd3 7a00 	vldr	s15, [r3]
 800aa16:	edd0 4a01 	vldr	s9, [r0, #4]
 800aa1a:	edd1 3a01 	vldr	s7, [r1, #4]
 800aa1e:	ed97 2a01 	vldr	s4, [r7, #4]
 800aa22:	ed93 7a01 	vldr	s14, [r3, #4]
 800aa26:	9a03      	ldr	r2, [sp, #12]
 800aa28:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 800aa2c:	ee34 6a26 	vadd.f32	s12, s8, s13
 800aa30:	ee73 5aa4 	vadd.f32	s11, s7, s9
 800aa34:	ee37 5a86 	vadd.f32	s10, s15, s12
 800aa38:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800aa3c:	ee35 5a03 	vadd.f32	s10, s10, s6
 800aa40:	ee74 6a66 	vsub.f32	s13, s8, s13
 800aa44:	ed81 5a00 	vstr	s10, [r1]
 800aa48:	ed93 5a01 	vldr	s10, [r3, #4]
 800aa4c:	edd7 4a01 	vldr	s9, [r7, #4]
 800aa50:	ee35 5a85 	vadd.f32	s10, s11, s10
 800aa54:	ee37 4a26 	vadd.f32	s8, s14, s13
 800aa58:	ee35 5a24 	vadd.f32	s10, s10, s9
 800aa5c:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800aa60:	ed81 5a01 	vstr	s10, [r1, #4]
 800aa64:	edd2 1a00 	vldr	s3, [r2]
 800aa68:	edd2 2a01 	vldr	s5, [r2, #4]
 800aa6c:	ee34 5a83 	vadd.f32	s10, s9, s6
 800aa70:	ee34 4a42 	vsub.f32	s8, s8, s4
 800aa74:	ee36 6a67 	vsub.f32	s12, s12, s15
 800aa78:	ee64 4a21 	vmul.f32	s9, s8, s3
 800aa7c:	ee24 4a22 	vmul.f32	s8, s8, s5
 800aa80:	ee65 2a22 	vmul.f32	s5, s10, s5
 800aa84:	ee25 5a21 	vmul.f32	s10, s10, s3
 800aa88:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800aa8c:	ee35 5a44 	vsub.f32	s10, s10, s8
 800aa90:	edc3 2a00 	vstr	s5, [r3]
 800aa94:	ed83 5a01 	vstr	s10, [r3, #4]
 800aa98:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800aa9c:	9b00      	ldr	r3, [sp, #0]
 800aa9e:	ee36 6a43 	vsub.f32	s12, s12, s6
 800aaa2:	ed93 4a01 	vldr	s8, [r3, #4]
 800aaa6:	ed93 5a00 	vldr	s10, [r3]
 800aaaa:	9b02      	ldr	r3, [sp, #8]
 800aaac:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800aab0:	ee66 4a05 	vmul.f32	s9, s12, s10
 800aab4:	ee25 5a85 	vmul.f32	s10, s11, s10
 800aab8:	ee26 6a04 	vmul.f32	s12, s12, s8
 800aabc:	ee65 5a84 	vmul.f32	s11, s11, s8
 800aac0:	ee35 6a46 	vsub.f32	s12, s10, s12
 800aac4:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800aac8:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800aacc:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800aad0:	ed80 6a01 	vstr	s12, [r0, #4]
 800aad4:	edc0 5a00 	vstr	s11, [r0]
 800aad8:	edd3 5a01 	vldr	s11, [r3, #4]
 800aadc:	edd3 6a00 	vldr	s13, [r3]
 800aae0:	ee37 7a02 	vadd.f32	s14, s14, s4
 800aae4:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800aae8:	ee27 6a26 	vmul.f32	s12, s14, s13
 800aaec:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800aaf0:	ee27 7a25 	vmul.f32	s14, s14, s11
 800aaf4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800aaf8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800aafc:	ee76 7a27 	vadd.f32	s15, s12, s15
 800ab00:	ed87 7a01 	vstr	s14, [r7, #4]
 800ab04:	edc7 7a00 	vstr	s15, [r7]
 800ab08:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 800ab0c:	4621      	mov	r1, r4
 800ab0e:	686a      	ldr	r2, [r5, #4]
 800ab10:	2304      	movs	r3, #4
 800ab12:	f000 fc79 	bl	800b408 <arm_radix8_butterfly_f32>
 800ab16:	4630      	mov	r0, r6
 800ab18:	4621      	mov	r1, r4
 800ab1a:	686a      	ldr	r2, [r5, #4]
 800ab1c:	2304      	movs	r3, #4
 800ab1e:	f000 fc73 	bl	800b408 <arm_radix8_butterfly_f32>
 800ab22:	9808      	ldr	r0, [sp, #32]
 800ab24:	686a      	ldr	r2, [r5, #4]
 800ab26:	4621      	mov	r1, r4
 800ab28:	2304      	movs	r3, #4
 800ab2a:	f000 fc6d 	bl	800b408 <arm_radix8_butterfly_f32>
 800ab2e:	686a      	ldr	r2, [r5, #4]
 800ab30:	9801      	ldr	r0, [sp, #4]
 800ab32:	4621      	mov	r1, r4
 800ab34:	2304      	movs	r3, #4
 800ab36:	b00d      	add	sp, #52	; 0x34
 800ab38:	ecbd 8b0a 	vpop	{d8-d12}
 800ab3c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab40:	f000 bc62 	b.w	800b408 <arm_radix8_butterfly_f32>

0800ab44 <arm_cfft_f32>:
 800ab44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab48:	2a01      	cmp	r2, #1
 800ab4a:	4606      	mov	r6, r0
 800ab4c:	4617      	mov	r7, r2
 800ab4e:	460c      	mov	r4, r1
 800ab50:	4698      	mov	r8, r3
 800ab52:	8805      	ldrh	r5, [r0, #0]
 800ab54:	d056      	beq.n	800ac04 <arm_cfft_f32+0xc0>
 800ab56:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800ab5a:	d063      	beq.n	800ac24 <arm_cfft_f32+0xe0>
 800ab5c:	d916      	bls.n	800ab8c <arm_cfft_f32+0x48>
 800ab5e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800ab62:	d01a      	beq.n	800ab9a <arm_cfft_f32+0x56>
 800ab64:	d947      	bls.n	800abf6 <arm_cfft_f32+0xb2>
 800ab66:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800ab6a:	d05b      	beq.n	800ac24 <arm_cfft_f32+0xe0>
 800ab6c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800ab70:	d105      	bne.n	800ab7e <arm_cfft_f32+0x3a>
 800ab72:	2301      	movs	r3, #1
 800ab74:	6872      	ldr	r2, [r6, #4]
 800ab76:	4629      	mov	r1, r5
 800ab78:	4620      	mov	r0, r4
 800ab7a:	f000 fc45 	bl	800b408 <arm_radix8_butterfly_f32>
 800ab7e:	f1b8 0f00 	cmp.w	r8, #0
 800ab82:	d111      	bne.n	800aba8 <arm_cfft_f32+0x64>
 800ab84:	2f01      	cmp	r7, #1
 800ab86:	d016      	beq.n	800abb6 <arm_cfft_f32+0x72>
 800ab88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab8c:	2d20      	cmp	r5, #32
 800ab8e:	d049      	beq.n	800ac24 <arm_cfft_f32+0xe0>
 800ab90:	d935      	bls.n	800abfe <arm_cfft_f32+0xba>
 800ab92:	2d40      	cmp	r5, #64	; 0x40
 800ab94:	d0ed      	beq.n	800ab72 <arm_cfft_f32+0x2e>
 800ab96:	2d80      	cmp	r5, #128	; 0x80
 800ab98:	d1f1      	bne.n	800ab7e <arm_cfft_f32+0x3a>
 800ab9a:	4621      	mov	r1, r4
 800ab9c:	4630      	mov	r0, r6
 800ab9e:	f7ff fcab 	bl	800a4f8 <arm_cfft_radix8by2_f32>
 800aba2:	f1b8 0f00 	cmp.w	r8, #0
 800aba6:	d0ed      	beq.n	800ab84 <arm_cfft_f32+0x40>
 800aba8:	68b2      	ldr	r2, [r6, #8]
 800abaa:	89b1      	ldrh	r1, [r6, #12]
 800abac:	4620      	mov	r0, r4
 800abae:	f000 f841 	bl	800ac34 <arm_bitreversal_32>
 800abb2:	2f01      	cmp	r7, #1
 800abb4:	d1e8      	bne.n	800ab88 <arm_cfft_f32+0x44>
 800abb6:	ee07 5a90 	vmov	s15, r5
 800abba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800abc2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800abc6:	2d00      	cmp	r5, #0
 800abc8:	d0de      	beq.n	800ab88 <arm_cfft_f32+0x44>
 800abca:	f104 0108 	add.w	r1, r4, #8
 800abce:	2300      	movs	r3, #0
 800abd0:	3301      	adds	r3, #1
 800abd2:	429d      	cmp	r5, r3
 800abd4:	f101 0108 	add.w	r1, r1, #8
 800abd8:	ed11 7a04 	vldr	s14, [r1, #-16]
 800abdc:	ed51 7a03 	vldr	s15, [r1, #-12]
 800abe0:	ee27 7a26 	vmul.f32	s14, s14, s13
 800abe4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800abe8:	ed01 7a04 	vstr	s14, [r1, #-16]
 800abec:	ed41 7a03 	vstr	s15, [r1, #-12]
 800abf0:	d1ee      	bne.n	800abd0 <arm_cfft_f32+0x8c>
 800abf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abf6:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800abfa:	d0ba      	beq.n	800ab72 <arm_cfft_f32+0x2e>
 800abfc:	e7bf      	b.n	800ab7e <arm_cfft_f32+0x3a>
 800abfe:	2d10      	cmp	r5, #16
 800ac00:	d0cb      	beq.n	800ab9a <arm_cfft_f32+0x56>
 800ac02:	e7bc      	b.n	800ab7e <arm_cfft_f32+0x3a>
 800ac04:	b19d      	cbz	r5, 800ac2e <arm_cfft_f32+0xea>
 800ac06:	f101 030c 	add.w	r3, r1, #12
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	ed53 7a02 	vldr	s15, [r3, #-8]
 800ac10:	3201      	adds	r2, #1
 800ac12:	eef1 7a67 	vneg.f32	s15, s15
 800ac16:	4295      	cmp	r5, r2
 800ac18:	ed43 7a02 	vstr	s15, [r3, #-8]
 800ac1c:	f103 0308 	add.w	r3, r3, #8
 800ac20:	d1f4      	bne.n	800ac0c <arm_cfft_f32+0xc8>
 800ac22:	e798      	b.n	800ab56 <arm_cfft_f32+0x12>
 800ac24:	4621      	mov	r1, r4
 800ac26:	4630      	mov	r0, r6
 800ac28:	f7ff fd36 	bl	800a698 <arm_cfft_radix8by4_f32>
 800ac2c:	e7a7      	b.n	800ab7e <arm_cfft_f32+0x3a>
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d0aa      	beq.n	800ab88 <arm_cfft_f32+0x44>
 800ac32:	e7b9      	b.n	800aba8 <arm_cfft_f32+0x64>

0800ac34 <arm_bitreversal_32>:
 800ac34:	b1e9      	cbz	r1, 800ac72 <arm_bitreversal_32+0x3e>
 800ac36:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac38:	2500      	movs	r5, #0
 800ac3a:	f102 0e02 	add.w	lr, r2, #2
 800ac3e:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800ac42:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800ac46:	08a4      	lsrs	r4, r4, #2
 800ac48:	089b      	lsrs	r3, r3, #2
 800ac4a:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800ac4e:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800ac52:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800ac56:	00a6      	lsls	r6, r4, #2
 800ac58:	009b      	lsls	r3, r3, #2
 800ac5a:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800ac5e:	3304      	adds	r3, #4
 800ac60:	1d34      	adds	r4, r6, #4
 800ac62:	3502      	adds	r5, #2
 800ac64:	58c6      	ldr	r6, [r0, r3]
 800ac66:	5907      	ldr	r7, [r0, r4]
 800ac68:	50c7      	str	r7, [r0, r3]
 800ac6a:	428d      	cmp	r5, r1
 800ac6c:	5106      	str	r6, [r0, r4]
 800ac6e:	d3e6      	bcc.n	800ac3e <arm_bitreversal_32+0xa>
 800ac70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac72:	4770      	bx	lr

0800ac74 <arm_mat_mult_f32>:
 800ac74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac78:	8845      	ldrh	r5, [r0, #2]
 800ac7a:	880b      	ldrh	r3, [r1, #0]
 800ac7c:	8806      	ldrh	r6, [r0, #0]
 800ac7e:	6847      	ldr	r7, [r0, #4]
 800ac80:	6854      	ldr	r4, [r2, #4]
 800ac82:	6848      	ldr	r0, [r1, #4]
 800ac84:	b08b      	sub	sp, #44	; 0x2c
 800ac86:	42ab      	cmp	r3, r5
 800ac88:	9109      	str	r1, [sp, #36]	; 0x24
 800ac8a:	9604      	str	r6, [sp, #16]
 800ac8c:	8849      	ldrh	r1, [r1, #2]
 800ac8e:	f040 808a 	bne.w	800ada6 <arm_mat_mult_f32+0x132>
 800ac92:	8815      	ldrh	r5, [r2, #0]
 800ac94:	42b5      	cmp	r5, r6
 800ac96:	f040 8086 	bne.w	800ada6 <arm_mat_mult_f32+0x132>
 800ac9a:	8852      	ldrh	r2, [r2, #2]
 800ac9c:	428a      	cmp	r2, r1
 800ac9e:	f040 8082 	bne.w	800ada6 <arm_mat_mult_f32+0x132>
 800aca2:	ea4f 0893 	mov.w	r8, r3, lsr #2
 800aca6:	1d01      	adds	r1, r0, #4
 800aca8:	0116      	lsls	r6, r2, #4
 800acaa:	9108      	str	r1, [sp, #32]
 800acac:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 800acb0:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 800acb4:	9101      	str	r1, [sp, #4]
 800acb6:	fb06 f108 	mul.w	r1, r6, r8
 800acba:	0095      	lsls	r5, r2, #2
 800acbc:	9103      	str	r1, [sp, #12]
 800acbe:	00d2      	lsls	r2, r2, #3
 800acc0:	ea4f 018c 	mov.w	r1, ip, lsl #2
 800acc4:	f003 0903 	and.w	r9, r3, #3
 800acc8:	009b      	lsls	r3, r3, #2
 800acca:	f107 0b10 	add.w	fp, r7, #16
 800acce:	eb04 0a05 	add.w	sl, r4, r5
 800acd2:	9107      	str	r1, [sp, #28]
 800acd4:	9202      	str	r2, [sp, #8]
 800acd6:	9306      	str	r3, [sp, #24]
 800acd8:	f1ab 0310 	sub.w	r3, fp, #16
 800acdc:	9305      	str	r3, [sp, #20]
 800acde:	9b07      	ldr	r3, [sp, #28]
 800ace0:	f8dd e020 	ldr.w	lr, [sp, #32]
 800ace4:	eb03 0c0a 	add.w	ip, r3, sl
 800ace8:	eddf 7a31 	vldr	s15, [pc, #196]	; 800adb0 <arm_mat_mult_f32+0x13c>
 800acec:	f1b8 0f00 	cmp.w	r8, #0
 800acf0:	d053      	beq.n	800ad9a <arm_mat_mult_f32+0x126>
 800acf2:	9b02      	ldr	r3, [sp, #8]
 800acf4:	4644      	mov	r4, r8
 800acf6:	18c1      	adds	r1, r0, r3
 800acf8:	4602      	mov	r2, r0
 800acfa:	465b      	mov	r3, fp
 800acfc:	ed92 6a00 	vldr	s12, [r2]
 800ad00:	ed13 7a04 	vldr	s14, [r3, #-16]
 800ad04:	ed53 4a03 	vldr	s9, [r3, #-12]
 800ad08:	ed53 6a02 	vldr	s13, [r3, #-8]
 800ad0c:	ed91 5a00 	vldr	s10, [r1]
 800ad10:	ed53 5a01 	vldr	s11, [r3, #-4]
 800ad14:	1957      	adds	r7, r2, r5
 800ad16:	ee27 7a06 	vmul.f32	s14, s14, s12
 800ad1a:	ed97 6a00 	vldr	s12, [r7]
 800ad1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ad22:	ee26 6a24 	vmul.f32	s12, s12, s9
 800ad26:	194f      	adds	r7, r1, r5
 800ad28:	ee36 6a27 	vadd.f32	s12, s12, s15
 800ad2c:	ee26 7a85 	vmul.f32	s14, s13, s10
 800ad30:	edd7 7a00 	vldr	s15, [r7]
 800ad34:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ad38:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ad3c:	3c01      	subs	r4, #1
 800ad3e:	4432      	add	r2, r6
 800ad40:	4431      	add	r1, r6
 800ad42:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ad46:	f103 0310 	add.w	r3, r3, #16
 800ad4a:	d1d7      	bne.n	800acfc <arm_mat_mult_f32+0x88>
 800ad4c:	9b03      	ldr	r3, [sp, #12]
 800ad4e:	9a01      	ldr	r2, [sp, #4]
 800ad50:	4418      	add	r0, r3
 800ad52:	f1b9 0f00 	cmp.w	r9, #0
 800ad56:	d00b      	beq.n	800ad70 <arm_mat_mult_f32+0xfc>
 800ad58:	464b      	mov	r3, r9
 800ad5a:	edd0 6a00 	vldr	s13, [r0]
 800ad5e:	ecb2 7a01 	vldmia	r2!, {s14}
 800ad62:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ad66:	3b01      	subs	r3, #1
 800ad68:	4428      	add	r0, r5
 800ad6a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ad6e:	d1f4      	bne.n	800ad5a <arm_mat_mult_f32+0xe6>
 800ad70:	ecec 7a01 	vstmia	ip!, {s15}
 800ad74:	45d4      	cmp	ip, sl
 800ad76:	4670      	mov	r0, lr
 800ad78:	f10e 0e04 	add.w	lr, lr, #4
 800ad7c:	d1b4      	bne.n	800ace8 <arm_mat_mult_f32+0x74>
 800ad7e:	9a01      	ldr	r2, [sp, #4]
 800ad80:	9b06      	ldr	r3, [sp, #24]
 800ad82:	4611      	mov	r1, r2
 800ad84:	4419      	add	r1, r3
 800ad86:	449b      	add	fp, r3
 800ad88:	9b04      	ldr	r3, [sp, #16]
 800ad8a:	9101      	str	r1, [sp, #4]
 800ad8c:	3b01      	subs	r3, #1
 800ad8e:	44aa      	add	sl, r5
 800ad90:	9304      	str	r3, [sp, #16]
 800ad92:	d004      	beq.n	800ad9e <arm_mat_mult_f32+0x12a>
 800ad94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad96:	6858      	ldr	r0, [r3, #4]
 800ad98:	e79e      	b.n	800acd8 <arm_mat_mult_f32+0x64>
 800ad9a:	9a05      	ldr	r2, [sp, #20]
 800ad9c:	e7d9      	b.n	800ad52 <arm_mat_mult_f32+0xde>
 800ad9e:	4618      	mov	r0, r3
 800ada0:	b00b      	add	sp, #44	; 0x2c
 800ada2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ada6:	f06f 0002 	mvn.w	r0, #2
 800adaa:	b00b      	add	sp, #44	; 0x2c
 800adac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adb0:	00000000 	.word	0x00000000

0800adb4 <arm_mat_inverse_f32>:
 800adb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adb8:	8843      	ldrh	r3, [r0, #2]
 800adba:	8804      	ldrh	r4, [r0, #0]
 800adbc:	684e      	ldr	r6, [r1, #4]
 800adbe:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800adc2:	b087      	sub	sp, #28
 800adc4:	429c      	cmp	r4, r3
 800adc6:	9301      	str	r3, [sp, #4]
 800adc8:	9603      	str	r6, [sp, #12]
 800adca:	f040 80ea 	bne.w	800afa2 <arm_mat_inverse_f32+0x1ee>
 800adce:	880a      	ldrh	r2, [r1, #0]
 800add0:	884b      	ldrh	r3, [r1, #2]
 800add2:	4293      	cmp	r3, r2
 800add4:	f040 80e5 	bne.w	800afa2 <arm_mat_inverse_f32+0x1ee>
 800add8:	429c      	cmp	r4, r3
 800adda:	f040 80e2 	bne.w	800afa2 <arm_mat_inverse_f32+0x1ee>
 800adde:	9005      	str	r0, [sp, #20]
 800ade0:	b30c      	cbz	r4, 800ae26 <arm_mat_inverse_f32+0x72>
 800ade2:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 800ade6:	1e67      	subs	r7, r4, #1
 800ade8:	f846 bb04 	str.w	fp, [r6], #4
 800adec:	d01b      	beq.n	800ae26 <arm_mat_inverse_f32+0x72>
 800adee:	f04f 0801 	mov.w	r8, #1
 800adf2:	00ba      	lsls	r2, r7, #2
 800adf4:	eb06 0a02 	add.w	sl, r6, r2
 800adf8:	ea4f 0588 	mov.w	r5, r8, lsl #2
 800adfc:	4630      	mov	r0, r6
 800adfe:	2100      	movs	r1, #0
 800ae00:	f000 fdc2 	bl	800b988 <memset>
 800ae04:	eb0a 0605 	add.w	r6, sl, r5
 800ae08:	462a      	mov	r2, r5
 800ae0a:	2100      	movs	r1, #0
 800ae0c:	4650      	mov	r0, sl
 800ae0e:	f1b8 0f00 	cmp.w	r8, #0
 800ae12:	f000 80cb 	beq.w	800afac <arm_mat_inverse_f32+0x1f8>
 800ae16:	f000 fdb7 	bl	800b988 <memset>
 800ae1a:	3f01      	subs	r7, #1
 800ae1c:	f108 0801 	add.w	r8, r8, #1
 800ae20:	f846 bb04 	str.w	fp, [r6], #4
 800ae24:	d1e5      	bne.n	800adf2 <arm_mat_inverse_f32+0x3e>
 800ae26:	9b01      	ldr	r3, [sp, #4]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	f000 80b5 	beq.w	800af98 <arm_mat_inverse_f32+0x1e4>
 800ae2e:	009d      	lsls	r5, r3, #2
 800ae30:	eb09 0205 	add.w	r2, r9, r5
 800ae34:	46cc      	mov	ip, r9
 800ae36:	9202      	str	r2, [sp, #8]
 800ae38:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800ae3c:	1d2a      	adds	r2, r5, #4
 800ae3e:	9204      	str	r2, [sp, #16]
 800ae40:	462f      	mov	r7, r5
 800ae42:	469e      	mov	lr, r3
 800ae44:	2600      	movs	r6, #0
 800ae46:	9b02      	ldr	r3, [sp, #8]
 800ae48:	eddc 6a00 	vldr	s13, [ip]
 800ae4c:	42b4      	cmp	r4, r6
 800ae4e:	eba3 0b07 	sub.w	fp, r3, r7
 800ae52:	f000 80a1 	beq.w	800af98 <arm_mat_inverse_f32+0x1e4>
 800ae56:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800afbc <arm_mat_inverse_f32+0x208>
 800ae5a:	4632      	mov	r2, r6
 800ae5c:	4663      	mov	r3, ip
 800ae5e:	e00b      	b.n	800ae78 <arm_mat_inverse_f32+0xc4>
 800ae60:	eef4 7a47 	vcmp.f32	s15, s14
 800ae64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae68:	f102 0201 	add.w	r2, r2, #1
 800ae6c:	bfc8      	it	gt
 800ae6e:	eeb0 7a67 	vmovgt.f32	s14, s15
 800ae72:	42a2      	cmp	r2, r4
 800ae74:	442b      	add	r3, r5
 800ae76:	d014      	beq.n	800aea2 <arm_mat_inverse_f32+0xee>
 800ae78:	edd3 7a00 	vldr	s15, [r3]
 800ae7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ae80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae84:	eeb1 6a67 	vneg.f32	s12, s15
 800ae88:	dcea      	bgt.n	800ae60 <arm_mat_inverse_f32+0xac>
 800ae8a:	eeb4 6a47 	vcmp.f32	s12, s14
 800ae8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae92:	f102 0201 	add.w	r2, r2, #1
 800ae96:	bfc8      	it	gt
 800ae98:	eeb0 7a46 	vmovgt.f32	s14, s12
 800ae9c:	42a2      	cmp	r2, r4
 800ae9e:	442b      	add	r3, r5
 800aea0:	d1ea      	bne.n	800ae78 <arm_mat_inverse_f32+0xc4>
 800aea2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800aea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeaa:	d075      	beq.n	800af98 <arm_mat_inverse_f32+0x1e4>
 800aeac:	eef5 6a40 	vcmp.f32	s13, #0.0
 800aeb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeb4:	d070      	beq.n	800af98 <arm_mat_inverse_f32+0x1e4>
 800aeb6:	4672      	mov	r2, lr
 800aeb8:	4663      	mov	r3, ip
 800aeba:	ed93 7a00 	vldr	s14, [r3]
 800aebe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800aec2:	3a01      	subs	r2, #1
 800aec4:	ece3 7a01 	vstmia	r3!, {s15}
 800aec8:	d1f7      	bne.n	800aeba <arm_mat_inverse_f32+0x106>
 800aeca:	9901      	ldr	r1, [sp, #4]
 800aecc:	464b      	mov	r3, r9
 800aece:	ed93 7a00 	vldr	s14, [r3]
 800aed2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800aed6:	3901      	subs	r1, #1
 800aed8:	ece3 7a01 	vstmia	r3!, {s15}
 800aedc:	d1f7      	bne.n	800aece <arm_mat_inverse_f32+0x11a>
 800aede:	9803      	ldr	r0, [sp, #12]
 800aee0:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800aee4:	42b1      	cmp	r1, r6
 800aee6:	d039      	beq.n	800af5c <arm_mat_inverse_f32+0x1a8>
 800aee8:	eddb 6a00 	vldr	s13, [fp]
 800aeec:	465a      	mov	r2, fp
 800aeee:	4673      	mov	r3, lr
 800aef0:	46e2      	mov	sl, ip
 800aef2:	ecba 7a01 	vldmia	sl!, {s14}
 800aef6:	edd2 7a00 	vldr	s15, [r2]
 800aefa:	ee26 7a87 	vmul.f32	s14, s13, s14
 800aefe:	3b01      	subs	r3, #1
 800af00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800af04:	ece2 7a01 	vstmia	r2!, {s15}
 800af08:	d1f3      	bne.n	800aef2 <arm_mat_inverse_f32+0x13e>
 800af0a:	9b01      	ldr	r3, [sp, #4]
 800af0c:	44bb      	add	fp, r7
 800af0e:	4602      	mov	r2, r0
 800af10:	46ca      	mov	sl, r9
 800af12:	ecba 7a01 	vldmia	sl!, {s14}
 800af16:	edd2 7a00 	vldr	s15, [r2]
 800af1a:	ee26 7a87 	vmul.f32	s14, s13, s14
 800af1e:	3b01      	subs	r3, #1
 800af20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800af24:	ece2 7a01 	vstmia	r2!, {s15}
 800af28:	d1f3      	bne.n	800af12 <arm_mat_inverse_f32+0x15e>
 800af2a:	4428      	add	r0, r5
 800af2c:	3101      	adds	r1, #1
 800af2e:	428c      	cmp	r4, r1
 800af30:	44c3      	add	fp, r8
 800af32:	d1d7      	bne.n	800aee4 <arm_mat_inverse_f32+0x130>
 800af34:	9b04      	ldr	r3, [sp, #16]
 800af36:	f1be 0e01 	subs.w	lr, lr, #1
 800af3a:	f106 0601 	add.w	r6, r6, #1
 800af3e:	449c      	add	ip, r3
 800af40:	f1a7 0704 	sub.w	r7, r7, #4
 800af44:	44a9      	add	r9, r5
 800af46:	f47f af7e 	bne.w	800ae46 <arm_mat_inverse_f32+0x92>
 800af4a:	eef5 6a40 	vcmp.f32	s13, #0.0
 800af4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af52:	d006      	beq.n	800af62 <arm_mat_inverse_f32+0x1ae>
 800af54:	2000      	movs	r0, #0
 800af56:	b007      	add	sp, #28
 800af58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af5c:	44bb      	add	fp, r7
 800af5e:	4428      	add	r0, r5
 800af60:	e7e4      	b.n	800af2c <arm_mat_inverse_f32+0x178>
 800af62:	9b05      	ldr	r3, [sp, #20]
 800af64:	9a01      	ldr	r2, [sp, #4]
 800af66:	685b      	ldr	r3, [r3, #4]
 800af68:	edd3 7a00 	vldr	s15, [r3]
 800af6c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800af70:	fb02 f204 	mul.w	r2, r2, r4
 800af74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af78:	4614      	mov	r4, r2
 800af7a:	bf08      	it	eq
 800af7c:	3304      	addeq	r3, #4
 800af7e:	d007      	beq.n	800af90 <arm_mat_inverse_f32+0x1dc>
 800af80:	e7e8      	b.n	800af54 <arm_mat_inverse_f32+0x1a0>
 800af82:	ecf3 7a01 	vldmia	r3!, {s15}
 800af86:	eef5 7a40 	vcmp.f32	s15, #0.0
 800af8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af8e:	d1e1      	bne.n	800af54 <arm_mat_inverse_f32+0x1a0>
 800af90:	f10e 0e01 	add.w	lr, lr, #1
 800af94:	4574      	cmp	r4, lr
 800af96:	d1f4      	bne.n	800af82 <arm_mat_inverse_f32+0x1ce>
 800af98:	f06f 0004 	mvn.w	r0, #4
 800af9c:	b007      	add	sp, #28
 800af9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afa2:	f06f 0002 	mvn.w	r0, #2
 800afa6:	b007      	add	sp, #28
 800afa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afac:	4656      	mov	r6, sl
 800afae:	3f01      	subs	r7, #1
 800afb0:	f846 bb04 	str.w	fp, [r6], #4
 800afb4:	f47f af1b 	bne.w	800adee <arm_mat_inverse_f32+0x3a>
 800afb8:	e735      	b.n	800ae26 <arm_mat_inverse_f32+0x72>
 800afba:	bf00      	nop
 800afbc:	00000000 	.word	0x00000000

0800afc0 <arm_mat_init_f32>:
 800afc0:	8001      	strh	r1, [r0, #0]
 800afc2:	8042      	strh	r2, [r0, #2]
 800afc4:	6043      	str	r3, [r0, #4]
 800afc6:	4770      	bx	lr

0800afc8 <arm_biquad_cascade_df2T_f32>:
 800afc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afcc:	7807      	ldrb	r7, [r0, #0]
 800afce:	ea4f 1e13 	mov.w	lr, r3, lsr #4
 800afd2:	6885      	ldr	r5, [r0, #8]
 800afd4:	3514      	adds	r5, #20
 800afd6:	6846      	ldr	r6, [r0, #4]
 800afd8:	3608      	adds	r6, #8
 800afda:	ea4f 198e 	mov.w	r9, lr, lsl #6
 800afde:	eb02 0b09 	add.w	fp, r2, r9
 800afe2:	f003 080f 	and.w	r8, r3, #15
 800afe6:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 800afea:	ed55 7a05 	vldr	s15, [r5, #-20]	; 0xffffffec
 800afee:	ed15 7a04 	vldr	s14, [r5, #-16]
 800aff2:	ed55 6a03 	vldr	s13, [r5, #-12]
 800aff6:	ed15 6a02 	vldr	s12, [r5, #-8]
 800affa:	ed55 5a01 	vldr	s11, [r5, #-4]
 800affe:	46b4      	mov	ip, r6
 800b000:	ed56 3a02 	vldr	s7, [r6, #-8]
 800b004:	ed16 4a01 	vldr	s8, [r6, #-4]
 800b008:	f1be 0f00 	cmp.w	lr, #0
 800b00c:	f000 8195 	beq.w	800b33a <arm_biquad_cascade_df2T_f32+0x372>
 800b010:	f101 0040 	add.w	r0, r1, #64	; 0x40
 800b014:	f102 0340 	add.w	r3, r2, #64	; 0x40
 800b018:	4674      	mov	r4, lr
 800b01a:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 800b01e:	ee27 5a83 	vmul.f32	s10, s15, s6
 800b022:	ee35 5a23 	vadd.f32	s10, s10, s7
 800b026:	ee67 4a03 	vmul.f32	s9, s14, s6
 800b02a:	ee34 4a84 	vadd.f32	s8, s9, s8
 800b02e:	ee66 4a05 	vmul.f32	s9, s12, s10
 800b032:	ee34 4a84 	vadd.f32	s8, s9, s8
 800b036:	ee26 3a83 	vmul.f32	s6, s13, s6
 800b03a:	ed03 5a10 	vstr	s10, [r3, #-64]	; 0xffffffc0
 800b03e:	ed50 3a0f 	vldr	s7, [r0, #-60]	; 0xffffffc4
 800b042:	ee67 4aa3 	vmul.f32	s9, s15, s7
 800b046:	ee74 4a84 	vadd.f32	s9, s9, s8
 800b04a:	ee25 5a85 	vmul.f32	s10, s11, s10
 800b04e:	ee35 5a03 	vadd.f32	s10, s10, s6
 800b052:	ee27 4a23 	vmul.f32	s8, s14, s7
 800b056:	ee35 5a04 	vadd.f32	s10, s10, s8
 800b05a:	ee26 3a24 	vmul.f32	s6, s12, s9
 800b05e:	ee33 3a05 	vadd.f32	s6, s6, s10
 800b062:	ee66 3aa3 	vmul.f32	s7, s13, s7
 800b066:	ed43 4a0f 	vstr	s9, [r3, #-60]	; 0xffffffc4
 800b06a:	ed10 4a0e 	vldr	s8, [r0, #-56]	; 0xffffffc8
 800b06e:	ee27 5a84 	vmul.f32	s10, s15, s8
 800b072:	ee35 5a03 	vadd.f32	s10, s10, s6
 800b076:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800b07a:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800b07e:	ee67 3a04 	vmul.f32	s7, s14, s8
 800b082:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800b086:	ee26 3a05 	vmul.f32	s6, s12, s10
 800b08a:	ee33 3a24 	vadd.f32	s6, s6, s9
 800b08e:	ee66 3a84 	vmul.f32	s7, s13, s8
 800b092:	ed03 5a0e 	vstr	s10, [r3, #-56]	; 0xffffffc8
 800b096:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 800b09a:	ee67 4a84 	vmul.f32	s9, s15, s8
 800b09e:	ee74 4a83 	vadd.f32	s9, s9, s6
 800b0a2:	ee25 5a85 	vmul.f32	s10, s11, s10
 800b0a6:	ee35 5a23 	vadd.f32	s10, s10, s7
 800b0aa:	ee67 3a04 	vmul.f32	s7, s14, s8
 800b0ae:	ee35 5a23 	vadd.f32	s10, s10, s7
 800b0b2:	ee26 3a24 	vmul.f32	s6, s12, s9
 800b0b6:	ee33 3a05 	vadd.f32	s6, s6, s10
 800b0ba:	ee66 3a84 	vmul.f32	s7, s13, s8
 800b0be:	ed43 4a0d 	vstr	s9, [r3, #-52]	; 0xffffffcc
 800b0c2:	ed10 4a0c 	vldr	s8, [r0, #-48]	; 0xffffffd0
 800b0c6:	ee27 5a84 	vmul.f32	s10, s15, s8
 800b0ca:	ee35 5a03 	vadd.f32	s10, s10, s6
 800b0ce:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800b0d2:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800b0d6:	ee67 3a04 	vmul.f32	s7, s14, s8
 800b0da:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800b0de:	ee26 3a05 	vmul.f32	s6, s12, s10
 800b0e2:	ee33 3a24 	vadd.f32	s6, s6, s9
 800b0e6:	ee66 3a84 	vmul.f32	s7, s13, s8
 800b0ea:	ed03 5a0c 	vstr	s10, [r3, #-48]	; 0xffffffd0
 800b0ee:	ed10 4a0b 	vldr	s8, [r0, #-44]	; 0xffffffd4
 800b0f2:	ee67 4a84 	vmul.f32	s9, s15, s8
 800b0f6:	ee74 4a83 	vadd.f32	s9, s9, s6
 800b0fa:	ee25 5a85 	vmul.f32	s10, s11, s10
 800b0fe:	ee35 5a23 	vadd.f32	s10, s10, s7
 800b102:	ee67 3a04 	vmul.f32	s7, s14, s8
 800b106:	ee35 5a23 	vadd.f32	s10, s10, s7
 800b10a:	ee26 3a24 	vmul.f32	s6, s12, s9
 800b10e:	ee33 3a05 	vadd.f32	s6, s6, s10
 800b112:	ee66 3a84 	vmul.f32	s7, s13, s8
 800b116:	ed43 4a0b 	vstr	s9, [r3, #-44]	; 0xffffffd4
 800b11a:	ed10 4a0a 	vldr	s8, [r0, #-40]	; 0xffffffd8
 800b11e:	ee27 5a84 	vmul.f32	s10, s15, s8
 800b122:	ee35 5a03 	vadd.f32	s10, s10, s6
 800b126:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800b12a:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800b12e:	ee67 3a04 	vmul.f32	s7, s14, s8
 800b132:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800b136:	ee26 3a05 	vmul.f32	s6, s12, s10
 800b13a:	ee33 3a24 	vadd.f32	s6, s6, s9
 800b13e:	ee66 3a84 	vmul.f32	s7, s13, s8
 800b142:	ed03 5a0a 	vstr	s10, [r3, #-40]	; 0xffffffd8
 800b146:	ed10 4a09 	vldr	s8, [r0, #-36]	; 0xffffffdc
 800b14a:	ee67 4a84 	vmul.f32	s9, s15, s8
 800b14e:	ee74 4a83 	vadd.f32	s9, s9, s6
 800b152:	ee25 5a85 	vmul.f32	s10, s11, s10
 800b156:	ee35 5a23 	vadd.f32	s10, s10, s7
 800b15a:	ee67 3a04 	vmul.f32	s7, s14, s8
 800b15e:	ee35 5a23 	vadd.f32	s10, s10, s7
 800b162:	ee26 3a24 	vmul.f32	s6, s12, s9
 800b166:	ee33 3a05 	vadd.f32	s6, s6, s10
 800b16a:	ee66 3a84 	vmul.f32	s7, s13, s8
 800b16e:	ed43 4a09 	vstr	s9, [r3, #-36]	; 0xffffffdc
 800b172:	ed10 4a08 	vldr	s8, [r0, #-32]	; 0xffffffe0
 800b176:	ee27 5a84 	vmul.f32	s10, s15, s8
 800b17a:	ee35 5a03 	vadd.f32	s10, s10, s6
 800b17e:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800b182:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800b186:	ee67 3a04 	vmul.f32	s7, s14, s8
 800b18a:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800b18e:	ee26 3a05 	vmul.f32	s6, s12, s10
 800b192:	ee33 3a24 	vadd.f32	s6, s6, s9
 800b196:	ee66 3a84 	vmul.f32	s7, s13, s8
 800b19a:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 800b19e:	ed10 4a07 	vldr	s8, [r0, #-28]	; 0xffffffe4
 800b1a2:	ee67 4a84 	vmul.f32	s9, s15, s8
 800b1a6:	ee74 4a83 	vadd.f32	s9, s9, s6
 800b1aa:	ee25 5a85 	vmul.f32	s10, s11, s10
 800b1ae:	ee35 5a23 	vadd.f32	s10, s10, s7
 800b1b2:	ee67 3a04 	vmul.f32	s7, s14, s8
 800b1b6:	ee35 5a23 	vadd.f32	s10, s10, s7
 800b1ba:	ee26 3a24 	vmul.f32	s6, s12, s9
 800b1be:	ee33 3a05 	vadd.f32	s6, s6, s10
 800b1c2:	ee66 3a84 	vmul.f32	s7, s13, s8
 800b1c6:	ed43 4a07 	vstr	s9, [r3, #-28]	; 0xffffffe4
 800b1ca:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 800b1ce:	ee27 5a84 	vmul.f32	s10, s15, s8
 800b1d2:	ee35 5a03 	vadd.f32	s10, s10, s6
 800b1d6:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800b1da:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800b1de:	ee67 3a04 	vmul.f32	s7, s14, s8
 800b1e2:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800b1e6:	ee26 3a05 	vmul.f32	s6, s12, s10
 800b1ea:	ee33 3a24 	vadd.f32	s6, s6, s9
 800b1ee:	ee66 3a84 	vmul.f32	s7, s13, s8
 800b1f2:	ed03 5a06 	vstr	s10, [r3, #-24]	; 0xffffffe8
 800b1f6:	ed10 4a05 	vldr	s8, [r0, #-20]	; 0xffffffec
 800b1fa:	ee67 4a84 	vmul.f32	s9, s15, s8
 800b1fe:	ee74 4a83 	vadd.f32	s9, s9, s6
 800b202:	ee25 5a85 	vmul.f32	s10, s11, s10
 800b206:	ee35 5a23 	vadd.f32	s10, s10, s7
 800b20a:	ee67 3a04 	vmul.f32	s7, s14, s8
 800b20e:	ee35 5a23 	vadd.f32	s10, s10, s7
 800b212:	ee26 3a24 	vmul.f32	s6, s12, s9
 800b216:	ee33 3a05 	vadd.f32	s6, s6, s10
 800b21a:	ee66 3a84 	vmul.f32	s7, s13, s8
 800b21e:	ed43 4a05 	vstr	s9, [r3, #-20]	; 0xffffffec
 800b222:	ed10 4a04 	vldr	s8, [r0, #-16]
 800b226:	ee27 5a84 	vmul.f32	s10, s15, s8
 800b22a:	ee35 5a03 	vadd.f32	s10, s10, s6
 800b22e:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800b232:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800b236:	ee67 3a04 	vmul.f32	s7, s14, s8
 800b23a:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800b23e:	ee26 3a05 	vmul.f32	s6, s12, s10
 800b242:	ee33 3a24 	vadd.f32	s6, s6, s9
 800b246:	ee66 3a84 	vmul.f32	s7, s13, s8
 800b24a:	ed03 5a04 	vstr	s10, [r3, #-16]
 800b24e:	ed10 4a03 	vldr	s8, [r0, #-12]
 800b252:	ee67 4a84 	vmul.f32	s9, s15, s8
 800b256:	ee74 4a83 	vadd.f32	s9, s9, s6
 800b25a:	ee25 5a85 	vmul.f32	s10, s11, s10
 800b25e:	ee35 5a23 	vadd.f32	s10, s10, s7
 800b262:	ee67 3a04 	vmul.f32	s7, s14, s8
 800b266:	ee35 5a23 	vadd.f32	s10, s10, s7
 800b26a:	ee26 3a24 	vmul.f32	s6, s12, s9
 800b26e:	ee33 3a05 	vadd.f32	s6, s6, s10
 800b272:	ee66 3a84 	vmul.f32	s7, s13, s8
 800b276:	ed43 4a03 	vstr	s9, [r3, #-12]
 800b27a:	ed10 4a02 	vldr	s8, [r0, #-8]
 800b27e:	ee27 5a84 	vmul.f32	s10, s15, s8
 800b282:	ee35 5a03 	vadd.f32	s10, s10, s6
 800b286:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800b28a:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800b28e:	ee67 3a04 	vmul.f32	s7, s14, s8
 800b292:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800b296:	ee26 3a05 	vmul.f32	s6, s12, s10
 800b29a:	ee33 3a24 	vadd.f32	s6, s6, s9
 800b29e:	ee66 3a84 	vmul.f32	s7, s13, s8
 800b2a2:	ed03 5a02 	vstr	s10, [r3, #-8]
 800b2a6:	ed10 4a01 	vldr	s8, [r0, #-4]
 800b2aa:	ee67 4a84 	vmul.f32	s9, s15, s8
 800b2ae:	ee74 4a83 	vadd.f32	s9, s9, s6
 800b2b2:	ee25 5a85 	vmul.f32	s10, s11, s10
 800b2b6:	ee35 5a23 	vadd.f32	s10, s10, s7
 800b2ba:	ee67 3a04 	vmul.f32	s7, s14, s8
 800b2be:	ee35 5a23 	vadd.f32	s10, s10, s7
 800b2c2:	ee66 3a24 	vmul.f32	s7, s12, s9
 800b2c6:	ee73 3a85 	vadd.f32	s7, s7, s10
 800b2ca:	ee26 5a84 	vmul.f32	s10, s13, s8
 800b2ce:	ee25 4aa4 	vmul.f32	s8, s11, s9
 800b2d2:	ee34 4a05 	vadd.f32	s8, s8, s10
 800b2d6:	ed43 4a01 	vstr	s9, [r3, #-4]
 800b2da:	3040      	adds	r0, #64	; 0x40
 800b2dc:	3340      	adds	r3, #64	; 0x40
 800b2de:	3c01      	subs	r4, #1
 800b2e0:	f47f ae9b 	bne.w	800b01a <arm_biquad_cascade_df2T_f32+0x52>
 800b2e4:	4449      	add	r1, r9
 800b2e6:	465b      	mov	r3, fp
 800b2e8:	f1b8 0f00 	cmp.w	r8, #0
 800b2ec:	d019      	beq.n	800b322 <arm_biquad_cascade_df2T_f32+0x35a>
 800b2ee:	eb01 000a 	add.w	r0, r1, sl
 800b2f2:	ecf1 2a01 	vldmia	r1!, {s5}
 800b2f6:	ee27 3aa2 	vmul.f32	s6, s15, s5
 800b2fa:	ee33 3a23 	vadd.f32	s6, s6, s7
 800b2fe:	ee67 3a22 	vmul.f32	s7, s14, s5
 800b302:	ee33 4a84 	vadd.f32	s8, s7, s8
 800b306:	ee26 5a03 	vmul.f32	s10, s12, s6
 800b30a:	ee75 3a04 	vadd.f32	s7, s10, s8
 800b30e:	ee66 2aa2 	vmul.f32	s5, s13, s5
 800b312:	ee25 4a83 	vmul.f32	s8, s11, s6
 800b316:	ee34 4a22 	vadd.f32	s8, s8, s5
 800b31a:	eca3 3a01 	vstmia	r3!, {s6}
 800b31e:	4281      	cmp	r1, r0
 800b320:	d1e7      	bne.n	800b2f2 <arm_biquad_cascade_df2T_f32+0x32a>
 800b322:	ed4c 3a02 	vstr	s7, [ip, #-8]
 800b326:	ed0c 4a01 	vstr	s8, [ip, #-4]
 800b32a:	3514      	adds	r5, #20
 800b32c:	3608      	adds	r6, #8
 800b32e:	4611      	mov	r1, r2
 800b330:	3f01      	subs	r7, #1
 800b332:	f47f ae5a 	bne.w	800afea <arm_biquad_cascade_df2T_f32+0x22>
 800b336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b33a:	4613      	mov	r3, r2
 800b33c:	e7d4      	b.n	800b2e8 <arm_biquad_cascade_df2T_f32+0x320>
	...

0800b340 <arm_biquad_cascade_df2T_init_f32>:
 800b340:	b510      	push	{r4, lr}
 800b342:	6082      	str	r2, [r0, #8]
 800b344:	7001      	strb	r1, [r0, #0]
 800b346:	4604      	mov	r4, r0
 800b348:	00ca      	lsls	r2, r1, #3
 800b34a:	4618      	mov	r0, r3
 800b34c:	2100      	movs	r1, #0
 800b34e:	f000 fb1b 	bl	800b988 <memset>
 800b352:	6060      	str	r0, [r4, #4]
 800b354:	bd10      	pop	{r4, pc}
 800b356:	bf00      	nop

0800b358 <arm_dot_prod_f32>:
 800b358:	b4f0      	push	{r4, r5, r6, r7}
 800b35a:	0897      	lsrs	r7, r2, #2
 800b35c:	eddf 5a29 	vldr	s11, [pc, #164]	; 800b404 <arm_dot_prod_f32+0xac>
 800b360:	d02d      	beq.n	800b3be <arm_dot_prod_f32+0x66>
 800b362:	f100 0510 	add.w	r5, r0, #16
 800b366:	f101 0410 	add.w	r4, r1, #16
 800b36a:	463e      	mov	r6, r7
 800b36c:	ed55 6a04 	vldr	s13, [r5, #-16]
 800b370:	ed54 3a04 	vldr	s7, [r4, #-16]
 800b374:	ed15 7a03 	vldr	s14, [r5, #-12]
 800b378:	ed14 4a03 	vldr	s8, [r4, #-12]
 800b37c:	ed55 7a02 	vldr	s15, [r5, #-8]
 800b380:	ed54 4a02 	vldr	s9, [r4, #-8]
 800b384:	ed15 6a01 	vldr	s12, [r5, #-4]
 800b388:	ed14 5a01 	vldr	s10, [r4, #-4]
 800b38c:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800b390:	ee27 7a04 	vmul.f32	s14, s14, s8
 800b394:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800b398:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800b39c:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b3a0:	ee66 6a05 	vmul.f32	s13, s12, s10
 800b3a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b3a8:	3e01      	subs	r6, #1
 800b3aa:	f105 0510 	add.w	r5, r5, #16
 800b3ae:	ee76 5aa7 	vadd.f32	s11, s13, s15
 800b3b2:	f104 0410 	add.w	r4, r4, #16
 800b3b6:	d1d9      	bne.n	800b36c <arm_dot_prod_f32+0x14>
 800b3b8:	013f      	lsls	r7, r7, #4
 800b3ba:	4438      	add	r0, r7
 800b3bc:	4439      	add	r1, r7
 800b3be:	f012 0203 	ands.w	r2, r2, #3
 800b3c2:	d01b      	beq.n	800b3fc <arm_dot_prod_f32+0xa4>
 800b3c4:	edd1 7a00 	vldr	s15, [r1]
 800b3c8:	ed90 7a00 	vldr	s14, [r0]
 800b3cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b3d0:	3a01      	subs	r2, #1
 800b3d2:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800b3d6:	d011      	beq.n	800b3fc <arm_dot_prod_f32+0xa4>
 800b3d8:	edd1 7a01 	vldr	s15, [r1, #4]
 800b3dc:	ed90 7a01 	vldr	s14, [r0, #4]
 800b3e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b3e4:	2a01      	cmp	r2, #1
 800b3e6:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800b3ea:	d007      	beq.n	800b3fc <arm_dot_prod_f32+0xa4>
 800b3ec:	edd0 7a02 	vldr	s15, [r0, #8]
 800b3f0:	ed91 7a02 	vldr	s14, [r1, #8]
 800b3f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b3f8:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800b3fc:	edc3 5a00 	vstr	s11, [r3]
 800b400:	bcf0      	pop	{r4, r5, r6, r7}
 800b402:	4770      	bx	lr
 800b404:	00000000 	.word	0x00000000

0800b408 <arm_radix8_butterfly_f32>:
 800b408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b40c:	ed2d 8b10 	vpush	{d8-d15}
 800b410:	b095      	sub	sp, #84	; 0x54
 800b412:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800b416:	4603      	mov	r3, r0
 800b418:	3304      	adds	r3, #4
 800b41a:	ed9f bab9 	vldr	s22, [pc, #740]	; 800b700 <arm_radix8_butterfly_f32+0x2f8>
 800b41e:	9012      	str	r0, [sp, #72]	; 0x48
 800b420:	468b      	mov	fp, r1
 800b422:	9313      	str	r3, [sp, #76]	; 0x4c
 800b424:	4689      	mov	r9, r1
 800b426:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800b42a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b42c:	960f      	str	r6, [sp, #60]	; 0x3c
 800b42e:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800b432:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800b436:	eb03 0508 	add.w	r5, r3, r8
 800b43a:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800b43e:	eb05 040e 	add.w	r4, r5, lr
 800b442:	0137      	lsls	r7, r6, #4
 800b444:	eba6 030a 	sub.w	r3, r6, sl
 800b448:	eb04 000e 	add.w	r0, r4, lr
 800b44c:	44b2      	add	sl, r6
 800b44e:	1d3a      	adds	r2, r7, #4
 800b450:	9702      	str	r7, [sp, #8]
 800b452:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800b456:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800b45a:	ebae 0c06 	sub.w	ip, lr, r6
 800b45e:	9703      	str	r7, [sp, #12]
 800b460:	eb03 0708 	add.w	r7, r3, r8
 800b464:	9701      	str	r7, [sp, #4]
 800b466:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800b46a:	9706      	str	r7, [sp, #24]
 800b46c:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800b46e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800b472:	f10e 0104 	add.w	r1, lr, #4
 800b476:	4439      	add	r1, r7
 800b478:	443a      	add	r2, r7
 800b47a:	0137      	lsls	r7, r6, #4
 800b47c:	00f6      	lsls	r6, r6, #3
 800b47e:	9704      	str	r7, [sp, #16]
 800b480:	9605      	str	r6, [sp, #20]
 800b482:	9f01      	ldr	r7, [sp, #4]
 800b484:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800b486:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800b48a:	f04f 0c00 	mov.w	ip, #0
 800b48e:	edd4 6a00 	vldr	s13, [r4]
 800b492:	edd7 1a00 	vldr	s3, [r7]
 800b496:	ed16 aa01 	vldr	s20, [r6, #-4]
 800b49a:	edd5 5a00 	vldr	s11, [r5]
 800b49e:	ed52 9a01 	vldr	s19, [r2, #-4]
 800b4a2:	ed90 6a00 	vldr	s12, [r0]
 800b4a6:	ed51 7a01 	vldr	s15, [r1, #-4]
 800b4aa:	ed93 3a00 	vldr	s6, [r3]
 800b4ae:	ee39 0a86 	vadd.f32	s0, s19, s12
 800b4b2:	ee33 2a21 	vadd.f32	s4, s6, s3
 800b4b6:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800b4ba:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800b4be:	ee35 7a02 	vadd.f32	s14, s10, s4
 800b4c2:	ee34 4a80 	vadd.f32	s8, s9, s0
 800b4c6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b4ca:	ee74 6a07 	vadd.f32	s13, s8, s14
 800b4ce:	ee34 4a47 	vsub.f32	s8, s8, s14
 800b4d2:	ed46 6a01 	vstr	s13, [r6, #-4]
 800b4d6:	ed85 4a00 	vstr	s8, [r5]
 800b4da:	edd1 6a00 	vldr	s13, [r1]
 800b4de:	ed94 9a01 	vldr	s18, [r4, #4]
 800b4e2:	edd3 2a01 	vldr	s5, [r3, #4]
 800b4e6:	edd7 8a01 	vldr	s17, [r7, #4]
 800b4ea:	edd6 0a00 	vldr	s1, [r6]
 800b4ee:	edd5 3a01 	vldr	s7, [r5, #4]
 800b4f2:	ed90 8a01 	vldr	s16, [r0, #4]
 800b4f6:	ed92 7a00 	vldr	s14, [r2]
 800b4fa:	ee33 3a61 	vsub.f32	s6, s6, s3
 800b4fe:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800b502:	ee72 aae8 	vsub.f32	s21, s5, s17
 800b506:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800b50a:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800b50e:	ee77 7a83 	vadd.f32	s15, s15, s6
 800b512:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800b516:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800b51a:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800b51e:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800b522:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800b526:	ee77 0a08 	vadd.f32	s1, s14, s16
 800b52a:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800b52e:	ee37 7a48 	vsub.f32	s14, s14, s16
 800b532:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800b536:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800b53a:	ee76 6a89 	vadd.f32	s13, s13, s18
 800b53e:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800b542:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800b546:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800b54a:	ee35 5a42 	vsub.f32	s10, s10, s4
 800b54e:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800b552:	ee33 2a20 	vadd.f32	s4, s6, s1
 800b556:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800b55a:	ee33 3a60 	vsub.f32	s6, s6, s1
 800b55e:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800b562:	ee77 0a01 	vadd.f32	s1, s14, s2
 800b566:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800b56a:	ee37 7a41 	vsub.f32	s14, s14, s2
 800b56e:	ee73 1a84 	vadd.f32	s3, s7, s8
 800b572:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800b576:	ee76 3a27 	vadd.f32	s7, s12, s15
 800b57a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800b57e:	ee32 8a00 	vadd.f32	s16, s4, s0
 800b582:	ee33 1a45 	vsub.f32	s2, s6, s10
 800b586:	ee32 2a40 	vsub.f32	s4, s4, s0
 800b58a:	ee35 5a03 	vadd.f32	s10, s10, s6
 800b58e:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800b592:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800b596:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800b59a:	ee34 6a67 	vsub.f32	s12, s8, s15
 800b59e:	ee75 4a87 	vadd.f32	s9, s11, s14
 800b5a2:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800b5a6:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800b5aa:	ee77 7a84 	vadd.f32	s15, s15, s8
 800b5ae:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800b5b2:	44dc      	add	ip, fp
 800b5b4:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800b5b8:	45e1      	cmp	r9, ip
 800b5ba:	ed86 8a00 	vstr	s16, [r6]
 800b5be:	ed85 2a01 	vstr	s4, [r5, #4]
 800b5c2:	4456      	add	r6, sl
 800b5c4:	ed02 0a01 	vstr	s0, [r2, #-4]
 800b5c8:	4455      	add	r5, sl
 800b5ca:	edc0 6a00 	vstr	s13, [r0]
 800b5ce:	ed82 1a00 	vstr	s2, [r2]
 800b5d2:	ed80 5a01 	vstr	s10, [r0, #4]
 800b5d6:	4452      	add	r2, sl
 800b5d8:	ed01 3a01 	vstr	s6, [r1, #-4]
 800b5dc:	4450      	add	r0, sl
 800b5de:	edc7 2a00 	vstr	s5, [r7]
 800b5e2:	edc4 4a00 	vstr	s9, [r4]
 800b5e6:	ed83 7a00 	vstr	s14, [r3]
 800b5ea:	edc1 5a00 	vstr	s11, [r1]
 800b5ee:	edc7 3a01 	vstr	s7, [r7, #4]
 800b5f2:	4451      	add	r1, sl
 800b5f4:	ed84 6a01 	vstr	s12, [r4, #4]
 800b5f8:	4457      	add	r7, sl
 800b5fa:	edc3 7a01 	vstr	s15, [r3, #4]
 800b5fe:	4454      	add	r4, sl
 800b600:	4453      	add	r3, sl
 800b602:	f63f af44 	bhi.w	800b48e <arm_radix8_butterfly_f32+0x86>
 800b606:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b608:	2b07      	cmp	r3, #7
 800b60a:	f240 81b7 	bls.w	800b97c <arm_radix8_butterfly_f32+0x574>
 800b60e:	9b06      	ldr	r3, [sp, #24]
 800b610:	9903      	ldr	r1, [sp, #12]
 800b612:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b614:	9e05      	ldr	r6, [sp, #20]
 800b616:	9a04      	ldr	r2, [sp, #16]
 800b618:	f103 0c08 	add.w	ip, r3, #8
 800b61c:	9b02      	ldr	r3, [sp, #8]
 800b61e:	3108      	adds	r1, #8
 800b620:	f108 0808 	add.w	r8, r8, #8
 800b624:	1841      	adds	r1, r0, r1
 800b626:	3608      	adds	r6, #8
 800b628:	330c      	adds	r3, #12
 800b62a:	4604      	mov	r4, r0
 800b62c:	4444      	add	r4, r8
 800b62e:	18c3      	adds	r3, r0, r3
 800b630:	9109      	str	r1, [sp, #36]	; 0x24
 800b632:	1981      	adds	r1, r0, r6
 800b634:	f10e 0e08 	add.w	lr, lr, #8
 800b638:	3208      	adds	r2, #8
 800b63a:	940b      	str	r4, [sp, #44]	; 0x2c
 800b63c:	9107      	str	r1, [sp, #28]
 800b63e:	4604      	mov	r4, r0
 800b640:	4601      	mov	r1, r0
 800b642:	9304      	str	r3, [sp, #16]
 800b644:	f100 030c 	add.w	r3, r0, #12
 800b648:	4474      	add	r4, lr
 800b64a:	f04f 0801 	mov.w	r8, #1
 800b64e:	1882      	adds	r2, r0, r2
 800b650:	4461      	add	r1, ip
 800b652:	9305      	str	r3, [sp, #20]
 800b654:	464b      	mov	r3, r9
 800b656:	940a      	str	r4, [sp, #40]	; 0x28
 800b658:	46c1      	mov	r9, r8
 800b65a:	9208      	str	r2, [sp, #32]
 800b65c:	46d8      	mov	r8, fp
 800b65e:	9106      	str	r1, [sp, #24]
 800b660:	f04f 0e00 	mov.w	lr, #0
 800b664:	469b      	mov	fp, r3
 800b666:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b668:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b66a:	449e      	add	lr, r3
 800b66c:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800b670:	441a      	add	r2, r3
 800b672:	920e      	str	r2, [sp, #56]	; 0x38
 800b674:	441a      	add	r2, r3
 800b676:	18d4      	adds	r4, r2, r3
 800b678:	18e5      	adds	r5, r4, r3
 800b67a:	18ee      	adds	r6, r5, r3
 800b67c:	18f7      	adds	r7, r6, r3
 800b67e:	eb07 0c03 	add.w	ip, r7, r3
 800b682:	920d      	str	r2, [sp, #52]	; 0x34
 800b684:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 800b688:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 800b68c:	910c      	str	r1, [sp, #48]	; 0x30
 800b68e:	4419      	add	r1, r3
 800b690:	9103      	str	r1, [sp, #12]
 800b692:	4419      	add	r1, r3
 800b694:	18ca      	adds	r2, r1, r3
 800b696:	9202      	str	r2, [sp, #8]
 800b698:	441a      	add	r2, r3
 800b69a:	18d0      	adds	r0, r2, r3
 800b69c:	ed92 ea01 	vldr	s28, [r2, #4]
 800b6a0:	9a02      	ldr	r2, [sp, #8]
 800b6a2:	edd4 7a00 	vldr	s15, [r4]
 800b6a6:	edd2 da01 	vldr	s27, [r2, #4]
 800b6aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b6ac:	ed91 da01 	vldr	s26, [r1, #4]
 800b6b0:	ed92 ca01 	vldr	s24, [r2, #4]
 800b6b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b6b6:	9903      	ldr	r1, [sp, #12]
 800b6b8:	edcd 7a03 	vstr	s15, [sp, #12]
 800b6bc:	edd2 7a00 	vldr	s15, [r2]
 800b6c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b6c2:	edcd 7a02 	vstr	s15, [sp, #8]
 800b6c6:	edd2 7a00 	vldr	s15, [r2]
 800b6ca:	edd0 ea01 	vldr	s29, [r0, #4]
 800b6ce:	edd1 ca01 	vldr	s25, [r1, #4]
 800b6d2:	eddc ba00 	vldr	s23, [ip]
 800b6d6:	edd7 aa00 	vldr	s21, [r7]
 800b6da:	ed96 aa00 	vldr	s20, [r6]
 800b6de:	edd5 9a00 	vldr	s19, [r5]
 800b6e2:	edcd 7a01 	vstr	s15, [sp, #4]
 800b6e6:	4403      	add	r3, r0
 800b6e8:	ed93 fa01 	vldr	s30, [r3, #4]
 800b6ec:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800b6f0:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800b6f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b6f8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b6fc:	46cc      	mov	ip, r9
 800b6fe:	e001      	b.n	800b704 <arm_radix8_butterfly_f32+0x2fc>
 800b700:	3f3504f3 	.word	0x3f3504f3
 800b704:	ed91 6a00 	vldr	s12, [r1]
 800b708:	ed93 5a00 	vldr	s10, [r3]
 800b70c:	edd0 fa00 	vldr	s31, [r0]
 800b710:	edd4 7a00 	vldr	s15, [r4]
 800b714:	ed95 7a00 	vldr	s14, [r5]
 800b718:	ed56 3a01 	vldr	s7, [r6, #-4]
 800b71c:	ed17 3a01 	vldr	s6, [r7, #-4]
 800b720:	ed92 2a00 	vldr	s4, [r2]
 800b724:	ed96 0a00 	vldr	s0, [r6]
 800b728:	ee33 8a85 	vadd.f32	s16, s7, s10
 800b72c:	ee32 1a06 	vadd.f32	s2, s4, s12
 800b730:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800b734:	ee77 4a87 	vadd.f32	s9, s15, s14
 800b738:	ee78 1a04 	vadd.f32	s3, s16, s8
 800b73c:	ee71 6a24 	vadd.f32	s13, s2, s9
 800b740:	ee32 2a46 	vsub.f32	s4, s4, s12
 800b744:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800b748:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b74c:	ed06 6a01 	vstr	s12, [r6, #-4]
 800b750:	edd4 8a01 	vldr	s17, [r4, #4]
 800b754:	ed92 9a01 	vldr	s18, [r2, #4]
 800b758:	edd7 0a00 	vldr	s1, [r7]
 800b75c:	edd1 2a01 	vldr	s5, [r1, #4]
 800b760:	ed95 7a01 	vldr	s14, [r5, #4]
 800b764:	ed93 6a01 	vldr	s12, [r3, #4]
 800b768:	edd0 5a01 	vldr	s11, [r0, #4]
 800b76c:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800b770:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800b774:	ee39 5a62 	vsub.f32	s10, s18, s5
 800b778:	ee78 fac7 	vsub.f32	s31, s17, s14
 800b77c:	ee38 4a44 	vsub.f32	s8, s16, s8
 800b780:	ee38 7a87 	vadd.f32	s14, s17, s14
 800b784:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800b788:	ee79 2a22 	vadd.f32	s5, s18, s5
 800b78c:	ee32 9a27 	vadd.f32	s18, s4, s15
 800b790:	ee72 7a67 	vsub.f32	s15, s4, s15
 800b794:	ee30 2a06 	vadd.f32	s4, s0, s12
 800b798:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800b79c:	ee71 4a64 	vsub.f32	s9, s2, s9
 800b7a0:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800b7a4:	ee32 1a08 	vadd.f32	s2, s4, s16
 800b7a8:	ee72 fa87 	vadd.f32	s31, s5, s14
 800b7ac:	ee32 2a48 	vsub.f32	s4, s4, s16
 800b7b0:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800b7b4:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800b7b8:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800b7bc:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800b7c0:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800b7c4:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800b7c8:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800b7cc:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800b7d0:	ee30 6a46 	vsub.f32	s12, s0, s12
 800b7d4:	ee74 0a22 	vadd.f32	s1, s8, s5
 800b7d8:	ee36 0a28 	vadd.f32	s0, s12, s17
 800b7dc:	ee74 2a62 	vsub.f32	s5, s8, s5
 800b7e0:	ee36 6a68 	vsub.f32	s12, s12, s17
 800b7e4:	ee32 4a64 	vsub.f32	s8, s4, s9
 800b7e8:	ee73 8a09 	vadd.f32	s17, s6, s18
 800b7ec:	ee74 4a82 	vadd.f32	s9, s9, s4
 800b7f0:	ee33 9a49 	vsub.f32	s18, s6, s18
 800b7f4:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800b7f8:	ee35 3a85 	vadd.f32	s6, s11, s10
 800b7fc:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800b800:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800b804:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800b808:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800b80c:	ee30 7a68 	vsub.f32	s14, s0, s17
 800b810:	ee35 8a03 	vadd.f32	s16, s10, s6
 800b814:	ee38 0a80 	vadd.f32	s0, s17, s0
 800b818:	ee73 3a82 	vadd.f32	s7, s7, s4
 800b81c:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800b820:	ed9d 2a01 	vldr	s4, [sp, #4]
 800b824:	eddd 1a02 	vldr	s3, [sp, #8]
 800b828:	ee35 5a43 	vsub.f32	s10, s10, s6
 800b82c:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800b830:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800b834:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800b838:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800b83c:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800b840:	ee76 5a49 	vsub.f32	s11, s12, s18
 800b844:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800b848:	ee39 6a06 	vadd.f32	s12, s18, s12
 800b84c:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800b850:	ee21 4a84 	vmul.f32	s8, s3, s8
 800b854:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800b858:	ee22 7a07 	vmul.f32	s14, s4, s14
 800b85c:	ee22 2a08 	vmul.f32	s4, s4, s16
 800b860:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800b864:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800b868:	ee31 1a09 	vadd.f32	s2, s2, s18
 800b86c:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800b870:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800b874:	ee74 0a60 	vsub.f32	s1, s8, s1
 800b878:	ee37 7a48 	vsub.f32	s14, s14, s16
 800b87c:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800b880:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800b884:	ee72 1a21 	vadd.f32	s3, s4, s3
 800b888:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800b88c:	ee38 2a89 	vadd.f32	s4, s17, s18
 800b890:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800b894:	ee38 8a04 	vadd.f32	s16, s16, s8
 800b898:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800b89c:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800b8a0:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800b8a4:	eddd 5a03 	vldr	s11, [sp, #12]
 800b8a8:	edc6 fa00 	vstr	s31, [r6]
 800b8ac:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800b8b0:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800b8b4:	ee30 0a45 	vsub.f32	s0, s0, s10
 800b8b8:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800b8bc:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800b8c0:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800b8c4:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800b8c8:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800b8cc:	ee25 6a86 	vmul.f32	s12, s11, s12
 800b8d0:	ee74 4a89 	vadd.f32	s9, s9, s18
 800b8d4:	ee34 3a43 	vsub.f32	s6, s8, s6
 800b8d8:	ee78 8a85 	vadd.f32	s17, s17, s10
 800b8dc:	ee36 6a67 	vsub.f32	s12, s12, s15
 800b8e0:	44c4      	add	ip, r8
 800b8e2:	45e3      	cmp	fp, ip
 800b8e4:	edc3 3a00 	vstr	s7, [r3]
 800b8e8:	edc3 6a01 	vstr	s13, [r3, #4]
 800b8ec:	4456      	add	r6, sl
 800b8ee:	ed07 1a01 	vstr	s2, [r7, #-4]
 800b8f2:	edc7 0a00 	vstr	s1, [r7]
 800b8f6:	4453      	add	r3, sl
 800b8f8:	ed80 2a00 	vstr	s4, [r0]
 800b8fc:	edc0 2a01 	vstr	s5, [r0, #4]
 800b900:	4457      	add	r7, sl
 800b902:	edc2 1a00 	vstr	s3, [r2]
 800b906:	ed82 7a01 	vstr	s14, [r2, #4]
 800b90a:	4450      	add	r0, sl
 800b90c:	ed85 8a00 	vstr	s16, [r5]
 800b910:	ed85 0a01 	vstr	s0, [r5, #4]
 800b914:	4452      	add	r2, sl
 800b916:	edc1 4a00 	vstr	s9, [r1]
 800b91a:	4455      	add	r5, sl
 800b91c:	ed81 3a01 	vstr	s6, [r1, #4]
 800b920:	edc4 8a00 	vstr	s17, [r4]
 800b924:	ed84 6a01 	vstr	s12, [r4, #4]
 800b928:	4451      	add	r1, sl
 800b92a:	4454      	add	r4, sl
 800b92c:	f63f aeea 	bhi.w	800b704 <arm_radix8_butterfly_f32+0x2fc>
 800b930:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b932:	3308      	adds	r3, #8
 800b934:	930b      	str	r3, [sp, #44]	; 0x2c
 800b936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b938:	3308      	adds	r3, #8
 800b93a:	930a      	str	r3, [sp, #40]	; 0x28
 800b93c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b93e:	3308      	adds	r3, #8
 800b940:	9309      	str	r3, [sp, #36]	; 0x24
 800b942:	9b08      	ldr	r3, [sp, #32]
 800b944:	3308      	adds	r3, #8
 800b946:	9308      	str	r3, [sp, #32]
 800b948:	9b07      	ldr	r3, [sp, #28]
 800b94a:	3308      	adds	r3, #8
 800b94c:	9307      	str	r3, [sp, #28]
 800b94e:	9b06      	ldr	r3, [sp, #24]
 800b950:	3308      	adds	r3, #8
 800b952:	9306      	str	r3, [sp, #24]
 800b954:	9b05      	ldr	r3, [sp, #20]
 800b956:	3308      	adds	r3, #8
 800b958:	9305      	str	r3, [sp, #20]
 800b95a:	9b04      	ldr	r3, [sp, #16]
 800b95c:	3308      	adds	r3, #8
 800b95e:	9304      	str	r3, [sp, #16]
 800b960:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b962:	f109 0901 	add.w	r9, r9, #1
 800b966:	454b      	cmp	r3, r9
 800b968:	f47f ae7d 	bne.w	800b666 <arm_radix8_butterfly_f32+0x25e>
 800b96c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b96e:	00db      	lsls	r3, r3, #3
 800b970:	b29b      	uxth	r3, r3
 800b972:	46d9      	mov	r9, fp
 800b974:	9310      	str	r3, [sp, #64]	; 0x40
 800b976:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 800b97a:	e554      	b.n	800b426 <arm_radix8_butterfly_f32+0x1e>
 800b97c:	b015      	add	sp, #84	; 0x54
 800b97e:	ecbd 8b10 	vpop	{d8-d15}
 800b982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b986:	bf00      	nop

0800b988 <memset>:
 800b988:	4402      	add	r2, r0
 800b98a:	4603      	mov	r3, r0
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d100      	bne.n	800b992 <memset+0xa>
 800b990:	4770      	bx	lr
 800b992:	f803 1b01 	strb.w	r1, [r3], #1
 800b996:	e7f9      	b.n	800b98c <memset+0x4>

0800b998 <__errno>:
 800b998:	4b01      	ldr	r3, [pc, #4]	; (800b9a0 <__errno+0x8>)
 800b99a:	6818      	ldr	r0, [r3, #0]
 800b99c:	4770      	bx	lr
 800b99e:	bf00      	nop
 800b9a0:	200078c4 	.word	0x200078c4

0800b9a4 <__libc_init_array>:
 800b9a4:	b570      	push	{r4, r5, r6, lr}
 800b9a6:	4d0d      	ldr	r5, [pc, #52]	; (800b9dc <__libc_init_array+0x38>)
 800b9a8:	4c0d      	ldr	r4, [pc, #52]	; (800b9e0 <__libc_init_array+0x3c>)
 800b9aa:	1b64      	subs	r4, r4, r5
 800b9ac:	10a4      	asrs	r4, r4, #2
 800b9ae:	2600      	movs	r6, #0
 800b9b0:	42a6      	cmp	r6, r4
 800b9b2:	d109      	bne.n	800b9c8 <__libc_init_array+0x24>
 800b9b4:	4d0b      	ldr	r5, [pc, #44]	; (800b9e4 <__libc_init_array+0x40>)
 800b9b6:	4c0c      	ldr	r4, [pc, #48]	; (800b9e8 <__libc_init_array+0x44>)
 800b9b8:	f001 f96c 	bl	800cc94 <_init>
 800b9bc:	1b64      	subs	r4, r4, r5
 800b9be:	10a4      	asrs	r4, r4, #2
 800b9c0:	2600      	movs	r6, #0
 800b9c2:	42a6      	cmp	r6, r4
 800b9c4:	d105      	bne.n	800b9d2 <__libc_init_array+0x2e>
 800b9c6:	bd70      	pop	{r4, r5, r6, pc}
 800b9c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9cc:	4798      	blx	r3
 800b9ce:	3601      	adds	r6, #1
 800b9d0:	e7ee      	b.n	800b9b0 <__libc_init_array+0xc>
 800b9d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9d6:	4798      	blx	r3
 800b9d8:	3601      	adds	r6, #1
 800b9da:	e7f2      	b.n	800b9c2 <__libc_init_array+0x1e>
 800b9dc:	0801fd08 	.word	0x0801fd08
 800b9e0:	0801fd08 	.word	0x0801fd08
 800b9e4:	0801fd08 	.word	0x0801fd08
 800b9e8:	0801fd0c 	.word	0x0801fd0c
 800b9ec:	00000000 	.word	0x00000000

0800b9f0 <exp>:
 800b9f0:	b538      	push	{r3, r4, r5, lr}
 800b9f2:	ed2d 8b02 	vpush	{d8}
 800b9f6:	ec55 4b10 	vmov	r4, r5, d0
 800b9fa:	f000 f9e5 	bl	800bdc8 <__ieee754_exp>
 800b9fe:	eeb0 8a40 	vmov.f32	s16, s0
 800ba02:	eef0 8a60 	vmov.f32	s17, s1
 800ba06:	ec45 4b10 	vmov	d0, r4, r5
 800ba0a:	f000 f8f3 	bl	800bbf4 <finite>
 800ba0e:	b168      	cbz	r0, 800ba2c <exp+0x3c>
 800ba10:	a317      	add	r3, pc, #92	; (adr r3, 800ba70 <exp+0x80>)
 800ba12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba16:	4620      	mov	r0, r4
 800ba18:	4629      	mov	r1, r5
 800ba1a:	f7f5 f849 	bl	8000ab0 <__aeabi_dcmpgt>
 800ba1e:	b160      	cbz	r0, 800ba3a <exp+0x4a>
 800ba20:	f7ff ffba 	bl	800b998 <__errno>
 800ba24:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 800ba60 <exp+0x70>
 800ba28:	2322      	movs	r3, #34	; 0x22
 800ba2a:	6003      	str	r3, [r0, #0]
 800ba2c:	eeb0 0a48 	vmov.f32	s0, s16
 800ba30:	eef0 0a68 	vmov.f32	s1, s17
 800ba34:	ecbd 8b02 	vpop	{d8}
 800ba38:	bd38      	pop	{r3, r4, r5, pc}
 800ba3a:	a30f      	add	r3, pc, #60	; (adr r3, 800ba78 <exp+0x88>)
 800ba3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba40:	4620      	mov	r0, r4
 800ba42:	4629      	mov	r1, r5
 800ba44:	f7f5 f816 	bl	8000a74 <__aeabi_dcmplt>
 800ba48:	2800      	cmp	r0, #0
 800ba4a:	d0ef      	beq.n	800ba2c <exp+0x3c>
 800ba4c:	f7ff ffa4 	bl	800b998 <__errno>
 800ba50:	2322      	movs	r3, #34	; 0x22
 800ba52:	ed9f 8b05 	vldr	d8, [pc, #20]	; 800ba68 <exp+0x78>
 800ba56:	6003      	str	r3, [r0, #0]
 800ba58:	e7e8      	b.n	800ba2c <exp+0x3c>
 800ba5a:	bf00      	nop
 800ba5c:	f3af 8000 	nop.w
 800ba60:	00000000 	.word	0x00000000
 800ba64:	7ff00000 	.word	0x7ff00000
	...
 800ba70:	fefa39ef 	.word	0xfefa39ef
 800ba74:	40862e42 	.word	0x40862e42
 800ba78:	d52d3051 	.word	0xd52d3051
 800ba7c:	c0874910 	.word	0xc0874910

0800ba80 <pow>:
 800ba80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba82:	ed2d 8b02 	vpush	{d8}
 800ba86:	eeb0 8a40 	vmov.f32	s16, s0
 800ba8a:	eef0 8a60 	vmov.f32	s17, s1
 800ba8e:	ec55 4b11 	vmov	r4, r5, d1
 800ba92:	f000 fb1d 	bl	800c0d0 <__ieee754_pow>
 800ba96:	4622      	mov	r2, r4
 800ba98:	462b      	mov	r3, r5
 800ba9a:	4620      	mov	r0, r4
 800ba9c:	4629      	mov	r1, r5
 800ba9e:	ec57 6b10 	vmov	r6, r7, d0
 800baa2:	f7f5 f80f 	bl	8000ac4 <__aeabi_dcmpun>
 800baa6:	2800      	cmp	r0, #0
 800baa8:	d13b      	bne.n	800bb22 <pow+0xa2>
 800baaa:	ec51 0b18 	vmov	r0, r1, d8
 800baae:	2200      	movs	r2, #0
 800bab0:	2300      	movs	r3, #0
 800bab2:	f7f4 ffd5 	bl	8000a60 <__aeabi_dcmpeq>
 800bab6:	b1b8      	cbz	r0, 800bae8 <pow+0x68>
 800bab8:	2200      	movs	r2, #0
 800baba:	2300      	movs	r3, #0
 800babc:	4620      	mov	r0, r4
 800babe:	4629      	mov	r1, r5
 800bac0:	f7f4 ffce 	bl	8000a60 <__aeabi_dcmpeq>
 800bac4:	2800      	cmp	r0, #0
 800bac6:	d146      	bne.n	800bb56 <pow+0xd6>
 800bac8:	ec45 4b10 	vmov	d0, r4, r5
 800bacc:	f000 f892 	bl	800bbf4 <finite>
 800bad0:	b338      	cbz	r0, 800bb22 <pow+0xa2>
 800bad2:	2200      	movs	r2, #0
 800bad4:	2300      	movs	r3, #0
 800bad6:	4620      	mov	r0, r4
 800bad8:	4629      	mov	r1, r5
 800bada:	f7f4 ffcb 	bl	8000a74 <__aeabi_dcmplt>
 800bade:	b300      	cbz	r0, 800bb22 <pow+0xa2>
 800bae0:	f7ff ff5a 	bl	800b998 <__errno>
 800bae4:	2322      	movs	r3, #34	; 0x22
 800bae6:	e01b      	b.n	800bb20 <pow+0xa0>
 800bae8:	ec47 6b10 	vmov	d0, r6, r7
 800baec:	f000 f882 	bl	800bbf4 <finite>
 800baf0:	b9e0      	cbnz	r0, 800bb2c <pow+0xac>
 800baf2:	eeb0 0a48 	vmov.f32	s0, s16
 800baf6:	eef0 0a68 	vmov.f32	s1, s17
 800bafa:	f000 f87b 	bl	800bbf4 <finite>
 800bafe:	b1a8      	cbz	r0, 800bb2c <pow+0xac>
 800bb00:	ec45 4b10 	vmov	d0, r4, r5
 800bb04:	f000 f876 	bl	800bbf4 <finite>
 800bb08:	b180      	cbz	r0, 800bb2c <pow+0xac>
 800bb0a:	4632      	mov	r2, r6
 800bb0c:	463b      	mov	r3, r7
 800bb0e:	4630      	mov	r0, r6
 800bb10:	4639      	mov	r1, r7
 800bb12:	f7f4 ffd7 	bl	8000ac4 <__aeabi_dcmpun>
 800bb16:	2800      	cmp	r0, #0
 800bb18:	d0e2      	beq.n	800bae0 <pow+0x60>
 800bb1a:	f7ff ff3d 	bl	800b998 <__errno>
 800bb1e:	2321      	movs	r3, #33	; 0x21
 800bb20:	6003      	str	r3, [r0, #0]
 800bb22:	ecbd 8b02 	vpop	{d8}
 800bb26:	ec47 6b10 	vmov	d0, r6, r7
 800bb2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	2300      	movs	r3, #0
 800bb30:	4630      	mov	r0, r6
 800bb32:	4639      	mov	r1, r7
 800bb34:	f7f4 ff94 	bl	8000a60 <__aeabi_dcmpeq>
 800bb38:	2800      	cmp	r0, #0
 800bb3a:	d0f2      	beq.n	800bb22 <pow+0xa2>
 800bb3c:	eeb0 0a48 	vmov.f32	s0, s16
 800bb40:	eef0 0a68 	vmov.f32	s1, s17
 800bb44:	f000 f856 	bl	800bbf4 <finite>
 800bb48:	2800      	cmp	r0, #0
 800bb4a:	d0ea      	beq.n	800bb22 <pow+0xa2>
 800bb4c:	ec45 4b10 	vmov	d0, r4, r5
 800bb50:	f000 f850 	bl	800bbf4 <finite>
 800bb54:	e7c3      	b.n	800bade <pow+0x5e>
 800bb56:	4f01      	ldr	r7, [pc, #4]	; (800bb5c <pow+0xdc>)
 800bb58:	2600      	movs	r6, #0
 800bb5a:	e7e2      	b.n	800bb22 <pow+0xa2>
 800bb5c:	3ff00000 	.word	0x3ff00000

0800bb60 <sqrt>:
 800bb60:	b538      	push	{r3, r4, r5, lr}
 800bb62:	ed2d 8b02 	vpush	{d8}
 800bb66:	ec55 4b10 	vmov	r4, r5, d0
 800bb6a:	f000 f84f 	bl	800bc0c <__ieee754_sqrt>
 800bb6e:	4622      	mov	r2, r4
 800bb70:	462b      	mov	r3, r5
 800bb72:	4620      	mov	r0, r4
 800bb74:	4629      	mov	r1, r5
 800bb76:	eeb0 8a40 	vmov.f32	s16, s0
 800bb7a:	eef0 8a60 	vmov.f32	s17, s1
 800bb7e:	f7f4 ffa1 	bl	8000ac4 <__aeabi_dcmpun>
 800bb82:	b990      	cbnz	r0, 800bbaa <sqrt+0x4a>
 800bb84:	2200      	movs	r2, #0
 800bb86:	2300      	movs	r3, #0
 800bb88:	4620      	mov	r0, r4
 800bb8a:	4629      	mov	r1, r5
 800bb8c:	f7f4 ff72 	bl	8000a74 <__aeabi_dcmplt>
 800bb90:	b158      	cbz	r0, 800bbaa <sqrt+0x4a>
 800bb92:	f7ff ff01 	bl	800b998 <__errno>
 800bb96:	2321      	movs	r3, #33	; 0x21
 800bb98:	6003      	str	r3, [r0, #0]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	4610      	mov	r0, r2
 800bba0:	4619      	mov	r1, r3
 800bba2:	f7f4 fe1f 	bl	80007e4 <__aeabi_ddiv>
 800bba6:	ec41 0b18 	vmov	d8, r0, r1
 800bbaa:	eeb0 0a48 	vmov.f32	s0, s16
 800bbae:	eef0 0a68 	vmov.f32	s1, s17
 800bbb2:	ecbd 8b02 	vpop	{d8}
 800bbb6:	bd38      	pop	{r3, r4, r5, pc}

0800bbb8 <sqrtf>:
 800bbb8:	b508      	push	{r3, lr}
 800bbba:	ed2d 8b02 	vpush	{d8}
 800bbbe:	eeb0 8a40 	vmov.f32	s16, s0
 800bbc2:	f000 f8fd 	bl	800bdc0 <__ieee754_sqrtf>
 800bbc6:	eeb4 8a48 	vcmp.f32	s16, s16
 800bbca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbce:	d60c      	bvs.n	800bbea <sqrtf+0x32>
 800bbd0:	eddf 8a07 	vldr	s17, [pc, #28]	; 800bbf0 <sqrtf+0x38>
 800bbd4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800bbd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbdc:	d505      	bpl.n	800bbea <sqrtf+0x32>
 800bbde:	f7ff fedb 	bl	800b998 <__errno>
 800bbe2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800bbe6:	2321      	movs	r3, #33	; 0x21
 800bbe8:	6003      	str	r3, [r0, #0]
 800bbea:	ecbd 8b02 	vpop	{d8}
 800bbee:	bd08      	pop	{r3, pc}
 800bbf0:	00000000 	.word	0x00000000

0800bbf4 <finite>:
 800bbf4:	b082      	sub	sp, #8
 800bbf6:	ed8d 0b00 	vstr	d0, [sp]
 800bbfa:	9801      	ldr	r0, [sp, #4]
 800bbfc:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800bc00:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800bc04:	0fc0      	lsrs	r0, r0, #31
 800bc06:	b002      	add	sp, #8
 800bc08:	4770      	bx	lr
	...

0800bc0c <__ieee754_sqrt>:
 800bc0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc10:	ec55 4b10 	vmov	r4, r5, d0
 800bc14:	4e67      	ldr	r6, [pc, #412]	; (800bdb4 <__ieee754_sqrt+0x1a8>)
 800bc16:	43ae      	bics	r6, r5
 800bc18:	ee10 0a10 	vmov	r0, s0
 800bc1c:	ee10 2a10 	vmov	r2, s0
 800bc20:	4629      	mov	r1, r5
 800bc22:	462b      	mov	r3, r5
 800bc24:	d10d      	bne.n	800bc42 <__ieee754_sqrt+0x36>
 800bc26:	f7f4 fcb3 	bl	8000590 <__aeabi_dmul>
 800bc2a:	4602      	mov	r2, r0
 800bc2c:	460b      	mov	r3, r1
 800bc2e:	4620      	mov	r0, r4
 800bc30:	4629      	mov	r1, r5
 800bc32:	f7f4 faf7 	bl	8000224 <__adddf3>
 800bc36:	4604      	mov	r4, r0
 800bc38:	460d      	mov	r5, r1
 800bc3a:	ec45 4b10 	vmov	d0, r4, r5
 800bc3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc42:	2d00      	cmp	r5, #0
 800bc44:	dc0b      	bgt.n	800bc5e <__ieee754_sqrt+0x52>
 800bc46:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bc4a:	4326      	orrs	r6, r4
 800bc4c:	d0f5      	beq.n	800bc3a <__ieee754_sqrt+0x2e>
 800bc4e:	b135      	cbz	r5, 800bc5e <__ieee754_sqrt+0x52>
 800bc50:	f7f4 fae6 	bl	8000220 <__aeabi_dsub>
 800bc54:	4602      	mov	r2, r0
 800bc56:	460b      	mov	r3, r1
 800bc58:	f7f4 fdc4 	bl	80007e4 <__aeabi_ddiv>
 800bc5c:	e7eb      	b.n	800bc36 <__ieee754_sqrt+0x2a>
 800bc5e:	1509      	asrs	r1, r1, #20
 800bc60:	f000 808d 	beq.w	800bd7e <__ieee754_sqrt+0x172>
 800bc64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bc68:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800bc6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc70:	07c9      	lsls	r1, r1, #31
 800bc72:	bf5c      	itt	pl
 800bc74:	005b      	lslpl	r3, r3, #1
 800bc76:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800bc7a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bc7e:	bf58      	it	pl
 800bc80:	0052      	lslpl	r2, r2, #1
 800bc82:	2500      	movs	r5, #0
 800bc84:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800bc88:	1076      	asrs	r6, r6, #1
 800bc8a:	0052      	lsls	r2, r2, #1
 800bc8c:	f04f 0e16 	mov.w	lr, #22
 800bc90:	46ac      	mov	ip, r5
 800bc92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bc96:	eb0c 0001 	add.w	r0, ip, r1
 800bc9a:	4298      	cmp	r0, r3
 800bc9c:	bfde      	ittt	le
 800bc9e:	1a1b      	suble	r3, r3, r0
 800bca0:	eb00 0c01 	addle.w	ip, r0, r1
 800bca4:	186d      	addle	r5, r5, r1
 800bca6:	005b      	lsls	r3, r3, #1
 800bca8:	f1be 0e01 	subs.w	lr, lr, #1
 800bcac:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800bcb0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800bcb4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800bcb8:	d1ed      	bne.n	800bc96 <__ieee754_sqrt+0x8a>
 800bcba:	4674      	mov	r4, lr
 800bcbc:	2720      	movs	r7, #32
 800bcbe:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800bcc2:	4563      	cmp	r3, ip
 800bcc4:	eb01 000e 	add.w	r0, r1, lr
 800bcc8:	dc02      	bgt.n	800bcd0 <__ieee754_sqrt+0xc4>
 800bcca:	d113      	bne.n	800bcf4 <__ieee754_sqrt+0xe8>
 800bccc:	4290      	cmp	r0, r2
 800bcce:	d811      	bhi.n	800bcf4 <__ieee754_sqrt+0xe8>
 800bcd0:	2800      	cmp	r0, #0
 800bcd2:	eb00 0e01 	add.w	lr, r0, r1
 800bcd6:	da57      	bge.n	800bd88 <__ieee754_sqrt+0x17c>
 800bcd8:	f1be 0f00 	cmp.w	lr, #0
 800bcdc:	db54      	blt.n	800bd88 <__ieee754_sqrt+0x17c>
 800bcde:	f10c 0801 	add.w	r8, ip, #1
 800bce2:	eba3 030c 	sub.w	r3, r3, ip
 800bce6:	4290      	cmp	r0, r2
 800bce8:	bf88      	it	hi
 800bcea:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800bcee:	1a12      	subs	r2, r2, r0
 800bcf0:	440c      	add	r4, r1
 800bcf2:	46c4      	mov	ip, r8
 800bcf4:	005b      	lsls	r3, r3, #1
 800bcf6:	3f01      	subs	r7, #1
 800bcf8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800bcfc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800bd00:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800bd04:	d1dd      	bne.n	800bcc2 <__ieee754_sqrt+0xb6>
 800bd06:	4313      	orrs	r3, r2
 800bd08:	d01b      	beq.n	800bd42 <__ieee754_sqrt+0x136>
 800bd0a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800bdb8 <__ieee754_sqrt+0x1ac>
 800bd0e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800bdbc <__ieee754_sqrt+0x1b0>
 800bd12:	e9da 0100 	ldrd	r0, r1, [sl]
 800bd16:	e9db 2300 	ldrd	r2, r3, [fp]
 800bd1a:	f7f4 fa81 	bl	8000220 <__aeabi_dsub>
 800bd1e:	e9da 8900 	ldrd	r8, r9, [sl]
 800bd22:	4602      	mov	r2, r0
 800bd24:	460b      	mov	r3, r1
 800bd26:	4640      	mov	r0, r8
 800bd28:	4649      	mov	r1, r9
 800bd2a:	f7f4 fead 	bl	8000a88 <__aeabi_dcmple>
 800bd2e:	b140      	cbz	r0, 800bd42 <__ieee754_sqrt+0x136>
 800bd30:	f1b4 3fff 	cmp.w	r4, #4294967295
 800bd34:	e9da 0100 	ldrd	r0, r1, [sl]
 800bd38:	e9db 2300 	ldrd	r2, r3, [fp]
 800bd3c:	d126      	bne.n	800bd8c <__ieee754_sqrt+0x180>
 800bd3e:	3501      	adds	r5, #1
 800bd40:	463c      	mov	r4, r7
 800bd42:	106a      	asrs	r2, r5, #1
 800bd44:	0863      	lsrs	r3, r4, #1
 800bd46:	07e9      	lsls	r1, r5, #31
 800bd48:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800bd4c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800bd50:	bf48      	it	mi
 800bd52:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800bd56:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800bd5a:	461c      	mov	r4, r3
 800bd5c:	e76d      	b.n	800bc3a <__ieee754_sqrt+0x2e>
 800bd5e:	0ad3      	lsrs	r3, r2, #11
 800bd60:	3815      	subs	r0, #21
 800bd62:	0552      	lsls	r2, r2, #21
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d0fa      	beq.n	800bd5e <__ieee754_sqrt+0x152>
 800bd68:	02dc      	lsls	r4, r3, #11
 800bd6a:	d50a      	bpl.n	800bd82 <__ieee754_sqrt+0x176>
 800bd6c:	f1c1 0420 	rsb	r4, r1, #32
 800bd70:	fa22 f404 	lsr.w	r4, r2, r4
 800bd74:	1e4d      	subs	r5, r1, #1
 800bd76:	408a      	lsls	r2, r1
 800bd78:	4323      	orrs	r3, r4
 800bd7a:	1b41      	subs	r1, r0, r5
 800bd7c:	e772      	b.n	800bc64 <__ieee754_sqrt+0x58>
 800bd7e:	4608      	mov	r0, r1
 800bd80:	e7f0      	b.n	800bd64 <__ieee754_sqrt+0x158>
 800bd82:	005b      	lsls	r3, r3, #1
 800bd84:	3101      	adds	r1, #1
 800bd86:	e7ef      	b.n	800bd68 <__ieee754_sqrt+0x15c>
 800bd88:	46e0      	mov	r8, ip
 800bd8a:	e7aa      	b.n	800bce2 <__ieee754_sqrt+0xd6>
 800bd8c:	f7f4 fa4a 	bl	8000224 <__adddf3>
 800bd90:	e9da 8900 	ldrd	r8, r9, [sl]
 800bd94:	4602      	mov	r2, r0
 800bd96:	460b      	mov	r3, r1
 800bd98:	4640      	mov	r0, r8
 800bd9a:	4649      	mov	r1, r9
 800bd9c:	f7f4 fe6a 	bl	8000a74 <__aeabi_dcmplt>
 800bda0:	b120      	cbz	r0, 800bdac <__ieee754_sqrt+0x1a0>
 800bda2:	1ca0      	adds	r0, r4, #2
 800bda4:	bf08      	it	eq
 800bda6:	3501      	addeq	r5, #1
 800bda8:	3402      	adds	r4, #2
 800bdaa:	e7ca      	b.n	800bd42 <__ieee754_sqrt+0x136>
 800bdac:	3401      	adds	r4, #1
 800bdae:	f024 0401 	bic.w	r4, r4, #1
 800bdb2:	e7c6      	b.n	800bd42 <__ieee754_sqrt+0x136>
 800bdb4:	7ff00000 	.word	0x7ff00000
 800bdb8:	200078c8 	.word	0x200078c8
 800bdbc:	200078d0 	.word	0x200078d0

0800bdc0 <__ieee754_sqrtf>:
 800bdc0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800bdc4:	4770      	bx	lr
	...

0800bdc8 <__ieee754_exp>:
 800bdc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdcc:	ec55 4b10 	vmov	r4, r5, d0
 800bdd0:	49b5      	ldr	r1, [pc, #724]	; (800c0a8 <__ieee754_exp+0x2e0>)
 800bdd2:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800bdd6:	428a      	cmp	r2, r1
 800bdd8:	ed2d 8b04 	vpush	{d8-d9}
 800bddc:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800bde0:	d93b      	bls.n	800be5a <__ieee754_exp+0x92>
 800bde2:	49b2      	ldr	r1, [pc, #712]	; (800c0ac <__ieee754_exp+0x2e4>)
 800bde4:	428a      	cmp	r2, r1
 800bde6:	d916      	bls.n	800be16 <__ieee754_exp+0x4e>
 800bde8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800bdec:	4323      	orrs	r3, r4
 800bdee:	ee10 2a10 	vmov	r2, s0
 800bdf2:	d007      	beq.n	800be04 <__ieee754_exp+0x3c>
 800bdf4:	462b      	mov	r3, r5
 800bdf6:	4620      	mov	r0, r4
 800bdf8:	4629      	mov	r1, r5
 800bdfa:	f7f4 fa13 	bl	8000224 <__adddf3>
 800bdfe:	4604      	mov	r4, r0
 800be00:	460d      	mov	r5, r1
 800be02:	e002      	b.n	800be0a <__ieee754_exp+0x42>
 800be04:	b10e      	cbz	r6, 800be0a <__ieee754_exp+0x42>
 800be06:	2400      	movs	r4, #0
 800be08:	2500      	movs	r5, #0
 800be0a:	ecbd 8b04 	vpop	{d8-d9}
 800be0e:	ec45 4b10 	vmov	d0, r4, r5
 800be12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be16:	a38e      	add	r3, pc, #568	; (adr r3, 800c050 <__ieee754_exp+0x288>)
 800be18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be1c:	ee10 0a10 	vmov	r0, s0
 800be20:	4629      	mov	r1, r5
 800be22:	f7f4 fe45 	bl	8000ab0 <__aeabi_dcmpgt>
 800be26:	4607      	mov	r7, r0
 800be28:	b130      	cbz	r0, 800be38 <__ieee754_exp+0x70>
 800be2a:	ecbd 8b04 	vpop	{d8-d9}
 800be2e:	2000      	movs	r0, #0
 800be30:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be34:	f000 bf25 	b.w	800cc82 <__math_oflow>
 800be38:	a387      	add	r3, pc, #540	; (adr r3, 800c058 <__ieee754_exp+0x290>)
 800be3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be3e:	4620      	mov	r0, r4
 800be40:	4629      	mov	r1, r5
 800be42:	f7f4 fe17 	bl	8000a74 <__aeabi_dcmplt>
 800be46:	2800      	cmp	r0, #0
 800be48:	f000 808b 	beq.w	800bf62 <__ieee754_exp+0x19a>
 800be4c:	ecbd 8b04 	vpop	{d8-d9}
 800be50:	4638      	mov	r0, r7
 800be52:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be56:	f000 bf0b 	b.w	800cc70 <__math_uflow>
 800be5a:	4b95      	ldr	r3, [pc, #596]	; (800c0b0 <__ieee754_exp+0x2e8>)
 800be5c:	429a      	cmp	r2, r3
 800be5e:	f240 80ac 	bls.w	800bfba <__ieee754_exp+0x1f2>
 800be62:	4b94      	ldr	r3, [pc, #592]	; (800c0b4 <__ieee754_exp+0x2ec>)
 800be64:	429a      	cmp	r2, r3
 800be66:	d87c      	bhi.n	800bf62 <__ieee754_exp+0x19a>
 800be68:	4b93      	ldr	r3, [pc, #588]	; (800c0b8 <__ieee754_exp+0x2f0>)
 800be6a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800be6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be72:	ee10 0a10 	vmov	r0, s0
 800be76:	4629      	mov	r1, r5
 800be78:	f7f4 f9d2 	bl	8000220 <__aeabi_dsub>
 800be7c:	4b8f      	ldr	r3, [pc, #572]	; (800c0bc <__ieee754_exp+0x2f4>)
 800be7e:	00f7      	lsls	r7, r6, #3
 800be80:	443b      	add	r3, r7
 800be82:	ed93 7b00 	vldr	d7, [r3]
 800be86:	f1c6 0a01 	rsb	sl, r6, #1
 800be8a:	4680      	mov	r8, r0
 800be8c:	4689      	mov	r9, r1
 800be8e:	ebaa 0a06 	sub.w	sl, sl, r6
 800be92:	eeb0 8a47 	vmov.f32	s16, s14
 800be96:	eef0 8a67 	vmov.f32	s17, s15
 800be9a:	ec53 2b18 	vmov	r2, r3, d8
 800be9e:	4640      	mov	r0, r8
 800bea0:	4649      	mov	r1, r9
 800bea2:	f7f4 f9bd 	bl	8000220 <__aeabi_dsub>
 800bea6:	4604      	mov	r4, r0
 800bea8:	460d      	mov	r5, r1
 800beaa:	4622      	mov	r2, r4
 800beac:	462b      	mov	r3, r5
 800beae:	4620      	mov	r0, r4
 800beb0:	4629      	mov	r1, r5
 800beb2:	f7f4 fb6d 	bl	8000590 <__aeabi_dmul>
 800beb6:	a36a      	add	r3, pc, #424	; (adr r3, 800c060 <__ieee754_exp+0x298>)
 800beb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bebc:	4606      	mov	r6, r0
 800bebe:	460f      	mov	r7, r1
 800bec0:	f7f4 fb66 	bl	8000590 <__aeabi_dmul>
 800bec4:	a368      	add	r3, pc, #416	; (adr r3, 800c068 <__ieee754_exp+0x2a0>)
 800bec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beca:	f7f4 f9a9 	bl	8000220 <__aeabi_dsub>
 800bece:	4632      	mov	r2, r6
 800bed0:	463b      	mov	r3, r7
 800bed2:	f7f4 fb5d 	bl	8000590 <__aeabi_dmul>
 800bed6:	a366      	add	r3, pc, #408	; (adr r3, 800c070 <__ieee754_exp+0x2a8>)
 800bed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bedc:	f7f4 f9a2 	bl	8000224 <__adddf3>
 800bee0:	4632      	mov	r2, r6
 800bee2:	463b      	mov	r3, r7
 800bee4:	f7f4 fb54 	bl	8000590 <__aeabi_dmul>
 800bee8:	a363      	add	r3, pc, #396	; (adr r3, 800c078 <__ieee754_exp+0x2b0>)
 800beea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beee:	f7f4 f997 	bl	8000220 <__aeabi_dsub>
 800bef2:	4632      	mov	r2, r6
 800bef4:	463b      	mov	r3, r7
 800bef6:	f7f4 fb4b 	bl	8000590 <__aeabi_dmul>
 800befa:	a361      	add	r3, pc, #388	; (adr r3, 800c080 <__ieee754_exp+0x2b8>)
 800befc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf00:	f7f4 f990 	bl	8000224 <__adddf3>
 800bf04:	4632      	mov	r2, r6
 800bf06:	463b      	mov	r3, r7
 800bf08:	f7f4 fb42 	bl	8000590 <__aeabi_dmul>
 800bf0c:	4602      	mov	r2, r0
 800bf0e:	460b      	mov	r3, r1
 800bf10:	4620      	mov	r0, r4
 800bf12:	4629      	mov	r1, r5
 800bf14:	f7f4 f984 	bl	8000220 <__aeabi_dsub>
 800bf18:	4602      	mov	r2, r0
 800bf1a:	460b      	mov	r3, r1
 800bf1c:	4606      	mov	r6, r0
 800bf1e:	460f      	mov	r7, r1
 800bf20:	4620      	mov	r0, r4
 800bf22:	4629      	mov	r1, r5
 800bf24:	f7f4 fb34 	bl	8000590 <__aeabi_dmul>
 800bf28:	ec41 0b19 	vmov	d9, r0, r1
 800bf2c:	f1ba 0f00 	cmp.w	sl, #0
 800bf30:	d15d      	bne.n	800bfee <__ieee754_exp+0x226>
 800bf32:	2200      	movs	r2, #0
 800bf34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bf38:	4630      	mov	r0, r6
 800bf3a:	4639      	mov	r1, r7
 800bf3c:	f7f4 f970 	bl	8000220 <__aeabi_dsub>
 800bf40:	4602      	mov	r2, r0
 800bf42:	460b      	mov	r3, r1
 800bf44:	ec51 0b19 	vmov	r0, r1, d9
 800bf48:	f7f4 fc4c 	bl	80007e4 <__aeabi_ddiv>
 800bf4c:	4622      	mov	r2, r4
 800bf4e:	462b      	mov	r3, r5
 800bf50:	f7f4 f966 	bl	8000220 <__aeabi_dsub>
 800bf54:	4602      	mov	r2, r0
 800bf56:	460b      	mov	r3, r1
 800bf58:	2000      	movs	r0, #0
 800bf5a:	4959      	ldr	r1, [pc, #356]	; (800c0c0 <__ieee754_exp+0x2f8>)
 800bf5c:	f7f4 f960 	bl	8000220 <__aeabi_dsub>
 800bf60:	e74d      	b.n	800bdfe <__ieee754_exp+0x36>
 800bf62:	4b58      	ldr	r3, [pc, #352]	; (800c0c4 <__ieee754_exp+0x2fc>)
 800bf64:	4620      	mov	r0, r4
 800bf66:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800bf6a:	4629      	mov	r1, r5
 800bf6c:	a346      	add	r3, pc, #280	; (adr r3, 800c088 <__ieee754_exp+0x2c0>)
 800bf6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf72:	f7f4 fb0d 	bl	8000590 <__aeabi_dmul>
 800bf76:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bf7a:	f7f4 f953 	bl	8000224 <__adddf3>
 800bf7e:	f7f4 fdb7 	bl	8000af0 <__aeabi_d2iz>
 800bf82:	4682      	mov	sl, r0
 800bf84:	f7f4 fa9a 	bl	80004bc <__aeabi_i2d>
 800bf88:	a341      	add	r3, pc, #260	; (adr r3, 800c090 <__ieee754_exp+0x2c8>)
 800bf8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf8e:	4606      	mov	r6, r0
 800bf90:	460f      	mov	r7, r1
 800bf92:	f7f4 fafd 	bl	8000590 <__aeabi_dmul>
 800bf96:	4602      	mov	r2, r0
 800bf98:	460b      	mov	r3, r1
 800bf9a:	4620      	mov	r0, r4
 800bf9c:	4629      	mov	r1, r5
 800bf9e:	f7f4 f93f 	bl	8000220 <__aeabi_dsub>
 800bfa2:	a33d      	add	r3, pc, #244	; (adr r3, 800c098 <__ieee754_exp+0x2d0>)
 800bfa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa8:	4680      	mov	r8, r0
 800bfaa:	4689      	mov	r9, r1
 800bfac:	4630      	mov	r0, r6
 800bfae:	4639      	mov	r1, r7
 800bfb0:	f7f4 faee 	bl	8000590 <__aeabi_dmul>
 800bfb4:	ec41 0b18 	vmov	d8, r0, r1
 800bfb8:	e76f      	b.n	800be9a <__ieee754_exp+0xd2>
 800bfba:	4b43      	ldr	r3, [pc, #268]	; (800c0c8 <__ieee754_exp+0x300>)
 800bfbc:	429a      	cmp	r2, r3
 800bfbe:	d811      	bhi.n	800bfe4 <__ieee754_exp+0x21c>
 800bfc0:	a337      	add	r3, pc, #220	; (adr r3, 800c0a0 <__ieee754_exp+0x2d8>)
 800bfc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc6:	ee10 0a10 	vmov	r0, s0
 800bfca:	4629      	mov	r1, r5
 800bfcc:	f7f4 f92a 	bl	8000224 <__adddf3>
 800bfd0:	4b3b      	ldr	r3, [pc, #236]	; (800c0c0 <__ieee754_exp+0x2f8>)
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	f7f4 fd6c 	bl	8000ab0 <__aeabi_dcmpgt>
 800bfd8:	b138      	cbz	r0, 800bfea <__ieee754_exp+0x222>
 800bfda:	4b39      	ldr	r3, [pc, #228]	; (800c0c0 <__ieee754_exp+0x2f8>)
 800bfdc:	2200      	movs	r2, #0
 800bfde:	4620      	mov	r0, r4
 800bfe0:	4629      	mov	r1, r5
 800bfe2:	e70a      	b.n	800bdfa <__ieee754_exp+0x32>
 800bfe4:	f04f 0a00 	mov.w	sl, #0
 800bfe8:	e75f      	b.n	800beaa <__ieee754_exp+0xe2>
 800bfea:	4682      	mov	sl, r0
 800bfec:	e75d      	b.n	800beaa <__ieee754_exp+0xe2>
 800bfee:	4632      	mov	r2, r6
 800bff0:	463b      	mov	r3, r7
 800bff2:	2000      	movs	r0, #0
 800bff4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800bff8:	f7f4 f912 	bl	8000220 <__aeabi_dsub>
 800bffc:	4602      	mov	r2, r0
 800bffe:	460b      	mov	r3, r1
 800c000:	ec51 0b19 	vmov	r0, r1, d9
 800c004:	f7f4 fbee 	bl	80007e4 <__aeabi_ddiv>
 800c008:	4602      	mov	r2, r0
 800c00a:	460b      	mov	r3, r1
 800c00c:	ec51 0b18 	vmov	r0, r1, d8
 800c010:	f7f4 f906 	bl	8000220 <__aeabi_dsub>
 800c014:	4642      	mov	r2, r8
 800c016:	464b      	mov	r3, r9
 800c018:	f7f4 f902 	bl	8000220 <__aeabi_dsub>
 800c01c:	4602      	mov	r2, r0
 800c01e:	460b      	mov	r3, r1
 800c020:	2000      	movs	r0, #0
 800c022:	4927      	ldr	r1, [pc, #156]	; (800c0c0 <__ieee754_exp+0x2f8>)
 800c024:	f7f4 f8fc 	bl	8000220 <__aeabi_dsub>
 800c028:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800c02c:	4592      	cmp	sl, r2
 800c02e:	db02      	blt.n	800c036 <__ieee754_exp+0x26e>
 800c030:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800c034:	e6e3      	b.n	800bdfe <__ieee754_exp+0x36>
 800c036:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800c03a:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800c03e:	2200      	movs	r2, #0
 800c040:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800c044:	f7f4 faa4 	bl	8000590 <__aeabi_dmul>
 800c048:	e6d9      	b.n	800bdfe <__ieee754_exp+0x36>
 800c04a:	bf00      	nop
 800c04c:	f3af 8000 	nop.w
 800c050:	fefa39ef 	.word	0xfefa39ef
 800c054:	40862e42 	.word	0x40862e42
 800c058:	d52d3051 	.word	0xd52d3051
 800c05c:	c0874910 	.word	0xc0874910
 800c060:	72bea4d0 	.word	0x72bea4d0
 800c064:	3e663769 	.word	0x3e663769
 800c068:	c5d26bf1 	.word	0xc5d26bf1
 800c06c:	3ebbbd41 	.word	0x3ebbbd41
 800c070:	af25de2c 	.word	0xaf25de2c
 800c074:	3f11566a 	.word	0x3f11566a
 800c078:	16bebd93 	.word	0x16bebd93
 800c07c:	3f66c16c 	.word	0x3f66c16c
 800c080:	5555553e 	.word	0x5555553e
 800c084:	3fc55555 	.word	0x3fc55555
 800c088:	652b82fe 	.word	0x652b82fe
 800c08c:	3ff71547 	.word	0x3ff71547
 800c090:	fee00000 	.word	0xfee00000
 800c094:	3fe62e42 	.word	0x3fe62e42
 800c098:	35793c76 	.word	0x35793c76
 800c09c:	3dea39ef 	.word	0x3dea39ef
 800c0a0:	8800759c 	.word	0x8800759c
 800c0a4:	7e37e43c 	.word	0x7e37e43c
 800c0a8:	40862e41 	.word	0x40862e41
 800c0ac:	7fefffff 	.word	0x7fefffff
 800c0b0:	3fd62e42 	.word	0x3fd62e42
 800c0b4:	3ff0a2b1 	.word	0x3ff0a2b1
 800c0b8:	0801fcb8 	.word	0x0801fcb8
 800c0bc:	0801fcc8 	.word	0x0801fcc8
 800c0c0:	3ff00000 	.word	0x3ff00000
 800c0c4:	0801fca8 	.word	0x0801fca8
 800c0c8:	3defffff 	.word	0x3defffff
 800c0cc:	00000000 	.word	0x00000000

0800c0d0 <__ieee754_pow>:
 800c0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0d4:	ed2d 8b06 	vpush	{d8-d10}
 800c0d8:	b089      	sub	sp, #36	; 0x24
 800c0da:	ed8d 1b00 	vstr	d1, [sp]
 800c0de:	e9dd 2900 	ldrd	r2, r9, [sp]
 800c0e2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800c0e6:	ea58 0102 	orrs.w	r1, r8, r2
 800c0ea:	ec57 6b10 	vmov	r6, r7, d0
 800c0ee:	d115      	bne.n	800c11c <__ieee754_pow+0x4c>
 800c0f0:	19b3      	adds	r3, r6, r6
 800c0f2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800c0f6:	4152      	adcs	r2, r2
 800c0f8:	4299      	cmp	r1, r3
 800c0fa:	4b89      	ldr	r3, [pc, #548]	; (800c320 <__ieee754_pow+0x250>)
 800c0fc:	4193      	sbcs	r3, r2
 800c0fe:	f080 84d1 	bcs.w	800caa4 <__ieee754_pow+0x9d4>
 800c102:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c106:	4630      	mov	r0, r6
 800c108:	4639      	mov	r1, r7
 800c10a:	f7f4 f88b 	bl	8000224 <__adddf3>
 800c10e:	ec41 0b10 	vmov	d0, r0, r1
 800c112:	b009      	add	sp, #36	; 0x24
 800c114:	ecbd 8b06 	vpop	{d8-d10}
 800c118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c11c:	4b81      	ldr	r3, [pc, #516]	; (800c324 <__ieee754_pow+0x254>)
 800c11e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800c122:	429c      	cmp	r4, r3
 800c124:	ee10 aa10 	vmov	sl, s0
 800c128:	463d      	mov	r5, r7
 800c12a:	dc06      	bgt.n	800c13a <__ieee754_pow+0x6a>
 800c12c:	d101      	bne.n	800c132 <__ieee754_pow+0x62>
 800c12e:	2e00      	cmp	r6, #0
 800c130:	d1e7      	bne.n	800c102 <__ieee754_pow+0x32>
 800c132:	4598      	cmp	r8, r3
 800c134:	dc01      	bgt.n	800c13a <__ieee754_pow+0x6a>
 800c136:	d10f      	bne.n	800c158 <__ieee754_pow+0x88>
 800c138:	b172      	cbz	r2, 800c158 <__ieee754_pow+0x88>
 800c13a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800c13e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800c142:	ea55 050a 	orrs.w	r5, r5, sl
 800c146:	d1dc      	bne.n	800c102 <__ieee754_pow+0x32>
 800c148:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c14c:	18db      	adds	r3, r3, r3
 800c14e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800c152:	4152      	adcs	r2, r2
 800c154:	429d      	cmp	r5, r3
 800c156:	e7d0      	b.n	800c0fa <__ieee754_pow+0x2a>
 800c158:	2d00      	cmp	r5, #0
 800c15a:	da3b      	bge.n	800c1d4 <__ieee754_pow+0x104>
 800c15c:	4b72      	ldr	r3, [pc, #456]	; (800c328 <__ieee754_pow+0x258>)
 800c15e:	4598      	cmp	r8, r3
 800c160:	dc51      	bgt.n	800c206 <__ieee754_pow+0x136>
 800c162:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c166:	4598      	cmp	r8, r3
 800c168:	f340 84ab 	ble.w	800cac2 <__ieee754_pow+0x9f2>
 800c16c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c170:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c174:	2b14      	cmp	r3, #20
 800c176:	dd0f      	ble.n	800c198 <__ieee754_pow+0xc8>
 800c178:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c17c:	fa22 f103 	lsr.w	r1, r2, r3
 800c180:	fa01 f303 	lsl.w	r3, r1, r3
 800c184:	4293      	cmp	r3, r2
 800c186:	f040 849c 	bne.w	800cac2 <__ieee754_pow+0x9f2>
 800c18a:	f001 0101 	and.w	r1, r1, #1
 800c18e:	f1c1 0302 	rsb	r3, r1, #2
 800c192:	9304      	str	r3, [sp, #16]
 800c194:	b182      	cbz	r2, 800c1b8 <__ieee754_pow+0xe8>
 800c196:	e05f      	b.n	800c258 <__ieee754_pow+0x188>
 800c198:	2a00      	cmp	r2, #0
 800c19a:	d15b      	bne.n	800c254 <__ieee754_pow+0x184>
 800c19c:	f1c3 0314 	rsb	r3, r3, #20
 800c1a0:	fa48 f103 	asr.w	r1, r8, r3
 800c1a4:	fa01 f303 	lsl.w	r3, r1, r3
 800c1a8:	4543      	cmp	r3, r8
 800c1aa:	f040 8487 	bne.w	800cabc <__ieee754_pow+0x9ec>
 800c1ae:	f001 0101 	and.w	r1, r1, #1
 800c1b2:	f1c1 0302 	rsb	r3, r1, #2
 800c1b6:	9304      	str	r3, [sp, #16]
 800c1b8:	4b5c      	ldr	r3, [pc, #368]	; (800c32c <__ieee754_pow+0x25c>)
 800c1ba:	4598      	cmp	r8, r3
 800c1bc:	d132      	bne.n	800c224 <__ieee754_pow+0x154>
 800c1be:	f1b9 0f00 	cmp.w	r9, #0
 800c1c2:	f280 8477 	bge.w	800cab4 <__ieee754_pow+0x9e4>
 800c1c6:	4959      	ldr	r1, [pc, #356]	; (800c32c <__ieee754_pow+0x25c>)
 800c1c8:	4632      	mov	r2, r6
 800c1ca:	463b      	mov	r3, r7
 800c1cc:	2000      	movs	r0, #0
 800c1ce:	f7f4 fb09 	bl	80007e4 <__aeabi_ddiv>
 800c1d2:	e79c      	b.n	800c10e <__ieee754_pow+0x3e>
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	9304      	str	r3, [sp, #16]
 800c1d8:	2a00      	cmp	r2, #0
 800c1da:	d13d      	bne.n	800c258 <__ieee754_pow+0x188>
 800c1dc:	4b51      	ldr	r3, [pc, #324]	; (800c324 <__ieee754_pow+0x254>)
 800c1de:	4598      	cmp	r8, r3
 800c1e0:	d1ea      	bne.n	800c1b8 <__ieee754_pow+0xe8>
 800c1e2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c1e6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c1ea:	ea53 030a 	orrs.w	r3, r3, sl
 800c1ee:	f000 8459 	beq.w	800caa4 <__ieee754_pow+0x9d4>
 800c1f2:	4b4f      	ldr	r3, [pc, #316]	; (800c330 <__ieee754_pow+0x260>)
 800c1f4:	429c      	cmp	r4, r3
 800c1f6:	dd08      	ble.n	800c20a <__ieee754_pow+0x13a>
 800c1f8:	f1b9 0f00 	cmp.w	r9, #0
 800c1fc:	f2c0 8456 	blt.w	800caac <__ieee754_pow+0x9dc>
 800c200:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c204:	e783      	b.n	800c10e <__ieee754_pow+0x3e>
 800c206:	2302      	movs	r3, #2
 800c208:	e7e5      	b.n	800c1d6 <__ieee754_pow+0x106>
 800c20a:	f1b9 0f00 	cmp.w	r9, #0
 800c20e:	f04f 0000 	mov.w	r0, #0
 800c212:	f04f 0100 	mov.w	r1, #0
 800c216:	f6bf af7a 	bge.w	800c10e <__ieee754_pow+0x3e>
 800c21a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c21e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c222:	e774      	b.n	800c10e <__ieee754_pow+0x3e>
 800c224:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800c228:	d106      	bne.n	800c238 <__ieee754_pow+0x168>
 800c22a:	4632      	mov	r2, r6
 800c22c:	463b      	mov	r3, r7
 800c22e:	4630      	mov	r0, r6
 800c230:	4639      	mov	r1, r7
 800c232:	f7f4 f9ad 	bl	8000590 <__aeabi_dmul>
 800c236:	e76a      	b.n	800c10e <__ieee754_pow+0x3e>
 800c238:	4b3e      	ldr	r3, [pc, #248]	; (800c334 <__ieee754_pow+0x264>)
 800c23a:	4599      	cmp	r9, r3
 800c23c:	d10c      	bne.n	800c258 <__ieee754_pow+0x188>
 800c23e:	2d00      	cmp	r5, #0
 800c240:	db0a      	blt.n	800c258 <__ieee754_pow+0x188>
 800c242:	ec47 6b10 	vmov	d0, r6, r7
 800c246:	b009      	add	sp, #36	; 0x24
 800c248:	ecbd 8b06 	vpop	{d8-d10}
 800c24c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c250:	f7ff bcdc 	b.w	800bc0c <__ieee754_sqrt>
 800c254:	2300      	movs	r3, #0
 800c256:	9304      	str	r3, [sp, #16]
 800c258:	ec47 6b10 	vmov	d0, r6, r7
 800c25c:	f000 fc62 	bl	800cb24 <fabs>
 800c260:	ec51 0b10 	vmov	r0, r1, d0
 800c264:	f1ba 0f00 	cmp.w	sl, #0
 800c268:	d129      	bne.n	800c2be <__ieee754_pow+0x1ee>
 800c26a:	b124      	cbz	r4, 800c276 <__ieee754_pow+0x1a6>
 800c26c:	4b2f      	ldr	r3, [pc, #188]	; (800c32c <__ieee754_pow+0x25c>)
 800c26e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800c272:	429a      	cmp	r2, r3
 800c274:	d123      	bne.n	800c2be <__ieee754_pow+0x1ee>
 800c276:	f1b9 0f00 	cmp.w	r9, #0
 800c27a:	da05      	bge.n	800c288 <__ieee754_pow+0x1b8>
 800c27c:	4602      	mov	r2, r0
 800c27e:	460b      	mov	r3, r1
 800c280:	2000      	movs	r0, #0
 800c282:	492a      	ldr	r1, [pc, #168]	; (800c32c <__ieee754_pow+0x25c>)
 800c284:	f7f4 faae 	bl	80007e4 <__aeabi_ddiv>
 800c288:	2d00      	cmp	r5, #0
 800c28a:	f6bf af40 	bge.w	800c10e <__ieee754_pow+0x3e>
 800c28e:	9b04      	ldr	r3, [sp, #16]
 800c290:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c294:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c298:	431c      	orrs	r4, r3
 800c29a:	d108      	bne.n	800c2ae <__ieee754_pow+0x1de>
 800c29c:	4602      	mov	r2, r0
 800c29e:	460b      	mov	r3, r1
 800c2a0:	4610      	mov	r0, r2
 800c2a2:	4619      	mov	r1, r3
 800c2a4:	f7f3 ffbc 	bl	8000220 <__aeabi_dsub>
 800c2a8:	4602      	mov	r2, r0
 800c2aa:	460b      	mov	r3, r1
 800c2ac:	e78f      	b.n	800c1ce <__ieee754_pow+0xfe>
 800c2ae:	9b04      	ldr	r3, [sp, #16]
 800c2b0:	2b01      	cmp	r3, #1
 800c2b2:	f47f af2c 	bne.w	800c10e <__ieee754_pow+0x3e>
 800c2b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c2ba:	4619      	mov	r1, r3
 800c2bc:	e727      	b.n	800c10e <__ieee754_pow+0x3e>
 800c2be:	0feb      	lsrs	r3, r5, #31
 800c2c0:	3b01      	subs	r3, #1
 800c2c2:	9306      	str	r3, [sp, #24]
 800c2c4:	9a06      	ldr	r2, [sp, #24]
 800c2c6:	9b04      	ldr	r3, [sp, #16]
 800c2c8:	4313      	orrs	r3, r2
 800c2ca:	d102      	bne.n	800c2d2 <__ieee754_pow+0x202>
 800c2cc:	4632      	mov	r2, r6
 800c2ce:	463b      	mov	r3, r7
 800c2d0:	e7e6      	b.n	800c2a0 <__ieee754_pow+0x1d0>
 800c2d2:	4b19      	ldr	r3, [pc, #100]	; (800c338 <__ieee754_pow+0x268>)
 800c2d4:	4598      	cmp	r8, r3
 800c2d6:	f340 80fb 	ble.w	800c4d0 <__ieee754_pow+0x400>
 800c2da:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c2de:	4598      	cmp	r8, r3
 800c2e0:	4b13      	ldr	r3, [pc, #76]	; (800c330 <__ieee754_pow+0x260>)
 800c2e2:	dd0c      	ble.n	800c2fe <__ieee754_pow+0x22e>
 800c2e4:	429c      	cmp	r4, r3
 800c2e6:	dc0f      	bgt.n	800c308 <__ieee754_pow+0x238>
 800c2e8:	f1b9 0f00 	cmp.w	r9, #0
 800c2ec:	da0f      	bge.n	800c30e <__ieee754_pow+0x23e>
 800c2ee:	2000      	movs	r0, #0
 800c2f0:	b009      	add	sp, #36	; 0x24
 800c2f2:	ecbd 8b06 	vpop	{d8-d10}
 800c2f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2fa:	f000 bcc2 	b.w	800cc82 <__math_oflow>
 800c2fe:	429c      	cmp	r4, r3
 800c300:	dbf2      	blt.n	800c2e8 <__ieee754_pow+0x218>
 800c302:	4b0a      	ldr	r3, [pc, #40]	; (800c32c <__ieee754_pow+0x25c>)
 800c304:	429c      	cmp	r4, r3
 800c306:	dd19      	ble.n	800c33c <__ieee754_pow+0x26c>
 800c308:	f1b9 0f00 	cmp.w	r9, #0
 800c30c:	dcef      	bgt.n	800c2ee <__ieee754_pow+0x21e>
 800c30e:	2000      	movs	r0, #0
 800c310:	b009      	add	sp, #36	; 0x24
 800c312:	ecbd 8b06 	vpop	{d8-d10}
 800c316:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c31a:	f000 bca9 	b.w	800cc70 <__math_uflow>
 800c31e:	bf00      	nop
 800c320:	fff00000 	.word	0xfff00000
 800c324:	7ff00000 	.word	0x7ff00000
 800c328:	433fffff 	.word	0x433fffff
 800c32c:	3ff00000 	.word	0x3ff00000
 800c330:	3fefffff 	.word	0x3fefffff
 800c334:	3fe00000 	.word	0x3fe00000
 800c338:	41e00000 	.word	0x41e00000
 800c33c:	4b60      	ldr	r3, [pc, #384]	; (800c4c0 <__ieee754_pow+0x3f0>)
 800c33e:	2200      	movs	r2, #0
 800c340:	f7f3 ff6e 	bl	8000220 <__aeabi_dsub>
 800c344:	a354      	add	r3, pc, #336	; (adr r3, 800c498 <__ieee754_pow+0x3c8>)
 800c346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c34a:	4604      	mov	r4, r0
 800c34c:	460d      	mov	r5, r1
 800c34e:	f7f4 f91f 	bl	8000590 <__aeabi_dmul>
 800c352:	a353      	add	r3, pc, #332	; (adr r3, 800c4a0 <__ieee754_pow+0x3d0>)
 800c354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c358:	4606      	mov	r6, r0
 800c35a:	460f      	mov	r7, r1
 800c35c:	4620      	mov	r0, r4
 800c35e:	4629      	mov	r1, r5
 800c360:	f7f4 f916 	bl	8000590 <__aeabi_dmul>
 800c364:	4b57      	ldr	r3, [pc, #348]	; (800c4c4 <__ieee754_pow+0x3f4>)
 800c366:	4682      	mov	sl, r0
 800c368:	468b      	mov	fp, r1
 800c36a:	2200      	movs	r2, #0
 800c36c:	4620      	mov	r0, r4
 800c36e:	4629      	mov	r1, r5
 800c370:	f7f4 f90e 	bl	8000590 <__aeabi_dmul>
 800c374:	4602      	mov	r2, r0
 800c376:	460b      	mov	r3, r1
 800c378:	a14b      	add	r1, pc, #300	; (adr r1, 800c4a8 <__ieee754_pow+0x3d8>)
 800c37a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c37e:	f7f3 ff4f 	bl	8000220 <__aeabi_dsub>
 800c382:	4622      	mov	r2, r4
 800c384:	462b      	mov	r3, r5
 800c386:	f7f4 f903 	bl	8000590 <__aeabi_dmul>
 800c38a:	4602      	mov	r2, r0
 800c38c:	460b      	mov	r3, r1
 800c38e:	2000      	movs	r0, #0
 800c390:	494d      	ldr	r1, [pc, #308]	; (800c4c8 <__ieee754_pow+0x3f8>)
 800c392:	f7f3 ff45 	bl	8000220 <__aeabi_dsub>
 800c396:	4622      	mov	r2, r4
 800c398:	4680      	mov	r8, r0
 800c39a:	4689      	mov	r9, r1
 800c39c:	462b      	mov	r3, r5
 800c39e:	4620      	mov	r0, r4
 800c3a0:	4629      	mov	r1, r5
 800c3a2:	f7f4 f8f5 	bl	8000590 <__aeabi_dmul>
 800c3a6:	4602      	mov	r2, r0
 800c3a8:	460b      	mov	r3, r1
 800c3aa:	4640      	mov	r0, r8
 800c3ac:	4649      	mov	r1, r9
 800c3ae:	f7f4 f8ef 	bl	8000590 <__aeabi_dmul>
 800c3b2:	a33f      	add	r3, pc, #252	; (adr r3, 800c4b0 <__ieee754_pow+0x3e0>)
 800c3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b8:	f7f4 f8ea 	bl	8000590 <__aeabi_dmul>
 800c3bc:	4602      	mov	r2, r0
 800c3be:	460b      	mov	r3, r1
 800c3c0:	4650      	mov	r0, sl
 800c3c2:	4659      	mov	r1, fp
 800c3c4:	f7f3 ff2c 	bl	8000220 <__aeabi_dsub>
 800c3c8:	4602      	mov	r2, r0
 800c3ca:	460b      	mov	r3, r1
 800c3cc:	4680      	mov	r8, r0
 800c3ce:	4689      	mov	r9, r1
 800c3d0:	4630      	mov	r0, r6
 800c3d2:	4639      	mov	r1, r7
 800c3d4:	f7f3 ff26 	bl	8000224 <__adddf3>
 800c3d8:	2000      	movs	r0, #0
 800c3da:	4632      	mov	r2, r6
 800c3dc:	463b      	mov	r3, r7
 800c3de:	4604      	mov	r4, r0
 800c3e0:	460d      	mov	r5, r1
 800c3e2:	f7f3 ff1d 	bl	8000220 <__aeabi_dsub>
 800c3e6:	4602      	mov	r2, r0
 800c3e8:	460b      	mov	r3, r1
 800c3ea:	4640      	mov	r0, r8
 800c3ec:	4649      	mov	r1, r9
 800c3ee:	f7f3 ff17 	bl	8000220 <__aeabi_dsub>
 800c3f2:	9b04      	ldr	r3, [sp, #16]
 800c3f4:	9a06      	ldr	r2, [sp, #24]
 800c3f6:	3b01      	subs	r3, #1
 800c3f8:	4313      	orrs	r3, r2
 800c3fa:	4682      	mov	sl, r0
 800c3fc:	468b      	mov	fp, r1
 800c3fe:	f040 81e7 	bne.w	800c7d0 <__ieee754_pow+0x700>
 800c402:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800c4b8 <__ieee754_pow+0x3e8>
 800c406:	eeb0 8a47 	vmov.f32	s16, s14
 800c40a:	eef0 8a67 	vmov.f32	s17, s15
 800c40e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c412:	2600      	movs	r6, #0
 800c414:	4632      	mov	r2, r6
 800c416:	463b      	mov	r3, r7
 800c418:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c41c:	f7f3 ff00 	bl	8000220 <__aeabi_dsub>
 800c420:	4622      	mov	r2, r4
 800c422:	462b      	mov	r3, r5
 800c424:	f7f4 f8b4 	bl	8000590 <__aeabi_dmul>
 800c428:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c42c:	4680      	mov	r8, r0
 800c42e:	4689      	mov	r9, r1
 800c430:	4650      	mov	r0, sl
 800c432:	4659      	mov	r1, fp
 800c434:	f7f4 f8ac 	bl	8000590 <__aeabi_dmul>
 800c438:	4602      	mov	r2, r0
 800c43a:	460b      	mov	r3, r1
 800c43c:	4640      	mov	r0, r8
 800c43e:	4649      	mov	r1, r9
 800c440:	f7f3 fef0 	bl	8000224 <__adddf3>
 800c444:	4632      	mov	r2, r6
 800c446:	463b      	mov	r3, r7
 800c448:	4680      	mov	r8, r0
 800c44a:	4689      	mov	r9, r1
 800c44c:	4620      	mov	r0, r4
 800c44e:	4629      	mov	r1, r5
 800c450:	f7f4 f89e 	bl	8000590 <__aeabi_dmul>
 800c454:	460b      	mov	r3, r1
 800c456:	4604      	mov	r4, r0
 800c458:	460d      	mov	r5, r1
 800c45a:	4602      	mov	r2, r0
 800c45c:	4649      	mov	r1, r9
 800c45e:	4640      	mov	r0, r8
 800c460:	f7f3 fee0 	bl	8000224 <__adddf3>
 800c464:	4b19      	ldr	r3, [pc, #100]	; (800c4cc <__ieee754_pow+0x3fc>)
 800c466:	4299      	cmp	r1, r3
 800c468:	ec45 4b19 	vmov	d9, r4, r5
 800c46c:	4606      	mov	r6, r0
 800c46e:	460f      	mov	r7, r1
 800c470:	468b      	mov	fp, r1
 800c472:	f340 82f0 	ble.w	800ca56 <__ieee754_pow+0x986>
 800c476:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c47a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c47e:	4303      	orrs	r3, r0
 800c480:	f000 81e4 	beq.w	800c84c <__ieee754_pow+0x77c>
 800c484:	ec51 0b18 	vmov	r0, r1, d8
 800c488:	2200      	movs	r2, #0
 800c48a:	2300      	movs	r3, #0
 800c48c:	f7f4 faf2 	bl	8000a74 <__aeabi_dcmplt>
 800c490:	3800      	subs	r0, #0
 800c492:	bf18      	it	ne
 800c494:	2001      	movne	r0, #1
 800c496:	e72b      	b.n	800c2f0 <__ieee754_pow+0x220>
 800c498:	60000000 	.word	0x60000000
 800c49c:	3ff71547 	.word	0x3ff71547
 800c4a0:	f85ddf44 	.word	0xf85ddf44
 800c4a4:	3e54ae0b 	.word	0x3e54ae0b
 800c4a8:	55555555 	.word	0x55555555
 800c4ac:	3fd55555 	.word	0x3fd55555
 800c4b0:	652b82fe 	.word	0x652b82fe
 800c4b4:	3ff71547 	.word	0x3ff71547
 800c4b8:	00000000 	.word	0x00000000
 800c4bc:	bff00000 	.word	0xbff00000
 800c4c0:	3ff00000 	.word	0x3ff00000
 800c4c4:	3fd00000 	.word	0x3fd00000
 800c4c8:	3fe00000 	.word	0x3fe00000
 800c4cc:	408fffff 	.word	0x408fffff
 800c4d0:	4bd5      	ldr	r3, [pc, #852]	; (800c828 <__ieee754_pow+0x758>)
 800c4d2:	402b      	ands	r3, r5
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	b92b      	cbnz	r3, 800c4e4 <__ieee754_pow+0x414>
 800c4d8:	4bd4      	ldr	r3, [pc, #848]	; (800c82c <__ieee754_pow+0x75c>)
 800c4da:	f7f4 f859 	bl	8000590 <__aeabi_dmul>
 800c4de:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c4e2:	460c      	mov	r4, r1
 800c4e4:	1523      	asrs	r3, r4, #20
 800c4e6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c4ea:	4413      	add	r3, r2
 800c4ec:	9305      	str	r3, [sp, #20]
 800c4ee:	4bd0      	ldr	r3, [pc, #832]	; (800c830 <__ieee754_pow+0x760>)
 800c4f0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c4f4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c4f8:	429c      	cmp	r4, r3
 800c4fa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c4fe:	dd08      	ble.n	800c512 <__ieee754_pow+0x442>
 800c500:	4bcc      	ldr	r3, [pc, #816]	; (800c834 <__ieee754_pow+0x764>)
 800c502:	429c      	cmp	r4, r3
 800c504:	f340 8162 	ble.w	800c7cc <__ieee754_pow+0x6fc>
 800c508:	9b05      	ldr	r3, [sp, #20]
 800c50a:	3301      	adds	r3, #1
 800c50c:	9305      	str	r3, [sp, #20]
 800c50e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c512:	2400      	movs	r4, #0
 800c514:	00e3      	lsls	r3, r4, #3
 800c516:	9307      	str	r3, [sp, #28]
 800c518:	4bc7      	ldr	r3, [pc, #796]	; (800c838 <__ieee754_pow+0x768>)
 800c51a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c51e:	ed93 7b00 	vldr	d7, [r3]
 800c522:	4629      	mov	r1, r5
 800c524:	ec53 2b17 	vmov	r2, r3, d7
 800c528:	eeb0 9a47 	vmov.f32	s18, s14
 800c52c:	eef0 9a67 	vmov.f32	s19, s15
 800c530:	4682      	mov	sl, r0
 800c532:	f7f3 fe75 	bl	8000220 <__aeabi_dsub>
 800c536:	4652      	mov	r2, sl
 800c538:	4606      	mov	r6, r0
 800c53a:	460f      	mov	r7, r1
 800c53c:	462b      	mov	r3, r5
 800c53e:	ec51 0b19 	vmov	r0, r1, d9
 800c542:	f7f3 fe6f 	bl	8000224 <__adddf3>
 800c546:	4602      	mov	r2, r0
 800c548:	460b      	mov	r3, r1
 800c54a:	2000      	movs	r0, #0
 800c54c:	49bb      	ldr	r1, [pc, #748]	; (800c83c <__ieee754_pow+0x76c>)
 800c54e:	f7f4 f949 	bl	80007e4 <__aeabi_ddiv>
 800c552:	ec41 0b1a 	vmov	d10, r0, r1
 800c556:	4602      	mov	r2, r0
 800c558:	460b      	mov	r3, r1
 800c55a:	4630      	mov	r0, r6
 800c55c:	4639      	mov	r1, r7
 800c55e:	f7f4 f817 	bl	8000590 <__aeabi_dmul>
 800c562:	2300      	movs	r3, #0
 800c564:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c568:	9302      	str	r3, [sp, #8]
 800c56a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c56e:	46ab      	mov	fp, r5
 800c570:	106d      	asrs	r5, r5, #1
 800c572:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c576:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c57a:	ec41 0b18 	vmov	d8, r0, r1
 800c57e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c582:	2200      	movs	r2, #0
 800c584:	4640      	mov	r0, r8
 800c586:	4649      	mov	r1, r9
 800c588:	4614      	mov	r4, r2
 800c58a:	461d      	mov	r5, r3
 800c58c:	f7f4 f800 	bl	8000590 <__aeabi_dmul>
 800c590:	4602      	mov	r2, r0
 800c592:	460b      	mov	r3, r1
 800c594:	4630      	mov	r0, r6
 800c596:	4639      	mov	r1, r7
 800c598:	f7f3 fe42 	bl	8000220 <__aeabi_dsub>
 800c59c:	ec53 2b19 	vmov	r2, r3, d9
 800c5a0:	4606      	mov	r6, r0
 800c5a2:	460f      	mov	r7, r1
 800c5a4:	4620      	mov	r0, r4
 800c5a6:	4629      	mov	r1, r5
 800c5a8:	f7f3 fe3a 	bl	8000220 <__aeabi_dsub>
 800c5ac:	4602      	mov	r2, r0
 800c5ae:	460b      	mov	r3, r1
 800c5b0:	4650      	mov	r0, sl
 800c5b2:	4659      	mov	r1, fp
 800c5b4:	f7f3 fe34 	bl	8000220 <__aeabi_dsub>
 800c5b8:	4642      	mov	r2, r8
 800c5ba:	464b      	mov	r3, r9
 800c5bc:	f7f3 ffe8 	bl	8000590 <__aeabi_dmul>
 800c5c0:	4602      	mov	r2, r0
 800c5c2:	460b      	mov	r3, r1
 800c5c4:	4630      	mov	r0, r6
 800c5c6:	4639      	mov	r1, r7
 800c5c8:	f7f3 fe2a 	bl	8000220 <__aeabi_dsub>
 800c5cc:	ec53 2b1a 	vmov	r2, r3, d10
 800c5d0:	f7f3 ffde 	bl	8000590 <__aeabi_dmul>
 800c5d4:	ec53 2b18 	vmov	r2, r3, d8
 800c5d8:	ec41 0b19 	vmov	d9, r0, r1
 800c5dc:	ec51 0b18 	vmov	r0, r1, d8
 800c5e0:	f7f3 ffd6 	bl	8000590 <__aeabi_dmul>
 800c5e4:	a37c      	add	r3, pc, #496	; (adr r3, 800c7d8 <__ieee754_pow+0x708>)
 800c5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ea:	4604      	mov	r4, r0
 800c5ec:	460d      	mov	r5, r1
 800c5ee:	f7f3 ffcf 	bl	8000590 <__aeabi_dmul>
 800c5f2:	a37b      	add	r3, pc, #492	; (adr r3, 800c7e0 <__ieee754_pow+0x710>)
 800c5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f8:	f7f3 fe14 	bl	8000224 <__adddf3>
 800c5fc:	4622      	mov	r2, r4
 800c5fe:	462b      	mov	r3, r5
 800c600:	f7f3 ffc6 	bl	8000590 <__aeabi_dmul>
 800c604:	a378      	add	r3, pc, #480	; (adr r3, 800c7e8 <__ieee754_pow+0x718>)
 800c606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c60a:	f7f3 fe0b 	bl	8000224 <__adddf3>
 800c60e:	4622      	mov	r2, r4
 800c610:	462b      	mov	r3, r5
 800c612:	f7f3 ffbd 	bl	8000590 <__aeabi_dmul>
 800c616:	a376      	add	r3, pc, #472	; (adr r3, 800c7f0 <__ieee754_pow+0x720>)
 800c618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c61c:	f7f3 fe02 	bl	8000224 <__adddf3>
 800c620:	4622      	mov	r2, r4
 800c622:	462b      	mov	r3, r5
 800c624:	f7f3 ffb4 	bl	8000590 <__aeabi_dmul>
 800c628:	a373      	add	r3, pc, #460	; (adr r3, 800c7f8 <__ieee754_pow+0x728>)
 800c62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c62e:	f7f3 fdf9 	bl	8000224 <__adddf3>
 800c632:	4622      	mov	r2, r4
 800c634:	462b      	mov	r3, r5
 800c636:	f7f3 ffab 	bl	8000590 <__aeabi_dmul>
 800c63a:	a371      	add	r3, pc, #452	; (adr r3, 800c800 <__ieee754_pow+0x730>)
 800c63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c640:	f7f3 fdf0 	bl	8000224 <__adddf3>
 800c644:	4622      	mov	r2, r4
 800c646:	4606      	mov	r6, r0
 800c648:	460f      	mov	r7, r1
 800c64a:	462b      	mov	r3, r5
 800c64c:	4620      	mov	r0, r4
 800c64e:	4629      	mov	r1, r5
 800c650:	f7f3 ff9e 	bl	8000590 <__aeabi_dmul>
 800c654:	4602      	mov	r2, r0
 800c656:	460b      	mov	r3, r1
 800c658:	4630      	mov	r0, r6
 800c65a:	4639      	mov	r1, r7
 800c65c:	f7f3 ff98 	bl	8000590 <__aeabi_dmul>
 800c660:	4642      	mov	r2, r8
 800c662:	4604      	mov	r4, r0
 800c664:	460d      	mov	r5, r1
 800c666:	464b      	mov	r3, r9
 800c668:	ec51 0b18 	vmov	r0, r1, d8
 800c66c:	f7f3 fdda 	bl	8000224 <__adddf3>
 800c670:	ec53 2b19 	vmov	r2, r3, d9
 800c674:	f7f3 ff8c 	bl	8000590 <__aeabi_dmul>
 800c678:	4622      	mov	r2, r4
 800c67a:	462b      	mov	r3, r5
 800c67c:	f7f3 fdd2 	bl	8000224 <__adddf3>
 800c680:	4642      	mov	r2, r8
 800c682:	4682      	mov	sl, r0
 800c684:	468b      	mov	fp, r1
 800c686:	464b      	mov	r3, r9
 800c688:	4640      	mov	r0, r8
 800c68a:	4649      	mov	r1, r9
 800c68c:	f7f3 ff80 	bl	8000590 <__aeabi_dmul>
 800c690:	4b6b      	ldr	r3, [pc, #428]	; (800c840 <__ieee754_pow+0x770>)
 800c692:	2200      	movs	r2, #0
 800c694:	4606      	mov	r6, r0
 800c696:	460f      	mov	r7, r1
 800c698:	f7f3 fdc4 	bl	8000224 <__adddf3>
 800c69c:	4652      	mov	r2, sl
 800c69e:	465b      	mov	r3, fp
 800c6a0:	f7f3 fdc0 	bl	8000224 <__adddf3>
 800c6a4:	2000      	movs	r0, #0
 800c6a6:	4604      	mov	r4, r0
 800c6a8:	460d      	mov	r5, r1
 800c6aa:	4602      	mov	r2, r0
 800c6ac:	460b      	mov	r3, r1
 800c6ae:	4640      	mov	r0, r8
 800c6b0:	4649      	mov	r1, r9
 800c6b2:	f7f3 ff6d 	bl	8000590 <__aeabi_dmul>
 800c6b6:	4b62      	ldr	r3, [pc, #392]	; (800c840 <__ieee754_pow+0x770>)
 800c6b8:	4680      	mov	r8, r0
 800c6ba:	4689      	mov	r9, r1
 800c6bc:	2200      	movs	r2, #0
 800c6be:	4620      	mov	r0, r4
 800c6c0:	4629      	mov	r1, r5
 800c6c2:	f7f3 fdad 	bl	8000220 <__aeabi_dsub>
 800c6c6:	4632      	mov	r2, r6
 800c6c8:	463b      	mov	r3, r7
 800c6ca:	f7f3 fda9 	bl	8000220 <__aeabi_dsub>
 800c6ce:	4602      	mov	r2, r0
 800c6d0:	460b      	mov	r3, r1
 800c6d2:	4650      	mov	r0, sl
 800c6d4:	4659      	mov	r1, fp
 800c6d6:	f7f3 fda3 	bl	8000220 <__aeabi_dsub>
 800c6da:	ec53 2b18 	vmov	r2, r3, d8
 800c6de:	f7f3 ff57 	bl	8000590 <__aeabi_dmul>
 800c6e2:	4622      	mov	r2, r4
 800c6e4:	4606      	mov	r6, r0
 800c6e6:	460f      	mov	r7, r1
 800c6e8:	462b      	mov	r3, r5
 800c6ea:	ec51 0b19 	vmov	r0, r1, d9
 800c6ee:	f7f3 ff4f 	bl	8000590 <__aeabi_dmul>
 800c6f2:	4602      	mov	r2, r0
 800c6f4:	460b      	mov	r3, r1
 800c6f6:	4630      	mov	r0, r6
 800c6f8:	4639      	mov	r1, r7
 800c6fa:	f7f3 fd93 	bl	8000224 <__adddf3>
 800c6fe:	4606      	mov	r6, r0
 800c700:	460f      	mov	r7, r1
 800c702:	4602      	mov	r2, r0
 800c704:	460b      	mov	r3, r1
 800c706:	4640      	mov	r0, r8
 800c708:	4649      	mov	r1, r9
 800c70a:	f7f3 fd8b 	bl	8000224 <__adddf3>
 800c70e:	a33e      	add	r3, pc, #248	; (adr r3, 800c808 <__ieee754_pow+0x738>)
 800c710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c714:	2000      	movs	r0, #0
 800c716:	4604      	mov	r4, r0
 800c718:	460d      	mov	r5, r1
 800c71a:	f7f3 ff39 	bl	8000590 <__aeabi_dmul>
 800c71e:	4642      	mov	r2, r8
 800c720:	ec41 0b18 	vmov	d8, r0, r1
 800c724:	464b      	mov	r3, r9
 800c726:	4620      	mov	r0, r4
 800c728:	4629      	mov	r1, r5
 800c72a:	f7f3 fd79 	bl	8000220 <__aeabi_dsub>
 800c72e:	4602      	mov	r2, r0
 800c730:	460b      	mov	r3, r1
 800c732:	4630      	mov	r0, r6
 800c734:	4639      	mov	r1, r7
 800c736:	f7f3 fd73 	bl	8000220 <__aeabi_dsub>
 800c73a:	a335      	add	r3, pc, #212	; (adr r3, 800c810 <__ieee754_pow+0x740>)
 800c73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c740:	f7f3 ff26 	bl	8000590 <__aeabi_dmul>
 800c744:	a334      	add	r3, pc, #208	; (adr r3, 800c818 <__ieee754_pow+0x748>)
 800c746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c74a:	4606      	mov	r6, r0
 800c74c:	460f      	mov	r7, r1
 800c74e:	4620      	mov	r0, r4
 800c750:	4629      	mov	r1, r5
 800c752:	f7f3 ff1d 	bl	8000590 <__aeabi_dmul>
 800c756:	4602      	mov	r2, r0
 800c758:	460b      	mov	r3, r1
 800c75a:	4630      	mov	r0, r6
 800c75c:	4639      	mov	r1, r7
 800c75e:	f7f3 fd61 	bl	8000224 <__adddf3>
 800c762:	9a07      	ldr	r2, [sp, #28]
 800c764:	4b37      	ldr	r3, [pc, #220]	; (800c844 <__ieee754_pow+0x774>)
 800c766:	4413      	add	r3, r2
 800c768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c76c:	f7f3 fd5a 	bl	8000224 <__adddf3>
 800c770:	4682      	mov	sl, r0
 800c772:	9805      	ldr	r0, [sp, #20]
 800c774:	468b      	mov	fp, r1
 800c776:	f7f3 fea1 	bl	80004bc <__aeabi_i2d>
 800c77a:	9a07      	ldr	r2, [sp, #28]
 800c77c:	4b32      	ldr	r3, [pc, #200]	; (800c848 <__ieee754_pow+0x778>)
 800c77e:	4413      	add	r3, r2
 800c780:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c784:	4606      	mov	r6, r0
 800c786:	460f      	mov	r7, r1
 800c788:	4652      	mov	r2, sl
 800c78a:	465b      	mov	r3, fp
 800c78c:	ec51 0b18 	vmov	r0, r1, d8
 800c790:	f7f3 fd48 	bl	8000224 <__adddf3>
 800c794:	4642      	mov	r2, r8
 800c796:	464b      	mov	r3, r9
 800c798:	f7f3 fd44 	bl	8000224 <__adddf3>
 800c79c:	4632      	mov	r2, r6
 800c79e:	463b      	mov	r3, r7
 800c7a0:	f7f3 fd40 	bl	8000224 <__adddf3>
 800c7a4:	2000      	movs	r0, #0
 800c7a6:	4632      	mov	r2, r6
 800c7a8:	463b      	mov	r3, r7
 800c7aa:	4604      	mov	r4, r0
 800c7ac:	460d      	mov	r5, r1
 800c7ae:	f7f3 fd37 	bl	8000220 <__aeabi_dsub>
 800c7b2:	4642      	mov	r2, r8
 800c7b4:	464b      	mov	r3, r9
 800c7b6:	f7f3 fd33 	bl	8000220 <__aeabi_dsub>
 800c7ba:	ec53 2b18 	vmov	r2, r3, d8
 800c7be:	f7f3 fd2f 	bl	8000220 <__aeabi_dsub>
 800c7c2:	4602      	mov	r2, r0
 800c7c4:	460b      	mov	r3, r1
 800c7c6:	4650      	mov	r0, sl
 800c7c8:	4659      	mov	r1, fp
 800c7ca:	e610      	b.n	800c3ee <__ieee754_pow+0x31e>
 800c7cc:	2401      	movs	r4, #1
 800c7ce:	e6a1      	b.n	800c514 <__ieee754_pow+0x444>
 800c7d0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800c820 <__ieee754_pow+0x750>
 800c7d4:	e617      	b.n	800c406 <__ieee754_pow+0x336>
 800c7d6:	bf00      	nop
 800c7d8:	4a454eef 	.word	0x4a454eef
 800c7dc:	3fca7e28 	.word	0x3fca7e28
 800c7e0:	93c9db65 	.word	0x93c9db65
 800c7e4:	3fcd864a 	.word	0x3fcd864a
 800c7e8:	a91d4101 	.word	0xa91d4101
 800c7ec:	3fd17460 	.word	0x3fd17460
 800c7f0:	518f264d 	.word	0x518f264d
 800c7f4:	3fd55555 	.word	0x3fd55555
 800c7f8:	db6fabff 	.word	0xdb6fabff
 800c7fc:	3fdb6db6 	.word	0x3fdb6db6
 800c800:	33333303 	.word	0x33333303
 800c804:	3fe33333 	.word	0x3fe33333
 800c808:	e0000000 	.word	0xe0000000
 800c80c:	3feec709 	.word	0x3feec709
 800c810:	dc3a03fd 	.word	0xdc3a03fd
 800c814:	3feec709 	.word	0x3feec709
 800c818:	145b01f5 	.word	0x145b01f5
 800c81c:	be3e2fe0 	.word	0xbe3e2fe0
 800c820:	00000000 	.word	0x00000000
 800c824:	3ff00000 	.word	0x3ff00000
 800c828:	7ff00000 	.word	0x7ff00000
 800c82c:	43400000 	.word	0x43400000
 800c830:	0003988e 	.word	0x0003988e
 800c834:	000bb679 	.word	0x000bb679
 800c838:	0801fcd8 	.word	0x0801fcd8
 800c83c:	3ff00000 	.word	0x3ff00000
 800c840:	40080000 	.word	0x40080000
 800c844:	0801fcf8 	.word	0x0801fcf8
 800c848:	0801fce8 	.word	0x0801fce8
 800c84c:	a3b3      	add	r3, pc, #716	; (adr r3, 800cb1c <__ieee754_pow+0xa4c>)
 800c84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c852:	4640      	mov	r0, r8
 800c854:	4649      	mov	r1, r9
 800c856:	f7f3 fce5 	bl	8000224 <__adddf3>
 800c85a:	4622      	mov	r2, r4
 800c85c:	ec41 0b1a 	vmov	d10, r0, r1
 800c860:	462b      	mov	r3, r5
 800c862:	4630      	mov	r0, r6
 800c864:	4639      	mov	r1, r7
 800c866:	f7f3 fcdb 	bl	8000220 <__aeabi_dsub>
 800c86a:	4602      	mov	r2, r0
 800c86c:	460b      	mov	r3, r1
 800c86e:	ec51 0b1a 	vmov	r0, r1, d10
 800c872:	f7f4 f91d 	bl	8000ab0 <__aeabi_dcmpgt>
 800c876:	2800      	cmp	r0, #0
 800c878:	f47f ae04 	bne.w	800c484 <__ieee754_pow+0x3b4>
 800c87c:	4aa2      	ldr	r2, [pc, #648]	; (800cb08 <__ieee754_pow+0xa38>)
 800c87e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c882:	4293      	cmp	r3, r2
 800c884:	f340 8107 	ble.w	800ca96 <__ieee754_pow+0x9c6>
 800c888:	151b      	asrs	r3, r3, #20
 800c88a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c88e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c892:	fa4a fa03 	asr.w	sl, sl, r3
 800c896:	44da      	add	sl, fp
 800c898:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800c89c:	489b      	ldr	r0, [pc, #620]	; (800cb0c <__ieee754_pow+0xa3c>)
 800c89e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800c8a2:	4108      	asrs	r0, r1
 800c8a4:	ea00 030a 	and.w	r3, r0, sl
 800c8a8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800c8ac:	f1c1 0114 	rsb	r1, r1, #20
 800c8b0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c8b4:	fa4a fa01 	asr.w	sl, sl, r1
 800c8b8:	f1bb 0f00 	cmp.w	fp, #0
 800c8bc:	f04f 0200 	mov.w	r2, #0
 800c8c0:	4620      	mov	r0, r4
 800c8c2:	4629      	mov	r1, r5
 800c8c4:	bfb8      	it	lt
 800c8c6:	f1ca 0a00 	rsblt	sl, sl, #0
 800c8ca:	f7f3 fca9 	bl	8000220 <__aeabi_dsub>
 800c8ce:	ec41 0b19 	vmov	d9, r0, r1
 800c8d2:	4642      	mov	r2, r8
 800c8d4:	464b      	mov	r3, r9
 800c8d6:	ec51 0b19 	vmov	r0, r1, d9
 800c8da:	f7f3 fca3 	bl	8000224 <__adddf3>
 800c8de:	a37a      	add	r3, pc, #488	; (adr r3, 800cac8 <__ieee754_pow+0x9f8>)
 800c8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e4:	2000      	movs	r0, #0
 800c8e6:	4604      	mov	r4, r0
 800c8e8:	460d      	mov	r5, r1
 800c8ea:	f7f3 fe51 	bl	8000590 <__aeabi_dmul>
 800c8ee:	ec53 2b19 	vmov	r2, r3, d9
 800c8f2:	4606      	mov	r6, r0
 800c8f4:	460f      	mov	r7, r1
 800c8f6:	4620      	mov	r0, r4
 800c8f8:	4629      	mov	r1, r5
 800c8fa:	f7f3 fc91 	bl	8000220 <__aeabi_dsub>
 800c8fe:	4602      	mov	r2, r0
 800c900:	460b      	mov	r3, r1
 800c902:	4640      	mov	r0, r8
 800c904:	4649      	mov	r1, r9
 800c906:	f7f3 fc8b 	bl	8000220 <__aeabi_dsub>
 800c90a:	a371      	add	r3, pc, #452	; (adr r3, 800cad0 <__ieee754_pow+0xa00>)
 800c90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c910:	f7f3 fe3e 	bl	8000590 <__aeabi_dmul>
 800c914:	a370      	add	r3, pc, #448	; (adr r3, 800cad8 <__ieee754_pow+0xa08>)
 800c916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c91a:	4680      	mov	r8, r0
 800c91c:	4689      	mov	r9, r1
 800c91e:	4620      	mov	r0, r4
 800c920:	4629      	mov	r1, r5
 800c922:	f7f3 fe35 	bl	8000590 <__aeabi_dmul>
 800c926:	4602      	mov	r2, r0
 800c928:	460b      	mov	r3, r1
 800c92a:	4640      	mov	r0, r8
 800c92c:	4649      	mov	r1, r9
 800c92e:	f7f3 fc79 	bl	8000224 <__adddf3>
 800c932:	4604      	mov	r4, r0
 800c934:	460d      	mov	r5, r1
 800c936:	4602      	mov	r2, r0
 800c938:	460b      	mov	r3, r1
 800c93a:	4630      	mov	r0, r6
 800c93c:	4639      	mov	r1, r7
 800c93e:	f7f3 fc71 	bl	8000224 <__adddf3>
 800c942:	4632      	mov	r2, r6
 800c944:	463b      	mov	r3, r7
 800c946:	4680      	mov	r8, r0
 800c948:	4689      	mov	r9, r1
 800c94a:	f7f3 fc69 	bl	8000220 <__aeabi_dsub>
 800c94e:	4602      	mov	r2, r0
 800c950:	460b      	mov	r3, r1
 800c952:	4620      	mov	r0, r4
 800c954:	4629      	mov	r1, r5
 800c956:	f7f3 fc63 	bl	8000220 <__aeabi_dsub>
 800c95a:	4642      	mov	r2, r8
 800c95c:	4606      	mov	r6, r0
 800c95e:	460f      	mov	r7, r1
 800c960:	464b      	mov	r3, r9
 800c962:	4640      	mov	r0, r8
 800c964:	4649      	mov	r1, r9
 800c966:	f7f3 fe13 	bl	8000590 <__aeabi_dmul>
 800c96a:	a35d      	add	r3, pc, #372	; (adr r3, 800cae0 <__ieee754_pow+0xa10>)
 800c96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c970:	4604      	mov	r4, r0
 800c972:	460d      	mov	r5, r1
 800c974:	f7f3 fe0c 	bl	8000590 <__aeabi_dmul>
 800c978:	a35b      	add	r3, pc, #364	; (adr r3, 800cae8 <__ieee754_pow+0xa18>)
 800c97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c97e:	f7f3 fc4f 	bl	8000220 <__aeabi_dsub>
 800c982:	4622      	mov	r2, r4
 800c984:	462b      	mov	r3, r5
 800c986:	f7f3 fe03 	bl	8000590 <__aeabi_dmul>
 800c98a:	a359      	add	r3, pc, #356	; (adr r3, 800caf0 <__ieee754_pow+0xa20>)
 800c98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c990:	f7f3 fc48 	bl	8000224 <__adddf3>
 800c994:	4622      	mov	r2, r4
 800c996:	462b      	mov	r3, r5
 800c998:	f7f3 fdfa 	bl	8000590 <__aeabi_dmul>
 800c99c:	a356      	add	r3, pc, #344	; (adr r3, 800caf8 <__ieee754_pow+0xa28>)
 800c99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9a2:	f7f3 fc3d 	bl	8000220 <__aeabi_dsub>
 800c9a6:	4622      	mov	r2, r4
 800c9a8:	462b      	mov	r3, r5
 800c9aa:	f7f3 fdf1 	bl	8000590 <__aeabi_dmul>
 800c9ae:	a354      	add	r3, pc, #336	; (adr r3, 800cb00 <__ieee754_pow+0xa30>)
 800c9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b4:	f7f3 fc36 	bl	8000224 <__adddf3>
 800c9b8:	4622      	mov	r2, r4
 800c9ba:	462b      	mov	r3, r5
 800c9bc:	f7f3 fde8 	bl	8000590 <__aeabi_dmul>
 800c9c0:	4602      	mov	r2, r0
 800c9c2:	460b      	mov	r3, r1
 800c9c4:	4640      	mov	r0, r8
 800c9c6:	4649      	mov	r1, r9
 800c9c8:	f7f3 fc2a 	bl	8000220 <__aeabi_dsub>
 800c9cc:	4604      	mov	r4, r0
 800c9ce:	460d      	mov	r5, r1
 800c9d0:	4602      	mov	r2, r0
 800c9d2:	460b      	mov	r3, r1
 800c9d4:	4640      	mov	r0, r8
 800c9d6:	4649      	mov	r1, r9
 800c9d8:	f7f3 fdda 	bl	8000590 <__aeabi_dmul>
 800c9dc:	2200      	movs	r2, #0
 800c9de:	ec41 0b19 	vmov	d9, r0, r1
 800c9e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c9e6:	4620      	mov	r0, r4
 800c9e8:	4629      	mov	r1, r5
 800c9ea:	f7f3 fc19 	bl	8000220 <__aeabi_dsub>
 800c9ee:	4602      	mov	r2, r0
 800c9f0:	460b      	mov	r3, r1
 800c9f2:	ec51 0b19 	vmov	r0, r1, d9
 800c9f6:	f7f3 fef5 	bl	80007e4 <__aeabi_ddiv>
 800c9fa:	4632      	mov	r2, r6
 800c9fc:	4604      	mov	r4, r0
 800c9fe:	460d      	mov	r5, r1
 800ca00:	463b      	mov	r3, r7
 800ca02:	4640      	mov	r0, r8
 800ca04:	4649      	mov	r1, r9
 800ca06:	f7f3 fdc3 	bl	8000590 <__aeabi_dmul>
 800ca0a:	4632      	mov	r2, r6
 800ca0c:	463b      	mov	r3, r7
 800ca0e:	f7f3 fc09 	bl	8000224 <__adddf3>
 800ca12:	4602      	mov	r2, r0
 800ca14:	460b      	mov	r3, r1
 800ca16:	4620      	mov	r0, r4
 800ca18:	4629      	mov	r1, r5
 800ca1a:	f7f3 fc01 	bl	8000220 <__aeabi_dsub>
 800ca1e:	4642      	mov	r2, r8
 800ca20:	464b      	mov	r3, r9
 800ca22:	f7f3 fbfd 	bl	8000220 <__aeabi_dsub>
 800ca26:	460b      	mov	r3, r1
 800ca28:	4602      	mov	r2, r0
 800ca2a:	4939      	ldr	r1, [pc, #228]	; (800cb10 <__ieee754_pow+0xa40>)
 800ca2c:	2000      	movs	r0, #0
 800ca2e:	f7f3 fbf7 	bl	8000220 <__aeabi_dsub>
 800ca32:	ec41 0b10 	vmov	d0, r0, r1
 800ca36:	ee10 3a90 	vmov	r3, s1
 800ca3a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ca3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca42:	da2b      	bge.n	800ca9c <__ieee754_pow+0x9cc>
 800ca44:	4650      	mov	r0, sl
 800ca46:	f000 f877 	bl	800cb38 <scalbn>
 800ca4a:	ec51 0b10 	vmov	r0, r1, d0
 800ca4e:	ec53 2b18 	vmov	r2, r3, d8
 800ca52:	f7ff bbee 	b.w	800c232 <__ieee754_pow+0x162>
 800ca56:	4b2f      	ldr	r3, [pc, #188]	; (800cb14 <__ieee754_pow+0xa44>)
 800ca58:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ca5c:	429e      	cmp	r6, r3
 800ca5e:	f77f af0d 	ble.w	800c87c <__ieee754_pow+0x7ac>
 800ca62:	4b2d      	ldr	r3, [pc, #180]	; (800cb18 <__ieee754_pow+0xa48>)
 800ca64:	440b      	add	r3, r1
 800ca66:	4303      	orrs	r3, r0
 800ca68:	d009      	beq.n	800ca7e <__ieee754_pow+0x9ae>
 800ca6a:	ec51 0b18 	vmov	r0, r1, d8
 800ca6e:	2200      	movs	r2, #0
 800ca70:	2300      	movs	r3, #0
 800ca72:	f7f3 ffff 	bl	8000a74 <__aeabi_dcmplt>
 800ca76:	3800      	subs	r0, #0
 800ca78:	bf18      	it	ne
 800ca7a:	2001      	movne	r0, #1
 800ca7c:	e448      	b.n	800c310 <__ieee754_pow+0x240>
 800ca7e:	4622      	mov	r2, r4
 800ca80:	462b      	mov	r3, r5
 800ca82:	f7f3 fbcd 	bl	8000220 <__aeabi_dsub>
 800ca86:	4642      	mov	r2, r8
 800ca88:	464b      	mov	r3, r9
 800ca8a:	f7f4 f807 	bl	8000a9c <__aeabi_dcmpge>
 800ca8e:	2800      	cmp	r0, #0
 800ca90:	f43f aef4 	beq.w	800c87c <__ieee754_pow+0x7ac>
 800ca94:	e7e9      	b.n	800ca6a <__ieee754_pow+0x99a>
 800ca96:	f04f 0a00 	mov.w	sl, #0
 800ca9a:	e71a      	b.n	800c8d2 <__ieee754_pow+0x802>
 800ca9c:	ec51 0b10 	vmov	r0, r1, d0
 800caa0:	4619      	mov	r1, r3
 800caa2:	e7d4      	b.n	800ca4e <__ieee754_pow+0x97e>
 800caa4:	491a      	ldr	r1, [pc, #104]	; (800cb10 <__ieee754_pow+0xa40>)
 800caa6:	2000      	movs	r0, #0
 800caa8:	f7ff bb31 	b.w	800c10e <__ieee754_pow+0x3e>
 800caac:	2000      	movs	r0, #0
 800caae:	2100      	movs	r1, #0
 800cab0:	f7ff bb2d 	b.w	800c10e <__ieee754_pow+0x3e>
 800cab4:	4630      	mov	r0, r6
 800cab6:	4639      	mov	r1, r7
 800cab8:	f7ff bb29 	b.w	800c10e <__ieee754_pow+0x3e>
 800cabc:	9204      	str	r2, [sp, #16]
 800cabe:	f7ff bb7b 	b.w	800c1b8 <__ieee754_pow+0xe8>
 800cac2:	2300      	movs	r3, #0
 800cac4:	f7ff bb65 	b.w	800c192 <__ieee754_pow+0xc2>
 800cac8:	00000000 	.word	0x00000000
 800cacc:	3fe62e43 	.word	0x3fe62e43
 800cad0:	fefa39ef 	.word	0xfefa39ef
 800cad4:	3fe62e42 	.word	0x3fe62e42
 800cad8:	0ca86c39 	.word	0x0ca86c39
 800cadc:	be205c61 	.word	0xbe205c61
 800cae0:	72bea4d0 	.word	0x72bea4d0
 800cae4:	3e663769 	.word	0x3e663769
 800cae8:	c5d26bf1 	.word	0xc5d26bf1
 800caec:	3ebbbd41 	.word	0x3ebbbd41
 800caf0:	af25de2c 	.word	0xaf25de2c
 800caf4:	3f11566a 	.word	0x3f11566a
 800caf8:	16bebd93 	.word	0x16bebd93
 800cafc:	3f66c16c 	.word	0x3f66c16c
 800cb00:	5555553e 	.word	0x5555553e
 800cb04:	3fc55555 	.word	0x3fc55555
 800cb08:	3fe00000 	.word	0x3fe00000
 800cb0c:	fff00000 	.word	0xfff00000
 800cb10:	3ff00000 	.word	0x3ff00000
 800cb14:	4090cbff 	.word	0x4090cbff
 800cb18:	3f6f3400 	.word	0x3f6f3400
 800cb1c:	652b82fe 	.word	0x652b82fe
 800cb20:	3c971547 	.word	0x3c971547

0800cb24 <fabs>:
 800cb24:	ec51 0b10 	vmov	r0, r1, d0
 800cb28:	ee10 2a10 	vmov	r2, s0
 800cb2c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cb30:	ec43 2b10 	vmov	d0, r2, r3
 800cb34:	4770      	bx	lr
	...

0800cb38 <scalbn>:
 800cb38:	b570      	push	{r4, r5, r6, lr}
 800cb3a:	ec55 4b10 	vmov	r4, r5, d0
 800cb3e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800cb42:	4606      	mov	r6, r0
 800cb44:	462b      	mov	r3, r5
 800cb46:	b999      	cbnz	r1, 800cb70 <scalbn+0x38>
 800cb48:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cb4c:	4323      	orrs	r3, r4
 800cb4e:	d03f      	beq.n	800cbd0 <scalbn+0x98>
 800cb50:	4b35      	ldr	r3, [pc, #212]	; (800cc28 <scalbn+0xf0>)
 800cb52:	4629      	mov	r1, r5
 800cb54:	ee10 0a10 	vmov	r0, s0
 800cb58:	2200      	movs	r2, #0
 800cb5a:	f7f3 fd19 	bl	8000590 <__aeabi_dmul>
 800cb5e:	4b33      	ldr	r3, [pc, #204]	; (800cc2c <scalbn+0xf4>)
 800cb60:	429e      	cmp	r6, r3
 800cb62:	4604      	mov	r4, r0
 800cb64:	460d      	mov	r5, r1
 800cb66:	da10      	bge.n	800cb8a <scalbn+0x52>
 800cb68:	a327      	add	r3, pc, #156	; (adr r3, 800cc08 <scalbn+0xd0>)
 800cb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb6e:	e01f      	b.n	800cbb0 <scalbn+0x78>
 800cb70:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800cb74:	4291      	cmp	r1, r2
 800cb76:	d10c      	bne.n	800cb92 <scalbn+0x5a>
 800cb78:	ee10 2a10 	vmov	r2, s0
 800cb7c:	4620      	mov	r0, r4
 800cb7e:	4629      	mov	r1, r5
 800cb80:	f7f3 fb50 	bl	8000224 <__adddf3>
 800cb84:	4604      	mov	r4, r0
 800cb86:	460d      	mov	r5, r1
 800cb88:	e022      	b.n	800cbd0 <scalbn+0x98>
 800cb8a:	460b      	mov	r3, r1
 800cb8c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800cb90:	3936      	subs	r1, #54	; 0x36
 800cb92:	f24c 3250 	movw	r2, #50000	; 0xc350
 800cb96:	4296      	cmp	r6, r2
 800cb98:	dd0d      	ble.n	800cbb6 <scalbn+0x7e>
 800cb9a:	2d00      	cmp	r5, #0
 800cb9c:	a11c      	add	r1, pc, #112	; (adr r1, 800cc10 <scalbn+0xd8>)
 800cb9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cba2:	da02      	bge.n	800cbaa <scalbn+0x72>
 800cba4:	a11c      	add	r1, pc, #112	; (adr r1, 800cc18 <scalbn+0xe0>)
 800cba6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cbaa:	a319      	add	r3, pc, #100	; (adr r3, 800cc10 <scalbn+0xd8>)
 800cbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb0:	f7f3 fcee 	bl	8000590 <__aeabi_dmul>
 800cbb4:	e7e6      	b.n	800cb84 <scalbn+0x4c>
 800cbb6:	1872      	adds	r2, r6, r1
 800cbb8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800cbbc:	428a      	cmp	r2, r1
 800cbbe:	dcec      	bgt.n	800cb9a <scalbn+0x62>
 800cbc0:	2a00      	cmp	r2, #0
 800cbc2:	dd08      	ble.n	800cbd6 <scalbn+0x9e>
 800cbc4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cbc8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cbcc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cbd0:	ec45 4b10 	vmov	d0, r4, r5
 800cbd4:	bd70      	pop	{r4, r5, r6, pc}
 800cbd6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800cbda:	da08      	bge.n	800cbee <scalbn+0xb6>
 800cbdc:	2d00      	cmp	r5, #0
 800cbde:	a10a      	add	r1, pc, #40	; (adr r1, 800cc08 <scalbn+0xd0>)
 800cbe0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cbe4:	dac0      	bge.n	800cb68 <scalbn+0x30>
 800cbe6:	a10e      	add	r1, pc, #56	; (adr r1, 800cc20 <scalbn+0xe8>)
 800cbe8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cbec:	e7bc      	b.n	800cb68 <scalbn+0x30>
 800cbee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cbf2:	3236      	adds	r2, #54	; 0x36
 800cbf4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cbf8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800cbfc:	4620      	mov	r0, r4
 800cbfe:	4b0c      	ldr	r3, [pc, #48]	; (800cc30 <scalbn+0xf8>)
 800cc00:	2200      	movs	r2, #0
 800cc02:	e7d5      	b.n	800cbb0 <scalbn+0x78>
 800cc04:	f3af 8000 	nop.w
 800cc08:	c2f8f359 	.word	0xc2f8f359
 800cc0c:	01a56e1f 	.word	0x01a56e1f
 800cc10:	8800759c 	.word	0x8800759c
 800cc14:	7e37e43c 	.word	0x7e37e43c
 800cc18:	8800759c 	.word	0x8800759c
 800cc1c:	fe37e43c 	.word	0xfe37e43c
 800cc20:	c2f8f359 	.word	0xc2f8f359
 800cc24:	81a56e1f 	.word	0x81a56e1f
 800cc28:	43500000 	.word	0x43500000
 800cc2c:	ffff3cb0 	.word	0xffff3cb0
 800cc30:	3c900000 	.word	0x3c900000

0800cc34 <with_errno>:
 800cc34:	b570      	push	{r4, r5, r6, lr}
 800cc36:	4604      	mov	r4, r0
 800cc38:	460d      	mov	r5, r1
 800cc3a:	4616      	mov	r6, r2
 800cc3c:	f7fe feac 	bl	800b998 <__errno>
 800cc40:	4629      	mov	r1, r5
 800cc42:	6006      	str	r6, [r0, #0]
 800cc44:	4620      	mov	r0, r4
 800cc46:	bd70      	pop	{r4, r5, r6, pc}

0800cc48 <xflow>:
 800cc48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cc4a:	4614      	mov	r4, r2
 800cc4c:	461d      	mov	r5, r3
 800cc4e:	b108      	cbz	r0, 800cc54 <xflow+0xc>
 800cc50:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cc54:	e9cd 2300 	strd	r2, r3, [sp]
 800cc58:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc5c:	4620      	mov	r0, r4
 800cc5e:	4629      	mov	r1, r5
 800cc60:	f7f3 fc96 	bl	8000590 <__aeabi_dmul>
 800cc64:	2222      	movs	r2, #34	; 0x22
 800cc66:	b003      	add	sp, #12
 800cc68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cc6c:	f7ff bfe2 	b.w	800cc34 <with_errno>

0800cc70 <__math_uflow>:
 800cc70:	b508      	push	{r3, lr}
 800cc72:	2200      	movs	r2, #0
 800cc74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cc78:	f7ff ffe6 	bl	800cc48 <xflow>
 800cc7c:	ec41 0b10 	vmov	d0, r0, r1
 800cc80:	bd08      	pop	{r3, pc}

0800cc82 <__math_oflow>:
 800cc82:	b508      	push	{r3, lr}
 800cc84:	2200      	movs	r2, #0
 800cc86:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800cc8a:	f7ff ffdd 	bl	800cc48 <xflow>
 800cc8e:	ec41 0b10 	vmov	d0, r0, r1
 800cc92:	bd08      	pop	{r3, pc}

0800cc94 <_init>:
 800cc94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc96:	bf00      	nop
 800cc98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc9a:	bc08      	pop	{r3}
 800cc9c:	469e      	mov	lr, r3
 800cc9e:	4770      	bx	lr

0800cca0 <_fini>:
 800cca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cca2:	bf00      	nop
 800cca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cca6:	bc08      	pop	{r3}
 800cca8:	469e      	mov	lr, r3
 800ccaa:	4770      	bx	lr
